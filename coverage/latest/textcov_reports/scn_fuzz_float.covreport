_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.00M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.00M|  chars_format const fmt = options.format;
  277|  2.00M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.00M|  parsed_number_string_t<UC> answer;
  280|  2.00M|  answer.valid = false;
  281|  2.00M|  answer.too_many_digits = false;
  282|  2.00M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.00M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.00M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.00M|  UC const * const start_digits = p;
  303|       |
  304|  2.00M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  11.9M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 10.9M, False: 958k]
  |  Branch (306:25): [True: 9.93M, False: 1.04M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  9.93M|    i = 10 * i +
  310|  9.93M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  9.93M|    ++p;
  312|  9.93M|  }
  313|  2.00M|  UC const * const end_of_integer_part = p;
  314|  2.00M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.00M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.00M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.00M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.00M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.00M|  int64_t exponent = 0;
  324|  2.00M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.04M, False: 958k]
  |  Branch (324:49): [True: 338k, False: 705k]
  ------------------
  325|  2.00M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 338k, False: 1.66M]
  ------------------
  326|   338k|    ++p;
  327|   338k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   338k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.35M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.16M, False: 197k]
  |  Branch (332:27): [True: 1.01M, False: 141k]
  ------------------
  333|  1.01M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.01M|      ++p;
  335|  1.01M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.01M|    }
  337|   338k|    exponent = before - p;
  338|   338k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   338k|    digit_count -= exponent;
  340|   338k|  }
  341|  2.00M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.00M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.00M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.00M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.00M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.00M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.00M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.76M, False: 241k]
  ------------------
  352|  2.00M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 847k, False: 914k]
  ------------------
  353|  2.00M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 226k, False: 621k]
  |  Branch (353:29): [True: 76.7k, False: 544k]
  ------------------
  354|  2.00M|       ||
  355|  2.00M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.69M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.69M]
  ------------------
  356|  1.69M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.69M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   302k|    UC const * location_of_e = p;
  359|   302k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 226k, False: 76.7k]
  |  Branch (359:28): [True: 76.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   302k|      ++p;
  361|   302k|    }
  362|   302k|    bool neg_exp = false;
  363|   302k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 302k, False: 205]
  |  Branch (363:24): [True: 20.5k, False: 282k]
  ------------------
  364|  20.5k|      neg_exp = true;
  365|  20.5k|      ++p;
  366|   282k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 282k, False: 205]
  |  Branch (366:31): [True: 55.6k, False: 226k]
  ------------------
  367|  55.6k|      ++p;
  368|  55.6k|    }
  369|   302k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 245, False: 302k]
  |  Branch (369:24): [True: 815, False: 301k]
  ------------------
  370|  1.06k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.06k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.06k|      p = location_of_e;
  376|   301k|    } else {
  377|   968k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 765k, False: 202k]
  |  Branch (377:29): [True: 666k, False: 99.2k]
  ------------------
  378|   666k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   666k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 627k, False: 38.9k]
  ------------------
  380|   627k|          exp_number = 10 * exp_number + digit;
  381|   627k|        }
  382|   666k|        ++p;
  383|   666k|      }
  384|   301k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 20.5k, False: 281k]
  ------------------
  385|   301k|      exponent += exp_number;
  386|   301k|    }
  387|  1.69M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.69M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.45M, False: 241k]
  |  Branch (389:44): [True: 0, False: 1.45M]
  ------------------
  390|  1.69M|  }
  391|  2.00M|  answer.lastmatch = p;
  392|  2.00M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.00M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 316k, False: 1.68M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   316k|    UC const * start = start_digits;
  405|  3.06M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.05M, False: 14.4k]
  |  Branch (405:32): [True: 2.68M, False: 365k]
  |  Branch (405:53): [True: 63.6k, False: 302k]
  ------------------
  406|  2.75M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.68M, False: 63.6k]
  ------------------
  407|  2.75M|      start++;
  408|  2.75M|    }
  409|       |
  410|   316k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 265k, False: 50.6k]
  ------------------
  411|   265k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   265k|      i = 0;
  416|   265k|      p = answer.integer.ptr;
  417|   265k|      UC const* int_end = p + answer.integer.len();
  418|   265k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.66M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.57M, False: 89.4k]
  |  Branch (419:54): [True: 3.39M, False: 176k]
  ------------------
  420|  3.39M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.39M|        ++p;
  422|  3.39M|      }
  423|   265k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 89.4k, False: 176k]
  ------------------
  424|  89.4k|        exponent = end_of_integer_part - p + exp_number;
  425|  89.4k|      }
  426|   176k|      else { // We have a value with a fractional component.
  427|   176k|        p = answer.fraction.ptr;
  428|   176k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.46M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.28M, False: 176k]
  |  Branch (429:56): [True: 3.28M, False: 0]
  ------------------
  430|  3.28M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.28M|          ++p;
  432|  3.28M|        }
  433|   176k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   176k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   265k|    }
  437|   316k|  }
  438|  2.00M|  answer.exponent = exponent;
  439|  2.00M|  answer.mantissa = i;
  440|  2.00M|  return answer;
  441|  2.00M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  13.2M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  13.2M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 343k, False: 12.8M]
  |  Branch (36:27): [True: 942k, False: 11.9M]
  ------------------
   37|  13.2M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   338k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.39M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.17M, False: 216k]
  |  Branch (249:43): [True: 1.05M, False: 122k]
  ------------------
  250|  1.05M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.05M|    p += 8;
  252|  1.05M|  }
  253|   338k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.17M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.17M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.17M|     0x8080808080808080));
  172|  1.17M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.64M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.64M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.64M|  uint64_t val;
   63|  2.64M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.64M|  return val;
   69|  2.64M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.46M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.46M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.46M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.46M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.46M|  val -= 0x3030303030303030;
  151|  1.46M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.46M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.46M|  return uint32_t(val);
  154|  1.46M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   407k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   407k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   407k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   407k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   407k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  40.8k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  40.8k|  chars_format const fmt = options.format;
  277|  40.8k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  40.8k|  parsed_number_string_t<UC> answer;
  280|  40.8k|  answer.valid = false;
  281|  40.8k|  answer.too_many_digits = false;
  282|  40.8k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  40.8k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 40.8k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  40.8k|  UC const * const start_digits = p;
  303|       |
  304|  40.8k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  83.2k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 54.5k, False: 28.6k]
  |  Branch (306:25): [True: 42.4k, False: 12.1k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  42.4k|    i = 10 * i +
  310|  42.4k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  42.4k|    ++p;
  312|  42.4k|  }
  313|  40.8k|  UC const * const end_of_integer_part = p;
  314|  40.8k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  40.8k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  40.8k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  40.8k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 40.8k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  40.8k|  int64_t exponent = 0;
  324|  40.8k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 12.1k, False: 28.6k]
  |  Branch (324:49): [True: 0, False: 12.1k]
  ------------------
  325|  40.8k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 0, False: 40.8k]
  ------------------
  326|      0|    ++p;
  327|      0|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|      0|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|      0|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 0, False: 0]
  |  Branch (332:27): [True: 0, False: 0]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|      0|    exponent = before - p;
  338|      0|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|      0|    digit_count -= exponent;
  340|      0|  }
  341|  40.8k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  40.8k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 40.8k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  40.8k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 40.8k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  40.8k|  int64_t exp_number = 0;            // explicit exponential part
  351|  40.8k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 31.8k, False: 9.01k]
  ------------------
  352|  40.8k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 12.1k, False: 19.6k]
  ------------------
  353|  40.8k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 20, False: 12.1k]
  |  Branch (353:29): [True: 1.70k, False: 10.4k]
  ------------------
  354|  40.8k|       ||
  355|  40.8k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  39.0k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 39.0k]
  ------------------
  356|  39.0k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  39.0k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  1.72k|    UC const * location_of_e = p;
  359|  1.72k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 20, False: 1.70k]
  |  Branch (359:28): [True: 1.70k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  1.72k|      ++p;
  361|  1.72k|    }
  362|  1.72k|    bool neg_exp = false;
  363|  1.72k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 1.71k, False: 10]
  |  Branch (363:24): [True: 154, False: 1.56k]
  ------------------
  364|    154|      neg_exp = true;
  365|    154|      ++p;
  366|  1.57k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 1.56k, False: 10]
  |  Branch (366:31): [True: 0, False: 1.56k]
  ------------------
  367|      0|      ++p;
  368|      0|    }
  369|  1.72k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 1.71k]
  |  Branch (369:24): [True: 320, False: 1.39k]
  ------------------
  370|    330|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 330]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    330|      p = location_of_e;
  376|  1.39k|    } else {
  377|  4.46k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 3.44k, False: 1.01k]
  |  Branch (377:29): [True: 3.06k, False: 380]
  ------------------
  378|  3.06k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  3.06k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 3.06k, False: 0]
  ------------------
  380|  3.06k|          exp_number = 10 * exp_number + digit;
  381|  3.06k|        }
  382|  3.06k|        ++p;
  383|  3.06k|      }
  384|  1.39k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 144, False: 1.25k]
  ------------------
  385|  1.39k|      exponent += exp_number;
  386|  1.39k|    }
  387|  39.0k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  39.0k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 30.0k, False: 9.01k]
  |  Branch (389:44): [True: 0, False: 30.0k]
  ------------------
  390|  39.0k|  }
  391|  40.8k|  answer.lastmatch = p;
  392|  40.8k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  40.8k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 40.8k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|  40.8k|  answer.exponent = exponent;
  439|  40.8k|  answer.mantissa = i;
  440|  40.8k|  return answer;
  441|  40.8k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  59.7k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  59.7k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 12.6k, False: 47.0k]
  |  Branch (36:27): [True: 180, False: 46.9k]
  ------------------
   37|  59.7k|}

_ZN10fast_float6bigintC2Ev:
  412|  87.9k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   193k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   315k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   315k|    return small_mul(vec, y);
  565|   315k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   483k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   483k|  limb carry = 0;
  284|  2.38M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.90M, False: 483k]
  ------------------
  285|  1.90M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.90M|  }
  287|   483k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 316k, False: 167k]
  ------------------
  288|   316k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   316k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
  289|   316k|  }
  290|   483k|  return true;
  291|   483k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.19M|  constexpr size_t len() const noexcept {
   77|  4.19M|    return length;
   78|  4.19M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.90M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.90M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.90M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.90M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.90M|  carry = limb(z >> limb_bits);
  235|  1.90M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.90M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.03M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.03M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.03M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.03M|    return data[index];
   60|  5.03M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   423k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   423k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 423k, False: 0]
  ------------------
   93|   423k|      push_unchecked(value);
   94|   423k|      return true;
   95|   423k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   423k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   518k|  constexpr size_t capacity() const noexcept {
   83|   518k|    return size;
   84|   518k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   496k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   496k|    data[length] = value;
   88|   496k|    length++;
   89|   496k|  }
_ZN10fast_float6bigint3addEm:
  567|   315k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   315k|    return small_add(vec, y);
  569|   315k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   315k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   315k|  return small_add_from(vec, y, 0);
  277|   315k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   315k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   315k|  size_t index = start;
  259|   315k|  limb carry = y;
  260|   315k|  bool overflow;
  261|   463k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 236k, False: 227k]
  |  Branch (261:24): [True: 148k, False: 87.9k]
  ------------------
  262|   148k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   148k|    carry = limb(overflow);
  264|   148k|    index += 1;
  265|   148k|  }
  266|   315k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 87.9k, False: 227k]
  ------------------
  267|  87.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  87.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 87.9k]
  |  |  ------------------
  ------------------
  268|  87.9k|  }
  269|   315k|  return true;
  270|   315k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   522k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   522k|  limb z;
  211|       |// gcc and clang
  212|   522k|#if defined(__has_builtin)
  213|   522k|  #if __has_builtin(__builtin_add_overflow)
  214|   522k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   522k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   522k|      return z;
  217|   522k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   522k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  14.8k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  14.8k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  14.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
  611|  14.8k|    return pow2(exp);
  612|  14.8k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  87.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  87.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  87.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  96.1k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.21k, False: 87.9k]
  ------------------
  582|  8.21k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.21k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.21k]
  |  |  ------------------
  ------------------
  583|  8.21k|      exp -= large_step;
  584|  8.21k|    }
  585|  87.9k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  87.9k|    uint32_t small_step = 27;
  587|  87.9k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   146k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 58.8k, False: 87.9k]
  ------------------
  593|  58.8k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  58.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 58.8k]
  |  |  ------------------
  ------------------
  594|  58.8k|      exp -= small_step;
  595|  58.8k|    }
  596|  87.9k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 68.7k, False: 19.1k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  68.7k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  68.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 68.7k]
  |  |  ------------------
  ------------------
  601|  68.7k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  68.7k|      );
  603|  68.7k|    }
  604|       |
  605|  87.9k|    return true;
  606|  87.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.21k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.21k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.21k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.21k|  } else {
  368|  8.21k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.21k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.21k]
  |  |  ------------------
  ------------------
  369|  8.21k|  }
  370|  8.21k|  return true;
  371|  8.21k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.21k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.21k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.21k|  stackvec<size> z(xs);
  338|  8.21k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.21k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.21k, False: 0]
  ------------------
  341|  8.21k|    limb y0 = y[0];
  342|  8.21k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.21k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.21k]
  |  |  ------------------
  ------------------
  343|  41.0k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 32.8k, False: 8.21k]
  ------------------
  344|  32.8k|      limb yi = y[index];
  345|  32.8k|      stackvec<size> zi;
  346|  32.8k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 32.8k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  32.8k|        zi.set_len(0);
  349|  32.8k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  32.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 32.8k]
  |  |  ------------------
  ------------------
  350|  32.8k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  32.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 32.8k]
  |  |  ------------------
  ------------------
  351|  32.8k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  32.8k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  32.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 32.8k]
  |  |  ------------------
  ------------------
  353|  32.8k|      }
  354|  32.8k|    }
  355|  8.21k|  }
  356|       |
  357|  8.21k|  x.normalize();
  358|  8.21k|  return true;
  359|  8.21k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.21k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.21k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.21k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.21k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   127k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   127k|    length = uint16_t(len);
   75|   127k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  41.0k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  41.0k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 41.0k, False: 0]
  ------------------
  108|  41.0k|      extend_unchecked(s);
  109|  41.0k|      return true;
  110|  41.0k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  41.0k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  41.0k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  41.0k|    limb* ptr = data + length;
  102|  41.0k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  41.0k|    set_len(len() + s.len());
  104|  41.0k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  32.8k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  32.8k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 32.8k]
  |  Branch (300:26): [True: 32.4k, False: 348]
  ------------------
  301|  32.4k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  32.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 32.4k]
  |  |  ------------------
  ------------------
  302|  32.4k|  }
  303|       |
  304|  32.8k|  bool carry = false;
  305|   304k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 271k, False: 32.8k]
  ------------------
  306|   271k|    limb xi = x[index + start];
  307|   271k|    limb yi = y[index];
  308|   271k|    bool c1 = false;
  309|   271k|    bool c2 = false;
  310|   271k|    xi = scalar_add(xi, yi, c1);
  311|   271k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 102k, False: 169k]
  ------------------
  312|   102k|      xi = scalar_add(xi, 1, c2);
  313|   102k|    }
  314|   271k|    x[index + start] = xi;
  315|   271k|    carry = c1 | c2;
  316|   271k|  }
  317|       |
  318|       |  // handle overflow
  319|  32.8k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 32.8k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  32.8k|  return true;
  323|  32.8k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  32.4k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  32.4k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 32.4k]
  ------------------
  132|      0|      return false;
  133|  32.4k|    } else {
  134|  32.4k|      resize_unchecked(new_len, value);
  135|  32.4k|      return true;
  136|  32.4k|    }
  137|  32.4k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  32.4k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  32.4k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 32.4k, False: 0]
  ------------------
  120|  32.4k|      size_t count = new_len - len();
  121|  32.4k|      limb* first = data + len();
  122|  32.4k|      limb* last = first + count;
  123|  32.4k|      ::std::fill(first, last, value);
  124|  32.4k|      set_len(new_len);
  125|  32.4k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  32.4k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  81.2k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  81.2k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 81.2k, False: 0]
  |  Branch (152:25): [True: 0, False: 81.2k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  81.2k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   124k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   124k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   124k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   124k|    size_t rindex = length - index - 1;
   69|   124k|    return data[rindex];
   70|   124k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  87.7k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  87.7k|    return shl(exp);
  574|  87.7k|  }
_ZN10fast_float6bigint3shlEm:
  530|  87.7k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  87.7k|    size_t rem = n % limb_bits;
  532|  87.7k|    size_t div = n / limb_bits;
  533|  87.7k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 72.6k, False: 15.0k]
  ------------------
  534|  72.6k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  72.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
  535|  72.6k|    }
  536|  87.7k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 21.4k, False: 66.3k]
  ------------------
  537|  21.4k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  21.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.4k]
  |  |  ------------------
  ------------------
  538|  21.4k|    }
  539|  87.7k|    return true;
  540|  87.7k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  72.6k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  72.6k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  72.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  72.6k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  72.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  72.6k|    size_t shl = n;
  493|  72.6k|    size_t shr = limb_bits - shl;
  494|  72.6k|    limb prev = 0;
  495|   267k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 194k, False: 72.6k]
  ------------------
  496|   194k|      limb xi = vec[index];
  497|   194k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   194k|      prev = xi;
  499|   194k|    }
  500|       |
  501|  72.6k|    limb carry = prev >> shr;
  502|  72.6k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 19.5k, False: 53.1k]
  ------------------
  503|  19.5k|      return vec.try_push(carry);
  504|  19.5k|    }
  505|  53.1k|    return true;
  506|  72.6k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  21.4k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  21.4k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  21.4k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  21.4k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 21.4k]
  ------------------
  512|      0|      return false;
  513|  21.4k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 21.4k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  21.4k|      limb* dst = vec.data + n;
  516|  21.4k|      const limb* src = vec.data;
  517|  21.4k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  21.4k|      limb* first = vec.data;
  520|  21.4k|      limb* last = first + n;
  521|  21.4k|      ::std::fill(first, last, 0);
  522|  21.4k|      vec.set_len(n + vec.len());
  523|  21.4k|      return true;
  524|  21.4k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  21.4k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  36.2k|  constexpr bool is_empty() const noexcept {
   80|  36.2k|    return length == 0;
   81|  36.2k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  14.8k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  14.8k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  14.8k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 14.8k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  14.8k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.90k, False: 12.9k]
  ------------------
  435|  1.90k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  12.9k|    } else {
  437|  12.9k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  12.9k|      truncated |= vec.nonzero(2);
  439|  12.9k|      return result;
  440|  12.9k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  14.8k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.90k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.90k|  truncated = false;
  167|  1.90k|  int shl = leading_zeroes(r0);
  168|  1.90k|  return r0 << shl;
  169|  1.90k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  12.9k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  12.9k|  int shl = leading_zeroes(r0);
  174|  12.9k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 12.9k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  12.9k|  } else {
  178|  12.9k|    int shr = 64 - shl;
  179|  12.9k|    truncated = (r1 << shl) != 0;
  180|  12.9k|    return (r0 << shl) | (r1 >> shr);
  181|  12.9k|  }
  182|  12.9k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  12.9k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.0k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 782, False: 12.2k]
  ------------------
  143|    782|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 728, False: 54]
  ------------------
  144|    728|        return true;
  145|    728|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.2k|    return false;
  149|  12.9k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  14.8k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  14.8k|    int lz = ctlz();
  560|  14.8k|    return int(limb_bits * vec.len()) - lz;
  561|  14.8k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  14.8k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  14.8k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 14.8k]
  ------------------
  545|      0|      return 0;
  546|  14.8k|    } else {
  547|  14.8k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  14.8k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  14.8k|    }
  555|  14.8k|  }
_ZN10fast_float6bigintC2Em:
  418|  73.0k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  73.0k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  73.0k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  73.0k|    vec.normalize();
  426|  73.0k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  73.0k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  73.0k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 73.0k]
  ------------------
  464|      0|      return 1;
  465|  73.0k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 73.0k]
  ------------------
  466|      0|      return -1;
  467|  73.0k|    } else {
  468|   144k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 136k, False: 8.72k]
  ------------------
  469|   136k|        limb xi = vec[index - 1];
  470|   136k|        limb yi = other.vec[index - 1];
  471|   136k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.1k, False: 124k]
  ------------------
  472|  11.1k|          return 1;
  473|   124k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 53.2k, False: 71.7k]
  ------------------
  474|  53.2k|          return -1;
  475|  53.2k|        }
  476|   136k|      }
  477|  8.72k|      return 0;
  478|  73.0k|    }
  479|  73.0k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   272k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   272k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   272k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   272k|    return data[index];
   64|   272k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   403k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   403k|  adjusted_mantissa answer;
   96|   403k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 11.9k, False: 391k]
  |  Branch (96:19): [True: 1.75k, False: 390k]
  ------------------
   97|  13.6k|    answer.power2 = 0;
   98|  13.6k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  13.6k|    return answer;
  101|  13.6k|  }
  102|   390k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 8.36k, False: 381k]
  ------------------
  103|       |    // we want to get infinity:
  104|  8.36k|    answer.power2 = binary::infinite_power();
  105|  8.36k|    answer.mantissa = 0;
  106|  8.36k|    return answer;
  107|  8.36k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   381k|  int lz = leading_zeroes(w);
  112|   381k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   381k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   381k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   381k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   381k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   381k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 802, False: 380k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    802|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 766]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    766|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    766|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    766|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    766|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 766, False: 0]
  ------------------
  156|    766|    return answer;
  157|    802|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   380k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 140k, False: 240k]
  |  Branch (162:30): [True: 139k, False: 956]
  |  Branch (162:77): [True: 123k, False: 16.1k]
  ------------------
  163|   380k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 23.8k, False: 99.1k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  23.8k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.0k, False: 12.7k]
  ------------------
  168|  11.0k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.0k|    }
  170|  23.8k|  }
  171|       |
  172|   380k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   380k|  answer.mantissa >>= 1;
  174|   380k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.4k, False: 366k]
  ------------------
  175|  14.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.4k|    answer.power2++; // undo previous addition
  177|  14.4k|  }
  178|       |
  179|   380k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   380k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.67k, False: 378k]
  ------------------
  181|  2.67k|    answer.power2 = binary::infinite_power();
  182|  2.67k|    answer.mantissa = 0;
  183|  2.67k|  }
  184|   380k|  return answer;
  185|   381k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   417k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   417k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   417k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   417k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   417k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   417k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   417k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 63.9k, False: 353k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  63.9k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  63.9k|    firstproduct.low += secondproduct.high;
   35|  63.9k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 51.7k, False: 12.2k]
  ------------------
   36|  51.7k|      firstproduct.high++;
   37|  51.7k|    }
   38|  63.9k|  }
   39|   417k|  return firstproduct;
   40|   417k|}
_ZN10fast_float6detail5powerEi:
   58|   835k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   835k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   835k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  36.2k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  36.2k|  int lz = leading_zeroes(w);
   82|  36.2k|  w <<= lz;
   83|  36.2k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  36.2k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  36.2k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  36.2k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  36.2k|  int hilz = int(w >> 63) ^ 1;
   69|  36.2k|  adjusted_mantissa answer;
   70|  36.2k|  answer.mantissa = w << hilz;
   71|  36.2k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  36.2k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  36.2k|  return answer;
   74|  36.2k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   377k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   377k|  adjusted_mantissa answer;
   96|   377k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 6.69k, False: 370k]
  |  Branch (96:19): [True: 350, False: 370k]
  ------------------
   97|  7.04k|    answer.power2 = 0;
   98|  7.04k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.04k|    return answer;
  101|  7.04k|  }
  102|   370k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.20k, False: 366k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.20k|    answer.power2 = binary::infinite_power();
  105|  4.20k|    answer.mantissa = 0;
  106|  4.20k|    return answer;
  107|  4.20k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   366k|  int lz = leading_zeroes(w);
  112|   366k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   366k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   366k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   366k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   366k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   366k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 13.1k, False: 353k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  13.1k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 13.0k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  13.0k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  13.0k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  13.0k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  13.0k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 13.0k, False: 0]
  ------------------
  156|  13.0k|    return answer;
  157|  13.1k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   353k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 107k, False: 246k]
  |  Branch (162:30): [True: 65.0k, False: 41.9k]
  |  Branch (162:77): [True: 57.3k, False: 7.78k]
  ------------------
  163|   353k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 21.1k, False: 36.1k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  21.1k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 14.3k, False: 6.82k]
  ------------------
  168|  14.3k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  14.3k|    }
  170|  21.1k|  }
  171|       |
  172|   353k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   353k|  answer.mantissa >>= 1;
  174|   353k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 11.4k, False: 341k]
  ------------------
  175|  11.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  11.4k|    answer.power2++; // undo previous addition
  177|  11.4k|  }
  178|       |
  179|   353k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   353k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 256, False: 352k]
  ------------------
  181|    256|    answer.power2 = binary::infinite_power();
  182|    256|    answer.mantissa = 0;
  183|    256|  }
  184|   353k|  return answer;
  185|   366k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   417k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   417k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   417k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   417k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   417k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   417k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   417k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 104k, False: 313k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   104k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   104k|    firstproduct.low += secondproduct.high;
   35|   104k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 48.2k, False: 56.3k]
  ------------------
   36|  48.2k|      firstproduct.high++;
   37|  48.2k|    }
   38|   104k|  }
   39|   417k|  return firstproduct;
   40|   417k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  51.6k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  51.6k|  int lz = leading_zeroes(w);
   82|  51.6k|  w <<= lz;
   83|  51.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  51.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  51.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  51.6k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  51.6k|  int hilz = int(w >> 63) ^ 1;
   69|  51.6k|  adjusted_mantissa answer;
   70|  51.6k|  answer.mantissa = w << hilz;
   71|  51.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  51.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  51.6k|  return answer;
   74|  51.6k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  36.2k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  36.2k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  36.2k|  int32_t sci_exp = scientific_exponent(num);
  411|  36.2k|  size_t max_digits = binary_format<T>::max_digits();
  412|  36.2k|  size_t digits = 0;
  413|  36.2k|  bigint bigmant;
  414|  36.2k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  36.2k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  36.2k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 878, False: 35.3k]
  ------------------
  418|    878|    return positive_digit_comp<T>(bigmant, exponent);
  419|  35.3k|  } else {
  420|  35.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  35.3k|  }
  422|  36.2k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  87.9k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  87.9k|  uint64_t mantissa = num.mantissa;
   30|  87.9k|  int32_t exponent = int32_t(num.exponent);
   31|   439k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 351k, False: 87.9k]
  ------------------
   32|   351k|    mantissa /= 10000;
   33|   351k|    exponent += 4;
   34|   351k|  }
   35|   175k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 87.9k, False: 87.9k]
  ------------------
   36|  87.9k|    mantissa /= 100;
   37|  87.9k|    exponent += 2;
   38|  87.9k|  }
   39|  87.9k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 87.9k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  87.9k|  return exponent;
   44|  87.9k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  87.9k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  87.9k|  size_t counter = 0;
  245|  87.9k|  digits = 0;
  246|  87.9k|  limb value = 0;
  247|  87.9k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  87.9k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  87.9k|  UC const * p = num.integer.ptr;
  255|  87.9k|  UC const * pend = p + num.integer.len();
  256|  87.9k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   192k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 105k, False: 87.5k]
  ------------------
  259|   197k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 119k, False: 78.3k]
  |  Branch (259:45): [True: 93.1k, False: 26.4k]
  |  Branch (259:70): [True: 92.7k, False: 408]
  ------------------
  260|  92.7k|      parse_eight_digits(p, value, counter, digits);
  261|  92.7k|    }
  262|   390k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 357k, False: 32.7k]
  |  Branch (262:30): [True: 285k, False: 72.0k]
  |  Branch (262:43): [True: 285k, False: 408]
  ------------------
  263|   285k|      parse_one_digit(p, value, counter, digits);
  264|   285k|    }
  265|   105k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 408, False: 104k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    408|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    408|      bool truncated = is_truncated(p, pend);
  269|    408|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 376, False: 32]
  ------------------
  270|    376|        truncated |= is_truncated(num.fraction);
  271|    376|      }
  272|    408|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 220, False: 188]
  ------------------
  273|    220|        round_up_bigint(result, digits);
  274|    220|      }
  275|    408|      return;
  276|   104k|    } else {
  277|   104k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   104k|      counter = 0;
  279|   104k|      value = 0;
  280|   104k|    }
  281|   105k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  87.5k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 73.6k, False: 13.8k]
  ------------------
  285|  73.6k|    p = num.fraction.ptr;
  286|  73.6k|    pend = p + num.fraction.len();
  287|  73.6k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.4k, False: 58.1k]
  ------------------
  288|  15.4k|      skip_zeros(p, pend);
  289|  15.4k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   273k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 206k, False: 67.3k]
  ------------------
  292|   520k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 432k, False: 87.8k]
  |  Branch (292:47): [True: 316k, False: 116k]
  |  Branch (292:72): [True: 314k, False: 1.82k]
  ------------------
  293|   314k|        parse_eight_digits(p, value, counter, digits);
  294|   314k|      }
  295|   856k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 721k, False: 135k]
  |  Branch (295:32): [True: 654k, False: 66.6k]
  |  Branch (295:45): [True: 650k, False: 4.11k]
  ------------------
  296|   650k|        parse_one_digit(p, value, counter, digits);
  297|   650k|      }
  298|   206k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 6.22k, False: 200k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  6.22k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  6.22k|        bool truncated = is_truncated(p, pend);
  302|  6.22k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.26k, False: 2.95k]
  ------------------
  303|  3.26k|          round_up_bigint(result, digits);
  304|  3.26k|        }
  305|  6.22k|        return;
  306|   200k|      } else {
  307|   200k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   200k|        counter = 0;
  309|   200k|        value = 0;
  310|   200k|      }
  311|   206k|    }
  312|  73.6k|  }
  313|       |
  314|  81.2k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 81.2k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  81.2k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   103k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   103k|  uint64_t val;
  161|   173k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 124k, False: 48.2k]
  ------------------
  162|   124k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   124k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 55.0k, False: 69.7k]
  ------------------
  164|  55.0k|      break;
  165|  55.0k|    }
  166|  69.7k|    first += int_cmp_len<UC>();
  167|  69.7k|  }
  168|   253k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 238k, False: 15.4k]
  ------------------
  169|   238k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 87.9k, False: 150k]
  ------------------
  170|  87.9k|      break;
  171|  87.9k|    }
  172|   150k|    first++;
  173|   150k|  }
  174|   103k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   407k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   407k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   407k|  p += 8;
  210|   407k|  counter += 8;
  211|   407k|  count += 8;
  212|   407k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   935k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   935k|  value = value * 10 + limb(*p - UC('0'));
  218|   935k|  p++;
  219|   935k|  counter++;
  220|   935k|  count++;
  221|   935k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   315k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   315k|  big.mul(power);
  226|   315k|  big.add(value);
  227|   315k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  7.00k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  7.00k|  uint64_t val;
  183|  17.6k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 12.1k, False: 5.50k]
  ------------------
  184|  12.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  12.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.50k, False: 10.6k]
  ------------------
  186|  1.50k|      return true;
  187|  1.50k|    }
  188|  10.6k|    first += int_cmp_len<UC>();
  189|  10.6k|  }
  190|  9.08k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 5.63k, False: 3.44k]
  ------------------
  191|  5.63k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.05k, False: 3.58k]
  ------------------
  192|  2.05k|      return true;
  193|  2.05k|    }
  194|  3.58k|    ++first;
  195|  3.58k|  }
  196|  3.44k|  return false;
  197|  5.50k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    376|bool is_truncated(span<const UC> s) noexcept {
  201|    376|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    376|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.48k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.48k|  add_native(big, 10, 1);
  234|  3.48k|  count++;
  235|  3.48k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    878|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    878|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    878|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    878|  adjusted_mantissa answer;
  324|    878|  bool truncated;
  325|    878|  answer.mantissa = bigmant.hi64(truncated);
  326|    878|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    878|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
  334|       |
  335|    878|  return answer;
  336|    878|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    878|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    878|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    878|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 878]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    878|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    878|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 878]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    878|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    878|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 878]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    878|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    878|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    878|  const uint64_t mask
  125|    878|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 878]
  ------------------
  126|    878|    ? UINT64_MAX
  127|    878|    : (uint64_t(1) << shift) - 1;
  128|    878|  const uint64_t halfway
  129|    878|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 878]
  ------------------
  130|    878|    ? 0
  131|    878|    : uint64_t(1) << (shift - 1);
  132|    878|  uint64_t truncated_bits = am.mantissa & mask;
  133|    878|  bool is_above = truncated_bits > halfway;
  134|    878|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    878|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 878]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    878|  } else {
  140|    878|    am.mantissa >>= shift;
  141|    878|  }
  142|    878|  am.power2 += shift;
  143|       |
  144|    878|  bool is_odd = (am.mantissa & 1) == 1;
  145|    878|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    878|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 792]
  |  Branch (331:27): [True: 644, False: 148]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 94, False: 630]
  |  Branch (331:66): [True: 32, False: 62]
  ------------------
  332|    878|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  35.3k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  35.3k|  bigint& real_digits = bigmant;
  347|  35.3k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  35.3k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  35.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  35.3k|  T b;
  354|  35.3k|  to_float(false, am_b, b);
  355|  35.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  35.3k|  bigint theor_digits(theor.mantissa);
  357|  35.3k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  35.3k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  35.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  35.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 35.3k, False: 0]
  ------------------
  363|  35.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  35.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  35.3k|  }
  365|  35.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 35.3k, False: 0]
  ------------------
  366|  35.3k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  35.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  35.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  35.3k|  int ord = real_digits.compare(theor_digits);
  373|  35.3k|  adjusted_mantissa answer = am;
  374|  35.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  35.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.3k|      (void)_;  // not needed, since we've done our comparison
  377|  35.3k|      (void)__; // not needed, since we've done our comparison
  378|  35.3k|      if (ord > 0) {
  379|  35.3k|        return true;
  380|  35.3k|      } else if (ord < 0) {
  381|  35.3k|        return false;
  382|  35.3k|      } else {
  383|  35.3k|        return is_odd;
  384|  35.3k|      }
  385|  35.3k|    });
  386|  35.3k|  });
  387|       |
  388|  35.3k|  return answer;
  389|  35.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  35.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  35.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  35.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 35.3k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  35.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  35.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 35.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  35.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  35.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 35.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  35.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  35.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  73.0k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  73.0k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 73.0k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  73.0k|  } else {
  153|  73.0k|    am.mantissa >>= shift;
  154|  73.0k|  }
  155|  73.0k|  am.power2 += shift;
  156|  73.0k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  35.3k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  35.3k|  adjusted_mantissa am = to_extended(value);
   84|  35.3k|  am.mantissa <<= 1;
   85|  35.3k|  am.mantissa += 1;
   86|  35.3k|  am.power2 -= 1;
   87|  35.3k|  return am;
   88|  35.3k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  35.3k|adjusted_mantissa to_extended(T value) noexcept {
   50|  35.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  35.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  35.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  35.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  35.3k|  adjusted_mantissa am;
   56|  35.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  35.3k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  35.3k|  ::memcpy(&bits, &value, sizeof(T));
   62|  35.3k|#endif
   63|  35.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 35.3k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  35.3k|  } else {
   68|       |    // normal
   69|  35.3k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  35.3k|    am.power2 -= bias;
   71|  35.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  35.3k|  }
   73|       |
   74|  35.3k|  return am;
   75|  35.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  35.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  35.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  35.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 35.3k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  35.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  35.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 35.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  35.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  35.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 35.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  35.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  35.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  35.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.3k|      (void)_;  // not needed, since we've done our comparison
  377|  35.3k|      (void)__; // not needed, since we've done our comparison
  378|  35.3k|      if (ord > 0) {
  379|  35.3k|        return true;
  380|  35.3k|      } else if (ord < 0) {
  381|  35.3k|        return false;
  382|  35.3k|      } else {
  383|  35.3k|        return is_odd;
  384|  35.3k|      }
  385|  35.3k|    });
  386|  35.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  35.3k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  35.3k|  const uint64_t mask
  125|  35.3k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 35.3k]
  ------------------
  126|  35.3k|    ? UINT64_MAX
  127|  35.3k|    : (uint64_t(1) << shift) - 1;
  128|  35.3k|  const uint64_t halfway
  129|  35.3k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 35.3k]
  ------------------
  130|  35.3k|    ? 0
  131|  35.3k|    : uint64_t(1) << (shift - 1);
  132|  35.3k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  35.3k|  bool is_above = truncated_bits > halfway;
  134|  35.3k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  35.3k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 35.3k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  35.3k|  } else {
  140|  35.3k|    am.mantissa >>= shift;
  141|  35.3k|  }
  142|  35.3k|  am.power2 += shift;
  143|       |
  144|  35.3k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  35.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  35.3k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  35.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.3k|      (void)_;  // not needed, since we've done our comparison
  377|  35.3k|      (void)__; // not needed, since we've done our comparison
  378|  35.3k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 536, False: 34.8k]
  ------------------
  379|    536|        return true;
  380|  34.8k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 27.0k, False: 7.73k]
  ------------------
  381|  27.0k|        return false;
  382|  27.0k|      } else {
  383|  7.73k|        return is_odd;
  384|  7.73k|      }
  385|  35.3k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  51.6k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  51.6k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  51.6k|  int32_t sci_exp = scientific_exponent(num);
  411|  51.6k|  size_t max_digits = binary_format<T>::max_digits();
  412|  51.6k|  size_t digits = 0;
  413|  51.6k|  bigint bigmant;
  414|  51.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  51.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  51.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 13.9k, False: 37.7k]
  ------------------
  418|  13.9k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  37.7k|  } else {
  420|  37.7k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  37.7k|  }
  422|  51.6k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  13.9k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  13.9k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  13.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  13.9k|  adjusted_mantissa answer;
  324|  13.9k|  bool truncated;
  325|  13.9k|  answer.mantissa = bigmant.hi64(truncated);
  326|  13.9k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  13.9k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  13.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.9k|    });
  333|  13.9k|  });
  334|       |
  335|  13.9k|  return answer;
  336|  13.9k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  13.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  13.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  13.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 13.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  13.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  13.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.01k, False: 12.9k]
  ------------------
  109|  1.01k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.01k|    am.power2++;
  111|  1.01k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  13.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  13.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 13.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  13.9k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  13.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.9k|    });
  333|  13.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  13.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  13.9k|  const uint64_t mask
  125|  13.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 13.9k]
  ------------------
  126|  13.9k|    ? UINT64_MAX
  127|  13.9k|    : (uint64_t(1) << shift) - 1;
  128|  13.9k|  const uint64_t halfway
  129|  13.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 13.9k]
  ------------------
  130|  13.9k|    ? 0
  131|  13.9k|    : uint64_t(1) << (shift - 1);
  132|  13.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  13.9k|  bool is_above = truncated_bits > halfway;
  134|  13.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  13.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 13.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  13.9k|  } else {
  140|  13.9k|    am.mantissa >>= shift;
  141|  13.9k|  }
  142|  13.9k|  am.power2 += shift;
  143|       |
  144|  13.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  13.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  13.9k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  13.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.16k, False: 12.8k]
  |  Branch (331:27): [True: 11.9k, False: 912]
  |  Branch (331:41): [True: 3.82k, False: 8.08k]
  |  Branch (331:56): [True: 354, False: 8.64k]
  |  Branch (331:66): [True: 80, False: 274]
  ------------------
  332|  13.9k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  37.7k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  37.7k|  bigint& real_digits = bigmant;
  347|  37.7k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  37.7k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  37.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  37.7k|  T b;
  354|  37.7k|  to_float(false, am_b, b);
  355|  37.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  37.7k|  bigint theor_digits(theor.mantissa);
  357|  37.7k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  37.7k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  37.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  37.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 37.7k, False: 0]
  ------------------
  363|  37.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  37.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  37.7k|  }
  365|  37.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 4.84k, False: 32.8k]
  ------------------
  366|  4.84k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  4.84k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  32.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 32.7k, False: 130]
  ------------------
  368|  32.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  32.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  32.7k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  37.7k|  int ord = real_digits.compare(theor_digits);
  373|  37.7k|  adjusted_mantissa answer = am;
  374|  37.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.7k|      (void)_;  // not needed, since we've done our comparison
  377|  37.7k|      (void)__; // not needed, since we've done our comparison
  378|  37.7k|      if (ord > 0) {
  379|  37.7k|        return true;
  380|  37.7k|      } else if (ord < 0) {
  381|  37.7k|        return false;
  382|  37.7k|      } else {
  383|  37.7k|        return is_odd;
  384|  37.7k|      }
  385|  37.7k|    });
  386|  37.7k|  });
  387|       |
  388|  37.7k|  return answer;
  389|  37.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  37.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 148, False: 37.5k]
  ------------------
   96|       |    // have a denormal float
   97|    148|    int32_t shift = -am.power2 + 1;
   98|    148|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    148|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 148, False: 0]
  ------------------
  101|    148|    return;
  102|    148|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  37.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  37.7k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  37.7k|  adjusted_mantissa am = to_extended(value);
   84|  37.7k|  am.mantissa <<= 1;
   85|  37.7k|  am.mantissa += 1;
   86|  37.7k|  am.power2 -= 1;
   87|  37.7k|  return am;
   88|  37.7k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  37.7k|adjusted_mantissa to_extended(T value) noexcept {
   50|  37.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  37.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  37.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  37.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  37.7k|  adjusted_mantissa am;
   56|  37.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  37.7k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  37.7k|  ::memcpy(&bits, &value, sizeof(T));
   62|  37.7k|#endif
   63|  37.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 148, False: 37.5k]
  ------------------
   64|       |    // denormal
   65|    148|    am.power2 = 1 - bias;
   66|    148|    am.mantissa = bits & mantissa_mask;
   67|  37.5k|  } else {
   68|       |    // normal
   69|  37.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  37.5k|    am.power2 -= bias;
   71|  37.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  37.5k|  }
   73|       |
   74|  37.7k|  return am;
   75|  37.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  37.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 148, False: 37.5k]
  ------------------
   96|       |    // have a denormal float
   97|    148|    int32_t shift = -am.power2 + 1;
   98|    148|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    148|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 148, False: 0]
  ------------------
  101|    148|    return;
  102|    148|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 37.4k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  37.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.7k|      (void)_;  // not needed, since we've done our comparison
  377|  37.7k|      (void)__; // not needed, since we've done our comparison
  378|  37.7k|      if (ord > 0) {
  379|  37.7k|        return true;
  380|  37.7k|      } else if (ord < 0) {
  381|  37.7k|        return false;
  382|  37.7k|      } else {
  383|  37.7k|        return is_odd;
  384|  37.7k|      }
  385|  37.7k|    });
  386|  37.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  37.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  37.7k|  const uint64_t mask
  125|  37.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 37.7k]
  ------------------
  126|  37.7k|    ? UINT64_MAX
  127|  37.7k|    : (uint64_t(1) << shift) - 1;
  128|  37.7k|  const uint64_t halfway
  129|  37.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 37.7k]
  ------------------
  130|  37.7k|    ? 0
  131|  37.7k|    : uint64_t(1) << (shift - 1);
  132|  37.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  37.7k|  bool is_above = truncated_bits > halfway;
  134|  37.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  37.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 37.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  37.7k|  } else {
  140|  37.7k|    am.mantissa >>= shift;
  141|  37.7k|  }
  142|  37.7k|  am.power2 += shift;
  143|       |
  144|  37.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  37.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  37.7k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  37.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.7k|      (void)_;  // not needed, since we've done our comparison
  377|  37.7k|      (void)__; // not needed, since we've done our comparison
  378|  37.7k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 10.5k, False: 27.1k]
  ------------------
  379|  10.5k|        return true;
  380|  27.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 26.1k, False: 986]
  ------------------
  381|  26.1k|        return false;
  382|  26.1k|      } else {
  383|    986|        return is_odd;
  384|    986|      }
  385|  37.7k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.00M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.34M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   604k|  constexpr size_t len() const noexcept {
  238|   604k|    return length;
  239|   604k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   976k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   976k|  return -10;
  469|   976k|#endif
  470|   976k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   914k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   914k|  return 10;
  517|   914k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   764k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   764k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   764k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.58M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.58M|  return 23;
  477|  2.58M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   699k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   699k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   699k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   957k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   391k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   391k|  return -65;
  568|   391k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   390k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   390k|  return 38;
  559|   390k|}
_ZN10fast_float14leading_zeroesEm:
  268|   865k|int leading_zeroes(uint64_t input_num) {
  269|   865k|  assert(input_num > 0);
  270|   865k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   865k|  return __builtin_clzll(input_num);
  285|   865k|#endif
  286|   865k|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.00M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.00M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.00M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.00M|  answer.low = uint64_t(r);
  337|  1.00M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.00M|  return answer;
  342|  1.00M|}
_ZN10fast_float8value128C2Ev:
  251|  1.00M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   454k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   454k|  return -127;
  500|   454k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   140k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   140k|  return -17;
  493|   140k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   139k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   139k|  return 10;
  485|   139k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   265k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   265k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 87.9k, False: 177k]
  |  Branch (352:38): [True: 0, False: 177k]
  ------------------
  353|   265k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  36.2k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  36.2k|  return 114;
  575|  36.2k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   271k|{
  650|   271k|    return sizeof(uint64_t) / sizeof(UC);
  651|   271k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   136k|{
  644|   136k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   136k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   136k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   137k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   550k|  constexpr size_t len() const noexcept {
  238|   550k|    return length;
  239|   550k|  }
_ZNK10fast_float4spanImEixEm:
  241|   312k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   312k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   312k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   312k|    return ptr[index];
  244|   312k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   311k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   311k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   311k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   311k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   311k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   311k|  ::memcpy(&value, &word, sizeof(T));
  615|   311k|#endif
  616|   311k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   311k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   738k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   738k|  return 0xFF;
  507|   738k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.00M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  81.6k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  40.8k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  40.8k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.06M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.06M|  return -22;
  461|  1.06M|#endif
  462|  1.06M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.03M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.03M|  return 22;
  514|  1.03M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   846k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   846k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   846k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.65M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.65M|  return 52;
  474|  2.65M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   828k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   828k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   828k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   370k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   370k|  return -342;
  564|   370k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   370k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   370k|  return 308;
  555|   370k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   469k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   469k|  return -1023;
  497|   469k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   107k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   107k|  return -4;
  489|   107k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  65.0k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  65.0k|  return 23;
  481|  65.0k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  51.6k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  51.6k|  return 769;
  572|  51.6k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   276k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   276k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   276k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   276k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   276k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   276k|  ::memcpy(&value, &word, sizeof(T));
  615|   276k|#endif
  616|   276k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   276k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   685k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   685k|  return 0x7FF;
  504|   685k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   956k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   956k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   956k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   956k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   956k|    return from_chars_advanced(first, last, value, options);
  143|   956k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   956k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   956k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   956k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   956k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   956k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 956k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   956k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   956k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 956k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   956k|  answer.ec = std::errc(); // be optimistic
  221|   956k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   956k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 894k, False: 61.9k]
  |  Branch (227:69): [True: 826k, False: 67.2k]
  |  Branch (227:131): [True: 744k, False: 82.1k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   744k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 744k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   744k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 679k, False: 64.7k]
  ------------------
  239|   679k|        value = T(pns.mantissa);
  240|   679k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 10.5k, False: 669k]
  ------------------
  241|   669k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   679k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 679k]
  ------------------
  243|   679k|        return answer;
  244|   679k|      }
  245|   744k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   744k|  }
  262|   276k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   276k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 127k, False: 148k]
  |  Branch (263:29): [True: 127k, False: 0]
  ------------------
  264|   127k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 36.2k, False: 90.9k]
  ------------------
  265|  36.2k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  36.2k|    }
  267|   127k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   276k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 36.2k, False: 239k]
  ------------------
  271|   276k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   276k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 264k, False: 11.9k]
  |  Branch (273:29): [True: 19.1k, False: 245k]
  |  Branch (273:49): [True: 1.46k, False: 17.6k]
  |  Branch (273:68): [True: 7.81k, False: 266k]
  ------------------
  274|  9.27k|    answer.ec = std::errc::result_out_of_range;
  275|  9.27k|  }
  276|   276k|  return answer;
  277|   956k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.61M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.61M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.61M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.61M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.61M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.61M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  20.4k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  20.4k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  20.4k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  20.4k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  20.4k|    return from_chars_advanced(first, last, value, options);
  143|  20.4k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  20.4k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  20.4k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  20.4k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  20.4k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  20.4k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 20.4k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  20.4k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  20.4k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 20.4k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  20.4k|  answer.ec = std::errc(); // be optimistic
  221|  20.4k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  20.4k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 20.3k, False: 54]
  |  Branch (227:69): [True: 19.9k, False: 432]
  |  Branch (227:131): [True: 19.9k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  19.9k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 19.9k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  19.9k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 19.9k, False: 0]
  ------------------
  239|  19.9k|        value = T(pns.mantissa);
  240|  19.9k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18, False: 19.9k]
  ------------------
  241|  19.9k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  19.9k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 19.9k]
  ------------------
  243|  19.9k|        return answer;
  244|  19.9k|      }
  245|  19.9k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  19.9k|  }
  262|    486|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    486|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 486]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    486|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 486]
  ------------------
  271|    486|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    486|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 486, False: 0]
  |  Branch (273:29): [True: 486, False: 0]
  |  Branch (273:49): [True: 54, False: 432]
  |  Branch (273:68): [True: 432, False: 0]
  ------------------
  274|    486|    answer.ec = std::errc::result_out_of_range;
  275|    486|  }
  276|    486|  return answer;
  277|  20.4k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.04M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.04M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.04M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.04M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.04M|    return from_chars_advanced(first, last, value, options);
  143|  1.04M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.04M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.04M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.04M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.04M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.04M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.04M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.04M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.04M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.04M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.04M|  answer.ec = std::errc(); // be optimistic
  221|  1.04M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.04M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.01M, False: 34.8k]
  |  Branch (227:69): [True: 941k, False: 70.2k]
  |  Branch (227:131): [True: 826k, False: 114k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   826k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 826k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   826k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 808k, False: 18.5k]
  ------------------
  239|   808k|        value = T(pns.mantissa);
  240|   808k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 42.4k, False: 765k]
  ------------------
  241|   765k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   808k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 808k]
  ------------------
  243|   808k|        return answer;
  244|   808k|      }
  245|   826k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   826k|  }
  262|   238k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   238k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 138k, False: 99.6k]
  |  Branch (263:29): [True: 138k, False: 0]
  ------------------
  264|   138k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 51.6k, False: 86.9k]
  ------------------
  265|  51.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  51.6k|    }
  267|   138k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   238k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 51.6k, False: 186k]
  ------------------
  271|   238k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   238k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 231k, False: 6.69k]
  |  Branch (273:29): [True: 10.5k, False: 221k]
  |  Branch (273:49): [True: 408, False: 10.1k]
  |  Branch (273:68): [True: 3.71k, False: 234k]
  ------------------
  274|  4.12k|    answer.ec = std::errc::result_out_of_range;
  275|  4.12k|  }
  276|   238k|  return answer;
  277|  1.04M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  20.4k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  20.4k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  20.4k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  20.4k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  20.4k|    return from_chars_advanced(first, last, value, options);
  143|  20.4k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  20.4k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  20.4k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  20.4k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  20.4k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  20.4k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 20.4k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  20.4k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  20.4k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 20.4k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  20.4k|  answer.ec = std::errc(); // be optimistic
  221|  20.4k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  20.4k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 20.3k, False: 54]
  |  Branch (227:69): [True: 19.9k, False: 432]
  |  Branch (227:131): [True: 19.9k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  19.9k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 19.9k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  19.9k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 19.9k, False: 0]
  ------------------
  239|  19.9k|        value = T(pns.mantissa);
  240|  19.9k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18, False: 19.9k]
  ------------------
  241|  19.9k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  19.9k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 19.9k]
  ------------------
  243|  19.9k|        return answer;
  244|  19.9k|      }
  245|  19.9k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  19.9k|  }
  262|    486|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    486|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 486]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    486|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 486]
  ------------------
  271|    486|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    486|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 486, False: 0]
  |  Branch (273:29): [True: 268, False: 218]
  |  Branch (273:49): [True: 0, False: 268]
  |  Branch (273:68): [True: 268, False: 218]
  ------------------
  274|    268|    answer.ec = std::errc::result_out_of_range;
  275|    268|  }
  276|    486|  return answer;
  277|  20.4k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  7.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   636k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.78M|{
 3778|  5.78M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.78M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.78M|    }
 3781|  5.78M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.78M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.78M|    }
 3784|  5.78M|    else {
 3785|       |        // utf-32
 3786|  5.78M|        static_assert(sizeof(U) == 4);
 3787|  5.78M|        SCN_UNUSED(ch);
 3788|  5.78M|        return 1;
 3789|  5.78M|    }
 3790|  5.78M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.78M|{
 3742|  5.78M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.78M|    SCN_GCC_COMPAT_PUSH
 3745|  5.78M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.78M|    constexpr char lengths[] =
 3747|  5.78M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.78M|        "\1\1\1\1\1\1\1\1"
 3749|  5.78M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.78M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.78M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.78M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.78M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.78M|    SCN_GCC_COMPAT_POP
 3756|  5.78M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.51M|{
 3984|  5.51M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.51M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.51M|    }
 3987|  5.51M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.51M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.51M|    }
 3990|  5.51M|    else {
 3991|  5.51M|        SCN_EXPECT(input.size() == 1);
 3992|  5.51M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.51M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.51M|            return invalid_code_point;
 3995|  5.51M|        }
 3996|  5.51M|        return cp;
 3997|  5.51M|    }
 3998|  5.51M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.51M|{
 3797|  5.51M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.51M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.51M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.51M|    };
 3802|       |
 3803|  5.51M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 5.27M, False: 244k]
  ------------------
 3804|  5.27M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 831, False: 5.27M]
  ------------------
 3805|    831|            SCN_UNLIKELY_ATTR
 3806|    831|            return invalid_code_point;
 3807|    831|        }
 3808|  5.27M|        return static_cast<char32_t>(input[0]);
 3809|  5.27M|    }
 3810|       |
 3811|   244k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 216k, False: 27.3k]
  ------------------
 3812|   216k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 131, False: 216k]
  ------------------
 3813|    131|            SCN_UNLIKELY_ATTR
 3814|    131|            return invalid_code_point;
 3815|    131|        }
 3816|   216k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 50.7k, False: 166k]
  ------------------
 3817|  50.7k|            SCN_UNLIKELY_ATTR
 3818|  50.7k|            return invalid_code_point;
 3819|  50.7k|        }
 3820|       |
 3821|   166k|        char32_t cp{};
 3822|   166k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   166k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   166k|        return cp;
 3825|   216k|    }
 3826|       |
 3827|  27.3k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 12.4k, False: 14.9k]
  ------------------
 3828|  12.4k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 89, False: 12.3k]
  ------------------
 3829|     89|            SCN_UNLIKELY_ATTR
 3830|     89|            return invalid_code_point;
 3831|     89|        }
 3832|  12.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 5.27k, False: 7.06k]
  ------------------
 3833|  12.3k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 964, False: 6.09k]
  ------------------
 3834|  6.23k|            SCN_UNLIKELY_ATTR
 3835|  6.23k|            return invalid_code_point;
 3836|  6.23k|        }
 3837|       |
 3838|  6.09k|        char32_t cp{};
 3839|  6.09k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|  6.09k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|  6.09k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|  6.09k|        return cp;
 3843|  12.3k|    }
 3844|       |
 3845|  14.9k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 14.9k, False: 0]
  ------------------
 3846|  14.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 14.9k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  14.9k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 2.11k, False: 12.8k]
  ------------------
 3851|  2.11k|            SCN_UNLIKELY_ATTR
 3852|  2.11k|            return invalid_code_point;
 3853|  2.11k|        }
 3854|  12.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 1.86k, False: 10.9k]
  ------------------
 3855|  12.8k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 717, False: 10.2k]
  ------------------
 3856|  12.8k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 1.71k, False: 8.53k]
  ------------------
 3857|  4.29k|            SCN_UNLIKELY_ATTR
 3858|  4.29k|            return invalid_code_point;
 3859|  4.29k|        }
 3860|       |
 3861|  8.53k|        char32_t cp{};
 3862|  8.53k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  8.53k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  8.53k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  8.53k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  8.53k|        return cp;
 3867|  12.8k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   270k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   270k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   270k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  12.0M|{
 3670|  12.0M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  12.0M|                                          decltype(first), decltype(last)> &&
 3672|  12.0M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  12.0M|        return {first, last};
 3674|  12.0M|    }
 3675|  12.0M|    else {
 3676|  12.0M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  12.0M|                                       to_address(first), to_address(last)))};
 3678|  12.0M|    }
 3679|  12.0M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  36.5M|{
  322|  36.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  36.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  36.5M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  40.7M|{
  302|  40.7M|    return p;
  303|  40.7M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  17.8M|{
 3701|  17.8M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  17.8M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  17.8M|                      decltype(it)> &&
 3704|  17.8M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  17.8M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  17.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  17.8M|        return it;
 3707|  17.8M|    }
 3708|  17.8M|    else {
 3709|  17.8M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  17.8M|    }
 3711|  17.8M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   115k|    {
 2695|   115k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   115k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   115k|    {
 2676|   115k|        return decay_copy(t.begin());
 2677|   115k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|  22.4M|{
 1920|  22.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  22.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  22.4M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   327k|{
 8828|   327k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   327k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   327k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   327k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5356|  1.31M|{
 5357|  1.31M|    detail::check_scan_arg_types<Args...>();
 5358|  1.31M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.31M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5095|  1.62M|{
 5096|  1.62M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.62M|                  "Scan argument types must be default constructible");
 5098|  1.62M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.62M|                  "Scan argument types must be Destructible");
 5100|  1.62M|    static_assert(
 5101|  1.62M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.62M|        "Scan argument types must not be references");
 5103|  1.62M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5309|  1.31M|    {
 5310|  1.31M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.31M|    {
 5321|  1.31M|        return {detail::make_arg<
 5322|  1.31M|            kind, Context,
 5323|  1.31M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.31M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.31M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|  1.31M|{
 5131|  1.31M|    return make_value<Context>(value).ref_value;
 5132|  1.31M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5080|  1.44M|{
 5081|  1.44M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.44M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.44M|                                  needs_context_tag>) {
 5085|  1.44M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.44M|    }
 5087|  1.44M|    else {
 5088|  1.44M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.44M|            value, context_tag<Context>{}));
 5090|  1.44M|    }
 5091|  1.44M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4919|  1.44M|    {                                                                        \
 4920|  1.44M|        return val;                                                          \
 4921|  1.44M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5049|  1.62M|{
 5050|  1.62M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.62M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.62M|    constexpr bool scannable_char =
 5054|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.62M|    static_assert(scannable_char,
 5056|  1.62M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.62M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.62M|    constexpr bool scannable_const =
 5060|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.62M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.62M|    constexpr bool scannable_disabled =
 5064|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.62M|    static_assert(scannable_disabled,
 5066|  1.62M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.62M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.62M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.62M|    static_assert(
 5071|  1.62M|        scannable,
 5072|  1.62M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.62M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.62M|    return arg_value{arg};
 5076|  1.62M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4862|  1.62M|    {
 4863|  1.62M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  1.04M|{
 8615|  1.04M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  1.04M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|  1.04M|{
 8552|  1.04M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  1.04M|    auto result = vscan_impl(buffer, format, args);
 8555|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.8k, False: 989k]
  |  |  ------------------
  ------------------
 8556|  51.8k|        return unexpected(result.error());
 8557|  51.8k|    }
 8558|   989k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   989k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  1.04M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4680|  2.31M|{
 4681|  2.31M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.31M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.31M|                  "\n"
 4685|  2.31M|                  "Unsupported range type given as input to a scanning "
 4686|  2.31M|                  "function.\n"
 4687|  2.31M|                  "A range needs to have a character type (value type) "
 4688|  2.31M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.31M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.31M|                  "to be included.\n"
 4691|  2.31M|                  "See the scnlib documentation for more details.");
 4692|  2.31M|    static_assert(
 4693|  2.31M|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.31M|        "\n"
 4695|  2.31M|        "Unsupported range type given as input to a scanning "
 4696|  2.31M|        "function.\n"
 4697|  2.31M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.31M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.31M|        "not supported.");
 4700|  2.31M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.31M|                  "\n"
 4702|  2.31M|                  "Unsupported range type given as input to a scanning "
 4703|  2.31M|                  "function.\n"
 4704|  2.31M|                  "file_marker_found cannot be used as an "
 4705|  2.31M|                  "source range type to scn::scan.\n"
 4706|  2.31M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.31M|                  "and do not provide an explicit source range, "
 4708|  2.31M|                  "or use scn::scan with a FILE* directly.");
 4709|  2.31M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.31M|                  "\n"
 4711|  2.31M|                  "Unsupported range type given as input to a scanning "
 4712|  2.31M|                  "function.\n"
 4713|  2.31M|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.31M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.31M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.31M|                  "\n"
 4717|  2.31M|                  "Unsupported range type given as input to a scanning "
 4718|  2.31M|                  "function.\n"
 4719|  2.31M|                  "A range needs to model forward_range and have a valid "
 4720|  2.31M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.31M|                  "Examples of scannable ranges are std::string, "
 4722|  2.31M|                  "std::string_view, "
 4723|  2.31M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.31M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.31M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.31M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|  2.31M|{
 4620|  2.31M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|  2.31M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|  2.31M|    }
 4623|  2.31M|    else {
 4624|  2.31M|        return invalid_char_type{};
 4625|  2.31M|    }
 4626|  2.31M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  2.31M|    {
 2826|  2.31M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  2.31M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  2.31M|    {
 2807|  2.31M|        return t.data();
 2808|  2.31M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3201|  2.31M|    {
 3202|  2.31M|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 21.2k, False: 2.29M]
  ------------------
 3203|  2.31M|                   ? nullptr
 3204|  2.31M|                   : std::addressof(*ranges::begin(derived()));
 3205|  2.31M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  2.31M|    {
 2976|  2.31M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  2.31M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  2.31M|    {
 2949|  2.31M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  2.31M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|  12.8M|    {
 3310|  12.8M|        return m_iterator == m_sentinel;
 3311|  12.8M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3155|  4.60M|    {
 3156|  4.60M|        return static_cast<const D&>(*this);
 3157|  4.60M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  4.49M|    {
 2695|  4.49M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  4.49M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  4.49M|    {
 2676|  4.49M|        return decay_copy(t.begin());
 2677|  4.49M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  54.5M|    {
 3301|  54.5M|        return m_iterator;
 3302|  54.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|  2.31M|    {
 2901|  2.31M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  2.31M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  2.31M|    {
 2867|  2.31M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  2.31M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|  7.03M|{
 1920|  7.03M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  7.03M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|  12.8M|    {
 3317|  12.8M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  12.8M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|  16.9M|    {
 1569|  16.9M|        return has_value();
 1570|  16.9M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  33.5M|    {
  481|  33.5M|        return m_has_value;
  482|  33.5M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|  1.01M|    {
 1575|  1.01M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.01M|        return this->get_unexpected().error();
 1577|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.01M|    {
  464|  1.01M|        return m_unexpected;
  465|  1.01M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  7.86M|    {
  357|  7.86M|        return m_unexpected;
  358|  7.86M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  3.84M|    {
  343|  3.84M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.84M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  3.84M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   112k|    {
 1447|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   112k|    {
  443|   112k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  9.32M|    {
  352|  9.32M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  9.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  9.32M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.31M|    {
 1148|  2.31M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  2.20M|{
 5884|  2.20M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.20M|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.20M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.20M|    }
 5888|  2.20M|    else {
 5889|  2.20M|        auto it = ranges::begin(source);
 5890|  2.20M|        while (n > 0) {
 5891|  2.20M|            --n;
 5892|  2.20M|            ++it;
 5893|  2.20M|        }
 5894|  2.20M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.20M|    }
 5896|  2.20M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  13.2M|    {
 2695|  13.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  13.2M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  13.2M|    {
 2676|  13.2M|        return decay_copy(t.begin());
 2677|  13.2M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5870|  2.20M|{
 5871|  2.20M|    return ranges::end(source);
 5872|  2.20M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.20M|    {
 2752|  2.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.20M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.20M|    {
 2734|  2.20M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.20M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  27.4M|    {
 3305|  27.4M|        return m_sentinel;
 3306|  27.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  6.68M|    {
 1624|  6.68M|        return value();
 1625|  6.68M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  15.6M|    {
 1598|  15.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  15.6M|        return this->get_value();
 1600|  15.6M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  15.6M|    {
  447|  15.6M|        return m_value;
  448|  15.6M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.20M|    {
 1401|  2.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.20M|    {
  433|  2.20M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   655k|    {
 7936|   655k|        return m_str;
 7937|   655k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.31M|    {
 5387|  1.31M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5339|  1.31M|    {
 5340|  1.31M|        return m_argptrs;
 5341|  1.31M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|  4.16M|    {
 5439|  4.16M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   655k|{
 8781|   655k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 620k]
  |  |  ------------------
  ------------------
 8782|  34.5k|        return unexpected(result.error());
 8783|  34.5k|    }
 8784|   620k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   620k|    static_cast<    \
  |  |  929|   620k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   620k|    static_cast<    \
  |  |  929|   620k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   655k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|  2.31M|    {
 1569|  2.31M|        return has_value();
 1570|  2.31M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.62M|    {
  481|  4.62M|        return m_has_value;
  482|  4.62M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|   112k|    {
 1575|   112k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   112k|        return this->get_unexpected().error();
 1577|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   112k|    {
  464|   112k|        return m_unexpected;
  465|   112k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  37.4k|    {
 1447|  37.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  37.4k|    {
  443|  37.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   727k|    {
 1148|   727k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  1.97M|    {
 1624|  1.97M|        return value();
 1625|  1.97M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.20M|    {
 1598|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.20M|        return this->get_value();
 1600|  2.20M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.20M|    {
  447|  2.20M|        return m_value;
  448|  2.20M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5790|   689k|    {
 5791|   689k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|  2.20M|    {
 5642|  2.20M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5576|  1.39M|    {
 5577|  1.39M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   689k|    {
 1401|   689k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   689k|    {
  433|   689k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5334|  1.31M|    {
 5335|  1.31M|        return m_args;
 5336|  1.31M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.31M|    {
 2752|  2.31M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.31M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.31M|    {
 2734|  2.31M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.31M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|  21.8M|    {
 3287|  21.8M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|  4.16M|{
 7652|  4.16M|    return s;
 7653|  4.16M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|  4.16M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   655k|    {
 7932|   655k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|   727k|    {
 1569|   727k|        return has_value();
 1570|   727k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.41M|    {
  481|  1.41M|        return m_has_value;
  482|  1.41M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1643|   689k|    {
 1644|   689k|        return &value();
 1645|   689k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   689k|    {
 1598|   689k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   689k|        return this->get_value();
 1600|   689k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   689k|    {
  447|   689k|        return m_value;
  448|   689k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5658|  2.20M|    {
 5659|  2.20M|        return ranges::begin(m_range);
 5660|  2.20M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   327k|{
 8895|   327k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   327k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   327k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   327k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  1.04M|{
 8633|  1.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  1.04M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|  1.04M|{
 8568|  1.04M|#if !SCN_DISABLE_LOCALE
 8569|  1.04M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  1.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  1.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  1.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.8k, False: 989k]
  |  |  ------------------
  ------------------
 8576|  51.8k|        return unexpected(result.error());
 8577|  51.8k|    }
 8578|   989k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   989k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  1.04M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  71.8k|{
 8934|  71.8k|    T value;
 8935|  71.8k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  71.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  71.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  71.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  71.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  71.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 68.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.87k|    }                                                  \
  |  |  |  | 3642|  71.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  68.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  68.9k|    static_cast<    \
  |  |  929|  68.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  71.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|   138k|{
 5116|   138k|    check_scan_arg_types<T>();
 5117|       |
 5118|   138k|    basic_scan_arg<Context> arg;
 5119|   138k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   138k|    arg.m_value = make_value<Context>(value);
 5121|   138k|    return arg;
 5122|   138k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|  4.61M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|  5.13M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|   232k|{
 8646|   232k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|   232k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|   232k|{
 8592|   232k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|   232k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|   232k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.63k, False: 224k]
  |  |  ------------------
  ------------------
 8596|  8.63k|        return unexpected(result.error());
 8597|  8.63k|    }
 8598|   224k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|   232k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   224k|    {
 1634|   224k|        return std::move(value());
 1635|   224k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   354k|{
 8828|   354k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   354k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   354k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   354k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  1.41M|{
 5357|  1.41M|    detail::check_scan_arg_types<Args...>();
 5358|  1.41M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.41M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  1.74M|{
 5096|  1.74M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.74M|                  "Scan argument types must be default constructible");
 5098|  1.74M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.74M|                  "Scan argument types must be Destructible");
 5100|  1.74M|    static_assert(
 5101|  1.74M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.74M|        "Scan argument types must not be references");
 5103|  1.74M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  1.41M|    {
 5310|  1.41M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.41M|    {
 5321|  1.41M|        return {detail::make_arg<
 5322|  1.41M|            kind, Context,
 5323|  1.41M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.41M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.41M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  1.41M|{
 5131|  1.41M|    return make_value<Context>(value).ref_value;
 5132|  1.41M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  1.57M|{
 5081|  1.57M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.57M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.57M|                                  needs_context_tag>) {
 5085|  1.57M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.57M|    }
 5087|  1.57M|    else {
 5088|  1.57M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.57M|            value, context_tag<Context>{}));
 5090|  1.57M|    }
 5091|  1.57M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  1.57M|    {                                                                        \
 4920|  1.57M|        return val;                                                          \
 4921|  1.57M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  1.74M|{
 5050|  1.74M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.74M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.74M|    constexpr bool scannable_char =
 5054|  1.74M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.74M|    static_assert(scannable_char,
 5056|  1.74M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.74M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.74M|    constexpr bool scannable_const =
 5060|  1.74M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.74M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.74M|    constexpr bool scannable_disabled =
 5064|  1.74M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.74M|    static_assert(scannable_disabled,
 5066|  1.74M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.74M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.74M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.74M|    static_assert(
 5071|  1.74M|        scannable,
 5072|  1.74M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.74M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.74M|    return arg_value{arg};
 5076|  1.74M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  1.74M|    {
 4863|  1.74M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   708k|    {
 7936|   708k|        return m_str;
 7937|   708k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.41M|    {
 5387|  1.41M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  1.41M|    {
 5340|  1.41M|        return m_argptrs;
 5341|  1.41M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   708k|{
 8781|   708k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 673k]
  |  |  ------------------
  ------------------
 8782|  34.5k|        return unexpected(result.error());
 8783|  34.5k|    }
 8784|   673k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   673k|    static_cast<    \
  |  |  929|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   673k|    static_cast<    \
  |  |  929|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   708k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  37.4k|    {
 1447|  37.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  37.4k|    {
  443|  37.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   788k|    {
 1148|   788k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5790|   750k|    {
 5791|   750k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5576|  1.52M|    {
 5577|  1.52M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   750k|    {
 1401|   750k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   750k|    {
  433|   750k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  1.41M|    {
 5335|  1.41M|        return m_args;
 5336|  1.41M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   708k|    {
 7932|   708k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|   788k|    {
 1569|   788k|        return has_value();
 1570|   788k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.53M|    {
  481|  1.53M|        return m_has_value;
  482|  1.53M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1643|   750k|    {
 1644|   750k|        return &value();
 1645|   750k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   750k|    {
 1598|   750k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   750k|        return this->get_value();
 1600|   750k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   750k|    {
  447|   750k|        return m_value;
  448|   750k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   354k|{
 8895|   354k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   354k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   354k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   354k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  79.6k|{
 8934|  79.6k|    T value;
 8935|  79.6k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  79.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  79.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  79.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  79.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 76.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.87k|    }                                                  \
  |  |  |  | 3642|  79.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  76.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  76.7k|    static_cast<    \
  |  |  929|  76.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  76.7k|    static_cast<    \
  |  |  929|  76.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  79.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|   154k|{
 5116|   154k|    check_scan_arg_types<T>();
 5117|       |
 5118|   154k|    basic_scan_arg<Context> arg;
 5119|   154k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   154k|    arg.m_value = make_value<Context>(value);
 5121|   154k|    return arg;
 5122|   154k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   358k|{
 8828|   358k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   358k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   358k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5356|  1.43M|{
 5357|  1.43M|    detail::check_scan_arg_types<Args...>();
 5358|  1.43M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.43M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5095|  1.76M|{
 5096|  1.76M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.76M|                  "Scan argument types must be default constructible");
 5098|  1.76M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.76M|                  "Scan argument types must be Destructible");
 5100|  1.76M|    static_assert(
 5101|  1.76M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.76M|        "Scan argument types must not be references");
 5103|  1.76M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5309|  1.43M|    {
 5310|  1.43M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.43M|    {
 5321|  1.43M|        return {detail::make_arg<
 5322|  1.43M|            kind, Context,
 5323|  1.43M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.43M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.43M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|  1.43M|{
 5131|  1.43M|    return make_value<Context>(value).ref_value;
 5132|  1.43M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5080|  1.59M|{
 5081|  1.59M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.59M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.59M|                                  needs_context_tag>) {
 5085|  1.59M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.59M|    }
 5087|  1.59M|    else {
 5088|  1.59M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.59M|            value, context_tag<Context>{}));
 5090|  1.59M|    }
 5091|  1.59M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4919|  1.59M|    {                                                                        \
 4920|  1.59M|        return val;                                                          \
 4921|  1.59M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5049|  1.76M|{
 5050|  1.76M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.76M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.76M|    constexpr bool scannable_char =
 5054|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.76M|    static_assert(scannable_char,
 5056|  1.76M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.76M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.76M|    constexpr bool scannable_const =
 5060|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.76M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.76M|    constexpr bool scannable_disabled =
 5064|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.76M|    static_assert(scannable_disabled,
 5066|  1.76M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.76M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.76M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.76M|    static_assert(
 5071|  1.76M|        scannable,
 5072|  1.76M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.76M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.76M|    return arg_value{arg};
 5076|  1.76M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4862|  1.76M|    {
 4863|  1.76M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   717k|    {
 7936|   717k|        return m_str;
 7937|   717k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.43M|    {
 5387|  1.43M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5339|  1.43M|    {
 5340|  1.43M|        return m_argptrs;
 5341|  1.43M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   717k|{
 8781|   717k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 683k]
  |  |  ------------------
  ------------------
 8782|  34.5k|        return unexpected(result.error());
 8783|  34.5k|    }
 8784|   683k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   683k|    static_cast<    \
  |  |  929|   683k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   683k|    static_cast<    \
  |  |  929|   683k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   717k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  37.4k|    {
 1447|  37.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  37.4k|    {
  443|  37.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   799k|    {
 1148|   799k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5790|   761k|    {
 5791|   761k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5576|  1.54M|    {
 5577|  1.54M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   761k|    {
 1401|   761k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   761k|    {
  433|   761k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5334|  1.43M|    {
 5335|  1.43M|        return m_args;
 5336|  1.43M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   717k|    {
 7932|   717k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|   799k|    {
 1569|   799k|        return has_value();
 1570|   799k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.56M|    {
  481|  1.56M|        return m_has_value;
  482|  1.56M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1643|   761k|    {
 1644|   761k|        return &value();
 1645|   761k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   761k|    {
 1598|   761k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   761k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   761k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   761k|        return this->get_value();
 1600|   761k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   761k|    {
  447|   761k|        return m_value;
  448|   761k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   358k|{
 8895|   358k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   358k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   358k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  81.1k|{
 8934|  81.1k|    T value;
 8935|  81.1k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  81.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  81.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  81.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  81.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  81.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 78.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.87k|    }                                                  \
  |  |  |  | 3642|  81.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  78.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.2k|    static_cast<    \
  |  |  929|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.2k|    static_cast<    \
  |  |  929|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  81.1k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|   156k|{
 5116|   156k|    check_scan_arg_types<T>();
 5117|       |
 5118|   156k|    basic_scan_arg<Context> arg;
 5119|   156k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   156k|    arg.m_value = make_value<Context>(value);
 5121|   156k|    return arg;
 5122|   156k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   112k|    {
 2695|   112k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   112k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   112k|    {
 2676|   112k|        return decay_copy(t.begin());
 2677|   112k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1919|  40.7M|{
 1920|  40.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  40.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  40.7M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   327k|{
 8828|   327k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   327k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   327k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   327k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  1.03M|{
 8615|  1.03M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  1.03M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  1.03M|{
 8552|  1.03M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  1.03M|    auto result = vscan_impl(buffer, format, args);
 8555|  1.03M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.8k, False: 987k]
  |  |  ------------------
  ------------------
 8556|  51.8k|        return unexpected(result.error());
 8557|  51.8k|    }
 8558|   987k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  1.03M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4680|  2.29M|{
 4681|  2.29M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.29M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.29M|                  "\n"
 4685|  2.29M|                  "Unsupported range type given as input to a scanning "
 4686|  2.29M|                  "function.\n"
 4687|  2.29M|                  "A range needs to have a character type (value type) "
 4688|  2.29M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.29M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.29M|                  "to be included.\n"
 4691|  2.29M|                  "See the scnlib documentation for more details.");
 4692|  2.29M|    static_assert(
 4693|  2.29M|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.29M|        "\n"
 4695|  2.29M|        "Unsupported range type given as input to a scanning "
 4696|  2.29M|        "function.\n"
 4697|  2.29M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.29M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.29M|        "not supported.");
 4700|  2.29M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.29M|                  "\n"
 4702|  2.29M|                  "Unsupported range type given as input to a scanning "
 4703|  2.29M|                  "function.\n"
 4704|  2.29M|                  "file_marker_found cannot be used as an "
 4705|  2.29M|                  "source range type to scn::scan.\n"
 4706|  2.29M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.29M|                  "and do not provide an explicit source range, "
 4708|  2.29M|                  "or use scn::scan with a FILE* directly.");
 4709|  2.29M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.29M|                  "\n"
 4711|  2.29M|                  "Unsupported range type given as input to a scanning "
 4712|  2.29M|                  "function.\n"
 4713|  2.29M|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.29M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.29M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.29M|                  "\n"
 4717|  2.29M|                  "Unsupported range type given as input to a scanning "
 4718|  2.29M|                  "function.\n"
 4719|  2.29M|                  "A range needs to model forward_range and have a valid "
 4720|  2.29M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.29M|                  "Examples of scannable ranges are std::string, "
 4722|  2.29M|                  "std::string_view, "
 4723|  2.29M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.29M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.29M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.29M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|  2.29M|{
 4651|  2.29M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|  2.29M|        return file_marker_found{};
 4653|  2.29M|    }
 4654|  2.29M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|  2.29M|        if constexpr (ranges::range<Range>) {
 4656|  2.29M|            return insufficient_range{};
 4657|  2.29M|        }
 4658|  2.29M|        else {
 4659|  2.29M|            return invalid_input_range{};
 4660|  2.29M|        }
 4661|  2.29M|    }
 4662|  2.29M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|  2.29M|        return invalid_char_type{};
 4664|  2.29M|    }
 4665|  2.29M|    else {
 4666|  2.29M|        return make_forward_scan_buffer(r);
 4667|  2.29M|    }
 4668|  2.29M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4484|  2.29M|{
 4485|  2.29M|    return basic_scan_forward_buffer_impl(range);
 4486|  2.29M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|  2.29M|    {
 4378|  2.29M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4352|  2.29M|    {
 4353|  2.29M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4121|  2.29M|    {
 4122|  2.29M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4036|  2.29M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  4.48M|    {
 2695|  4.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  4.48M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  4.48M|    {
 2676|  4.48M|        return decay_copy(t.begin());
 2677|  4.48M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3300|  6.66M|    {
 3301|  6.66M|        return m_iterator;
 3302|  6.66M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4381|  29.5M|    {
 4382|  29.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 407k, False: 29.1M]
  ------------------
 4383|   407k|            return false;
 4384|   407k|        }
 4385|  29.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 26.8M, False: 2.27M]
  ------------------
 4386|  26.8M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|  26.8M|                                          this->m_current_view.begin(),
 4388|  26.8M|                                          this->m_current_view.end());
 4389|  26.8M|        }
 4390|  29.1M|        m_latest = *m_cursor;
 4391|  29.1M|        ++m_cursor;
 4392|  29.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  29.1M|        return true;
 4394|  29.5M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  29.5M|    {
 2752|  29.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  29.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  29.5M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  29.5M|    {
 2734|  29.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  29.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  29.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3304|  31.7M|    {
 3305|  31.7M|        return m_sentinel;
 3306|  31.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4041|  2.29M|    {
 4042|  2.29M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|  2.29M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|   112k|    {
 1447|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   112k|    {
  443|   112k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.29M|    {
 1148|  2.29M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  2.18M|{
 5884|  2.18M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.18M|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.18M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.18M|    }
 5888|  2.18M|    else {
 5889|  2.18M|        auto it = ranges::begin(source);
 5890|  2.18M|        while (n > 0) {
 5891|  2.18M|            --n;
 5892|  2.18M|            ++it;
 5893|  2.18M|        }
 5894|  2.18M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.18M|    }
 5896|  2.18M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.18M|    {
 2695|  2.18M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.18M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.18M|    {
 2676|  2.18M|        return decay_copy(t.begin());
 2677|  2.18M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5870|  2.18M|{
 5871|  2.18M|    return ranges::end(source);
 5872|  2.18M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.18M|    {
 2752|  2.18M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.18M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.18M|    {
 2734|  2.18M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.18M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  2.18M|    {
 1401|  2.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.18M|    {
  433|  2.18M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   654k|    {
 7936|   654k|        return m_str;
 7937|   654k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   654k|{
 8781|   654k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   654k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 620k]
  |  |  ------------------
  ------------------
 8782|  34.5k|        return unexpected(result.error());
 8783|  34.5k|    }
 8784|   620k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   620k|    static_cast<    \
  |  |  929|   620k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   620k|    static_cast<    \
  |  |  929|   620k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   654k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1568|  2.29M|    {
 1569|  2.29M|        return has_value();
 1570|  2.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.59M|    {
  481|  4.59M|        return m_has_value;
  482|  4.59M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1574|   112k|    {
 1575|   112k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   112k|        return this->get_unexpected().error();
 1577|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   112k|    {
  464|   112k|        return m_unexpected;
  465|   112k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  37.4k|    {
 1447|  37.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  37.4k|    {
  443|  37.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   721k|    {
 1148|   721k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  1.97M|    {
 1624|  1.97M|        return value();
 1625|  1.97M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  2.18M|    {
 1598|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.18M|        return this->get_value();
 1600|  2.18M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.18M|    {
  447|  2.18M|        return m_value;
  448|  2.18M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5790|   684k|    {
 5791|   684k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5641|  2.18M|    {
 5642|  2.18M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   684k|    {
 1401|   684k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   684k|    {
  433|   684k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.29M|    {
 2752|  2.29M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.29M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.29M|    {
 2734|  2.29M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.29M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3286|  4.48M|    {
 3287|  4.48M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   654k|    {
 7932|   654k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|   721k|    {
 1569|   721k|        return has_value();
 1570|   721k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.40M|    {
  481|  1.40M|        return m_has_value;
  482|  1.40M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1643|   684k|    {
 1644|   684k|        return &value();
 1645|   684k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   684k|    {
 1598|   684k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   684k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   684k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   684k|        return this->get_value();
 1600|   684k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   684k|    {
  447|   684k|        return m_value;
  448|   684k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5658|  2.18M|    {
 5659|  2.18M|        return ranges::begin(m_range);
 5660|  2.18M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   327k|{
 8895|   327k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   327k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   327k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   327k|    static_cast<    \
  |  |  929|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   327k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  1.03M|{
 8633|  1.03M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  1.03M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  1.03M|{
 8568|  1.03M|#if !SCN_DISABLE_LOCALE
 8569|  1.03M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  1.03M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  1.03M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  1.03M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  1.03M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.8k, False: 987k]
  |  |  ------------------
  ------------------
 8576|  51.8k|        return unexpected(result.error());
 8577|  51.8k|    }
 8578|   987k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  1.03M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  66.8k|{
 8934|  66.8k|    T value;
 8935|  66.8k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  66.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  66.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  66.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  66.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 64.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.87k|    }                                                  \
  |  |  |  | 3642|  66.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  64.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  64.0k|    static_cast<    \
  |  |  929|  64.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  64.0k|    static_cast<    \
  |  |  929|  64.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  66.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|   216k|{
 8646|   216k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|   216k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|   216k|{
 8592|   216k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|   216k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|   216k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.63k, False: 208k]
  |  |  ------------------
  ------------------
 8596|  8.63k|        return unexpected(result.error());
 8597|  8.63k|    }
 8598|   208k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|   216k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|   208k|    {
 1634|   208k|        return std::move(value());
 1635|   208k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   354k|{
 8828|   354k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   354k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   354k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   354k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   708k|    {
 7936|   708k|        return m_str;
 7937|   708k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   708k|{
 8781|   708k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 673k]
  |  |  ------------------
  ------------------
 8782|  34.5k|        return unexpected(result.error());
 8783|  34.5k|    }
 8784|   673k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   673k|    static_cast<    \
  |  |  929|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   673k|    static_cast<    \
  |  |  929|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   708k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  37.4k|    {
 1447|  37.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  37.4k|    {
  443|  37.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   782k|    {
 1148|   782k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5790|   744k|    {
 5791|   744k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   744k|    {
 1401|   744k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   744k|    {
  433|   744k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   708k|    {
 7932|   708k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|   782k|    {
 1569|   782k|        return has_value();
 1570|   782k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.52M|    {
  481|  1.52M|        return m_has_value;
  482|  1.52M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1643|   744k|    {
 1644|   744k|        return &value();
 1645|   744k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   744k|    {
 1598|   744k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   744k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   744k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   744k|        return this->get_value();
 1600|   744k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   744k|    {
  447|   744k|        return m_value;
  448|   744k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   354k|{
 8895|   354k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   354k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   354k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   354k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  74.3k|{
 8934|  74.3k|    T value;
 8935|  74.3k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  74.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  74.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  74.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  74.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.87k|    }                                                  \
  |  |  |  | 3642|  74.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  71.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.4k|    static_cast<    \
  |  |  929|  71.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.4k|    static_cast<    \
  |  |  929|  71.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  74.3k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   358k|{
 8828|   358k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   358k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   358k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   716k|    {
 7936|   716k|        return m_str;
 7937|   716k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   716k|{
 8781|   716k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 682k]
  |  |  ------------------
  ------------------
 8782|  34.5k|        return unexpected(result.error());
 8783|  34.5k|    }
 8784|   682k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   682k|    static_cast<    \
  |  |  929|   682k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   682k|    static_cast<    \
  |  |  929|   682k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   716k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  37.4k|    {
 1447|  37.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  37.4k|    {
  443|  37.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   791k|    {
 1148|   791k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5790|   754k|    {
 5791|   754k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   754k|    {
 1401|   754k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   754k|    {
  433|   754k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   716k|    {
 7932|   716k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|   791k|    {
 1569|   791k|        return has_value();
 1570|   791k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.54M|    {
  481|  1.54M|        return m_has_value;
  482|  1.54M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1643|   754k|    {
 1644|   754k|        return &value();
 1645|   754k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   754k|    {
 1598|   754k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   754k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   754k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   754k|        return this->get_value();
 1600|   754k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   754k|    {
  447|   754k|        return m_value;
  448|   754k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   358k|{
 8895|   358k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   358k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   358k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  75.3k|{
 8934|  75.3k|    T value;
 8935|  75.3k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  75.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  75.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  75.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  75.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.87k|    }                                                  \
  |  |  |  | 3642|  75.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  72.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  72.5k|    static_cast<    \
  |  |  929|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  72.5k|    static_cast<    \
  |  |  929|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  75.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   230k|    {
 2695|   230k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   230k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   230k|    {
 2676|   230k|        return decay_copy(t.begin());
 2677|   230k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|  1.14M|{
 1920|  1.14M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.14M|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5356|   160k|{
 5357|   160k|    detail::check_scan_arg_types<Args...>();
 5358|   160k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   160k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5309|   160k|    {
 5310|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   160k|    {
 5321|   160k|        return {detail::make_arg<
 5322|   160k|            kind, Context,
 5323|   160k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   160k|                                 typename Context::char_type>::value>(args)...};
 5325|   160k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|   160k|{
 5131|   160k|    return make_value<Context>(value).ref_value;
 5132|   160k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5080|   174k|{
 5081|   174k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   174k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   174k|                                  needs_context_tag>) {
 5085|   174k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   174k|    }
 5087|   174k|    else {
 5088|   174k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   174k|            value, context_tag<Context>{}));
 5090|   174k|    }
 5091|   174k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4919|   174k|    {                                                                        \
 4920|   174k|        return val;                                                          \
 4921|   174k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|   120k|{
 8552|   120k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   120k|    auto result = vscan_impl(buffer, format, args);
 8555|   120k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 16.9k]
  |  |  ------------------
  ------------------
 8556|   103k|        return unexpected(result.error());
 8557|   103k|    }
 8558|  16.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   120k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4680|   261k|{
 4681|   261k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   261k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   261k|                  "\n"
 4685|   261k|                  "Unsupported range type given as input to a scanning "
 4686|   261k|                  "function.\n"
 4687|   261k|                  "A range needs to have a character type (value type) "
 4688|   261k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   261k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   261k|                  "to be included.\n"
 4691|   261k|                  "See the scnlib documentation for more details.");
 4692|   261k|    static_assert(
 4693|   261k|        !std::is_same_v<T, custom_char_traits>,
 4694|   261k|        "\n"
 4695|   261k|        "Unsupported range type given as input to a scanning "
 4696|   261k|        "function.\n"
 4697|   261k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   261k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   261k|        "not supported.");
 4700|   261k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   261k|                  "\n"
 4702|   261k|                  "Unsupported range type given as input to a scanning "
 4703|   261k|                  "function.\n"
 4704|   261k|                  "file_marker_found cannot be used as an "
 4705|   261k|                  "source range type to scn::scan.\n"
 4706|   261k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   261k|                  "and do not provide an explicit source range, "
 4708|   261k|                  "or use scn::scan with a FILE* directly.");
 4709|   261k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   261k|                  "\n"
 4711|   261k|                  "Unsupported range type given as input to a scanning "
 4712|   261k|                  "function.\n"
 4713|   261k|                  "In order to be scannable, a range needs to satisfy "
 4714|   261k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   261k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   261k|                  "\n"
 4717|   261k|                  "Unsupported range type given as input to a scanning "
 4718|   261k|                  "function.\n"
 4719|   261k|                  "A range needs to model forward_range and have a valid "
 4720|   261k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   261k|                  "Examples of scannable ranges are std::string, "
 4722|   261k|                  "std::string_view, "
 4723|   261k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   261k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   261k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   261k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|   261k|{
 4620|   261k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|   261k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|   261k|    }
 4623|   261k|    else {
 4624|   261k|        return invalid_char_type{};
 4625|   261k|    }
 4626|   261k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   261k|    {
 2826|   261k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   261k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   261k|    {
 2807|   261k|        return t.data();
 2808|   261k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3201|   261k|    {
 3202|   261k|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 366, False: 261k]
  ------------------
 3203|   261k|                   ? nullptr
 3204|   261k|                   : std::addressof(*ranges::begin(derived()));
 3205|   261k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   261k|    {
 2976|   261k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   261k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   261k|    {
 2949|   261k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   261k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|   418k|    {
 3310|   418k|        return m_iterator == m_sentinel;
 3311|   418k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3155|   523k|    {
 3156|   523k|        return static_cast<const D&>(*this);
 3157|   523k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   298k|    {
 2695|   298k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   298k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   298k|    {
 2676|   298k|        return decay_copy(t.begin());
 2677|   298k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|  6.58M|    {
 3301|  6.58M|        return m_iterator;
 3302|  6.58M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|   261k|    {
 2901|   261k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|   261k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|   261k|    {
 2867|   261k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|   261k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  1.08M|    {
 3317|  1.08M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  1.08M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   224k|    {
 1447|   224k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   224k|    {
  443|   224k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   261k|    {
 1148|   261k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  37.3k|{
 5884|  37.3k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  37.3k|                      ranges::iterator_t<SourceRange>>) {
 5886|  37.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  37.3k|    }
 5888|  37.3k|    else {
 5889|  37.3k|        auto it = ranges::begin(source);
 5890|  37.3k|        while (n > 0) {
 5891|  37.3k|            --n;
 5892|  37.3k|            ++it;
 5893|  37.3k|        }
 5894|  37.3k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  37.3k|    }
 5896|  37.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   310k|    {
 2695|   310k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   310k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   310k|    {
 2676|   310k|        return decay_copy(t.begin());
 2677|   310k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5870|  37.3k|{
 5871|  37.3k|    return ranges::end(source);
 5872|  37.3k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  37.3k|    {
 2752|  37.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  37.3k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  37.3k|    {
 2734|  37.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  37.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|  3.30M|    {
 3305|  3.30M|        return m_sentinel;
 3306|  3.30M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  37.3k|    {
 1401|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  37.3k|    {
  433|  37.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  80.2k|    {
 7936|  80.2k|        return m_str;
 7937|  80.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   160k|    {
 5387|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5339|   160k|    {
 5340|   160k|        return m_argptrs;
 5341|   160k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|   482k|    {
 5439|   482k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  80.2k|{
 8781|  80.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.0k, False: 11.2k]
  |  |  ------------------
  ------------------
 8782|  69.0k|        return unexpected(result.error());
 8783|  69.0k|    }
 8784|  11.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.2k|    static_cast<    \
  |  |  929|  11.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.2k|    static_cast<    \
  |  |  929|  11.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  80.2k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|   261k|    {
 1569|   261k|        return has_value();
 1570|   261k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   523k|    {
  481|   523k|        return m_has_value;
  482|   523k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|   224k|    {
 1575|   224k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   224k|        return this->get_unexpected().error();
 1577|   224k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   224k|    {
  464|   224k|        return m_unexpected;
  465|   224k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  74.8k|    {
 1447|  74.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  74.8k|    {
  443|  74.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  87.1k|    {
 1148|  87.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  33.9k|    {
 1624|  33.9k|        return value();
 1625|  33.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  37.3k|    {
 1598|  37.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  37.3k|        return this->get_value();
 1600|  37.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  37.3k|    {
  447|  37.3k|        return m_value;
  448|  37.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5790|  12.3k|    {
 5791|  12.3k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|  37.3k|    {
 5642|  37.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  12.3k|    {
 1401|  12.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  12.3k|    {
  433|  12.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5334|   160k|    {
 5335|   160k|        return m_args;
 5336|   160k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   267k|    {
 2752|   267k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   267k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   267k|    {
 2734|   267k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   267k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|  2.32M|    {
 3287|  2.32M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|   482k|{
 7657|   482k|    return s;
 7658|   482k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|   482k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  80.2k|    {
 7932|  80.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  87.1k|    {
 1569|  87.1k|        return has_value();
 1570|  87.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  99.4k|    {
  481|  99.4k|        return m_has_value;
  482|  99.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1643|  12.3k|    {
 1644|  12.3k|        return &value();
 1645|  12.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  12.3k|    {
 1598|  12.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.3k|        return this->get_value();
 1600|  12.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  12.3k|    {
  447|  12.3k|        return m_value;
  448|  12.3k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5658|  37.3k|    {
 5659|  37.3k|        return ranges::begin(m_range);
 5660|  37.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|   120k|{
 8568|   120k|#if !SCN_DISABLE_LOCALE
 8569|   120k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   120k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   120k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   120k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   120k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 16.9k]
  |  |  ------------------
  ------------------
 8576|   103k|        return unexpected(result.error());
 8577|   103k|    }
 8578|  16.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   120k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|  13.7k|{
 5116|  13.7k|    check_scan_arg_types<T>();
 5117|       |
 5118|  13.7k|    basic_scan_arg<Context> arg;
 5119|  13.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  13.7k|    arg.m_value = make_value<Context>(value);
 5121|  13.7k|    return arg;
 5122|  13.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|   523k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  20.6k|{
 8592|  20.6k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  20.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  20.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 3.35k]
  |  |  ------------------
  ------------------
 8596|  17.2k|        return unexpected(result.error());
 8597|  17.2k|    }
 8598|  3.35k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  20.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.35k|    {
 1634|  3.35k|        return std::move(value());
 1635|  3.35k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|   160k|{
 5357|   160k|    detail::check_scan_arg_types<Args...>();
 5358|   160k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   160k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|   160k|    {
 5310|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   160k|    {
 5321|   160k|        return {detail::make_arg<
 5322|   160k|            kind, Context,
 5323|   160k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   160k|                                 typename Context::char_type>::value>(args)...};
 5325|   160k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|   160k|{
 5131|   160k|    return make_value<Context>(value).ref_value;
 5132|   160k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|   174k|{
 5081|   174k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   174k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   174k|                                  needs_context_tag>) {
 5085|   174k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   174k|    }
 5087|   174k|    else {
 5088|   174k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   174k|            value, context_tag<Context>{}));
 5090|   174k|    }
 5091|   174k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|   174k|    {                                                                        \
 4920|   174k|        return val;                                                          \
 4921|   174k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  80.3k|    {
 7936|  80.3k|        return m_str;
 7937|  80.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   160k|    {
 5387|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|   160k|    {
 5340|   160k|        return m_argptrs;
 5341|   160k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  80.3k|{
 8781|  80.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.0k, False: 11.3k]
  |  |  ------------------
  ------------------
 8782|  69.0k|        return unexpected(result.error());
 8783|  69.0k|    }
 8784|  11.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.3k|    static_cast<    \
  |  |  929|  11.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.3k|    static_cast<    \
  |  |  929|  11.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  80.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  74.8k|    {
 1447|  74.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  74.8k|    {
  443|  74.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  87.2k|    {
 1148|  87.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5790|  12.4k|    {
 5791|  12.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  12.4k|    {
 1401|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  12.4k|    {
  433|  12.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|   160k|    {
 5335|   160k|        return m_args;
 5336|   160k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  80.3k|    {
 7932|  80.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  87.2k|    {
 1569|  87.2k|        return has_value();
 1570|  87.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  99.7k|    {
  481|  99.7k|        return m_has_value;
  482|  99.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1643|  12.4k|    {
 1644|  12.4k|        return &value();
 1645|  12.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  12.4k|    {
 1598|  12.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.4k|        return this->get_value();
 1600|  12.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  12.4k|    {
  447|  12.4k|        return m_value;
  448|  12.4k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|  13.7k|{
 5116|  13.7k|    check_scan_arg_types<T>();
 5117|       |
 5118|  13.7k|    basic_scan_arg<Context> arg;
 5119|  13.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  13.7k|    arg.m_value = make_value<Context>(value);
 5121|  13.7k|    return arg;
 5122|  13.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5356|   160k|{
 5357|   160k|    detail::check_scan_arg_types<Args...>();
 5358|   160k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   160k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5309|   160k|    {
 5310|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   160k|    {
 5321|   160k|        return {detail::make_arg<
 5322|   160k|            kind, Context,
 5323|   160k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   160k|                                 typename Context::char_type>::value>(args)...};
 5325|   160k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|   160k|{
 5131|   160k|    return make_value<Context>(value).ref_value;
 5132|   160k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5080|   174k|{
 5081|   174k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   174k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   174k|                                  needs_context_tag>) {
 5085|   174k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   174k|    }
 5087|   174k|    else {
 5088|   174k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   174k|            value, context_tag<Context>{}));
 5090|   174k|    }
 5091|   174k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4919|   174k|    {                                                                        \
 4920|   174k|        return val;                                                          \
 4921|   174k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  80.5k|    {
 7936|  80.5k|        return m_str;
 7937|  80.5k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   160k|    {
 5387|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5339|   160k|    {
 5340|   160k|        return m_argptrs;
 5341|   160k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  80.5k|{
 8781|  80.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.0k, False: 11.4k]
  |  |  ------------------
  ------------------
 8782|  69.0k|        return unexpected(result.error());
 8783|  69.0k|    }
 8784|  11.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  80.5k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  74.8k|    {
 1447|  74.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  74.8k|    {
  443|  74.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  87.4k|    {
 1148|  87.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5790|  12.5k|    {
 5791|  12.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  12.5k|    {
 1401|  12.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  12.5k|    {
  433|  12.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5334|   160k|    {
 5335|   160k|        return m_args;
 5336|   160k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  80.5k|    {
 7932|  80.5k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  87.4k|    {
 1569|  87.4k|        return has_value();
 1570|  87.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  99.9k|    {
  481|  99.9k|        return m_has_value;
  482|  99.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1643|  12.5k|    {
 1644|  12.5k|        return &value();
 1645|  12.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  12.5k|    {
 1598|  12.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.5k|        return this->get_value();
 1600|  12.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  12.5k|    {
  447|  12.5k|        return m_value;
  448|  12.5k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|  13.7k|{
 5116|  13.7k|    check_scan_arg_types<T>();
 5117|       |
 5118|  13.7k|    basic_scan_arg<Context> arg;
 5119|  13.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  13.7k|    arg.m_value = make_value<Context>(value);
 5121|  13.7k|    return arg;
 5122|  13.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   224k|    {
 2695|   224k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   224k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   224k|    {
 2676|   224k|        return decay_copy(t.begin());
 2677|   224k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1919|  2.02M|{
 1920|  2.02M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.02M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|   120k|{
 8552|   120k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   120k|    auto result = vscan_impl(buffer, format, args);
 8555|   120k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 16.9k]
  |  |  ------------------
  ------------------
 8556|   103k|        return unexpected(result.error());
 8557|   103k|    }
 8558|  16.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   120k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4680|   261k|{
 4681|   261k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   261k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   261k|                  "\n"
 4685|   261k|                  "Unsupported range type given as input to a scanning "
 4686|   261k|                  "function.\n"
 4687|   261k|                  "A range needs to have a character type (value type) "
 4688|   261k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   261k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   261k|                  "to be included.\n"
 4691|   261k|                  "See the scnlib documentation for more details.");
 4692|   261k|    static_assert(
 4693|   261k|        !std::is_same_v<T, custom_char_traits>,
 4694|   261k|        "\n"
 4695|   261k|        "Unsupported range type given as input to a scanning "
 4696|   261k|        "function.\n"
 4697|   261k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   261k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   261k|        "not supported.");
 4700|   261k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   261k|                  "\n"
 4702|   261k|                  "Unsupported range type given as input to a scanning "
 4703|   261k|                  "function.\n"
 4704|   261k|                  "file_marker_found cannot be used as an "
 4705|   261k|                  "source range type to scn::scan.\n"
 4706|   261k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   261k|                  "and do not provide an explicit source range, "
 4708|   261k|                  "or use scn::scan with a FILE* directly.");
 4709|   261k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   261k|                  "\n"
 4711|   261k|                  "Unsupported range type given as input to a scanning "
 4712|   261k|                  "function.\n"
 4713|   261k|                  "In order to be scannable, a range needs to satisfy "
 4714|   261k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   261k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   261k|                  "\n"
 4717|   261k|                  "Unsupported range type given as input to a scanning "
 4718|   261k|                  "function.\n"
 4719|   261k|                  "A range needs to model forward_range and have a valid "
 4720|   261k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   261k|                  "Examples of scannable ranges are std::string, "
 4722|   261k|                  "std::string_view, "
 4723|   261k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   261k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   261k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   261k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|   261k|{
 4651|   261k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|   261k|        return file_marker_found{};
 4653|   261k|    }
 4654|   261k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|   261k|        if constexpr (ranges::range<Range>) {
 4656|   261k|            return insufficient_range{};
 4657|   261k|        }
 4658|   261k|        else {
 4659|   261k|            return invalid_input_range{};
 4660|   261k|        }
 4661|   261k|    }
 4662|   261k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|   261k|        return invalid_char_type{};
 4664|   261k|    }
 4665|   261k|    else {
 4666|   261k|        return make_forward_scan_buffer(r);
 4667|   261k|    }
 4668|   261k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4484|   261k|{
 4485|   261k|    return basic_scan_forward_buffer_impl(range);
 4486|   261k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|   261k|    {
 4378|   261k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4352|   261k|    {
 4353|   261k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4121|   261k|    {
 4122|   261k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4036|   261k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   298k|    {
 2695|   298k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   298k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   298k|    {
 2676|   298k|        return decay_copy(t.begin());
 2677|   298k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3300|   336k|    {
 3301|   336k|        return m_iterator;
 3302|   336k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4381|  1.16M|    {
 4382|  1.16M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 142k, False: 1.01M]
  ------------------
 4383|   142k|            return false;
 4384|   142k|        }
 4385|  1.01M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 757k, False: 261k]
  ------------------
 4386|   757k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|   757k|                                          this->m_current_view.begin(),
 4388|   757k|                                          this->m_current_view.end());
 4389|   757k|        }
 4390|  1.01M|        m_latest = *m_cursor;
 4391|  1.01M|        ++m_cursor;
 4392|  1.01M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  1.01M|        return true;
 4394|  1.16M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  1.16M|    {
 2752|  1.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  1.16M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  1.16M|    {
 2734|  1.16M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  1.16M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3304|  1.19M|    {
 3305|  1.19M|        return m_sentinel;
 3306|  1.19M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4041|   261k|    {
 4042|   261k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   261k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|   261k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|   224k|    {
 1447|   224k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   224k|    {
  443|   224k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   261k|    {
 1148|   261k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  37.2k|{
 5884|  37.2k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  37.2k|                      ranges::iterator_t<SourceRange>>) {
 5886|  37.2k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  37.2k|    }
 5888|  37.2k|    else {
 5889|  37.2k|        auto it = ranges::begin(source);
 5890|  37.2k|        while (n > 0) {
 5891|  37.2k|            --n;
 5892|  37.2k|            ++it;
 5893|  37.2k|        }
 5894|  37.2k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  37.2k|    }
 5896|  37.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  37.2k|    {
 2695|  37.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  37.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  37.2k|    {
 2676|  37.2k|        return decay_copy(t.begin());
 2677|  37.2k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5870|  37.2k|{
 5871|  37.2k|    return ranges::end(source);
 5872|  37.2k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  37.2k|    {
 2752|  37.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  37.2k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  37.2k|    {
 2734|  37.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  37.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  37.2k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  37.2k|    {
 1401|  37.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  37.2k|    {
  433|  37.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  80.2k|    {
 7936|  80.2k|        return m_str;
 7937|  80.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  80.2k|{
 8781|  80.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.0k, False: 11.1k]
  |  |  ------------------
  ------------------
 8782|  69.0k|        return unexpected(result.error());
 8783|  69.0k|    }
 8784|  11.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.1k|    static_cast<    \
  |  |  929|  11.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.1k|    static_cast<    \
  |  |  929|  11.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  80.2k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1568|   261k|    {
 1569|   261k|        return has_value();
 1570|   261k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   523k|    {
  481|   523k|        return m_has_value;
  482|   523k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1574|   224k|    {
 1575|   224k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   224k|        return this->get_unexpected().error();
 1577|   224k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   224k|    {
  464|   224k|        return m_unexpected;
  465|   224k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  74.8k|    {
 1447|  74.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  74.8k|    {
  443|  74.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  87.1k|    {
 1148|  87.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  33.8k|    {
 1624|  33.8k|        return value();
 1625|  33.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  37.2k|    {
 1598|  37.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  37.2k|        return this->get_value();
 1600|  37.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  37.2k|    {
  447|  37.2k|        return m_value;
  448|  37.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5790|  12.2k|    {
 5791|  12.2k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5641|  37.2k|    {
 5642|  37.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  12.2k|    {
 1401|  12.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  12.2k|    {
  433|  12.2k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   261k|    {
 2752|   261k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   261k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   261k|    {
 2734|   261k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   261k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3286|   298k|    {
 3287|   298k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  80.2k|    {
 7932|  80.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  87.1k|    {
 1569|  87.1k|        return has_value();
 1570|  87.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  99.4k|    {
  481|  99.4k|        return m_has_value;
  482|  99.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1643|  12.2k|    {
 1644|  12.2k|        return &value();
 1645|  12.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  12.2k|    {
 1598|  12.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.2k|        return this->get_value();
 1600|  12.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  12.2k|    {
  447|  12.2k|        return m_value;
  448|  12.2k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5658|  37.2k|    {
 5659|  37.2k|        return ranges::begin(m_range);
 5660|  37.2k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|   120k|{
 8568|   120k|#if !SCN_DISABLE_LOCALE
 8569|   120k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   120k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   120k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   120k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   120k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 16.9k]
  |  |  ------------------
  ------------------
 8576|   103k|        return unexpected(result.error());
 8577|   103k|    }
 8578|  16.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   120k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  20.6k|{
 8592|  20.6k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  20.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  20.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 3.33k]
  |  |  ------------------
  ------------------
 8596|  17.2k|        return unexpected(result.error());
 8597|  17.2k|    }
 8598|  3.33k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  20.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  3.33k|    {
 1634|  3.33k|        return std::move(value());
 1635|  3.33k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  80.3k|    {
 7936|  80.3k|        return m_str;
 7937|  80.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  80.3k|{
 8781|  80.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.0k, False: 11.2k]
  |  |  ------------------
  ------------------
 8782|  69.0k|        return unexpected(result.error());
 8783|  69.0k|    }
 8784|  11.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.2k|    static_cast<    \
  |  |  929|  11.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.2k|    static_cast<    \
  |  |  929|  11.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  80.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  74.8k|    {
 1447|  74.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  74.8k|    {
  443|  74.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  87.2k|    {
 1148|  87.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5790|  12.4k|    {
 5791|  12.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  12.4k|    {
 1401|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  12.4k|    {
  433|  12.4k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  80.3k|    {
 7932|  80.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  87.2k|    {
 1569|  87.2k|        return has_value();
 1570|  87.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  99.6k|    {
  481|  99.6k|        return m_has_value;
  482|  99.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1643|  12.4k|    {
 1644|  12.4k|        return &value();
 1645|  12.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  12.4k|    {
 1598|  12.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.4k|        return this->get_value();
 1600|  12.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  12.4k|    {
  447|  12.4k|        return m_value;
  448|  12.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  80.4k|    {
 7936|  80.4k|        return m_str;
 7937|  80.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  80.4k|{
 8781|  80.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.0k, False: 11.4k]
  |  |  ------------------
  ------------------
 8782|  69.0k|        return unexpected(result.error());
 8783|  69.0k|    }
 8784|  11.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  11.4k|    static_cast<    \
  |  |  929|  11.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  80.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  74.8k|    {
 1447|  74.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  74.8k|    {
  443|  74.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  87.3k|    {
 1148|  87.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5790|  12.5k|    {
 5791|  12.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  12.5k|    {
 1401|  12.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  12.5k|    {
  433|  12.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  80.4k|    {
 7932|  80.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  87.3k|    {
 1569|  87.3k|        return has_value();
 1570|  87.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  99.8k|    {
  481|  99.8k|        return m_has_value;
  482|  99.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1643|  12.5k|    {
 1644|  12.5k|        return &value();
 1645|  12.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  12.5k|    {
 1598|  12.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.5k|        return this->get_value();
 1600|  12.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  12.5k|    {
  447|  12.5k|        return m_value;
  448|  12.5k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|  5.49M|    {
 3539|  5.49M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.49M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|  5.49M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  23.6M|    {
 3545|  23.6M|        return m_code == good;
 3546|  23.6M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|   518k|    {
 3556|   518k|        return m_code;
 3557|   518k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|   102M|    {
 3301|   102M|        return m_iterator;
 3302|   102M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  8.52M|    {
 3301|  8.52M|        return m_iterator;
 3302|  8.52M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  3.66M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|  1.02M|    {
 6233|  1.02M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.02M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|  1.02M|            m_specs.localized = true;
 6235|  1.02M|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|  1.02M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  2.64M|    {
 6264|  2.64M|        m_specs.type = type;
 6265|  2.64M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  3.66M|    {
 6337|  3.66M|        return static_cast<bool>(m_error);
 6338|  3.66M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|   518k|{
 3580|   518k|    return a.code() == b;
 3581|   518k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|   518k|{
 3584|   518k|    return !(a == b);
 3585|   518k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|  1.02M|{
 7024|  1.02M|    switch (type) {
 7025|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 0, False: 1.02M]
  ------------------
 7026|      0|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 1.02M]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 1.02M]
  ------------------
 7030|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 0, False: 1.02M]
  ------------------
 7031|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 1.02M]
  ------------------
 7032|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 1.02M]
  ------------------
 7033|      0|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 1.02M]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 1.02M]
  ------------------
 7037|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 0, False: 1.02M]
  ------------------
 7038|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 1.02M]
  ------------------
 7039|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 1.02M]
  ------------------
 7040|      0|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 0, False: 1.02M]
  ------------------
 7043|      0|            return arg_type_category::pointer;
 7044|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 0, False: 1.02M]
  ------------------
 7045|      0|            return arg_type_category::boolean;
 7046|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 0, False: 1.02M]
  ------------------
 7047|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 0, False: 1.02M]
  ------------------
 7048|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 1.02M]
  ------------------
 7049|      0|            return arg_type_category::character;
 7050|       |
 7051|   317k|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 317k, False: 704k]
  ------------------
 7052|   666k|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 349k, False: 672k]
  ------------------
 7053|  1.02M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 355k, False: 666k]
  ------------------
 7054|  1.02M|            return arg_type_category::floating;
 7055|       |
 7056|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 0, False: 1.02M]
  ------------------
 7057|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 0, False: 1.02M]
  ------------------
 7058|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 0, False: 1.02M]
  ------------------
 7059|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 0, False: 1.02M]
  ------------------
 7060|      0|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 1.02M]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.02M]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|  1.02M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|  1.02M|            SCN_CLANG_POP
 7071|  1.02M|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|  1.02M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  4.46M|    {
 2867|  4.46M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  4.46M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2900|  4.46M|    {
 2901|  4.46M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  4.46M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2923|  4.46M|    {
 2924|  4.46M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|  4.46M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2932|  4.46M|    {
 2933|  4.46M|        return fn::impl(std::forward<T>(t));
 2934|  4.46M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3624|  1.30k|{
 3625|  1.30k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.30k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  2.25k|{
 3625|  2.25k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.25k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3624|  31.6k|{
 3625|  31.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  31.6k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|  3.66M|{
 7154|  3.66M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 2.64M, False: 1.02M]
  ------------------
 7155|  3.66M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 0, False: 2.64M]
  ------------------
 7156|  2.64M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 0, False: 2.64M]
  ------------------
 7157|      0|        SCN_UNLIKELY_ATTR
 7158|      0|        return handler.on_error("Invalid type specifier for float type");
 7159|      0|    }
 7160|  3.66M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4165|   666M|    {
 4166|   666M|        return m_end == nullptr;
 4167|   666M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  1.77M|{
 3686|  1.77M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  1.77M|                                          const CharT*, const CharT*>) {
 3688|  1.77M|        return {first, last};
 3689|  1.77M|    }
 3690|  1.77M|    else {
 3691|  1.77M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  1.77M|    }
 3693|  1.77M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4181|  8.72M|    {
 4182|  8.72M|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 8.72M]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|  8.72M|        return parent()->get_segment_starting_at(position());
 4188|  8.72M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4175|   371M|    {
 4176|   371M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   371M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   371M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|   371M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|   371M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4071|  8.72M|    {
 4072|  8.72M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  8.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.83M, False: 4.88M]
  |  |  ------------------
  ------------------
 4073|  8.72M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  3.83M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  3.83M|        }
 4076|  4.88M|        const auto start = pos - m_putback_buffer.size();
 4077|  4.88M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  4.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|  4.88M|        return m_current_view.substr(start);
 4079|  4.88M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4170|  6.08M|    {
 4171|  6.08M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  6.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|  6.08M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|  6.08M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4160|  16.0M|    {
 4161|  16.0M|        return m_position;
 4162|  16.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4093|  6.88M|    {
 4094|  6.88M|        return m_is_contiguous;
 4095|  6.88M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4165|  24.2M|    {
 4166|  24.2M|        return m_end == nullptr;
 4167|  24.2M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  35.3k|{
 3686|  35.3k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  35.3k|                                          const CharT*, const CharT*>) {
 3688|  35.3k|        return {first, last};
 3689|  35.3k|    }
 3690|  35.3k|    else {
 3691|  35.3k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  35.3k|    }
 3693|  35.3k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4181|   337k|    {
 4182|   337k|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 337k]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|   337k|        return parent()->get_segment_starting_at(position());
 4188|   337k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4175|  13.1M|    {
 4176|  13.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  13.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  13.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  13.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4071|   337k|    {
 4072|   337k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.3k, False: 264k]
  |  |  ------------------
  ------------------
 4073|   337k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  72.3k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  72.3k|        }
 4076|   264k|        const auto start = pos - m_putback_buffer.size();
 4077|   264k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|   264k|        return m_current_view.substr(start);
 4079|   264k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4170|   662k|    {
 4171|   662k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|   662k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|   662k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4160|  1.01M|    {
 4161|  1.01M|        return m_position;
 4162|  1.01M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4093|   785k|    {
 4094|   785k|        return m_is_contiguous;
 4095|   785k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|  21.0M|    {
 3151|  21.0M|        return static_cast<D&>(*this);
 3152|  21.0M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  10.5M|    {
 2949|  10.5M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  10.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  10.5M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  10.5M|    {
 2976|  10.5M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  10.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  10.5M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|  10.5M|    {
 3192|  10.5M|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 18.2k, False: 10.5M]
  ------------------
 3193|  10.5M|                   ? nullptr
 3194|  10.5M|                   : std::addressof(*ranges::begin(derived()));
 3195|  10.5M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|   314k|    {
 3151|   314k|        return static_cast<D&>(*this);
 3152|   314k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   157k|    {
 2949|   157k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   157k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   157k|    {
 2976|   157k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   157k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|   157k|    {
 3192|   157k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 0, False: 157k]
  ------------------
 3193|   157k|                   ? nullptr
 3194|   157k|                   : std::addressof(*ranges::begin(derived()));
 3195|   157k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8129|  1.64M|    {
 8130|  1.64M|        return ranges::subrange{begin(), end()};
 8131|  1.64M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8113|  4.85M|    {
 8114|  4.85M|        return m_current;
 8115|  4.85M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8121|  1.64M|    {
 8122|  1.64M|        return ranges::default_sentinel;
 8123|  1.64M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  25.4M|    {
 3287|  25.4M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|  7.85M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.29M|    {
 1808|  2.29M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.29M|                                            std::forward<F>(f));
 1810|  2.29M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  2.29M|{
 1294|  2.29M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.29M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.29M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.29M|            return result(*std::forward<Exp>(exp));
 1298|  2.29M|        }
 1299|       |
 1300|  2.29M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.29M|        return result(unexpect, monostate{});
 1302|  2.29M|    }
 1303|  2.29M|    else {
 1304|  2.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.26M, False: 27.7k]
  |  |  ------------------
  ------------------
 1306|  2.29M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.29M|                   : result(unexpect,
 1308|  27.7k|                            trivial_invoke(std::forward<F>(f),
 1309|  27.7k|                                           std::forward<Exp>(exp).error()));
 1310|  2.29M|    }
 1311|  2.29M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  24.6M|    {
  481|  24.6M|        return m_has_value;
  482|  24.6M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|  8.29M|    {
 1634|  8.29M|        return std::move(value());
 1635|  8.29M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|  9.59M|    {
 1598|  9.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  9.59M|        return this->get_value();
 1600|  9.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  9.59M|    {
  447|  9.59M|        return m_value;
  448|  9.59M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|  8.79M|    {
 1401|  8.79M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  8.79M|    {
  433|  8.79M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  12.9M|    {
 1148|  12.9M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|  57.0k|{
 1182|  57.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  57.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  78.9k|    {
 1585|  78.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  78.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  78.9k|        return std::move(this->get_unexpected().error());
 1587|  78.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|   107k|    {
  464|   107k|        return m_unexpected;
  465|   107k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   478k|    {
  357|   478k|        return m_unexpected;
  358|   478k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.22M|    {
 1457|  2.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.49M|    {
  443|  2.49M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8129|   199k|    {
 8130|   199k|        return ranges::subrange{begin(), end()};
 8131|   199k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8113|   426k|    {
 8114|   426k|        return m_current;
 8115|   426k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8121|   199k|    {
 8122|   199k|        return ranges::default_sentinel;
 8123|   199k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  1.97M|    {
 3287|  1.97M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   261k|    {
 1808|   261k|        return detail::transform_error_impl(std::move(*this),
 1809|   261k|                                            std::forward<F>(f));
 1810|   261k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   261k|{
 1294|   261k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   261k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   261k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   261k|            return result(*std::forward<Exp>(exp));
 1298|   261k|        }
 1299|       |
 1300|   261k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   261k|        return result(unexpect, monostate{});
 1302|   261k|    }
 1303|   261k|    else {
 1304|   261k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   261k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   261k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 259k, False: 1.97k]
  |  |  ------------------
  ------------------
 1306|   261k|                   ? result(*std::forward<Exp>(exp))
 1307|   261k|                   : result(unexpect,
 1308|  1.97k|                            trivial_invoke(std::forward<F>(f),
 1309|  1.97k|                                           std::forward<Exp>(exp).error()));
 1310|   261k|    }
 1311|   261k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.18M|    {
  481|  2.18M|        return m_has_value;
  482|  2.18M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|   875k|    {
 1634|   875k|        return std::move(value());
 1635|   875k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|   877k|    {
 1598|   877k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   877k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   877k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   877k|        return this->get_value();
 1600|   877k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   877k|    {
  447|   877k|        return m_value;
  448|   877k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|   372k|    {
 1401|   372k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   372k|    {
  433|   372k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.50M|    {
 1148|  1.50M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  49.2k|    {
 1585|  49.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  49.2k|        return std::move(this->get_unexpected().error());
 1587|  49.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  49.9k|    {
  464|  49.9k|        return m_unexpected;
  465|  49.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|   482k|    {
 1457|   482k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.10M|    {
  443|  1.10M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   189k|    {
  343|   189k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   189k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   189k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   242k|    {
 1447|   242k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  2.45M|    {
  443|  2.45M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  13.0M|    {
 1148|  13.0M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  8.94M|    {
 1401|  8.94M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  8.94M|    {
  433|  8.94M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|  15.3M|    {
 1569|  15.3M|        return has_value();
 1570|  15.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  23.9M|    {
  481|  23.9M|        return m_has_value;
  482|  23.9M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|   295k|    {
 1575|   295k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   295k|        return this->get_unexpected().error();
 1577|   295k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   295k|    {
  464|   295k|        return m_unexpected;
  465|   295k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  6.73M|    {
 1634|  6.73M|        return std::move(value());
 1635|  6.73M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  8.35M|    {
 1598|  8.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.35M|        return this->get_value();
 1600|  8.35M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  8.35M|    {
  447|  8.35M|        return m_value;
  448|  8.35M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   499k|    {
 1447|   499k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   863k|    {
  443|   863k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.50M|    {
 1148|  1.50M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|   611k|    {
 1401|   611k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   611k|    {
  433|   611k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  1.76M|    {
 1569|  1.76M|        return has_value();
 1570|  1.76M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  2.84M|    {
  481|  2.84M|        return m_has_value;
  482|  2.84M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|   603k|    {
 1575|   603k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   603k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   603k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   603k|        return this->get_unexpected().error();
 1577|   603k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   603k|    {
  464|   603k|        return m_unexpected;
  465|   603k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|   454k|    {
 1634|   454k|        return std::move(value());
 1635|   454k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|   481k|    {
 1598|   481k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   481k|        return this->get_value();
 1600|   481k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   481k|    {
  447|   481k|        return m_value;
  448|   481k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  2.31M|    {
 1808|  2.31M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.31M|                                            std::forward<F>(f));
 1810|  2.31M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  2.31M|{
 1294|  2.31M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.31M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.31M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.31M|            return result(*std::forward<Exp>(exp));
 1298|  2.31M|        }
 1299|       |
 1300|  2.31M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.31M|        return result(unexpect, monostate{});
 1302|  2.31M|    }
 1303|  2.31M|    else {
 1304|  2.31M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.31M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.28M, False: 25.3k]
  |  |  ------------------
  ------------------
 1306|  2.31M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.31M|                   : result(unexpect,
 1308|  25.3k|                            trivial_invoke(std::forward<F>(f),
 1309|  25.3k|                                           std::forward<Exp>(exp).error()));
 1310|  2.31M|    }
 1311|  2.31M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  8.91M|    {
  481|  8.91M|        return m_has_value;
  482|  8.91M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  2.28M|    {
 1634|  2.28M|        return std::move(value());
 1635|  2.28M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  3.16M|    {
 1598|  3.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.16M|        return this->get_value();
 1600|  3.16M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  3.16M|    {
  447|  3.16M|        return m_value;
  448|  3.16M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|  25.3k|    {
 1585|  25.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  25.3k|        return std::move(this->get_unexpected().error());
 1587|  25.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  32.2k|    {
  464|  32.2k|        return m_unexpected;
  465|  32.2k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.21M|    {
 1457|  2.21M|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|  16.3M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   270k|    {
 1447|   270k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4209|  55.9M|    {
 4210|  55.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  55.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  55.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 55.9M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  55.9M|        auto res = read_at_position();
 4219|  55.9M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  55.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  55.9M|        return parent()->get_character_at(m_position);
 4221|  55.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4274|   218M|    {
 4275|   218M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   218M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   218M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|   218M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 218M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|   218M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   218M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 188M, False: 29.5M]
  |  |  ------------------
  ------------------
 4282|   188M|            return true;
 4283|   188M|        }
 4284|       |
 4285|  58.6M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 29.5M, False: 29.1M]
  ------------------
 4286|  29.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 407k, False: 29.1M]
  ------------------
 4287|   407k|                return false;
 4288|   407k|            }
 4289|  29.5M|        }
 4290|  29.1M|        return true;
 4291|  29.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4051|   283M|    {
 4052|   283M|        return m_putback_buffer.size() + m_current_view.size();
 4053|   283M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4082|  55.9M|    {
 4083|  55.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  55.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0M, False: 20.9M]
  |  |  ------------------
  ------------------
 4084|  55.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  35.0M|            return m_putback_buffer[pos];
 4086|  35.0M|        }
 4087|  20.9M|        const auto start = pos - m_putback_buffer.size();
 4088|  20.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  20.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|  20.9M|        return m_current_view[start];
 4090|  20.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4195|   111M|    {
 4196|   111M|        ++m_position;
 4197|   111M|        (void)read_at_position();
 4198|   111M|        return *this;
 4199|   111M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4244|  53.3M|    {
 4245|  53.3M|        return !(lhs == rhs);
 4246|  53.3M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4239|  59.3M|    {
 4240|  59.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 59.3M, False: 0]
  |  Branch (4240:46): [True: 7.70M, False: 51.6M]
  ------------------
 4241|  59.3M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  20.3M|    {
 4251|  20.3M|        return x.is_at_end();
 4252|  20.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4294|  50.4M|    {
 4295|  50.4M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 50.4M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  50.4M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 50.4M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  50.4M|        return !read_at_position();
 4302|  50.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  14.8M|    {
 1401|  14.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  14.8M|    {
  433|  14.8M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.9M|    {
 1148|  14.9M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|   146k|    {
  343|   146k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   146k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   146k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|   107k|    {
 1447|   107k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   107k|    {
  443|   107k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   239k|    {
  352|   239k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   239k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   239k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|  6.57M|    {
 1569|  6.57M|        return has_value();
 1570|  6.57M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1623|  1.30M|    {
 1624|  1.30M|        return value();
 1625|  1.30M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  93.2k|    {
  343|  93.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  93.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  93.2k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  20.7k|    {
 1447|  20.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  20.7k|    {
  443|  20.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.19M|    {
 1148|  3.19M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  3.16M|    {
 1401|  3.16M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  3.16M|    {
  433|  3.16M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|  3.19M|    {
 1569|  3.19M|        return has_value();
 1570|  3.19M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.38M|    {
  481|  6.38M|        return m_has_value;
  482|  6.38M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  20.7k|    {
 1575|  20.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  20.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  20.7k|        return this->get_unexpected().error();
 1577|  20.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  20.7k|    {
  464|  20.7k|        return m_unexpected;
  465|  20.7k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.16M|    {
 1634|  3.16M|        return std::move(value());
 1635|  3.16M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.16M|    {
 1598|  3.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.16M|        return this->get_value();
 1600|  3.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.16M|    {
  447|  3.16M|        return m_value;
  448|  3.16M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  71.9M|    {
 3305|  71.9M|        return m_sentinel;
 3306|  71.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  91.6k|    {
  343|  91.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  91.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  91.6k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  19.5M|    {
  357|  19.5M|        return m_unexpected;
  358|  19.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  5.38M|    {
  352|  5.38M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.38M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  5.38M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  24.0M|    {
  343|  24.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  24.0M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  24.0M|    {
  357|  24.0M|        return m_unexpected;
  358|  24.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  24.0M|    {
  352|  24.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  24.0M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|   145k|{
 1182|   145k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|   145k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  5.14M|    {
  343|  5.14M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.14M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  5.14M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1574|  28.3k|    {
 1575|  28.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  28.3k|        return this->get_unexpected().error();
 1577|  28.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  2.31M|    {
 1447|  2.31M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.36M|    {
  443|  2.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  25.4M|    {
 1148|  25.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1400|  1.31M|    {
 1401|  1.31M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.31M|    {
  433|  1.31M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  12.9M|    {
 1447|  12.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  12.9M|    {
  443|  12.9M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  27.7M|    {
 1569|  27.7M|        return has_value();
 1570|  27.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  48.7M|    {
  481|  48.7M|        return m_has_value;
  482|  48.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|  6.26M|    {
 1575|  6.26M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.26M|        return this->get_unexpected().error();
 1577|  6.26M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.26M|    {
  464|  6.26M|        return m_unexpected;
  465|  6.26M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|  2.50M|    {
 1401|  2.50M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.50M|    {
  433|  2.50M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.50M|    {
 1148|  2.50M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    491|    {
 1447|    491|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|    491|    {
  443|    491|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1623|  6.51M|    {
 1624|  6.51M|        return value();
 1625|  6.51M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|  12.5M|    {
 1598|  12.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.5M|        return this->get_value();
 1600|  12.5M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  12.5M|    {
  447|  12.5M|        return m_value;
  448|  12.5M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1568|   237k|    {
 1569|   237k|        return has_value();
 1570|   237k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  5.01M|    {
  481|  5.01M|        return m_has_value;
  482|  5.01M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.26M|    {
 1634|  2.26M|        return std::move(value());
 1635|  2.26M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.50M|    {
 1598|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.50M|        return this->get_value();
 1600|  2.50M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.50M|    {
  447|  2.50M|        return m_value;
  448|  2.50M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  6.08M|    {
 1808|  6.08M|        return detail::transform_error_impl(std::move(*this),
 1809|  6.08M|                                            std::forward<F>(f));
 1810|  6.08M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  6.08M|{
 1294|  6.08M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  6.08M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  6.08M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  6.08M|            return result(*std::forward<Exp>(exp));
 1298|  6.08M|        }
 1299|       |
 1300|  6.08M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  6.08M|        return result(unexpect, monostate{});
 1302|  6.08M|    }
 1303|  6.08M|    else {
 1304|  6.08M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  6.08M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.02M, False: 51.1k]
  |  |  ------------------
  ------------------
 1306|  6.08M|                   ? result(*std::forward<Exp>(exp))
 1307|  6.08M|                   : result(unexpect,
 1308|  51.1k|                            trivial_invoke(std::forward<F>(f),
 1309|  51.1k|                                           std::forward<Exp>(exp).error()));
 1310|  6.08M|    }
 1311|  6.08M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|  8.87M|    {
 1401|  8.87M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  8.87M|    {
  433|  8.87M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1456|  51.1k|    {
 1457|  51.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|  6.02M|    {
 1634|  6.02M|        return std::move(value());
 1635|  6.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3300|  2.64M|    {
 3301|  2.64M|        return m_iterator;
 3302|  2.64M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3304|  2.64M|    {
 3305|  2.64M|        return m_sentinel;
 3306|  2.64M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  15.2M|    {
 1569|  15.2M|        return has_value();
 1570|  15.2M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  23.8M|    {
  481|  23.8M|        return m_has_value;
  482|  23.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|   357k|    {
 1575|   357k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   357k|        return this->get_unexpected().error();
 1577|   357k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   357k|    {
  464|   357k|        return m_unexpected;
  465|   357k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|  6.64M|    {
 1634|  6.64M|        return std::move(value());
 1635|  6.64M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|  8.29M|    {
 1598|  8.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.29M|        return this->get_value();
 1600|  8.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.29M|    {
  447|  8.29M|        return m_value;
  448|  8.29M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  4.13M|{
  322|  4.13M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.13M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  2.06M|    {
 3287|  2.06M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|  30.1M|    {
 4262|  30.1M|        return !x.is_at_end();
 4263|  30.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  1.68M|    {
 1401|  1.68M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.68M|    {
  433|  1.68M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  32.2k|    {
 1447|  32.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  32.2k|    {
  443|  32.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  5.71M|    {
 1148|  5.71M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  5.68M|    {
 1401|  5.68M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.68M|    {
  433|  5.68M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|  3.40M|    {
 1569|  3.40M|        return has_value();
 1570|  3.40M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|   876k|    {
 1624|   876k|        return value();
 1625|   876k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  18.2k|    {
 1447|  18.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  18.2k|    {
  443|  18.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.13M|    {
 1148|  3.13M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  3.11M|    {
 1401|  3.11M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  3.11M|    {
  433|  3.11M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|  3.13M|    {
 1569|  3.13M|        return has_value();
 1570|  3.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.26M|    {
  481|  6.26M|        return m_has_value;
  482|  6.26M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|  18.2k|    {
 1575|  18.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  18.2k|        return this->get_unexpected().error();
 1577|  18.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.2k|    {
  464|  18.2k|        return m_unexpected;
  465|  18.2k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  3.11M|    {
 1634|  3.11M|        return std::move(value());
 1635|  3.11M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  3.11M|    {
 1598|  3.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.11M|        return this->get_value();
 1600|  3.11M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.11M|    {
  447|  3.11M|        return m_value;
  448|  3.11M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1574|  6.86k|    {
 1575|  6.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.86k|        return this->get_unexpected().error();
 1577|  6.86k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  2.31M|    {
 1447|  2.31M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.31M|    {
  443|  2.31M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  13.0M|    {
 1148|  13.0M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1400|   892k|    {
 1401|   892k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   892k|    {
  433|   892k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  8.88M|    {
 1447|  8.88M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  8.88M|    {
  443|  8.88M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|  15.3M|    {
 1569|  15.3M|        return has_value();
 1570|  15.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  26.1M|    {
  481|  26.1M|        return m_has_value;
  482|  26.1M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|  6.11M|    {
 1575|  6.11M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.11M|        return this->get_unexpected().error();
 1577|  6.11M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.11M|    {
  464|  6.11M|        return m_unexpected;
  465|  6.11M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  2.36M|    {
 1401|  2.36M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.36M|    {
  433|  2.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.36M|    {
 1148|  2.36M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|    156|    {
 1447|    156|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|    156|    {
  443|    156|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1623|  2.51M|    {
 1624|  2.51M|        return value();
 1625|  2.51M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  2.51M|    {
 1598|  2.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.51M|        return this->get_value();
 1600|  2.51M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  2.51M|    {
  447|  2.51M|        return m_value;
  448|  2.51M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  76.8k|    {
 1569|  76.8k|        return has_value();
 1570|  76.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  4.73M|    {
  481|  4.73M|        return m_has_value;
  482|  4.73M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.28M|    {
 1634|  2.28M|        return std::move(value());
 1635|  2.28M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.36M|    {
 1598|  2.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.36M|        return this->get_value();
 1600|  2.36M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.36M|    {
  447|  2.36M|        return m_value;
  448|  2.36M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|   974k|    {
 1401|   974k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   974k|    {
  433|   974k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  4.43M|    {
 2826|  4.43M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  4.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  4.43M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  4.43M|    {
 2807|  4.43M|        return t.data();
 2808|  4.43M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  1.65M|    {
 1401|  1.65M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.65M|    {
  433|  1.65M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|  1.01M|    {
 1447|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  1.01M|    {
  443|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.3M|    {
 1148|  14.3M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  13.1M|    {
 1401|  13.1M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  13.1M|    {
  433|  13.1M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1633|  8.92M|    {
 1634|  8.92M|        return std::move(value());
 1635|  8.92M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|  5.23M|{
 1182|  5.23M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  5.23M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|  2.26M|    {
 1808|  2.26M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.26M|                                            std::forward<F>(f));
 1810|  2.26M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|  2.26M|{
 1294|  2.26M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.26M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.26M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.26M|            return result(*std::forward<Exp>(exp));
 1298|  2.26M|        }
 1299|       |
 1300|  2.26M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.26M|        return result(unexpect, monostate{});
 1302|  2.26M|    }
 1303|  2.26M|    else {
 1304|  2.26M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.26M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.26M, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.26M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.26M|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.26M|    }
 1311|  2.26M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  2.26M|    {
 1401|  2.26M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.26M|    {
  433|  2.26M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.26M|    {
 1148|  2.26M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.26M|    {
 1569|  2.26M|        return has_value();
 1570|  2.26M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.53M|    {
  481|  4.53M|        return m_has_value;
  482|  4.53M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.26M|    {
 1634|  2.26M|        return std::move(value());
 1635|  2.26M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.26M|    {
 1598|  2.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.26M|        return this->get_value();
 1600|  2.26M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.26M|    {
  447|  2.26M|        return m_value;
  448|  2.26M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|  2.19M|    {
 1794|  2.19M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  2.19M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|  2.19M|{
 1294|  2.19M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.19M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.19M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.19M|            return result(*std::forward<Exp>(exp));
 1298|  2.19M|        }
 1299|       |
 1300|  2.19M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.19M|        return result(unexpect, monostate{});
 1302|  2.19M|    }
 1303|  2.19M|    else {
 1304|  2.19M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.19M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 1306|  2.19M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.19M|                   : result(unexpect,
 1308|  2.19M|                            trivial_invoke(std::forward<F>(f),
 1309|  2.19M|                                           std::forward<Exp>(exp).error()));
 1310|  2.19M|    }
 1311|  2.19M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  1.64M|    {
 1624|  1.64M|        return value();
 1625|  1.64M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|   555k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1643|   237k|    {
 1644|   237k|        return &value();
 1645|   237k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|  1.58M|    {
 2695|  1.58M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.58M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|  1.58M|    {
 2676|  1.58M|        return decay_copy(t.begin());
 2677|  1.58M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|  1.58M|{
 1920|  1.58M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.58M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|   989k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|  2.28M|    {
 1808|  2.28M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.28M|                                            std::forward<F>(f));
 1810|  2.28M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|  2.28M|{
 1294|  2.28M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.28M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.28M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.28M|            return result(*std::forward<Exp>(exp));
 1298|  2.28M|        }
 1299|       |
 1300|  2.28M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.28M|        return result(unexpect, monostate{});
 1302|  2.28M|    }
 1303|  2.28M|    else {
 1304|  2.28M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.28M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.28M, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.28M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.28M|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.28M|    }
 1311|  2.28M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.28M|    {
 1401|  2.28M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.28M|    {
  433|  2.28M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.28M|    {
 1148|  2.28M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.28M|    {
 1569|  2.28M|        return has_value();
 1570|  2.28M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.57M|    {
  481|  4.57M|        return m_has_value;
  482|  4.57M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.28M|    {
 1634|  2.28M|        return std::move(value());
 1635|  2.28M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.28M|    {
 1598|  2.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.28M|        return this->get_value();
 1600|  2.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.28M|    {
  447|  2.28M|        return m_value;
  448|  2.28M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|  2.18M|    {
 1794|  2.18M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  2.18M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|  2.18M|{
 1294|  2.18M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.18M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.18M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.18M|            return result(*std::forward<Exp>(exp));
 1298|  2.18M|        }
 1299|       |
 1300|  2.18M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.18M|        return result(unexpect, monostate{});
 1302|  2.18M|    }
 1303|  2.18M|    else {
 1304|  2.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
 1306|  2.18M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.18M|                   : result(unexpect,
 1308|  2.18M|                            trivial_invoke(std::forward<F>(f),
 1309|  2.18M|                                           std::forward<Exp>(exp).error()));
 1310|  2.18M|    }
 1311|  2.18M|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|  2.18M|    {
 3619|  2.18M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  1.62M|    {
 1624|  1.62M|        return value();
 1625|  1.62M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1643|  76.6k|    {
 1644|  76.6k|        return &value();
 1645|  76.6k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|  2.19M|    {
 3619|  2.19M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   618k|    {
 1447|   618k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4209|  2.20M|    {
 4210|  2.20M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  2.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 2.20M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  2.20M|        auto res = read_at_position();
 4219|  2.20M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  2.20M|        return parent()->get_character_at(m_position);
 4221|  2.20M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4274|  7.25M|    {
 4275|  7.25M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  7.25M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 7.25M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  7.25M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  7.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.09M, False: 1.16M]
  |  |  ------------------
  ------------------
 4282|  6.09M|            return true;
 4283|  6.09M|        }
 4284|       |
 4285|  2.18M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 1.16M, False: 1.01M]
  ------------------
 4286|  1.16M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 142k, False: 1.01M]
  ------------------
 4287|   142k|                return false;
 4288|   142k|            }
 4289|  1.16M|        }
 4290|  1.01M|        return true;
 4291|  1.16M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4051|  10.1M|    {
 4052|  10.1M|        return m_putback_buffer.size() + m_current_view.size();
 4053|  10.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4082|  2.20M|    {
 4083|  2.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.84M, False: 354k]
  |  |  ------------------
  ------------------
 4084|  2.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  1.84M|            return m_putback_buffer[pos];
 4086|  1.84M|        }
 4087|   354k|        const auto start = pos - m_putback_buffer.size();
 4088|   354k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|   354k|        return m_current_view[start];
 4090|   354k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4195|  2.60M|    {
 4196|  2.60M|        ++m_position;
 4197|  2.60M|        (void)read_at_position();
 4198|  2.60M|        return *this;
 4199|  2.60M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4244|   806k|    {
 4245|   806k|        return !(lhs == rhs);
 4246|   806k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4239|  1.13M|    {
 4240|  1.13M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 1.13M, False: 0]
  |  Branch (4240:46): [True: 359k, False: 779k]
  ------------------
 4241|  1.13M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  1.78M|    {
 4251|  1.78M|        return x.is_at_end();
 4252|  1.78M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4294|  2.44M|    {
 4295|  2.44M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 2.44M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  2.44M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 2.44M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  2.44M|        return !read_at_position();
 4302|  2.44M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   660k|{
 3778|   660k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   660k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   660k|    }
 3781|   660k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   660k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   660k|    }
 3784|   660k|    else {
 3785|       |        // utf-32
 3786|   660k|        static_assert(sizeof(U) == 4);
 3787|   660k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   660k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   660k|        return 1;
 3789|   660k|    }
 3790|   660k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  1.20M|    {
 1401|  1.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.20M|    {
  433|  1.20M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.25M|    {
 1148|  1.25M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  49.9k|    {
 1447|  49.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  49.9k|    {
  443|  49.9k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|   332k|    {
 1569|   332k|        return has_value();
 1570|   332k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1623|  2.23k|    {
 1624|  2.23k|        return value();
 1625|  2.23k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   660k|{
 3984|   660k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   660k|        return decode_utf8_code_point_exhaustive(input);
 3986|   660k|    }
 3987|   660k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   660k|        return decode_utf16_code_point_exhaustive(input);
 3989|   660k|    }
 3990|   660k|    else {
 3991|   660k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   660k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   660k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   660k|        auto cp = static_cast<char32_t>(input.front());
 3993|   660k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 221k, False: 438k]
  |  |  ------------------
  ------------------
 3994|   221k|            return invalid_code_point;
 3995|   221k|        }
 3996|   438k|        return cp;
 3997|   660k|    }
 3998|   660k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  1.48k|    {
 1447|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.48k|    {
  443|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   226k|    {
 1148|   226k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   225k|    {
 1401|   225k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   225k|    {
  433|   225k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|   226k|    {
 1569|   226k|        return has_value();
 1570|   226k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   453k|    {
  481|   453k|        return m_has_value;
  482|   453k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  1.48k|    {
 1575|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.48k|        return this->get_unexpected().error();
 1577|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.48k|    {
  464|  1.48k|        return m_unexpected;
  465|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   225k|    {
 1634|   225k|        return std::move(value());
 1635|   225k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   225k|    {
 1598|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   225k|        return this->get_value();
 1600|   225k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   225k|    {
  447|   225k|        return m_value;
  448|   225k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  3.96M|    {
 3305|  3.96M|        return m_sentinel;
 3306|  3.96M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1574|    699|    {
 1575|    699|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    699|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    699|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    699|        return this->get_unexpected().error();
 1577|    699|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|   307k|    {
 1447|   307k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   355k|    {
  443|   355k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.21M|    {
 1148|  2.21M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1400|  2.23k|    {
 1401|  2.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  2.23k|    {
  433|  2.23k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  1.20M|    {
 1447|  1.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.20M|    {
  443|  1.20M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  2.47M|    {
 1569|  2.47M|        return has_value();
 1570|  2.47M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  4.70M|    {
  481|  4.70M|        return m_has_value;
  482|  4.70M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|  1.04M|    {
 1575|  1.04M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.04M|        return this->get_unexpected().error();
 1577|  1.04M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.04M|    {
  464|  1.04M|        return m_unexpected;
  465|  1.04M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|   261k|    {
 1401|   261k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   261k|    {
  433|   261k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   261k|    {
 1148|   261k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|     27|    {
 1447|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|     27|    {
  443|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1623|  80.9k|    {
 1624|  80.9k|        return value();
 1625|  80.9k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|   696k|    {
 1598|   696k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   696k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   696k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   696k|        return this->get_value();
 1600|   696k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   696k|    {
  447|   696k|        return m_value;
  448|   696k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1568|  1.95k|    {
 1569|  1.95k|        return has_value();
 1570|  1.95k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   523k|    {
  481|   523k|        return m_has_value;
  482|   523k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|   259k|    {
 1634|   259k|        return std::move(value());
 1635|   259k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|   261k|    {
 1598|   261k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   261k|        return this->get_value();
 1600|   261k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   261k|    {
  447|   261k|        return m_value;
  448|   261k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   662k|    {
 1808|   662k|        return detail::transform_error_impl(std::move(*this),
 1809|   662k|                                            std::forward<F>(f));
 1810|   662k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   662k|{
 1294|   662k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   662k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   662k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   662k|            return result(*std::forward<Exp>(exp));
 1298|   662k|        }
 1299|       |
 1300|   662k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   662k|        return result(unexpect, monostate{});
 1302|   662k|    }
 1303|   662k|    else {
 1304|   662k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   662k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   662k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 615k, False: 47.3k]
  |  |  ------------------
  ------------------
 1306|   662k|                   ? result(*std::forward<Exp>(exp))
 1307|   662k|                   : result(unexpect,
 1308|  47.3k|                            trivial_invoke(std::forward<F>(f),
 1309|  47.3k|                                           std::forward<Exp>(exp).error()));
 1310|   662k|    }
 1311|   662k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|   655k|    {
 1401|   655k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   655k|    {
  433|   655k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1456|  47.3k|    {
 1457|  47.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|   615k|    {
 1634|   615k|        return std::move(value());
 1635|   615k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3300|  42.3k|    {
 3301|  42.3k|        return m_iterator;
 3302|  42.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3304|  42.3k|    {
 3305|  42.3k|        return m_sentinel;
 3306|  42.3k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  1.76M|    {
 1569|  1.76M|        return has_value();
 1570|  1.76M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  2.96M|    {
  481|  2.96M|        return m_has_value;
  482|  2.96M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|   841k|    {
 1575|   841k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   841k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   841k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   841k|        return this->get_unexpected().error();
 1577|   841k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   841k|    {
  464|   841k|        return m_unexpected;
  465|   841k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|   334k|    {
 1634|   334k|        return std::move(value());
 1635|   334k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|   361k|    {
 1598|   361k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   361k|        return this->get_value();
 1600|   361k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   361k|    {
  447|   361k|        return m_value;
  448|   361k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  75.3k|{
  302|  75.3k|    return p;
  303|  75.3k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  75.3k|{
  322|  75.3k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  75.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  75.3k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  37.6k|    {
 3287|  37.6k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|   667k|    {
 4262|   667k|        return !x.is_at_end();
 4263|   667k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  27.2k|    {
 1401|  27.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  27.2k|    {
  433|  27.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  49.5k|    {
 1447|  49.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  49.5k|    {
  443|  49.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.20M|    {
 1148|  1.20M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  1.15M|    {
 1401|  1.15M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.15M|    {
  433|  1.15M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|   283k|    {
 1569|   283k|        return has_value();
 1570|   283k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.13M|    {
  481|  2.13M|        return m_has_value;
  482|  2.13M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|  1.03k|    {
 1624|  1.03k|        return value();
 1625|  1.03k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|   876k|    {
 1598|   876k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   876k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   876k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   876k|        return this->get_value();
 1600|   876k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   876k|    {
  447|   876k|        return m_value;
  448|   876k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  1.48k|    {
 1447|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.48k|    {
  443|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   226k|    {
 1148|   226k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|   225k|    {
 1401|   225k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   225k|    {
  433|   225k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   261k|    {
 1808|   261k|        return detail::transform_error_impl(std::move(*this),
 1809|   261k|                                            std::forward<F>(f));
 1810|   261k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   261k|{
 1294|   261k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   261k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   261k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   261k|            return result(*std::forward<Exp>(exp));
 1298|   261k|        }
 1299|       |
 1300|   261k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   261k|        return result(unexpect, monostate{});
 1302|   261k|    }
 1303|   261k|    else {
 1304|   261k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   261k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   261k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 259k, False: 1.97k]
  |  |  ------------------
  ------------------
 1306|   261k|                   ? result(*std::forward<Exp>(exp))
 1307|   261k|                   : result(unexpect,
 1308|  1.97k|                            trivial_invoke(std::forward<F>(f),
 1309|  1.97k|                                           std::forward<Exp>(exp).error()));
 1310|   261k|    }
 1311|   261k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|   875k|    {
 1634|   875k|        return std::move(value());
 1635|   875k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|  49.2k|    {
 1585|  49.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  49.2k|        return std::move(this->get_unexpected().error());
 1587|  49.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  49.5k|    {
  464|  49.5k|        return m_unexpected;
  465|  49.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|   363k|    {
 1457|   363k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|   226k|    {
 1569|   226k|        return has_value();
 1570|   226k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   453k|    {
  481|   453k|        return m_has_value;
  482|   453k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1574|  1.48k|    {
 1575|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.48k|        return this->get_unexpected().error();
 1577|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.48k|    {
  464|  1.48k|        return m_unexpected;
  465|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|   225k|    {
 1634|   225k|        return std::move(value());
 1635|   225k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|   225k|    {
 1598|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   225k|        return this->get_value();
 1600|   225k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   225k|    {
  447|   225k|        return m_value;
  448|   225k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1574|    240|    {
 1575|    240|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    240|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    240|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    240|        return this->get_unexpected().error();
 1577|    240|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|   307k|    {
 1447|   307k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   354k|    {
  443|   354k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.00M|    {
 1148|  2.00M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1400|  1.03k|    {
 1401|  1.03k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.03k|    {
  433|  1.03k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  1.01M|    {
 1447|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.01M|    {
  443|  1.01M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|  2.26M|    {
 1569|  2.26M|        return has_value();
 1570|  2.26M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  4.19M|    {
  481|  4.19M|        return m_has_value;
  482|  4.19M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|   929k|    {
 1575|   929k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   929k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   929k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   929k|        return this->get_unexpected().error();
 1577|   929k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   929k|    {
  464|   929k|        return m_unexpected;
  465|   929k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|   260k|    {
 1401|   260k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   260k|    {
  433|   260k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   260k|    {
 1148|   260k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|     12|    {
 1447|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|     12|    {
  443|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1623|  31.2k|    {
 1624|  31.2k|        return value();
 1625|  31.2k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|   647k|    {
 1598|   647k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   647k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   647k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   647k|        return this->get_value();
 1600|   647k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   647k|    {
  447|   647k|        return m_value;
  448|   647k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|    824|    {
 1569|    824|        return has_value();
 1570|    824|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   521k|    {
  481|   521k|        return m_has_value;
  482|   521k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|   259k|    {
 1634|   259k|        return std::move(value());
 1635|   259k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|   260k|    {
 1598|   260k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   260k|        return this->get_value();
 1600|   260k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   260k|    {
  447|   260k|        return m_value;
  448|   260k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   663k|    {
 1808|   663k|        return detail::transform_error_impl(std::move(*this),
 1809|   663k|                                            std::forward<F>(f));
 1810|   663k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   663k|{
 1294|   663k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   663k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   663k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   663k|            return result(*std::forward<Exp>(exp));
 1298|   663k|        }
 1299|       |
 1300|   663k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   663k|        return result(unexpect, monostate{});
 1302|   663k|    }
 1303|   663k|    else {
 1304|   663k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   663k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   663k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 615k, False: 47.3k]
  |  |  ------------------
  ------------------
 1306|   663k|                   ? result(*std::forward<Exp>(exp))
 1307|   663k|                   : result(unexpect,
 1308|  47.3k|                            trivial_invoke(std::forward<F>(f),
 1309|  47.3k|                                           std::forward<Exp>(exp).error()));
 1310|   663k|    }
 1311|   663k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|   631k|    {
 1401|   631k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   631k|    {
  433|   631k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|  47.3k|    {
 1457|  47.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|   615k|    {
 1634|   615k|        return std::move(value());
 1635|   615k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   157k|    {
 2826|   157k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   157k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   157k|    {
 2807|   157k|        return t.data();
 2808|   157k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  27.2k|    {
 1401|  27.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  27.2k|    {
  433|  27.2k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|   259k|    {
 1808|   259k|        return detail::transform_error_impl(std::move(*this),
 1809|   259k|                                            std::forward<F>(f));
 1810|   259k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|   259k|{
 1294|   259k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   259k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   259k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   259k|            return result(*std::forward<Exp>(exp));
 1298|   259k|        }
 1299|       |
 1300|   259k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   259k|        return result(unexpect, monostate{});
 1302|   259k|    }
 1303|   259k|    else {
 1304|   259k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   259k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   259k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 259k, False: 0]
  |  |  ------------------
  ------------------
 1306|   259k|                   ? result(*std::forward<Exp>(exp))
 1307|   259k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   259k|    }
 1311|   259k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   259k|    {
 1401|   259k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   259k|    {
  433|   259k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   259k|    {
 1148|   259k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   259k|    {
 1569|   259k|        return has_value();
 1570|   259k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   519k|    {
  481|   519k|        return m_has_value;
  482|   519k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|   259k|    {
 1634|   259k|        return std::move(value());
 1635|   259k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   259k|    {
 1598|   259k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   259k|        return this->get_value();
 1600|   259k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   259k|    {
  447|   259k|        return m_value;
  448|   259k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|   480k|    {
 1794|   480k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   480k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|   480k|{
 1294|   480k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   480k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   480k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   480k|            return result(*std::forward<Exp>(exp));
 1298|   480k|        }
 1299|       |
 1300|   480k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   480k|        return result(unexpect, monostate{});
 1302|   480k|    }
 1303|   480k|    else {
 1304|   480k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   480k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   480k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 480k]
  |  |  ------------------
  ------------------
 1306|   480k|                   ? result(*std::forward<Exp>(exp))
 1307|   480k|                   : result(unexpect,
 1308|   480k|                            trivial_invoke(std::forward<F>(f),
 1309|   480k|                                           std::forward<Exp>(exp).error()));
 1310|   480k|    }
 1311|   480k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  27.2k|    {
 1624|  27.2k|        return value();
 1625|  27.2k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|  41.1k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1643|  1.93k|    {
 1644|  1.93k|        return &value();
 1645|  1.93k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|   218k|    {
 2695|   218k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   218k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|   218k|    {
 2676|   218k|        return decay_copy(t.begin());
 2677|   218k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|   218k|{
 1920|   218k|    return SCN_FWD(t);
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   218k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|   102k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|   259k|    {
 1808|   259k|        return detail::transform_error_impl(std::move(*this),
 1809|   259k|                                            std::forward<F>(f));
 1810|   259k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|   259k|{
 1294|   259k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   259k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   259k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   259k|            return result(*std::forward<Exp>(exp));
 1298|   259k|        }
 1299|       |
 1300|   259k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   259k|        return result(unexpect, monostate{});
 1302|   259k|    }
 1303|   259k|    else {
 1304|   259k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   259k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   259k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 259k, False: 0]
  |  |  ------------------
  ------------------
 1306|   259k|                   ? result(*std::forward<Exp>(exp))
 1307|   259k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   259k|    }
 1311|   259k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   259k|    {
 1401|   259k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   259k|    {
  433|   259k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   259k|    {
 1148|   259k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   259k|    {
 1569|   259k|        return has_value();
 1570|   259k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   519k|    {
  481|   519k|        return m_has_value;
  482|   519k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   259k|    {
 1634|   259k|        return std::move(value());
 1635|   259k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   259k|    {
 1598|   259k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   259k|        return this->get_value();
 1600|   259k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   259k|    {
  447|   259k|        return m_value;
  448|   259k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|   361k|    {
 1794|   361k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   361k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|   361k|{
 1294|   361k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   361k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   361k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   361k|            return result(*std::forward<Exp>(exp));
 1298|   361k|        }
 1299|       |
 1300|   361k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   361k|        return result(unexpect, monostate{});
 1302|   361k|    }
 1303|   361k|    else {
 1304|   361k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   361k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   361k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 1306|   361k|                   ? result(*std::forward<Exp>(exp))
 1307|   361k|                   : result(unexpect,
 1308|   361k|                            trivial_invoke(std::forward<F>(f),
 1309|   361k|                                           std::forward<Exp>(exp).error()));
 1310|   361k|    }
 1311|   361k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|   361k|    {
 3619|   361k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  27.2k|    {
 1624|  27.2k|        return value();
 1625|  27.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1643|    812|    {
 1644|    812|        return &value();
 1645|    812|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|   480k|    {
 3619|   480k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1400|   248k|    {
 1401|   248k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|   248k|    {
  433|   248k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|   154k|{
 3625|   154k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|   154k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  2.04M|    {
 2826|  2.04M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  2.04M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  2.04M|    {
 2807|  2.04M|        return t.data();
 2808|  2.04M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|  4.16M|    {
 5427|  4.16M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.16M]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  4.16M|        return static_cast<std::size_t>(m_desc &
 5432|  4.16M|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  4.16M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|  8.32M|    {
 5452|  8.32M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|  8.32M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|  4.16M|    {
 5395|  4.16M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.16M]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  4.16M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.16M]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|  4.16M|        const auto t = type(id);
 5407|  4.16M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.16M]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|  4.16M|        basic_scan_arg<Context> arg;
 5412|  4.16M|        arg.m_type = t;
 5413|  4.16M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 4.16M, False: 0]
  ------------------
 5414|  4.16M|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  4.16M|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  4.16M|        return arg;
 5420|  4.16M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|  4.16M|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  4.16M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  4.16M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  4.16M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  4.16M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|  4.16M|    {
 5456|  4.16M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  4.16M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|  7.87M|    {
 5208|  7.87M|        return m_type != detail::arg_type::none_type;
 5209|  7.87M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   698k|{
 8378|   698k|#define SCN_VISIT(Type)                                         \
 8379|   698k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   698k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   698k|    }                                                           \
 8382|   698k|    else {                                                      \
 8383|   698k|        return vis(monostate_val);                              \
 8384|   698k|    }
 8385|       |
 8386|   698k|    monostate monostate_val{};
 8387|       |
 8388|   698k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 698k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 698k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 698k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 698k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 698k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 698k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 698k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 698k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 698k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 698k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 698k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 698k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 698k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 698k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 698k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   215k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 215k, False: 482k]
  ------------------
 8420|   215k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   215k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   215k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   215k|    }                                                           \
  |  | 8382|   215k|    else {                                                      \
  |  | 8383|   215k|        return vis(monostate_val);                              \
  |  | 8384|   215k|    }
  ------------------
 8421|   239k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 239k, False: 459k]
  ------------------
 8422|   239k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   239k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   239k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   239k|    }                                                           \
  |  | 8382|   239k|    else {                                                      \
  |  | 8383|   239k|        return vis(monostate_val);                              \
  |  | 8384|   239k|    }
  ------------------
 8423|   243k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 243k, False: 454k]
  ------------------
 8424|   243k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   243k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   243k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   243k|    }                                                           \
  |  | 8382|   243k|    else {                                                      \
  |  | 8383|   243k|        return vis(monostate_val);                              \
  |  | 8384|   243k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 698k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 698k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 698k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 698k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 698k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 698k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 698k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 698k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 698k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   698k|            SCN_CLANG_POP
 8456|   698k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|  3.26M|    {
 5506|  3.26M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  1.64M|    {
 8099|  1.64M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|  3.26M|    {
 8017|  3.26M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4314|  2.29M|{
 4315|  2.29M|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 2.29M]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|  2.29M|    return ranges::subrange{forward_iterator{this, 0},
 4320|  2.29M|                            ranges::default_sentinel};
 4321|  2.29M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4147|  2.29M|    {
 4148|  2.29M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|  2.29M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|  2.29M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   649k|{
 8378|   649k|#define SCN_VISIT(Type)                                         \
 8379|   649k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   649k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   649k|    }                                                           \
 8382|   649k|    else {                                                      \
 8383|   649k|        return vis(monostate_val);                              \
 8384|   649k|    }
 8385|       |
 8386|   649k|    monostate monostate_val{};
 8387|       |
 8388|   649k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 649k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 649k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 649k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 649k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 649k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 649k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 649k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 649k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 649k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 649k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 649k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 649k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 649k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 649k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 649k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   200k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 200k, False: 449k]
  ------------------
 8420|   200k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   200k|    }                                                           \
  |  | 8382|   200k|    else {                                                      \
  |  | 8383|   200k|        return vis(monostate_val);                              \
  |  | 8384|   200k|    }
  ------------------
 8421|   223k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 223k, False: 426k]
  ------------------
 8422|   223k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   223k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   223k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   223k|    }                                                           \
  |  | 8382|   223k|    else {                                                      \
  |  | 8383|   223k|        return vis(monostate_val);                              \
  |  | 8384|   223k|    }
  ------------------
 8423|   226k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 226k, False: 423k]
  ------------------
 8424|   226k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   226k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   226k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   226k|    }                                                           \
  |  | 8382|   226k|    else {                                                      \
  |  | 8383|   226k|        return vis(monostate_val);                              \
  |  | 8384|   226k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 649k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 649k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 649k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 649k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 649k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 649k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 649k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 649k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 649k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   649k|            SCN_CLANG_POP
 8456|   649k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.61M|{
 7005|  1.61M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.61M|    handler.check_args_exhausted();
 7007|  1.61M|    return handler.get_error();
 7008|  1.61M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.61M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.61M|    auto begin = format.data();
 6974|  1.61M|    auto it = begin;
 6975|  1.61M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  3.14M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.61M, False: 1.53M]
  ------------------
 6978|  1.61M|        const auto ch = *it++;
 6979|  1.61M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.61M, False: 0]
  ------------------
 6980|  1.61M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.61M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.61M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 86.3k, False: 1.53M]
  ------------------
 6984|  86.3k|                return;
 6985|  86.3k|            }
 6986|  1.61M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.61M|    }
 6997|       |
 6998|  1.53M|    handler.on_literal_text(begin, end);
 6999|  1.53M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|  1.61M|{
 6903|  1.61M|    struct id_adapter {
 6904|  1.61M|        constexpr void operator()()
 6905|  1.61M|        {
 6906|  1.61M|            arg_id = handler.on_arg_id();
 6907|  1.61M|        }
 6908|  1.61M|        constexpr void operator()(std::size_t id)
 6909|  1.61M|        {
 6910|  1.61M|            arg_id = handler.on_arg_id(id);
 6911|  1.61M|        }
 6912|       |
 6913|  1.61M|        constexpr void on_error(const char* msg)
 6914|  1.61M|        {
 6915|  1.61M|            SCN_UNLIKELY_ATTR
 6916|  1.61M|            handler.on_error(msg);
 6917|  1.61M|        }
 6918|       |
 6919|  1.61M|        Handler& handler;
 6920|  1.61M|        std::size_t arg_id;
 6921|  1.61M|    };
 6922|       |
 6923|  1.61M|    ++begin;
 6924|  1.61M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.61M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.61M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.61M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.61M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.61M|    else {
 6936|  1.61M|        auto adapter = id_adapter{handler, 0};
 6937|  1.61M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.61M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.61M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.61M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.61M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.61M, False: 0]
  ------------------
 6948|  1.61M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.61M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.61M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  |  Branch (859:45): [True: 0, False: 1.61M]
  |  |  |  Branch (859:45): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.61M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.61M|    }
 6964|  1.61M|    return begin + 1;
 6965|  1.61M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|  3.26M|    {
 8000|  3.26M|        return m_args.get(id);
 8001|  3.26M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|  3.26M|    {
 8010|  3.26M|        return m_locale;
 8011|  3.26M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|  3.26M|    {
 5527|  3.26M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.26M]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  3.26M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  3.26M|        do_check_arg_id(id);
 5535|  3.26M|        return id;
 5536|  3.26M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|  3.26M|{
 6015|  3.26M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  3.26M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  3.26M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.61M|{
 6404|  1.61M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.61M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.61M, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.61M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.61M|    handler();
 6410|  1.61M|    return begin;
 6411|  1.61M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.61M|        {
 6906|  1.61M|            arg_id = handler.on_arg_id();
 6907|  1.61M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|  6.52M|    {
 5213|  6.52M|        return m_type;
 5214|  6.52M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|  3.26M|    {
 5522|  3.26M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  3.26M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|  6.52M|    {
 5511|  6.52M|        return m_format.data();
 5512|  6.52M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  1.61M|    {
 7083|  1.61M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.61M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|  1.61M|{
 6819|  1.61M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.61M|        if (*begin == CharT{'['}) {
 6821|  1.61M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.61M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.61M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.61M|                return begin;
 6827|  1.61M|            }
 6828|  1.61M|            handler.on_character_set_string(set);
 6829|  1.61M|            return begin;
 6830|  1.61M|        }
 6831|  1.61M|        if (*begin == CharT{'/'}) {
 6832|  1.61M|            return parse_presentation_regex(begin, end, handler);
 6833|  1.61M|        }
 6834|  1.61M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.61M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.61M|            handler.on_error("Invalid type specifier in format string");
 6837|  1.61M|            return begin;
 6838|  1.61M|        }
 6839|  1.61M|        handler.on_type(type);
 6840|  1.61M|        return begin;
 6841|  1.61M|    };
 6842|       |
 6843|  1.61M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.61M, False: 0]
  |  Branch (6843:28): [True: 1.61M, False: 0]
  ------------------
 6844|  1.61M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.61M, False: 0]
  |  Branch (6844:36): [True: 1.15M, False: 465k]
  ------------------
 6845|  1.15M|        return do_presentation();
 6846|  1.15M|    }
 6847|       |
 6848|   465k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|   465k|    begin = parse_align(begin, end, handler);
 6854|   465k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|   465k|    begin = parse_width(begin, end, handler);
 6860|   465k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|   465k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 465k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|   465k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 465k, False: 0]
  ------------------
 6879|   465k|        handler.on_localized();
 6880|   465k|        ++begin;
 6881|   465k|    }
 6882|   465k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|   465k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 465k, False: 0]
  |  Branch (6887:25): [True: 0, False: 465k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|   465k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|   465k|    return begin;
 6896|   465k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|  3.26M|{
 6468|  3.26M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 2.32M, False: 939k]
  |  Branch (6468:33): [True: 2.32M, False: 0]
  ------------------
 6469|  3.26M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 939k, False: 0]
  |  Branch (6469:33): [True: 939k, False: 0]
  ------------------
 6470|  3.26M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  1.15M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.15M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.15M]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.15M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.15M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.15M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.15M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.15M|        handler.on_type(type);
 6840|  1.15M|        return begin;
 6841|  1.15M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|  2.32M|{
 6416|  2.32M|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 2.32M]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 2.32M]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 2.32M]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 2.32M]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 2.32M]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 2.32M]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 2.32M]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 2.32M]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 2.32M]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 2.32M]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|  1.05M|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 1.05M, False: 1.26M]
  ------------------
 6435|  1.05M|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 2.32M]
  ------------------
 6436|  1.05M|            return presentation_type::float_hex;
 6437|  64.2k|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 64.2k, False: 2.25M]
  ------------------
 6438|  64.2k|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 2.32M]
  ------------------
 6439|  64.2k|            return presentation_type::float_scientific;
 6440|   411k|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 411k, False: 1.91M]
  ------------------
 6441|   411k|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 2.32M]
  ------------------
 6442|   411k|            return presentation_type::float_fixed;
 6443|   791k|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 791k, False: 1.53M]
  ------------------
 6444|   791k|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 2.32M]
  ------------------
 6445|   791k|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 2.32M]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 2.32M]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 2.32M]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 2.32M]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 2.32M]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.32M]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 2.32M]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|  2.32M|    }
 6463|  2.32M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|   465k|{
 6493|   465k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|   465k|    auto check_align = [](wchar_t ch) {
 6496|   465k|        switch (ch) {
 6497|   465k|            case L'<':
 6498|   465k|                return align_type::left;
 6499|   465k|            case L'>':
 6500|   465k|                return align_type::right;
 6501|   465k|            case L'^':
 6502|   465k|                return align_type::center;
 6503|   465k|            default:
 6504|   465k|                return align_type::none;
 6505|   465k|        }
 6506|   465k|    };
 6507|       |
 6508|   465k|    auto potential_fill_len = code_point_length(begin, end);
 6509|   465k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  |  Branch (859:45): [True: 0, False: 465k]
  |  |  |  Branch (859:45): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 6510|   465k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|   465k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|   465k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|   465k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|   465k|    const auto begin_before_fill = begin;
 6520|   465k|    begin += potential_fill_len;
 6521|       |
 6522|   465k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 465k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|   465k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|   465k|    const auto begin_after_fill = begin;
 6528|   465k|    ++begin;
 6529|       |
 6530|   465k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 465k, False: 0]
  ------------------
 6531|   465k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 465k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|   465k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 465k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|   465k|    }
 6539|       |
 6540|   465k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 465k, False: 0]
  ------------------
 6541|   465k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 465k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|   465k|        return begin_before_fill;
 6546|   465k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|   465k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|   939k|{
 6475|   939k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   939k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   939k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|   939k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|   939k|        return 1;
 6478|   939k|    }
 6479|   939k|    else {
 6480|   939k|        const auto lengths =
 6481|   939k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|   939k|            "\3\4";
 6483|   939k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|   939k|        return len;
 6485|   939k|    }
 6486|   939k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|   930k|    auto check_align = [](wchar_t ch) {
 6496|   930k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 930k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 930k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 930k]
  ------------------
 6502|      0|                return align_type::center;
 6503|   930k|            default:
  ------------------
  |  Branch (6503:13): [True: 930k, False: 0]
  ------------------
 6504|   930k|                return align_type::none;
 6505|   930k|        }
 6506|   930k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|   465k|{
 6558|   465k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|   465k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 465k, False: 0]
  |  Branch (6560:33): [True: 0, False: 465k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|   465k|    return begin;
 6571|   465k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|   465k|    {
 7088|   465k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|   465k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 465k, False: 0]
  ------------------
 7090|   465k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 465k, False: 0]
  ------------------
 7091|   465k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 465k]
  ------------------
 7092|   465k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|   465k|        Handler::on_localized();
 7100|   465k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.61M|{
 8378|  1.61M|#define SCN_VISIT(Type)                                         \
 8379|  1.61M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.61M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.61M|    }                                                           \
 8382|  1.61M|    else {                                                      \
 8383|  1.61M|        return vis(monostate_val);                              \
 8384|  1.61M|    }
 8385|       |
 8386|  1.61M|    monostate monostate_val{};
 8387|       |
 8388|  1.61M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.61M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.61M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.61M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.61M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.61M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.61M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.61M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.61M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.61M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.61M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.61M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.61M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.61M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.61M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.61M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   511k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 511k, False: 1.10M]
  ------------------
 8420|   511k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   511k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   511k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   511k|    }                                                           \
  |  | 8382|   511k|    else {                                                      \
  |  | 8383|   511k|        return vis(monostate_val);                              \
  |  | 8384|   511k|    }
  ------------------
 8421|   549k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 549k, False: 1.06M]
  ------------------
 8422|   549k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   549k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   549k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   549k|    }                                                           \
  |  | 8382|   549k|    else {                                                      \
  |  | 8383|   549k|        return vis(monostate_val);                              \
  |  | 8384|   549k|    }
  ------------------
 8423|   555k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 555k, False: 1.06M]
  ------------------
 8424|   555k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   555k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   555k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   555k|    }                                                           \
  |  | 8382|   555k|    else {                                                      \
  |  | 8383|   555k|        return vis(monostate_val);                              \
  |  | 8384|   555k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.61M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.61M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.61M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.61M]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.61M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.61M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.61M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.61M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.61M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.61M|            SCN_CLANG_POP
 8456|  1.61M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.64M|{
 7005|  1.64M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.64M|    handler.check_args_exhausted();
 7007|  1.64M|    return handler.get_error();
 7008|  1.64M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.64M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.64M|    auto begin = format.data();
 6974|  1.64M|    auto it = begin;
 6975|  1.64M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  3.20M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.64M, False: 1.55M]
  ------------------
 6978|  1.64M|        const auto ch = *it++;
 6979|  1.64M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.64M, False: 0]
  ------------------
 6980|  1.64M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.64M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.64M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 86.3k, False: 1.55M]
  ------------------
 6984|  86.3k|                return;
 6985|  86.3k|            }
 6986|  1.64M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.64M|    }
 6997|       |
 6998|  1.55M|    handler.on_literal_text(begin, end);
 6999|  1.55M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8135|  1.55M|    {
 8136|  1.55M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.55M|    static_cast<    \
  |  |  929|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.55M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6902|  1.64M|{
 6903|  1.64M|    struct id_adapter {
 6904|  1.64M|        constexpr void operator()()
 6905|  1.64M|        {
 6906|  1.64M|            arg_id = handler.on_arg_id();
 6907|  1.64M|        }
 6908|  1.64M|        constexpr void operator()(std::size_t id)
 6909|  1.64M|        {
 6910|  1.64M|            arg_id = handler.on_arg_id(id);
 6911|  1.64M|        }
 6912|       |
 6913|  1.64M|        constexpr void on_error(const char* msg)
 6914|  1.64M|        {
 6915|  1.64M|            SCN_UNLIKELY_ATTR
 6916|  1.64M|            handler.on_error(msg);
 6917|  1.64M|        }
 6918|       |
 6919|  1.64M|        Handler& handler;
 6920|  1.64M|        std::size_t arg_id;
 6921|  1.64M|    };
 6922|       |
 6923|  1.64M|    ++begin;
 6924|  1.64M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.64M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.64M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.64M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.64M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.64M|    else {
 6936|  1.64M|        auto adapter = id_adapter{handler, 0};
 6937|  1.64M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.64M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.64M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.64M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.64M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.64M, False: 0]
  ------------------
 6948|  1.64M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.64M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.64M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64M]
  |  |  |  Branch (859:45): [True: 0, False: 1.64M]
  |  |  |  Branch (859:45): [True: 0, False: 1.64M]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.64M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.64M|    }
 6964|  1.64M|    return begin + 1;
 6965|  1.64M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.64M|{
 6404|  1.64M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.64M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.64M, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.64M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.64M|    handler();
 6410|  1.64M|    return begin;
 6411|  1.64M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.64M|        {
 6906|  1.64M|            arg_id = handler.on_arg_id();
 6907|  1.64M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  1.64M|    {
 7083|  1.64M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.64M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6818|  1.64M|{
 6819|  1.64M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.64M|        if (*begin == CharT{'['}) {
 6821|  1.64M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.64M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.64M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.64M|                return begin;
 6827|  1.64M|            }
 6828|  1.64M|            handler.on_character_set_string(set);
 6829|  1.64M|            return begin;
 6830|  1.64M|        }
 6831|  1.64M|        if (*begin == CharT{'/'}) {
 6832|  1.64M|            return parse_presentation_regex(begin, end, handler);
 6833|  1.64M|        }
 6834|  1.64M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.64M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.64M|            handler.on_error("Invalid type specifier in format string");
 6837|  1.64M|            return begin;
 6838|  1.64M|        }
 6839|  1.64M|        handler.on_type(type);
 6840|  1.64M|        return begin;
 6841|  1.64M|    };
 6842|       |
 6843|  1.64M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.64M, False: 0]
  |  Branch (6843:28): [True: 1.64M, False: 0]
  ------------------
 6844|  1.64M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.64M, False: 0]
  |  Branch (6844:36): [True: 1.17M, False: 474k]
  ------------------
 6845|  1.17M|        return do_presentation();
 6846|  1.17M|    }
 6847|       |
 6848|   474k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|   474k|    begin = parse_align(begin, end, handler);
 6854|   474k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|   474k|    begin = parse_width(begin, end, handler);
 6860|   474k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|   474k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 474k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|   474k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 474k, False: 0]
  ------------------
 6879|   474k|        handler.on_localized();
 6880|   474k|        ++begin;
 6881|   474k|    }
 6882|   474k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|   474k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 474k, False: 0]
  |  Branch (6887:25): [True: 0, False: 474k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|   474k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|   474k|    return begin;
 6896|   474k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  1.17M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.17M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.17M]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.17M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.17M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.17M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.17M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.17M]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.17M|        handler.on_type(type);
 6840|  1.17M|        return begin;
 6841|  1.17M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6492|   474k|{
 6493|   474k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   474k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   474k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|   474k|    auto check_align = [](wchar_t ch) {
 6496|   474k|        switch (ch) {
 6497|   474k|            case L'<':
 6498|   474k|                return align_type::left;
 6499|   474k|            case L'>':
 6500|   474k|                return align_type::right;
 6501|   474k|            case L'^':
 6502|   474k|                return align_type::center;
 6503|   474k|            default:
 6504|   474k|                return align_type::none;
 6505|   474k|        }
 6506|   474k|    };
 6507|       |
 6508|   474k|    auto potential_fill_len = code_point_length(begin, end);
 6509|   474k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474k]
  |  |  |  Branch (859:45): [True: 0, False: 474k]
  |  |  |  Branch (859:45): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 6510|   474k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|   474k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|   474k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|   474k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|   474k|    const auto begin_before_fill = begin;
 6520|   474k|    begin += potential_fill_len;
 6521|       |
 6522|   474k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 474k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|   474k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|   474k|    const auto begin_after_fill = begin;
 6528|   474k|    ++begin;
 6529|       |
 6530|   474k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 474k, False: 0]
  ------------------
 6531|   474k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|   474k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 474k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|   474k|    }
 6539|       |
 6540|   474k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 474k, False: 0]
  ------------------
 6541|   474k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 474k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|   474k|        return begin_before_fill;
 6546|   474k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|   474k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|   948k|    auto check_align = [](wchar_t ch) {
 6496|   948k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 948k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 948k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 948k]
  ------------------
 6502|      0|                return align_type::center;
 6503|   948k|            default:
  ------------------
  |  Branch (6503:13): [True: 948k, False: 0]
  ------------------
 6504|   948k|                return align_type::none;
 6505|   948k|        }
 6506|   948k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6557|   474k|{
 6558|   474k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   474k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   474k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|   474k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 474k, False: 0]
  |  Branch (6560:33): [True: 0, False: 474k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|   474k|    return begin;
 6571|   474k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7087|   474k|    {
 7088|   474k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|   474k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 474k, False: 0]
  ------------------
 7090|   474k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 474k, False: 0]
  ------------------
 7091|   474k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 474k]
  ------------------
 7092|   474k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|   474k|        Handler::on_localized();
 7100|   474k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.64M|{
 8378|  1.64M|#define SCN_VISIT(Type)                                         \
 8379|  1.64M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.64M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.64M|    }                                                           \
 8382|  1.64M|    else {                                                      \
 8383|  1.64M|        return vis(monostate_val);                              \
 8384|  1.64M|    }
 8385|       |
 8386|  1.64M|    monostate monostate_val{};
 8387|       |
 8388|  1.64M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.64M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.64M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.64M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.64M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.64M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.64M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.64M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.64M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.64M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.64M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.64M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.64M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.64M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.64M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.64M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   521k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 521k, False: 1.12M]
  ------------------
 8420|   521k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   521k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   521k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   521k|    }                                                           \
  |  | 8382|   521k|    else {                                                      \
  |  | 8383|   521k|        return vis(monostate_val);                              \
  |  | 8384|   521k|    }
  ------------------
 8421|   559k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 559k, False: 1.08M]
  ------------------
 8422|   559k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   559k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   559k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   559k|    }                                                           \
  |  | 8382|   559k|    else {                                                      \
  |  | 8383|   559k|        return vis(monostate_val);                              \
  |  | 8384|   559k|    }
  ------------------
 8423|   565k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 565k, False: 1.08M]
  ------------------
 8424|   565k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   565k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   565k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   565k|    }                                                           \
  |  | 8382|   565k|    else {                                                      \
  |  | 8383|   565k|        return vis(monostate_val);                              \
  |  | 8384|   565k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.64M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.64M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.64M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.64M]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.64M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.64M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.64M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.64M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.64M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.64M|            SCN_CLANG_POP
 8456|  1.64M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4046|   112k|    {
 4047|   112k|        sync(0);
 4048|   112k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|   482k|    {
 5427|   482k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   482k|        return static_cast<std::size_t>(m_desc &
 5432|   482k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   482k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|   964k|    {
 5452|   964k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   964k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|   482k|    {
 5395|   482k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|   482k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|   482k|        const auto t = type(id);
 5407|   482k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|   482k|        basic_scan_arg<Context> arg;
 5412|   482k|        arg.m_type = t;
 5413|   482k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 482k, False: 0]
  ------------------
 5414|   482k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|   482k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|   482k|        return arg;
 5420|   482k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|   482k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|   482k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|   482k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|   482k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|   482k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|   482k|    {
 5456|   482k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|   482k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|   923k|    {
 5208|   923k|        return m_type != detail::arg_type::none_type;
 5209|   923k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  61.8k|{
 8378|  61.8k|#define SCN_VISIT(Type)                                         \
 8379|  61.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  61.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  61.8k|    }                                                           \
 8382|  61.8k|    else {                                                      \
 8383|  61.8k|        return vis(monostate_val);                              \
 8384|  61.8k|    }
 8385|       |
 8386|  61.8k|    monostate monostate_val{};
 8387|       |
 8388|  61.8k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 61.8k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 61.8k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 61.8k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 61.8k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 61.8k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 61.8k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 61.8k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 61.8k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 61.8k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 61.8k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 61.8k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 61.8k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 61.8k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 61.8k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 61.8k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  20.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 20.5k, False: 41.2k]
  ------------------
 8420|  20.5k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  20.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  20.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  20.5k|    }                                                           \
  |  | 8382|  20.5k|    else {                                                      \
  |  | 8383|  20.5k|        return vis(monostate_val);                              \
  |  | 8384|  20.5k|    }
  ------------------
 8421|  20.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 20.6k, False: 41.2k]
  ------------------
 8422|  20.6k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  20.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  20.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  20.6k|    }                                                           \
  |  | 8382|  20.6k|    else {                                                      \
  |  | 8383|  20.6k|        return vis(monostate_val);                              \
  |  | 8384|  20.6k|    }
  ------------------
 8423|  20.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 20.6k, False: 41.2k]
  ------------------
 8424|  20.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  20.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  20.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  20.6k|    }                                                           \
  |  | 8382|  20.6k|    else {                                                      \
  |  | 8383|  20.6k|        return vis(monostate_val);                              \
  |  | 8384|  20.6k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 61.8k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 61.8k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 61.8k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 61.8k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 61.8k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 61.8k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 61.8k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 61.8k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 61.8k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  61.8k|            SCN_CLANG_POP
 8456|  61.8k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|   399k|    {
 5506|   399k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|   199k|    {
 8099|   199k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|   399k|    {
 8017|   399k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   199k|{
 7005|   199k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   199k|    handler.check_args_exhausted();
 7007|   199k|    return handler.get_error();
 7008|   199k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   199k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   199k|    auto begin = format.data();
 6974|   199k|    auto it = begin;
 6975|   199k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   227k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 199k, False: 27.2k]
  ------------------
 6978|   199k|        const auto ch = *it++;
 6979|   199k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 199k, False: 0]
  ------------------
 6980|   199k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   199k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   199k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 172k, False: 27.2k]
  ------------------
 6984|   172k|                return;
 6985|   172k|            }
 6986|   199k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   199k|    }
 6997|       |
 6998|  27.2k|    handler.on_literal_text(begin, end);
 6999|  27.2k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|   199k|{
 6903|   199k|    struct id_adapter {
 6904|   199k|        constexpr void operator()()
 6905|   199k|        {
 6906|   199k|            arg_id = handler.on_arg_id();
 6907|   199k|        }
 6908|   199k|        constexpr void operator()(std::size_t id)
 6909|   199k|        {
 6910|   199k|            arg_id = handler.on_arg_id(id);
 6911|   199k|        }
 6912|       |
 6913|   199k|        constexpr void on_error(const char* msg)
 6914|   199k|        {
 6915|   199k|            SCN_UNLIKELY_ATTR
 6916|   199k|            handler.on_error(msg);
 6917|   199k|        }
 6918|       |
 6919|   199k|        Handler& handler;
 6920|   199k|        std::size_t arg_id;
 6921|   199k|    };
 6922|       |
 6923|   199k|    ++begin;
 6924|   199k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   199k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 199k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   199k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 199k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   199k|    else {
 6936|   199k|        auto adapter = id_adapter{handler, 0};
 6937|   199k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   199k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   199k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 199k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   199k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 199k, False: 0]
  ------------------
 6948|   199k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   199k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   199k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  |  Branch (859:45): [True: 0, False: 199k]
  |  |  |  Branch (859:45): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|   199k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   199k|    }
 6964|   199k|    return begin + 1;
 6965|   199k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|   399k|    {
 8000|   399k|        return m_args.get(id);
 8001|   399k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|   399k|    {
 8010|   399k|        return m_locale;
 8011|   399k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|   399k|    {
 5527|   399k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 399k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|   399k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|   399k|        do_check_arg_id(id);
 5535|   399k|        return id;
 5536|   399k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|   399k|{
 6015|   399k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|   399k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|   399k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   199k|{
 6404|   199k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   199k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 199k, False: 0]
  |  Branch (6405:26): [True: 0, False: 199k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   199k|    handler();
 6410|   199k|    return begin;
 6411|   199k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   199k|        {
 6906|   199k|            arg_id = handler.on_arg_id();
 6907|   199k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|   799k|    {
 5213|   799k|        return m_type;
 5214|   799k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|   399k|    {
 5522|   399k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|   399k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4314|   261k|{
 4315|   261k|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 261k]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|   261k|    return ranges::subrange{forward_iterator{this, 0},
 4320|   261k|                            ranges::default_sentinel};
 4321|   261k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4147|   261k|    {
 4148|   261k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|   261k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|   261k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|   799k|    {
 5511|   799k|        return m_format.data();
 5512|   799k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|   199k|    {
 7083|   199k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   199k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|   199k|{
 6819|   199k|    auto do_presentation = [&]() -> const CharT* {
 6820|   199k|        if (*begin == CharT{'['}) {
 6821|   199k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   199k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   199k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   199k|                return begin;
 6827|   199k|            }
 6828|   199k|            handler.on_character_set_string(set);
 6829|   199k|            return begin;
 6830|   199k|        }
 6831|   199k|        if (*begin == CharT{'/'}) {
 6832|   199k|            return parse_presentation_regex(begin, end, handler);
 6833|   199k|        }
 6834|   199k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   199k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   199k|            handler.on_error("Invalid type specifier in format string");
 6837|   199k|            return begin;
 6838|   199k|        }
 6839|   199k|        handler.on_type(type);
 6840|   199k|        return begin;
 6841|   199k|    };
 6842|       |
 6843|   199k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 199k, False: 0]
  |  Branch (6843:28): [True: 199k, False: 0]
  ------------------
 6844|   199k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 199k, False: 0]
  |  Branch (6844:36): [True: 158k, False: 41.2k]
  ------------------
 6845|   158k|        return do_presentation();
 6846|   158k|    }
 6847|       |
 6848|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  41.2k|    begin = parse_align(begin, end, handler);
 6854|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  41.2k|    begin = parse_width(begin, end, handler);
 6860|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  41.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 41.2k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  41.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 41.2k, False: 0]
  ------------------
 6879|  41.2k|        handler.on_localized();
 6880|  41.2k|        ++begin;
 6881|  41.2k|    }
 6882|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  41.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 41.2k, False: 0]
  |  Branch (6887:25): [True: 0, False: 41.2k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  41.2k|    return begin;
 6896|  41.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|   399k|{
 6468|   399k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 317k, False: 82.4k]
  |  Branch (6468:33): [True: 317k, False: 0]
  ------------------
 6469|   399k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 82.4k, False: 0]
  |  Branch (6469:33): [True: 82.4k, False: 0]
  ------------------
 6470|   399k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|   158k|    auto do_presentation = [&]() -> const CharT* {
 6820|   158k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 158k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|   158k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 158k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   158k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   158k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|   158k|        handler.on_type(type);
 6840|   158k|        return begin;
 6841|   158k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|   317k|{
 6416|   317k|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 317k]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 317k]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 317k]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 317k]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 317k]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 317k]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 317k]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 317k]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 317k]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 317k]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|  82.9k|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 82.9k, False: 234k]
  ------------------
 6435|  82.9k|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 317k]
  ------------------
 6436|  82.9k|            return presentation_type::float_hex;
 6437|  69.3k|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 69.3k, False: 248k]
  ------------------
 6438|  69.3k|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 317k]
  ------------------
 6439|  69.3k|            return presentation_type::float_scientific;
 6440|  82.5k|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 82.5k, False: 234k]
  ------------------
 6441|  82.5k|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 317k]
  ------------------
 6442|  82.5k|            return presentation_type::float_fixed;
 6443|  82.5k|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 82.5k, False: 234k]
  ------------------
 6444|  82.5k|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 317k]
  ------------------
 6445|  82.5k|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 317k]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 317k]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 317k]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 317k]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 317k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 317k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 317k]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|   317k|    }
 6463|   317k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  41.2k|{
 6493|  41.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  41.2k|    auto check_align = [](wchar_t ch) {
 6496|  41.2k|        switch (ch) {
 6497|  41.2k|            case L'<':
 6498|  41.2k|                return align_type::left;
 6499|  41.2k|            case L'>':
 6500|  41.2k|                return align_type::right;
 6501|  41.2k|            case L'^':
 6502|  41.2k|                return align_type::center;
 6503|  41.2k|            default:
 6504|  41.2k|                return align_type::none;
 6505|  41.2k|        }
 6506|  41.2k|    };
 6507|       |
 6508|  41.2k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  41.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  |  Branch (859:45): [True: 0, False: 41.2k]
  |  |  |  Branch (859:45): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6510|  41.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  41.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  41.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  41.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  41.2k|    const auto begin_before_fill = begin;
 6520|  41.2k|    begin += potential_fill_len;
 6521|       |
 6522|  41.2k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 41.2k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  41.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  41.2k|    const auto begin_after_fill = begin;
 6528|  41.2k|    ++begin;
 6529|       |
 6530|  41.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 41.2k, False: 0]
  ------------------
 6531|  41.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  41.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 41.2k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  41.2k|    }
 6539|       |
 6540|  41.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 41.2k, False: 0]
  ------------------
 6541|  41.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 41.2k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  41.2k|        return begin_before_fill;
 6546|  41.2k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  41.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  82.4k|{
 6475|  82.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  82.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  82.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  82.4k|        return 1;
 6478|  82.4k|    }
 6479|  82.4k|    else {
 6480|  82.4k|        const auto lengths =
 6481|  82.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  82.4k|            "\3\4";
 6483|  82.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  82.4k|        return len;
 6485|  82.4k|    }
 6486|  82.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  82.5k|    auto check_align = [](wchar_t ch) {
 6496|  82.5k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 82.5k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 82.5k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 82.5k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  82.5k|            default:
  ------------------
  |  Branch (6503:13): [True: 82.5k, False: 0]
  ------------------
 6504|  82.5k|                return align_type::none;
 6505|  82.5k|        }
 6506|  82.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  41.2k|{
 6558|  41.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  41.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 41.2k, False: 0]
  |  Branch (6560:33): [True: 0, False: 41.2k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  41.2k|    return begin;
 6571|  41.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|  41.2k|    {
 7088|  41.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  41.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 41.2k, False: 0]
  ------------------
 7090|  41.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 41.2k, False: 0]
  ------------------
 7091|  41.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 41.2k]
  ------------------
 7092|  41.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  41.2k|        Handler::on_localized();
 7100|  41.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   199k|{
 8378|   199k|#define SCN_VISIT(Type)                                         \
 8379|   199k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   199k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   199k|    }                                                           \
 8382|   199k|    else {                                                      \
 8383|   199k|        return vis(monostate_val);                              \
 8384|   199k|    }
 8385|       |
 8386|   199k|    monostate monostate_val{};
 8387|       |
 8388|   199k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 199k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 199k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 199k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 199k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 199k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 199k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 199k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 199k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 199k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 199k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 199k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 199k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 199k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 199k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 199k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  66.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 66.5k, False: 133k]
  ------------------
 8420|  66.5k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  66.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  66.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  66.5k|    }                                                           \
  |  | 8382|  66.5k|    else {                                                      \
  |  | 8383|  66.5k|        return vis(monostate_val);                              \
  |  | 8384|  66.5k|    }
  ------------------
 8421|  66.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 66.6k, False: 133k]
  ------------------
 8422|  66.6k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  66.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  66.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  66.6k|    }                                                           \
  |  | 8382|  66.6k|    else {                                                      \
  |  | 8383|  66.6k|        return vis(monostate_val);                              \
  |  | 8384|  66.6k|    }
  ------------------
 8423|  66.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 66.7k, False: 133k]
  ------------------
 8424|  66.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  66.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  66.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  66.7k|    }                                                           \
  |  | 8382|  66.7k|    else {                                                      \
  |  | 8383|  66.7k|        return vis(monostate_val);                              \
  |  | 8384|  66.7k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 199k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 199k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 199k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 199k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 199k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 199k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 199k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 199k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 199k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   199k|            SCN_CLANG_POP
 8456|   199k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  61.8k|{
 8378|  61.8k|#define SCN_VISIT(Type)                                         \
 8379|  61.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  61.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  61.8k|    }                                                           \
 8382|  61.8k|    else {                                                      \
 8383|  61.8k|        return vis(monostate_val);                              \
 8384|  61.8k|    }
 8385|       |
 8386|  61.8k|    monostate monostate_val{};
 8387|       |
 8388|  61.8k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 61.8k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 61.8k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 61.8k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 61.8k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 61.8k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 61.8k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 61.8k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 61.8k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 61.8k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 61.8k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 61.8k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 61.8k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 61.8k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 61.8k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 61.8k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  20.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 20.5k, False: 41.2k]
  ------------------
 8420|  20.5k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  20.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  20.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  20.5k|    }                                                           \
  |  | 8382|  20.5k|    else {                                                      \
  |  | 8383|  20.5k|        return vis(monostate_val);                              \
  |  | 8384|  20.5k|    }
  ------------------
 8421|  20.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 20.6k, False: 41.2k]
  ------------------
 8422|  20.6k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  20.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  20.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  20.6k|    }                                                           \
  |  | 8382|  20.6k|    else {                                                      \
  |  | 8383|  20.6k|        return vis(monostate_val);                              \
  |  | 8384|  20.6k|    }
  ------------------
 8423|  20.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 20.6k, False: 41.1k]
  ------------------
 8424|  20.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  20.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  20.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  20.6k|    }                                                           \
  |  | 8382|  20.6k|    else {                                                      \
  |  | 8383|  20.6k|        return vis(monostate_val);                              \
  |  | 8384|  20.6k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 61.8k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 61.8k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 61.8k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 61.8k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 61.8k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 61.8k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 61.8k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 61.8k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 61.8k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  61.8k|            SCN_CLANG_POP
 8456|  61.8k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   199k|{
 7005|   199k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   199k|    handler.check_args_exhausted();
 7007|   199k|    return handler.get_error();
 7008|   199k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   199k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   199k|    auto begin = format.data();
 6974|   199k|    auto it = begin;
 6975|   199k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   227k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 199k, False: 27.2k]
  ------------------
 6978|   199k|        const auto ch = *it++;
 6979|   199k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 199k, False: 0]
  ------------------
 6980|   199k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   199k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   199k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 172k, False: 27.2k]
  ------------------
 6984|   172k|                return;
 6985|   172k|            }
 6986|   199k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   199k|    }
 6997|       |
 6998|  27.2k|    handler.on_literal_text(begin, end);
 6999|  27.2k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8135|  27.2k|    {
 8136|  27.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  27.2k|    static_cast<    \
  |  |  929|  27.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  27.2k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6902|   199k|{
 6903|   199k|    struct id_adapter {
 6904|   199k|        constexpr void operator()()
 6905|   199k|        {
 6906|   199k|            arg_id = handler.on_arg_id();
 6907|   199k|        }
 6908|   199k|        constexpr void operator()(std::size_t id)
 6909|   199k|        {
 6910|   199k|            arg_id = handler.on_arg_id(id);
 6911|   199k|        }
 6912|       |
 6913|   199k|        constexpr void on_error(const char* msg)
 6914|   199k|        {
 6915|   199k|            SCN_UNLIKELY_ATTR
 6916|   199k|            handler.on_error(msg);
 6917|   199k|        }
 6918|       |
 6919|   199k|        Handler& handler;
 6920|   199k|        std::size_t arg_id;
 6921|   199k|    };
 6922|       |
 6923|   199k|    ++begin;
 6924|   199k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   199k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 199k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   199k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 199k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   199k|    else {
 6936|   199k|        auto adapter = id_adapter{handler, 0};
 6937|   199k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   199k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   199k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 199k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   199k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 199k, False: 0]
  ------------------
 6948|   199k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   199k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   199k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  |  Branch (859:45): [True: 0, False: 199k]
  |  |  |  Branch (859:45): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|   199k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   199k|    }
 6964|   199k|    return begin + 1;
 6965|   199k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   199k|{
 6404|   199k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   199k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 199k, False: 0]
  |  Branch (6405:26): [True: 0, False: 199k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   199k|    handler();
 6410|   199k|    return begin;
 6411|   199k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   199k|        {
 6906|   199k|            arg_id = handler.on_arg_id();
 6907|   199k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|   199k|    {
 7083|   199k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   199k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6818|   199k|{
 6819|   199k|    auto do_presentation = [&]() -> const CharT* {
 6820|   199k|        if (*begin == CharT{'['}) {
 6821|   199k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   199k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   199k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   199k|                return begin;
 6827|   199k|            }
 6828|   199k|            handler.on_character_set_string(set);
 6829|   199k|            return begin;
 6830|   199k|        }
 6831|   199k|        if (*begin == CharT{'/'}) {
 6832|   199k|            return parse_presentation_regex(begin, end, handler);
 6833|   199k|        }
 6834|   199k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   199k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   199k|            handler.on_error("Invalid type specifier in format string");
 6837|   199k|            return begin;
 6838|   199k|        }
 6839|   199k|        handler.on_type(type);
 6840|   199k|        return begin;
 6841|   199k|    };
 6842|       |
 6843|   199k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 199k, False: 0]
  |  Branch (6843:28): [True: 199k, False: 0]
  ------------------
 6844|   199k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 199k, False: 0]
  |  Branch (6844:36): [True: 158k, False: 41.2k]
  ------------------
 6845|   158k|        return do_presentation();
 6846|   158k|    }
 6847|       |
 6848|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  41.2k|    begin = parse_align(begin, end, handler);
 6854|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  41.2k|    begin = parse_width(begin, end, handler);
 6860|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  41.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 41.2k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  41.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 41.2k, False: 0]
  ------------------
 6879|  41.2k|        handler.on_localized();
 6880|  41.2k|        ++begin;
 6881|  41.2k|    }
 6882|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  41.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 41.2k, False: 0]
  |  Branch (6887:25): [True: 0, False: 41.2k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  41.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  41.2k|    return begin;
 6896|  41.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|   158k|    auto do_presentation = [&]() -> const CharT* {
 6820|   158k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 158k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|   158k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 158k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   158k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   158k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|   158k|        handler.on_type(type);
 6840|   158k|        return begin;
 6841|   158k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6492|  41.2k|{
 6493|  41.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  41.2k|    auto check_align = [](wchar_t ch) {
 6496|  41.2k|        switch (ch) {
 6497|  41.2k|            case L'<':
 6498|  41.2k|                return align_type::left;
 6499|  41.2k|            case L'>':
 6500|  41.2k|                return align_type::right;
 6501|  41.2k|            case L'^':
 6502|  41.2k|                return align_type::center;
 6503|  41.2k|            default:
 6504|  41.2k|                return align_type::none;
 6505|  41.2k|        }
 6506|  41.2k|    };
 6507|       |
 6508|  41.2k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  41.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  82.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  |  Branch (859:45): [True: 0, False: 41.2k]
  |  |  |  Branch (859:45): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6510|  41.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  41.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  41.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  41.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  41.2k|    const auto begin_before_fill = begin;
 6520|  41.2k|    begin += potential_fill_len;
 6521|       |
 6522|  41.2k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 41.2k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  41.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  41.2k|    const auto begin_after_fill = begin;
 6528|  41.2k|    ++begin;
 6529|       |
 6530|  41.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 41.2k, False: 0]
  ------------------
 6531|  41.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  41.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 41.2k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  41.2k|    }
 6539|       |
 6540|  41.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 41.2k, False: 0]
  ------------------
 6541|  41.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 41.2k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  41.2k|        return begin_before_fill;
 6546|  41.2k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  41.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  82.4k|    auto check_align = [](wchar_t ch) {
 6496|  82.4k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 82.4k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 82.4k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 82.4k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  82.4k|            default:
  ------------------
  |  Branch (6503:13): [True: 82.4k, False: 0]
  ------------------
 6504|  82.4k|                return align_type::none;
 6505|  82.4k|        }
 6506|  82.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6557|  41.2k|{
 6558|  41.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  41.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 41.2k, False: 0]
  |  Branch (6560:33): [True: 0, False: 41.2k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  41.2k|    return begin;
 6571|  41.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7087|  41.2k|    {
 7088|  41.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  41.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 41.2k, False: 0]
  ------------------
 7090|  41.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 41.2k, False: 0]
  ------------------
 7091|  41.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 41.2k]
  ------------------
 7092|  41.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  41.2k|        Handler::on_localized();
 7100|  41.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   199k|{
 8378|   199k|#define SCN_VISIT(Type)                                         \
 8379|   199k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   199k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   199k|    }                                                           \
 8382|   199k|    else {                                                      \
 8383|   199k|        return vis(monostate_val);                              \
 8384|   199k|    }
 8385|       |
 8386|   199k|    monostate monostate_val{};
 8387|       |
 8388|   199k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 199k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 199k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 199k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 199k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 199k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 199k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 199k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 199k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 199k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 199k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 199k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 199k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 199k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 199k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 199k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  66.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 66.5k, False: 133k]
  ------------------
 8420|  66.5k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  66.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  66.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  66.5k|    }                                                           \
  |  | 8382|  66.5k|    else {                                                      \
  |  | 8383|  66.5k|        return vis(monostate_val);                              \
  |  | 8384|  66.5k|    }
  ------------------
 8421|  66.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 66.6k, False: 133k]
  ------------------
 8422|  66.6k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  66.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  66.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  66.6k|    }                                                           \
  |  | 8382|  66.6k|    else {                                                      \
  |  | 8383|  66.6k|        return vis(monostate_val);                              \
  |  | 8384|  66.6k|    }
  ------------------
 8423|  66.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 66.7k, False: 133k]
  ------------------
 8424|  66.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  66.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  66.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  66.7k|    }                                                           \
  |  | 8382|  66.7k|    else {                                                      \
  |  | 8383|  66.7k|        return vis(monostate_val);                              \
  |  | 8384|  66.7k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 199k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 199k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 199k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 199k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 199k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 199k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 199k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 199k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 199k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   199k|            SCN_CLANG_POP
 8456|   199k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4046|   224k|    {
 4047|   224k|        sync(0);
 4048|   224k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5380|   449k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5380|  41.2k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  40.1k|{
   89|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  40.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  40.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   120k|{
   44|   120k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   120k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  40.1k|{
  127|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  40.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  40.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   120k|{
   60|   120k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   120k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  6.86k|{
  163|  6.86k|    T value;
  164|  6.86k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.86k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.75k, False: 1.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.75k|    }                                                  \
  |  |  |  | 3642|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.10k|    static_cast<    \
  |  |  929|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.10k|    static_cast<    \
  |  |  929|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.86k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  20.6k|{
   72|  20.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  20.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  40.1k|{
   89|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  40.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  40.1k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  40.1k|{
  127|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  40.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  40.1k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  6.87k|{
  163|  6.87k|    T value;
  164|  6.87k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.75k, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.75k|    }                                                  \
  |  |  |  | 3642|  6.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.11k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.11k|    static_cast<    \
  |  |  929|  1.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.11k|    static_cast<    \
  |  |  929|  1.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.87k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  40.2k|{
   89|  40.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  40.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  40.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  40.2k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  40.2k|{
  127|  40.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  40.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  40.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  40.2k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  6.89k|{
  163|  6.89k|    T value;
  164|  6.89k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.89k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.75k, False: 1.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.75k|    }                                                  \
  |  |  |  | 3642|  6.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.13k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.13k|    static_cast<    \
  |  |  929|  1.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.13k|    static_cast<    \
  |  |  929|  1.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.89k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  40.1k|{
   89|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  40.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  40.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   120k|{
   44|   120k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   120k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  40.1k|{
  127|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  40.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  40.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   120k|{
   60|   120k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   120k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  6.85k|{
  163|  6.85k|    T value;
  164|  6.85k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.85k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.75k, False: 1.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.75k|    }                                                  \
  |  |  |  | 3642|  6.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.09k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.85k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  20.6k|{
   72|  20.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  20.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  40.1k|{
   89|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  40.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  40.1k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  40.1k|{
  127|  40.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  40.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  40.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  40.1k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  6.86k|{
  163|  6.86k|    T value;
  164|  6.86k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.86k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.75k, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.75k|    }                                                  \
  |  |  |  | 3642|  6.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.11k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.11k|    static_cast<    \
  |  |  929|  1.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.11k|    static_cast<    \
  |  |  929|  1.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.86k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  40.2k|{
   89|  40.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  40.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  40.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  40.2k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  40.2k|{
  127|  40.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  40.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  40.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.2k|    static_cast<    \
  |  |  929|  40.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  40.2k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  6.88k|{
  163|  6.88k|    T value;
  164|  6.88k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.88k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.75k, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.75k|    }                                                  \
  |  |  |  | 3642|  6.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.12k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.12k|    static_cast<    \
  |  |  929|  1.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.88k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.32M|{
  653|  2.32M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.32M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.01M|{
  659|  1.01M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.01M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 505k, False: 505k]
  ------------------
  661|  1.01M|                    : std::locale{};
  662|  1.01M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.39M|{
 1221|  1.39M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.39M|                                  m_nan_payload_buffer, value);
 1223|  1.39M|    value = this->setsign(value);
 1224|  1.39M|    return n;
 1225|  1.39M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  64.8k|{
 1221|  64.8k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  64.8k|                                  m_nan_payload_buffer, value);
 1223|  64.8k|    value = this->setsign(value);
 1224|  64.8k|    return n;
 1225|  64.8k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.51M|{
 1221|  1.51M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.51M|                                  m_nan_payload_buffer, value);
 1223|  1.51M|    value = this->setsign(value);
 1224|  1.51M|    return n;
 1225|  1.51M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  64.8k|{
 1221|  64.8k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  64.8k|                                  m_nan_payload_buffer, value);
 1223|  64.8k|    value = this->setsign(value);
 1224|  64.8k|    return n;
 1225|  64.8k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.53M|{
 1221|  1.53M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.53M|                                  m_nan_payload_buffer, value);
 1223|  1.53M|    value = this->setsign(value);
 1224|  1.53M|    return n;
 1225|  1.53M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  64.9k|{
 1221|  64.9k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  64.9k|                                  m_nan_payload_buffer, value);
 1223|  64.9k|    value = this->setsign(value);
 1224|  64.9k|    return n;
 1225|  64.9k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  1.04M|{
 2176|  1.04M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  1.04M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.03M|{
 2184|  1.03M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.03M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 987k, False: 51.8k]
  |  |  ------------------
  ------------------
 2186|   987k|        source.sync(*n);
 2187|   987k|    }
 2188|  51.8k|    else {
 2189|  51.8k|        source.sync_all();
 2190|  51.8k|    }
 2191|  1.03M|    return n;
 2192|  1.03M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   120k|{
 2200|   120k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   120k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   120k|{
 2208|   120k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   120k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   120k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.9k, False: 103k]
  |  |  ------------------
  ------------------
 2210|  16.9k|        source.sync(*n);
 2211|  16.9k|    }
 2212|   103k|    else {
 2213|   103k|        source.sync_all();
 2214|   103k|    }
 2215|   120k|    return n;
 2216|   120k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.04M|{
  194|  2.04M|    return find_classic_impl(
  195|  2.04M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.04M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.04M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  4.59M|{
  202|  4.59M|    return find_classic_impl(
  203|  4.59M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  4.59M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  4.59M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  1.04M|{
 2133|  1.04M|    return vscan_internal(source, format, args);
 2134|  1.04M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  1.03M|{
 2139|  1.03M|    auto n = vscan_internal(source, format, args);
 2140|  1.03M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 987k, False: 51.8k]
  |  |  ------------------
  ------------------
 2141|   987k|        source.sync(*n);
 2142|   987k|    }
 2143|  51.8k|    else {
 2144|  51.8k|        source.sync_all();
 2145|  51.8k|    }
 2146|  1.03M|    return n;
 2147|  1.03M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   120k|{
 2153|   120k|    return vscan_internal(source, format, args);
 2154|   120k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   120k|{
 2159|   120k|    auto n = vscan_internal(source, format, args);
 2160|   120k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   120k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.9k, False: 103k]
  |  |  ------------------
  ------------------
 2161|  16.9k|        source.sync(*n);
 2162|  16.9k|    }
 2163|   103k|    else {
 2164|   103k|        source.sync_all();
 2165|   103k|    }
 2166|   120k|    return n;
 2167|   120k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   232k|{
 2243|   232k|    return vscan_value_internal(source, arg);
 2244|   232k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   216k|{
 2248|   216k|    auto n = vscan_value_internal(source, arg);
 2249|   216k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   216k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 208k, False: 8.63k]
  |  |  ------------------
  ------------------
 2250|   208k|        source.sync(*n);
 2251|   208k|    }
 2252|  8.63k|    else {
 2253|  8.63k|        source.sync_all();
 2254|  8.63k|    }
 2255|   216k|    return n;
 2256|   216k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  20.6k|{
 2262|  20.6k|    return vscan_value_internal(source, arg);
 2263|  20.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  20.6k|{
 2268|  20.6k|    auto n = vscan_value_internal(source, arg);
 2269|  20.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  20.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.33k, False: 17.2k]
  |  |  ------------------
  ------------------
 2270|  3.33k|        source.sync(*n);
 2271|  3.33k|    }
 2272|  17.2k|    else {
 2273|  17.2k|        source.sync_all();
 2274|  17.2k|    }
 2275|  20.6k|    return n;
 2276|  20.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.04M|{
  118|  2.04M|    auto it = source.begin();
  119|       |
  120|  8.49M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 7.26M, False: 1.23M]
  ------------------
  121|  7.26M|        auto sv =
  122|  7.26M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  7.26M|                .substr(0, 8);
  124|       |
  125|  7.26M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.10M, False: 161k]
  ------------------
  126|  7.10M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.10M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.10M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 747k, False: 6.35M]
  ------------------
  129|   747k|                break;
  130|   747k|            }
  131|  6.35M|            continue;
  132|  7.10M|        }
  133|       |
  134|   554k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 460k, False: 94.4k]
  ------------------
  135|   460k|            auto tmp =
  136|   460k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   460k|            auto res = get_next_code_point(tmp);
  138|   460k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 66.7k, False: 393k]
  ------------------
  139|  66.7k|                return it;
  140|  66.7k|            }
  141|   393k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   393k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   393k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   393k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   393k|        }
  145|   161k|    }
  146|       |
  147|  1.98M|    return detail::make_string_view_iterator(source, it);
  148|  2.04M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  10.2M|{
  105|  10.2M|    static_assert(sizeof(*source.data()) == 1);
  106|  10.2M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  10.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  10.2M|    uint64_t word{};
  108|  10.2M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  10.2M|    return has_byte_greater(word, 127) != 0;
  111|  10.2M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  47.0M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   460k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.59M|{
  118|  4.59M|    auto it = source.begin();
  119|       |
  120|  4.98M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.96M, False: 2.02M]
  ------------------
  121|  2.96M|        auto sv =
  122|  2.96M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.96M|                .substr(0, 8);
  124|       |
  125|  2.96M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.79M, False: 172k]
  ------------------
  126|  2.79M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.79M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.79M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.41M, False: 378k]
  ------------------
  129|  2.41M|                break;
  130|  2.41M|            }
  131|   378k|            continue;
  132|  2.79M|        }
  133|       |
  134|   325k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 313k, False: 12.5k]
  ------------------
  135|   313k|            auto tmp =
  136|   313k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   313k|            auto res = get_next_code_point(tmp);
  138|   313k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 159k, False: 153k]
  ------------------
  139|   159k|                return it;
  140|   159k|            }
  141|   153k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   153k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   153k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   153k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   153k|        }
  145|   172k|    }
  146|       |
  147|  4.43M|    return detail::make_string_view_iterator(source, it);
  148|  4.59M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.42M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   313k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.39M|{
 1138|  1.39M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 13.2k, False: 1.38M]
  ------------------
 1139|  13.2k|        value = std::numeric_limits<T>::infinity();
 1140|  13.2k|        return 3;
 1141|  13.2k|    }
 1142|  1.38M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 9.91k, False: 1.37M]
  ------------------
 1143|  9.91k|        value = std::numeric_limits<T>::infinity();
 1144|  9.91k|        return 8;
 1145|  9.91k|    }
 1146|  1.37M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 56.7k, False: 1.31M]
  ------------------
 1147|  56.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  56.7k|        return 3;
 1149|  56.7k|    }
 1150|  1.31M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.31M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.31M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.31M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 300k, False: 1.01M]
  ------------------
 1185|   300k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.80k, False: 297k]
  |  |  ------------------
  ------------------
 1186|  2.80k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.80k|                                         "Invalid floating-point digit");
 1188|  2.80k|        }
 1189|   300k|    }
 1190|  1.31M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.51k, False: 1.30M]
  |  |  ------------------
  ------------------
 1191|  7.51k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.51k|                                     "Invalid floating-point digit");
 1193|  7.51k|    }
 1194|       |
 1195|  1.30M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.30M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.30M|            double tmp{};
 1200|  1.30M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.30M|            value = tmp;
 1202|  1.30M|            return ret;
 1203|  1.30M|        }
 1204|  1.30M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.30M|            return fast_float_fallback(data, value);
 1208|  1.30M|        }
 1209|  1.30M|    }
 1210|  1.30M|    else {
 1211|       |        // Default to fast_float
 1212|  1.30M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.30M|    }
 1214|  1.30M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.30M|    {
 1078|  1.30M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  4.87M|    {
  712|  4.87M|        return {kind, options};
  713|  4.87M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.30M|    {
 1082|  1.30M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 297k, False: 1.00M]
  ------------------
 1083|  1.30M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 49.9k, False: 956k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   347k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   347k|                                              value);
 1087|   347k|        }
 1088|       |
 1089|   956k|        const auto flags = get_flags();
 1090|   956k|        const auto view = get_view();
 1091|   956k|        const auto result = fast_float::from_chars(
 1092|   956k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   956k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   956k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 956k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   956k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   956k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.27k, False: 946k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  9.27k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  9.27k|                                              value);
 1102|  9.27k|        }
 1103|       |
 1104|   946k|        return result.ptr - view.data();
 1105|   956k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   356k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   356k|    {
 1048|   356k|#if !SCN_DISABLE_STRTOD
 1049|   356k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   356k|    }
 1056|   356k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   356k|    {
  894|   356k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   362k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   356k|    {
  898|   356k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   356k|                           generic_strtod);
  900|   356k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   356k|    {
  732|   356k|        CharT* end{};
  733|   356k|        errno = 0;
  734|   356k|        value = strtod_cb(src, &end);
  735|   356k|        const auto saved_errno = errno;
  736|   356k|        auto chars_read = end - src;
  737|       |
  738|   356k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   356k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.9k, False: 345k]
  |  |  ------------------
  ------------------
  740|  10.9k|            return unexpected(e);
  741|  10.9k|        }
  742|       |
  743|   345k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 296k, False: 49.5k]
  ------------------
  744|   345k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 296k, False: 0]
  ------------------
  745|   296k|            chars_read -= 2;
  746|   296k|        }
  747|       |
  748|   345k|        return chars_read;
  749|   356k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   362k|    {
  778|   362k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 92.5k, False: 269k]
  |  Branch (778:37): [True: 0, False: 92.5k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   362k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 50.0k, False: 311k]
  ------------------
  785|   362k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 50.0k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   362k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 12.1k, False: 349k]
  |  Branch (791:34): [True: 1.66k, False: 10.4k]
  ------------------
  792|  1.66k|            SCN_UNLIKELY_ATTR
  793|  1.66k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.66k|        }
  795|       |
  796|   360k|        SCN_GCC_COMPAT_PUSH
  797|   360k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   360k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 360k, False: 0]
  ------------------
  800|   360k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 360k, False: 0]
  ------------------
  801|   360k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 9.81k, False: 350k]
  ------------------
  802|  9.81k|            SCN_UNLIKELY_ATTR
  803|  9.81k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  9.81k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   350k|            return {};
  809|   360k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   374k|{
  687|   374k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 94.2k, False: 279k]
  |  Branch (687:25): [True: 0, False: 279k]
  ------------------
  688|   374k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   356k|    {
  755|   356k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 350k, False: 6.53k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   350k|            auto first_space = read_until_classic_space(input.view());
  758|   350k|            input.assign(
  759|   350k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   350k|        }
  761|       |
  762|   356k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 297k, False: 59.2k]
  ------------------
  763|   297k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   297k|                input.get_allocated_string().insert(0, "0x");
  765|   297k|            }
  766|   297k|            else {
  767|   297k|                input.get_allocated_string().insert(0, L"0x");
  768|   297k|            }
  769|   297k|        }
  770|       |
  771|   356k|        return input.get_allocated_string().c_str();
  772|   356k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   356k|    {
  905|   356k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   356k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   356k|        }
  908|   356k|        else {
  909|   356k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   356k|        }
  911|   356k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   356k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   356k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   356k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   356k|            return std::strtof(str, str_end);
  839|   356k|        }
  840|   356k|        else if constexpr (std::is_same_v<T, double>) {
  841|   356k|            return std::strtod(str, str_end);
  842|   356k|        }
  843|   356k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   356k|            return std::strtold(str, str_end);
  845|   356k|        }
  846|   356k|#endif
  847|   356k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.04M|    {
 1061|  2.04M|        unsigned format_flags{};
 1062|  2.04M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.02M, False: 18.5k]
  ------------------
 1063|  2.02M|            format_flags |= fast_float::fixed;
 1064|  2.02M|        }
 1065|  2.04M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.79M, False: 250k]
  ------------------
 1066|  1.79M|            format_flags |= fast_float::scientific;
 1067|  1.79M|        }
 1068|       |
 1069|  2.04M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.04M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   956k|    {
 1110|   956k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   956k|            return m_input.view();
 1112|   956k|        }
 1113|   956k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   956k|            return std::u16string_view{
 1115|   956k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   956k|                m_input.view().size()};
 1117|   956k|        }
 1118|   956k|        else {
 1119|   956k|            return std::u32string_view{
 1120|   956k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   956k|                m_input.view().size()};
 1122|   956k|        }
 1123|   956k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  64.8k|{
 1138|  64.8k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 64.8k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  64.8k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 64.8k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  64.8k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 64.8k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  64.8k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 64.8k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  64.8k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  64.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  64.8k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 15.9k, False: 48.8k]
  ------------------
 1185|  15.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 4.63k]
  |  |  ------------------
  ------------------
 1186|  11.3k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.3k|                                         "Invalid floating-point digit");
 1188|  11.3k|        }
 1189|  15.9k|    }
 1190|  53.5k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.3k, False: 25.1k]
  |  |  ------------------
  ------------------
 1191|  28.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  28.3k|                                     "Invalid floating-point digit");
 1193|  28.3k|    }
 1194|       |
 1195|  25.1k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  25.1k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  25.1k|            double tmp{};
 1200|  25.1k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  25.1k|            value = tmp;
 1202|  25.1k|            return ret;
 1203|  25.1k|        }
 1204|  25.1k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  25.1k|            return fast_float_fallback(data, value);
 1208|  25.1k|        }
 1209|  25.1k|    }
 1210|  25.1k|    else {
 1211|       |        // Default to fast_float
 1212|  25.1k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  25.1k|    }
 1214|  25.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  25.1k|    {
 1078|  25.1k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  85.5k|    {
  712|  85.5k|        return {kind, options};
  713|  85.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  25.1k|    {
 1082|  25.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 4.60k, False: 20.5k]
  ------------------
 1083|  25.1k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 98, False: 20.4k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  4.70k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  4.70k|                                              value);
 1087|  4.70k|        }
 1088|       |
 1089|  20.4k|        const auto flags = get_flags();
 1090|  20.4k|        const auto view = get_view();
 1091|  20.4k|        const auto result = fast_float::from_chars(
 1092|  20.4k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  20.4k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  20.4k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486, False: 19.9k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    486|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    486|                                              value);
 1102|    486|        }
 1103|       |
 1104|  19.9k|        return result.ptr - view.data();
 1105|  20.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  5.19k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  5.19k|    {
 1048|  5.19k|#if !SCN_DISABLE_STRTOD
 1049|  5.19k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  5.19k|    }
 1056|  5.19k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  5.19k|    {
  894|  5.19k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  5.19k|    {
  898|  5.19k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  5.19k|                           generic_strtod);
  900|  5.19k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  5.19k|    {
  732|  5.19k|        CharT* end{};
  733|  5.19k|        errno = 0;
  734|  5.19k|        value = strtod_cb(src, &end);
  735|  5.19k|        const auto saved_errno = errno;
  736|  5.19k|        auto chars_read = end - src;
  737|       |
  738|  5.19k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  5.19k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 494, False: 4.69k]
  |  |  ------------------
  ------------------
  740|    494|            return unexpected(e);
  741|    494|        }
  742|       |
  743|  4.69k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 4.60k, False: 98]
  ------------------
  744|  4.69k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 4.60k, False: 0]
  ------------------
  745|  4.60k|            chars_read -= 2;
  746|  4.60k|        }
  747|       |
  748|  4.69k|        return chars_read;
  749|  5.19k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  5.19k|    {
  755|  5.19k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 4.81k, False: 381]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  4.81k|            auto first_space = read_until_classic_space(input.view());
  758|  4.81k|            input.assign(
  759|  4.81k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  4.81k|        }
  761|       |
  762|  5.19k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 4.60k, False: 584]
  ------------------
  763|  4.60k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  4.60k|                input.get_allocated_string().insert(0, "0x");
  765|  4.60k|            }
  766|  4.60k|            else {
  767|  4.60k|                input.get_allocated_string().insert(0, L"0x");
  768|  4.60k|            }
  769|  4.60k|        }
  770|       |
  771|  5.19k|        return input.get_allocated_string().c_str();
  772|  5.19k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  5.19k|    {
  905|  5.19k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  5.19k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  5.19k|        }
  908|  5.19k|        else {
  909|  5.19k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  5.19k|        }
  911|  5.19k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  5.19k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  5.19k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  5.19k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  5.19k|            return std::wcstof(str, str_end);
  877|  5.19k|        }
  878|  5.19k|        else if constexpr (std::is_same_v<T, double>) {
  879|  5.19k|            return std::wcstod(str, str_end);
  880|  5.19k|        }
  881|  5.19k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  5.19k|            return std::wcstold(str, str_end);
  883|  5.19k|        }
  884|  5.19k|#endif
  885|  5.19k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  20.4k|    {
 1110|  20.4k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  20.4k|            return m_input.view();
 1112|  20.4k|        }
 1113|  20.4k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  20.4k|            return std::u16string_view{
 1115|  20.4k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  20.4k|                m_input.view().size()};
 1117|  20.4k|        }
 1118|  20.4k|        else {
 1119|  20.4k|            return std::u32string_view{
 1120|  20.4k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  20.4k|                m_input.view().size()};
 1122|  20.4k|        }
 1123|  20.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.51M|{
 1138|  1.51M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.5k, False: 1.49M]
  ------------------
 1139|  14.5k|        value = std::numeric_limits<T>::infinity();
 1140|  14.5k|        return 3;
 1141|  14.5k|    }
 1142|  1.49M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.4k, False: 1.48M]
  ------------------
 1143|  10.4k|        value = std::numeric_limits<T>::infinity();
 1144|  10.4k|        return 8;
 1145|  10.4k|    }
 1146|  1.48M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 58.6k, False: 1.42M]
  ------------------
 1147|  58.6k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  58.6k|        return 3;
 1149|  58.6k|    }
 1150|  1.42M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.42M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.42M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.42M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 313k, False: 1.11M]
  ------------------
 1185|   313k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.05k, False: 310k]
  |  |  ------------------
  ------------------
 1186|  3.05k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.05k|                                         "Invalid floating-point digit");
 1188|  3.05k|        }
 1189|   313k|    }
 1190|  1.42M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.74k, False: 1.41M]
  |  |  ------------------
  ------------------
 1191|  8.74k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.74k|                                     "Invalid floating-point digit");
 1193|  8.74k|    }
 1194|       |
 1195|  1.41M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.41M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.41M|            double tmp{};
 1200|  1.41M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.41M|            value = tmp;
 1202|  1.41M|            return ret;
 1203|  1.41M|        }
 1204|  1.41M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.41M|            return fast_float_fallback(data, value);
 1208|  1.41M|        }
 1209|  1.41M|    }
 1210|  1.41M|    else {
 1211|       |        // Default to fast_float
 1212|  1.41M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.41M|    }
 1214|  1.41M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.41M|    {
 1078|  1.41M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.41M|    {
 1082|  1.41M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 309k, False: 1.10M]
  ------------------
 1083|  1.41M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 58.4k, False: 1.04M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   368k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   368k|                                              value);
 1087|   368k|        }
 1088|       |
 1089|  1.04M|        const auto flags = get_flags();
 1090|  1.04M|        const auto view = get_view();
 1091|  1.04M|        const auto result = fast_float::from_chars(
 1092|  1.04M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.04M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.04M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.12k, False: 1.04M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.12k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.12k|                                              value);
 1102|  4.12k|        }
 1103|       |
 1104|  1.04M|        return result.ptr - view.data();
 1105|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   372k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   372k|    {
 1048|   372k|#if !SCN_DISABLE_STRTOD
 1049|   372k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   372k|    }
 1056|   372k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   372k|    {
  894|   372k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   377k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   372k|    {
  898|   372k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   372k|                           generic_strtod);
  900|   372k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   372k|    {
  732|   372k|        CharT* end{};
  733|   372k|        errno = 0;
  734|   372k|        value = strtod_cb(src, &end);
  735|   372k|        const auto saved_errno = errno;
  736|   372k|        auto chars_read = end - src;
  737|       |
  738|   372k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   372k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.68k, False: 367k]
  |  |  ------------------
  ------------------
  740|  4.68k|            return unexpected(e);
  741|  4.68k|        }
  742|       |
  743|   367k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 309k, False: 58.3k]
  ------------------
  744|   367k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 309k, False: 0]
  ------------------
  745|   309k|            chars_read -= 2;
  746|   309k|        }
  747|       |
  748|   367k|        return chars_read;
  749|   372k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   377k|    {
  778|   377k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 94.4k, False: 282k]
  |  Branch (778:37): [True: 0, False: 94.4k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   377k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 58.5k, False: 318k]
  ------------------
  785|   377k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 58.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   377k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.95k, False: 372k]
  |  Branch (791:34): [True: 498, False: 4.45k]
  ------------------
  792|    498|            SCN_UNLIKELY_ATTR
  793|    498|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    498|        }
  795|       |
  796|   376k|        SCN_GCC_COMPAT_PUSH
  797|   376k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   376k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 376k, False: 0]
  ------------------
  800|   376k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 376k, False: 0]
  ------------------
  801|   376k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.45k, False: 372k]
  ------------------
  802|  4.45k|            SCN_UNLIKELY_ATTR
  803|  4.45k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.45k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   372k|            return {};
  809|   376k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   382k|{
  691|   382k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 94.9k, False: 287k]
  |  Branch (691:24): [True: 0, False: 287k]
  ------------------
  692|   382k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   372k|    {
  755|   372k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 367k, False: 4.63k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   367k|            auto first_space = read_until_classic_space(input.view());
  758|   367k|            input.assign(
  759|   367k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   367k|        }
  761|       |
  762|   372k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 309k, False: 62.5k]
  ------------------
  763|   309k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   309k|                input.get_allocated_string().insert(0, "0x");
  765|   309k|            }
  766|   309k|            else {
  767|   309k|                input.get_allocated_string().insert(0, L"0x");
  768|   309k|            }
  769|   309k|        }
  770|       |
  771|   372k|        return input.get_allocated_string().c_str();
  772|   372k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   372k|    {
  905|   372k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   372k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   372k|        }
  908|   372k|        else {
  909|   372k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   372k|        }
  911|   372k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   372k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   372k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   372k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   372k|            return std::strtof(str, str_end);
  839|   372k|        }
  840|   372k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   372k|            return std::strtod(str, str_end);
  842|   372k|        }
  843|   372k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   372k|            return std::strtold(str, str_end);
  845|   372k|        }
  846|   372k|#endif
  847|   372k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.04M|    {
 1110|  1.04M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.04M|            return m_input.view();
 1112|  1.04M|        }
 1113|  1.04M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.04M|            return std::u16string_view{
 1115|  1.04M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.04M|                m_input.view().size()};
 1117|  1.04M|        }
 1118|  1.04M|        else {
 1119|  1.04M|            return std::u32string_view{
 1120|  1.04M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.04M|                m_input.view().size()};
 1122|  1.04M|        }
 1123|  1.04M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  64.8k|{
 1138|  64.8k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 64.8k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  64.8k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 64.8k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  64.8k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 64.8k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  64.8k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 64.8k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  64.8k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  64.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  64.8k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 15.9k, False: 48.9k]
  ------------------
 1185|  15.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 4.63k]
  |  |  ------------------
  ------------------
 1186|  11.3k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.3k|                                         "Invalid floating-point digit");
 1188|  11.3k|        }
 1189|  15.9k|    }
 1190|  53.5k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.4k, False: 25.1k]
  |  |  ------------------
  ------------------
 1191|  28.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  28.4k|                                     "Invalid floating-point digit");
 1193|  28.4k|    }
 1194|       |
 1195|  25.1k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  25.1k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  25.1k|            double tmp{};
 1200|  25.1k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  25.1k|            value = tmp;
 1202|  25.1k|            return ret;
 1203|  25.1k|        }
 1204|  25.1k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  25.1k|            return fast_float_fallback(data, value);
 1208|  25.1k|        }
 1209|  25.1k|    }
 1210|  25.1k|    else {
 1211|       |        // Default to fast_float
 1212|  25.1k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  25.1k|    }
 1214|  25.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  25.1k|    {
 1078|  25.1k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  25.1k|    {
 1082|  25.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 4.60k, False: 20.5k]
  ------------------
 1083|  25.1k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 98, False: 20.4k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  4.70k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  4.70k|                                              value);
 1087|  4.70k|        }
 1088|       |
 1089|  20.4k|        const auto flags = get_flags();
 1090|  20.4k|        const auto view = get_view();
 1091|  20.4k|        const auto result = fast_float::from_chars(
 1092|  20.4k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  20.4k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  20.4k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268, False: 20.1k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    268|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    268|                                              value);
 1102|    268|        }
 1103|       |
 1104|  20.1k|        return result.ptr - view.data();
 1105|  20.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  4.97k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  4.97k|    {
 1048|  4.97k|#if !SCN_DISABLE_STRTOD
 1049|  4.97k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  4.97k|    }
 1056|  4.97k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  4.97k|    {
  894|  4.97k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  4.97k|    {
  898|  4.97k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  4.97k|                           generic_strtod);
  900|  4.97k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  4.97k|    {
  732|  4.97k|        CharT* end{};
  733|  4.97k|        errno = 0;
  734|  4.97k|        value = strtod_cb(src, &end);
  735|  4.97k|        const auto saved_errno = errno;
  736|  4.97k|        auto chars_read = end - src;
  737|       |
  738|  4.97k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  4.97k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 272, False: 4.70k]
  |  |  ------------------
  ------------------
  740|    272|            return unexpected(e);
  741|    272|        }
  742|       |
  743|  4.70k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 4.60k, False: 98]
  ------------------
  744|  4.70k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 4.60k, False: 0]
  ------------------
  745|  4.60k|            chars_read -= 2;
  746|  4.60k|        }
  747|       |
  748|  4.70k|        return chars_read;
  749|  4.97k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  4.97k|    {
  755|  4.97k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 4.70k, False: 272]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  4.70k|            auto first_space = read_until_classic_space(input.view());
  758|  4.70k|            input.assign(
  759|  4.70k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  4.70k|        }
  761|       |
  762|  4.97k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 4.60k, False: 366]
  ------------------
  763|  4.60k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  4.60k|                input.get_allocated_string().insert(0, "0x");
  765|  4.60k|            }
  766|  4.60k|            else {
  767|  4.60k|                input.get_allocated_string().insert(0, L"0x");
  768|  4.60k|            }
  769|  4.60k|        }
  770|       |
  771|  4.97k|        return input.get_allocated_string().c_str();
  772|  4.97k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  4.97k|    {
  905|  4.97k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  4.97k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  4.97k|        }
  908|  4.97k|        else {
  909|  4.97k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  4.97k|        }
  911|  4.97k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  4.97k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  4.97k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  4.97k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  4.97k|            return std::wcstof(str, str_end);
  877|  4.97k|        }
  878|  4.97k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  4.97k|            return std::wcstod(str, str_end);
  880|  4.97k|        }
  881|  4.97k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  4.97k|            return std::wcstold(str, str_end);
  883|  4.97k|        }
  884|  4.97k|#endif
  885|  4.97k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  20.4k|    {
 1110|  20.4k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  20.4k|            return m_input.view();
 1112|  20.4k|        }
 1113|  20.4k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  20.4k|            return std::u16string_view{
 1115|  20.4k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  20.4k|                m_input.view().size()};
 1117|  20.4k|        }
 1118|  20.4k|        else {
 1119|  20.4k|            return std::u32string_view{
 1120|  20.4k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  20.4k|                m_input.view().size()};
 1122|  20.4k|        }
 1123|  20.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.53M|{
 1138|  1.53M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.0k, False: 1.51M]
  ------------------
 1139|  15.0k|        value = std::numeric_limits<T>::infinity();
 1140|  15.0k|        return 3;
 1141|  15.0k|    }
 1142|  1.51M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.6k, False: 1.50M]
  ------------------
 1143|  10.6k|        value = std::numeric_limits<T>::infinity();
 1144|  10.6k|        return 8;
 1145|  10.6k|    }
 1146|  1.50M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 59.1k, False: 1.44M]
  ------------------
 1147|  59.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  59.1k|        return 3;
 1149|  59.1k|    }
 1150|  1.44M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.44M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.44M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.44M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 313k, False: 1.12M]
  ------------------
 1185|   313k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.17k, False: 310k]
  |  |  ------------------
  ------------------
 1186|  3.17k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.17k|                                         "Invalid floating-point digit");
 1188|  3.17k|        }
 1189|   313k|    }
 1190|  1.44M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.38k, False: 1.43M]
  |  |  ------------------
  ------------------
 1191|  9.38k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.38k|                                     "Invalid floating-point digit");
 1193|  9.38k|    }
 1194|       |
 1195|  1.43M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.43M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.43M|            double tmp{};
 1200|  1.43M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.43M|            value = tmp;
 1202|  1.43M|            return ret;
 1203|  1.43M|        }
 1204|  1.43M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.43M|            return fast_float_fallback(data, value);
 1208|  1.43M|        }
 1209|  1.43M|    }
 1210|  1.43M|    else {
 1211|       |        // Default to fast_float
 1212|  1.43M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.43M|    }
 1214|  1.43M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.43M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.43M|    {
 1048|  1.43M|#if !SCN_DISABLE_STRTOD
 1049|  1.43M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.43M|    }
 1056|  1.43M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.43M|    {
  894|  1.43M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.45M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.43M|    {
  898|  1.43M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.43M|                           generic_strtod);
  900|  1.43M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.43M|    {
  732|  1.43M|        CharT* end{};
  733|  1.43M|        errno = 0;
  734|  1.43M|        value = strtod_cb(src, &end);
  735|  1.43M|        const auto saved_errno = errno;
  736|  1.43M|        auto chars_read = end - src;
  737|       |
  738|  1.43M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.43M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.29k, False: 1.42M]
  |  |  ------------------
  ------------------
  740|  1.29k|            return unexpected(e);
  741|  1.29k|        }
  742|       |
  743|  1.42M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 310k, False: 1.11M]
  ------------------
  744|  1.42M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 310k, False: 0]
  ------------------
  745|   310k|            chars_read -= 2;
  746|   310k|        }
  747|       |
  748|  1.42M|        return chars_read;
  749|  1.43M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.45M|    {
  778|  1.45M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 400k, False: 1.05M]
  |  Branch (778:37): [True: 0, False: 400k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.45M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 58.5k, False: 1.39M]
  ------------------
  785|  1.45M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 58.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.45M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.32k, False: 1.45M]
  |  Branch (791:34): [True: 136, False: 1.19k]
  ------------------
  792|    136|            SCN_UNLIKELY_ATTR
  793|    136|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    136|        }
  795|       |
  796|  1.45M|        SCN_GCC_COMPAT_PUSH
  797|  1.45M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.45M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.45M, False: 0]
  ------------------
  800|  1.45M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.45M, False: 0]
  ------------------
  801|  1.45M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.19k, False: 1.45M]
  ------------------
  802|  1.19k|            SCN_UNLIKELY_ATTR
  803|  1.19k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.19k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.45M|            return {};
  809|  1.45M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.45M|{
  695|  1.45M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 400k, False: 1.05M]
  |  Branch (695:26): [True: 0, False: 1.05M]
  ------------------
  696|  1.45M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.43M|    {
  755|  1.43M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.32M, False: 101k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.32M|            auto first_space = read_until_classic_space(input.view());
  758|  1.32M|            input.assign(
  759|  1.32M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.32M|        }
  761|       |
  762|  1.43M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 310k, False: 1.12M]
  ------------------
  763|   310k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   310k|                input.get_allocated_string().insert(0, "0x");
  765|   310k|            }
  766|   310k|            else {
  767|   310k|                input.get_allocated_string().insert(0, L"0x");
  768|   310k|            }
  769|   310k|        }
  770|       |
  771|  1.43M|        return input.get_allocated_string().c_str();
  772|  1.43M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.43M|    {
  905|  1.43M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.43M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.43M|        }
  908|  1.43M|        else {
  909|  1.43M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.43M|        }
  911|  1.43M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.43M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.43M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.43M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.43M|            return std::strtof(str, str_end);
  839|  1.43M|        }
  840|  1.43M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.43M|            return std::strtod(str, str_end);
  842|  1.43M|        }
  843|  1.43M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.43M|            return std::strtold(str, str_end);
  845|  1.43M|        }
  846|  1.43M|#endif
  847|  1.43M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  64.9k|{
 1138|  64.9k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 64.9k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  64.9k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 64.9k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  64.9k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 64.9k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  64.9k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 64.9k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  64.9k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  64.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  64.9k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 15.9k, False: 49.0k]
  ------------------
 1185|  15.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 4.63k]
  |  |  ------------------
  ------------------
 1186|  11.3k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.3k|                                         "Invalid floating-point digit");
 1188|  11.3k|        }
 1189|  15.9k|    }
 1190|  53.6k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 25.1k]
  |  |  ------------------
  ------------------
 1191|  28.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  28.5k|                                     "Invalid floating-point digit");
 1193|  28.5k|    }
 1194|       |
 1195|  25.1k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  25.1k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  25.1k|            double tmp{};
 1200|  25.1k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  25.1k|            value = tmp;
 1202|  25.1k|            return ret;
 1203|  25.1k|        }
 1204|  25.1k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  25.1k|            return fast_float_fallback(data, value);
 1208|  25.1k|        }
 1209|  25.1k|    }
 1210|  25.1k|    else {
 1211|       |        // Default to fast_float
 1212|  25.1k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  25.1k|    }
 1214|  25.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  25.1k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  25.1k|    {
 1048|  25.1k|#if !SCN_DISABLE_STRTOD
 1049|  25.1k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  25.1k|    }
 1056|  25.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  25.1k|    {
  894|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  25.1k|    {
  898|  25.1k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  25.1k|                           generic_strtod);
  900|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  25.1k|    {
  732|  25.1k|        CharT* end{};
  733|  25.1k|        errno = 0;
  734|  25.1k|        value = strtod_cb(src, &end);
  735|  25.1k|        const auto saved_errno = errno;
  736|  25.1k|        auto chars_read = end - src;
  737|       |
  738|  25.1k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  25.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 25.1k]
  |  |  ------------------
  ------------------
  740|     36|            return unexpected(e);
  741|     36|        }
  742|       |
  743|  25.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 4.60k, False: 20.4k]
  ------------------
  744|  25.1k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 4.60k, False: 0]
  ------------------
  745|  4.60k|            chars_read -= 2;
  746|  4.60k|        }
  747|       |
  748|  25.1k|        return chars_read;
  749|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  25.1k|    {
  755|  25.1k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 24.3k, False: 789]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  24.3k|            auto first_space = read_until_classic_space(input.view());
  758|  24.3k|            input.assign(
  759|  24.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  24.3k|        }
  761|       |
  762|  25.1k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 4.60k, False: 20.5k]
  ------------------
  763|  4.60k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  4.60k|                input.get_allocated_string().insert(0, "0x");
  765|  4.60k|            }
  766|  4.60k|            else {
  767|  4.60k|                input.get_allocated_string().insert(0, L"0x");
  768|  4.60k|            }
  769|  4.60k|        }
  770|       |
  771|  25.1k|        return input.get_allocated_string().c_str();
  772|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  25.1k|    {
  905|  25.1k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  25.1k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  25.1k|        }
  908|  25.1k|        else {
  909|  25.1k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  25.1k|        }
  911|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  25.1k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  25.1k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  25.1k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  25.1k|            return std::wcstof(str, str_end);
  877|  25.1k|        }
  878|  25.1k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  25.1k|            return std::wcstod(str, str_end);
  880|  25.1k|        }
  881|  25.1k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  25.1k|            return std::wcstold(str, str_end);
  883|  25.1k|        }
  884|  25.1k|#endif
  885|  25.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.07M|{
 2065|  2.07M|    const auto argcount = args.size();
 2066|  2.07M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 433k, False: 1.64M]
  |  Branch (2066:60): [True: 433k, False: 0]
  ------------------
 2067|   433k|        auto arg = args.get(0);
 2068|   433k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   433k|    static_cast<    \
  |  |  929|   433k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   433k|    }
 2070|       |
 2071|  1.64M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.64M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.64M|    SCN_UNLIKELY_ATTR
 2079|  1.64M|    {
 2080|  1.64M|        auto handler = format_handler<false, CharT>{
 2081|  1.64M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.64M|    static_cast<    \
  |  |  929|  1.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.64M|    static_cast<    \
  |  |  929|  1.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.64M|        return vscan_parse_format_string(format, handler);
 2083|  1.64M|    }
 2084|  1.64M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.16M|{
 1625|  4.16M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.26M, False: 898k]
  ------------------
 1626|  3.26M|        return false;
 1627|  3.26M|    }
 1628|   898k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 898k, False: 0]
  |  Branch (1628:39): [True: 898k, False: 0]
  ------------------
 1629|  4.16M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   649k|{
 1658|   649k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 649k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   649k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   649k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 649k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   649k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   649k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   649k|    static_cast<    \
  |  |  929|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   649k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   649k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   649k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   649k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 25.9k, False: 624k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  25.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  25.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  25.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  25.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  25.9k|    }                                                  \
  |  |  |  | 3642|   649k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   624k|    return it.position();
 1675|   649k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.61M|    {
 1903|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  3.66M|    {
 1722|  3.66M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.66M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.61M|    {
 1853|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.61M|{
 2030|  1.61M|    const auto beg = handler.get_ctx().begin();
 2031|  1.61M|    detail::parse_format_string<false>(format, handler);
 2032|  1.61M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.3k, False: 1.53M]
  |  |  ------------------
  ------------------
 2033|  86.3k|        return unexpected(handler.error);
 2034|  86.3k|    }
 2035|  1.53M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.61M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  11.1M|    {
 2014|  11.1M|        return ctx.get();
 2015|  11.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  11.1M|    {
 1857|  11.1M|        return contiguous_ctx;
 1858|  11.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.14M|    {
 1907|  3.14M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.14M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.61M|{
 1681|  1.61M|    auto arg = ctx.arg(id);
 1682|  1.61M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.61M|    return arg;
 1686|  1.61M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.66M|    {
 1797|  3.66M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.66M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.66M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.66M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.66M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.66M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.66M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.66M|            visited_args_lower64 |= (1ull << id);
 1808|  3.66M|            return;
 1809|  3.66M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.66M|    {
 1782|  3.66M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.66M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.66M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.66M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.66M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.66M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.66M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   518k|    {
 1766|   518k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   518k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 518k, False: 0]
  |  |  ------------------
  ------------------
 1767|   518k|            error = err;
 1768|   518k|        }
 1769|   518k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.61M|    {
 1936|  1.61M|        return parse_ctx.next_arg_id();
 1937|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.61M|    {
 1977|  1.61M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.61M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.61M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.61M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.61M|        auto specs = detail::format_specs{};
 1990|  1.61M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.61M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.61M|            arg.type()};
 1993|       |
 1994|  1.61M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.61M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.61M]
  |  Branch (1995:29): [True: 0, False: 1.61M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.61M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.61M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.61M|        on_visit_scan_arg(
 2006|  1.61M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.61M|                                           get_ctx().locale()},
 2008|  1.61M|            arg);
 2009|  1.61M|        return parse_ctx.begin();
 2010|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.61M|    {
 1701|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.61M|    {
 1948|  1.61M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.61M]
  |  Branch (1948:23): [True: 0, False: 1.61M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.61M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.61M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.3k, False: 1.53M]
  |  |  ------------------
  ------------------
 1955|  86.3k|            on_error(r.error());
 1956|  86.3k|        }
 1957|  1.53M|        else {
 1958|  1.53M|            get_ctx().advance_to(*r);
 1959|  1.53M|        }
 1960|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.66M|    {
 1729|  3.66M|        {
 1730|  3.66M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.66M]
  ------------------
 1731|  3.66M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.66M]
  ------------------
 1732|  3.66M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.66M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.66M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.66M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.66M|        }
 1739|       |
 1740|  3.66M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.66M, False: 0]
  ------------------
 1741|  3.66M|            return;
 1742|  3.66M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.66M|    {
 1777|  3.66M|        return error;
 1778|  3.66M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  10.9M|    {
 1773|  10.9M|        return static_cast<bool>(error);
 1774|  10.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.64M|    {
 1903|  1.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.64M|    {
 1830|  1.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.64M|{
 2030|  1.64M|    const auto beg = handler.get_ctx().begin();
 2031|  1.64M|    detail::parse_format_string<false>(format, handler);
 2032|  1.64M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.3k, False: 1.55M]
  |  |  ------------------
  ------------------
 2033|  86.3k|        return unexpected(handler.error);
 2034|  86.3k|    }
 2035|  1.55M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.64M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  11.3M|    {
 2014|  11.3M|        return ctx.get();
 2015|  11.3M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  11.3M|    {
 1834|  11.3M|        return ctx;
 1835|  11.3M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.20M|    {
 1907|  3.20M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.20M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.64M|{
 1681|  1.64M|    auto arg = ctx.arg(id);
 1682|  1.64M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.64M|    return arg;
 1686|  1.64M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.64M|    {
 1936|  1.64M|        return parse_ctx.next_arg_id();
 1937|  1.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.64M|    {
 1977|  1.64M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.64M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.64M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.64M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.64M|        auto specs = detail::format_specs{};
 1990|  1.64M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.64M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.64M|            arg.type()};
 1993|       |
 1994|  1.64M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.64M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.64M]
  |  Branch (1995:29): [True: 0, False: 1.64M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.64M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.64M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.64M|        on_visit_scan_arg(
 2006|  1.64M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.64M|                                           get_ctx().locale()},
 2008|  1.64M|            arg);
 2009|  1.64M|        return parse_ctx.begin();
 2010|  1.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.64M|    {
 1701|  1.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.64M|    {
 1948|  1.64M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.64M]
  |  Branch (1948:23): [True: 0, False: 1.64M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.64M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.64M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.3k, False: 1.55M]
  |  |  ------------------
  ------------------
 1955|  86.3k|            on_error(r.error());
 1956|  86.3k|        }
 1957|  1.55M|        else {
 1958|  1.55M|            get_ctx().advance_to(*r);
 1959|  1.55M|        }
 1960|  1.64M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.08M|{
 2045|  2.08M|    const auto argcount = args.size();
 2046|  2.08M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 465k, False: 1.61M]
  |  Branch (2046:60): [True: 465k, False: 0]
  ------------------
 2047|   465k|        auto arg = args.get(0);
 2048|   465k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   465k|    static_cast<    \
  |  |  929|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   465k|    }
 2050|       |
 2051|  1.61M|    auto handler = format_handler<true, CharT>{
 2052|  1.61M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.61M|                                       source.data() + source.size()},
 2054|  1.61M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.61M|    static_cast<    \
  |  |  929|  1.61M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.61M|    static_cast<    \
  |  |  929|  1.61M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.61M|    return vscan_parse_format_string(format, handler);
 2056|  2.08M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   698k|{
 1638|   698k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 698k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   698k|    auto reader =
 1644|   698k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   698k|            ranges::subrange<const CharT*>{source.data(),
 1646|   698k|                                           source.data() + source.size()},
 1647|   698k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   698k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   698k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   698k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   698k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 25.9k, False: 672k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  25.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  25.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  25.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  25.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  25.9k|    }                                                  \
  |  |  |  | 3642|   698k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   672k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   672k|    return ranges::distance(source.data(), it);
 1650|   698k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   241k|{
 2045|   241k|    const auto argcount = args.size();
 2046|   241k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 41.2k, False: 199k]
  |  Branch (2046:60): [True: 41.2k, False: 0]
  ------------------
 2047|  41.2k|        auto arg = args.get(0);
 2048|  41.2k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  41.2k|    static_cast<    \
  |  |  929|  41.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  41.2k|    }
 2050|       |
 2051|   199k|    auto handler = format_handler<true, CharT>{
 2052|   199k|        ranges::subrange<const CharT*>{source.data(),
 2053|   199k|                                       source.data() + source.size()},
 2054|   199k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   199k|    return vscan_parse_format_string(format, handler);
 2056|   241k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   482k|{
 1625|   482k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 399k, False: 82.4k]
  ------------------
 1626|   399k|        return false;
 1627|   399k|    }
 1628|  82.4k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 82.4k, False: 0]
  |  Branch (1628:39): [True: 82.4k, False: 0]
  ------------------
 1629|   482k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  61.8k|{
 1638|  61.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  61.8k|    auto reader =
 1644|  61.8k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  61.8k|            ranges::subrange<const CharT*>{source.data(),
 1646|  61.8k|                                           source.data() + source.size()},
 1647|  61.8k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  61.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  61.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  61.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  61.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.8k, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  51.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  51.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  51.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  51.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  51.8k|    }                                                  \
  |  |  |  | 3642|  61.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  10.0k|    return ranges::distance(source.data(), it);
 1650|  61.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   199k|    {
 1903|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   199k|    {
 1853|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   199k|{
 2030|   199k|    const auto beg = handler.get_ctx().begin();
 2031|   199k|    detail::parse_format_string<false>(format, handler);
 2032|   199k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172k, False: 27.2k]
  |  |  ------------------
  ------------------
 2033|   172k|        return unexpected(handler.error);
 2034|   172k|    }
 2035|  27.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   199k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.05M|    {
 2014|  1.05M|        return ctx.get();
 2015|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.05M|    {
 1857|  1.05M|        return contiguous_ctx;
 1858|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   227k|    {
 1907|   227k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 227k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   227k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   199k|{
 1681|   199k|    auto arg = ctx.arg(id);
 1682|   199k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   199k|    return arg;
 1686|   199k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   199k|    {
 1936|   199k|        return parse_ctx.next_arg_id();
 1937|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   199k|    {
 1977|   199k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   199k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   199k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 199k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   199k|        auto specs = detail::format_specs{};
 1990|   199k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   199k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   199k|            arg.type()};
 1993|       |
 1994|   199k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   199k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 199k]
  |  Branch (1995:29): [True: 0, False: 199k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   199k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   199k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   199k|        on_visit_scan_arg(
 2006|   199k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   199k|                                           get_ctx().locale()},
 2008|   199k|            arg);
 2009|   199k|        return parse_ctx.begin();
 2010|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   199k|    {
 1701|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   199k|    {
 1948|   199k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 199k]
  |  Branch (1948:23): [True: 0, False: 199k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   199k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   199k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172k, False: 27.2k]
  |  |  ------------------
  ------------------
 1955|   172k|            on_error(r.error());
 1956|   172k|        }
 1957|  27.2k|        else {
 1958|  27.2k|            get_ctx().advance_to(*r);
 1959|  27.2k|        }
 1960|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   241k|{
 2065|   241k|    const auto argcount = args.size();
 2066|   241k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 41.2k, False: 199k]
  |  Branch (2066:60): [True: 41.2k, False: 0]
  ------------------
 2067|  41.2k|        auto arg = args.get(0);
 2068|  41.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  41.2k|    static_cast<    \
  |  |  929|  41.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  41.2k|    }
 2070|       |
 2071|   199k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 199k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   199k|    SCN_UNLIKELY_ATTR
 2079|   199k|    {
 2080|   199k|        auto handler = format_handler<false, CharT>{
 2081|   199k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   199k|        return vscan_parse_format_string(format, handler);
 2083|   199k|    }
 2084|   199k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  61.8k|{
 1658|  61.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  61.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  61.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  61.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  61.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  61.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  61.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  61.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  61.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.8k, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  51.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  51.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  51.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  51.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  51.8k|    }                                                  \
  |  |  |  | 3642|  61.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  10.0k|    return it.position();
 1675|  61.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   199k|    {
 1903|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   199k|    {
 1830|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   199k|{
 2030|   199k|    const auto beg = handler.get_ctx().begin();
 2031|   199k|    detail::parse_format_string<false>(format, handler);
 2032|   199k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172k, False: 27.2k]
  |  |  ------------------
  ------------------
 2033|   172k|        return unexpected(handler.error);
 2034|   172k|    }
 2035|  27.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   199k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  1.05M|    {
 2014|  1.05M|        return ctx.get();
 2015|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.05M|    {
 1834|  1.05M|        return ctx;
 1835|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   227k|    {
 1907|   227k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 227k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   227k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   199k|{
 1681|   199k|    auto arg = ctx.arg(id);
 1682|   199k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   199k|    return arg;
 1686|   199k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   199k|    {
 1936|   199k|        return parse_ctx.next_arg_id();
 1937|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   199k|    {
 1977|   199k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   199k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   199k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 199k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   199k|        auto specs = detail::format_specs{};
 1990|   199k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   199k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   199k|            arg.type()};
 1993|       |
 1994|   199k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   199k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 199k]
  |  Branch (1995:29): [True: 0, False: 199k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   199k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   199k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   199k|        on_visit_scan_arg(
 2006|   199k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   199k|                                           get_ctx().locale()},
 2008|   199k|            arg);
 2009|   199k|        return parse_ctx.begin();
 2010|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   199k|    {
 1701|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   199k|    {
 1948|   199k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 199k]
  |  Branch (1948:23): [True: 0, False: 199k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   199k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   199k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172k, False: 27.2k]
  |  |  ------------------
  ------------------
 1955|   172k|            on_error(r.error());
 1956|   172k|        }
 1957|  27.2k|        else {
 1958|  27.2k|            get_ctx().advance_to(*r);
 1959|  27.2k|        }
 1960|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   232k|{
 2091|   232k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   232k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   216k|{
 2091|   216k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   216k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  20.6k|{
 2091|  20.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  20.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  20.6k|{
 2091|  20.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  20.6k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.87k|{
 1363|  2.87k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.87k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.87k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.87k|            std::u32string tmp;
 1368|  2.87k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.87k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.87k|                std::u32string_view{tmp}, dest);
 1371|  2.87k|        }
 1372|  2.87k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.87k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.87k|        }
 1375|  2.87k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.87k|{
 1256|  2.87k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.87k|    auto it = src.begin();
 1259|  1.01M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.00M, False: 2.87k]
  ------------------
 1260|  1.00M|        auto res = get_next_code_point(
 1261|  1.00M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.00M|                                                                 src.end()));
 1263|  1.00M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 1.00M]
  |  |  ------------------
  ------------------
 1264|  1.86k|            dest.push_back(DestCharT{0xfffd});
 1265|  1.86k|        }
 1266|  1.00M|        else {
 1267|  1.00M|            dest.push_back(res.value);
 1268|  1.00M|        }
 1269|  1.00M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.00M|    }
 1271|  2.87k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.78M|{
 1169|  1.78M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.78M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.78M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.9k, False: 1.75M]
  |  |  ------------------
  ------------------
 1173|  26.9k|        return {get_start_for_next_code_point(input),
 1174|  26.9k|                detail::invalid_code_point};
 1175|  26.9k|    }
 1176|  1.75M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.42k, False: 1.74M]
  |  |  ------------------
  ------------------
 1177|  5.42k|        return {input.end(), detail::invalid_code_point};
 1178|  5.42k|    }
 1179|       |
 1180|  1.74M|    return {input.begin() + len,
 1181|  1.74M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.75M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  26.9k|{
 1155|  26.9k|    auto it = input.begin();
 1156|   194k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 185k, False: 8.40k]
  ------------------
 1157|   185k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 18.5k, False: 167k]
  ------------------
 1158|  18.5k|            break;
 1159|  18.5k|        }
 1160|   185k|    }
 1161|  26.9k|    return it;
 1162|  26.9k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  38.6M|    {
  809|  38.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  38.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  38.6M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  14.4M|    {
  823|  14.4M|        return a.m_code == b.m_code;
  824|  14.4M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.19M|    {
 1728|  2.19M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.19M|        std::strcpy(m_locbuf, loc);
 1730|  2.19M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.19M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.19M|        std::setlocale(m_category, m_locbuf);
 1735|  2.19M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.19M|    {
 1757|  2.19M|        std::setlocale(cat, "C");
 1758|  2.19M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.66M|    {
 2936|  3.66M|        return m_msg == nullptr;
 2937|  3.66M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|  3.62M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  51.4M|{
  458|  51.4M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  51.4M|        static_cast<unsigned char>(ch))];
  460|  51.4M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  46.2k|{
  469|  46.2k|    return static_cast<unsigned char>(ch) <= 127;
  470|  46.2k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  10.2M|{
  539|  10.2M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  10.2M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  17.1M|{
  784|  17.1M|    return e != eof_error::good;
  785|  17.1M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  57.0k|{
  798|  57.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  57.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  57.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  57.0k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   237k|{
  845|   237k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   237k|    return parse_error::eof;
  847|   237k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.23M|{
  854|  5.23M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.23M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.23M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 84.9k, False: 5.14M]
  ------------------
  859|  84.9k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  84.9k|    }
  861|       |
  862|  5.14M|    return scan_error{code, msg};
  863|  5.23M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.23M|{
  868|  5.23M|    return [code, msg](parse_error err) {
  869|  5.23M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.23M|    };
  871|  5.23M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.20M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.20M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 4.95M, False: 243k]
  |  Branch (1201:27): [True: 1.72M, False: 3.23M]
  ------------------
 1202|  5.20M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 125k, False: 3.35M]
  ------------------
 1203|  5.20M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 157k, False: 3.19M]
  ------------------
 1204|  5.20M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 4.67k, False: 3.19M]
  ------------------
 1205|  5.20M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 13.2k, False: 3.17M]
  ------------------
 1206|  5.20M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 63.2k, False: 3.11M]
  ------------------
 1207|  5.20M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 3.11M]
  ------------------
 1208|  5.20M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  6.09M|{
 2220|  6.09M|    unsigned char running_diff{0};
 2221|  22.8M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 16.7M, False: 6.09M]
  ------------------
 2222|  16.7M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  16.7M|    }
 2224|  6.09M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 197k, False: 5.90M]
  |  Branch (2224:33): [True: 31.8k, False: 5.86M]
  ------------------
 2225|  6.09M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  37.4M|{
 3123|  37.4M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  37.4M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|   699k|{
 3127|   699k|#if WCHAR_MIN < 0
 3128|   699k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 688k, False: 11.3k]
  |  Branch (3128:20): [True: 389k, False: 298k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   389k|        return char_to_int(static_cast<char>(ch));
 3133|   389k|    }
 3134|   309k|    return 255;
 3135|   699k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6008|  3.14M|{
 6009|  3.14M|    if (specs.width != 0) {
  ------------------
  |  Branch (6009:9): [True: 0, False: 3.14M]
  ------------------
 6010|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6010:13): [True: 0, False: 0]
  ------------------
 6011|      0|            return {scan_error::invalid_scanned_value,
 6012|      0|                    "Scanned value too narrow, width did not exceed what "
 6013|      0|                    "was specified in the format string"};
 6014|      0|        }
 6015|      0|    }
 6016|  3.14M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6016:9): [True: 0, False: 3.14M]
  ------------------
 6017|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6017:13): [True: 0, False: 0]
  ------------------
 6018|      0|            return {scan_error::invalid_scanned_value,
 6019|      0|                    "Scanned value too wide, width exceeded the specified "
 6020|      0|                    "precision"};
 6021|      0|        }
 6022|      0|    }
 6023|  3.14M|    return {};
 6024|  3.14M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.78M|    {
  304|  6.78M|        ranges::advance(x, n);
  305|  6.78M|        return x;
  306|  6.78M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.78M|    {
  268|  6.78M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.78M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.78M|    {
  151|  6.78M|        i += n;
  152|  6.78M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.03M|    {
  108|  8.03M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.03M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.03M|    {
   87|  8.03M|        return s - i;
   88|  8.03M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   653k|    {
  304|   653k|        ranges::advance(x, n);
  305|   653k|        return x;
  306|   653k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   653k|    {
  268|   653k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   653k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   653k|    {
  151|   653k|        i += n;
  152|   653k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  52.1k|    {
  108|  52.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  52.1k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  52.1k|    {
   87|  52.1k|        return s - i;
   88|  52.1k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.29M|{
  981|  2.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.29M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.29M|        return true;
  984|  2.29M|    }
  985|  2.29M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.29M|                           ranges::const_iterator_t<Range>,
  987|  2.29M|                           typename detail::basic_scan_buffer<
  988|  2.29M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.29M|        auto beg = r.begin();
  990|  2.29M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.29M, False: 0]
  ------------------
  991|  2.29M|            return false;
  992|  2.29M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.29M|    else {
 1006|  2.29M|        return false;
 1007|  2.29M|    }
 1008|  2.29M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|  1.64M|    {
 6038|  1.64M|        const bool need_skipped_width =
 6039|  1.64M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 1.64M]
  |  Branch (6039:33): [True: 0, False: 1.64M]
  ------------------
 6040|  1.64M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  1.64M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.64M]
  ------------------
 6044|  1.64M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.64M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  1.64M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 1.64M, False: 0]
  |  Branch (6048:56): [True: 1.64M, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  1.64M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 1.64M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  3.27M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.64M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.64M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.64M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.7k, False: 1.62M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  20.7k|    }                                                  \
  |  |  |  | 3642|  1.64M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.27M|                            make_eof_scan_error));
 6059|       |
 6060|  3.27M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 1.62M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  1.62M|            return result_type{it, 0};
 6068|  3.27M|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|  1.64M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.46M|{
 1976|  4.46M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.46M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.46M|{
 1957|  4.46M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.46M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.46M|    }
 1960|  4.46M|    else {
 1961|  4.46M|        auto first = range.begin();
 1962|  24.6M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 24.6M, False: 37.4k]
  ------------------
 1963|  24.6M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.42M, False: 20.1M]
  ------------------
 1964|  4.42M|                return first;
 1965|  4.42M|            }
 1966|  24.6M|        }
 1967|  37.4k|        return first;
 1968|  4.46M|    }
 1969|  4.46M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  63.9M|    {
  763|  63.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  63.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  63.9M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  5.68M|    {
  754|  5.68M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  31.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9M|              cvref<T> obj = *get<T>(fn);
  745|  31.9M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  31.9M|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.9M|              }
  748|  31.9M|              else {
  749|  31.9M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9M|              }
  751|  31.9M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  31.9M|    {
  684|  31.9M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  31.9M|            return static_cast<T*>(s.m_cp);
  686|  31.9M|        }
  687|  31.9M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  31.9M|            return static_cast<T*>(s.m_p);
  689|  31.9M|        }
  690|  31.9M|        else {
  691|  31.9M|            return reinterpret_cast<T*>(s.m_fp);
  692|  31.9M|        }
  693|  31.9M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  5.68M|        {
  662|  5.68M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.91M|    {
  108|  3.91M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.91M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.91M|    {
   94|  3.91M|        iter_difference_t<I> counter{0};
   95|  39.8M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 35.9M, False: 3.91M]
  ------------------
   96|  35.9M|            ++i;
   97|  35.9M|            ++counter;
   98|  35.9M|        }
   99|  3.91M|        return counter;
  100|  3.91M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  6.08M|{
 1857|  6.08M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.08M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.08M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.08M|        if (sz < count) {
 1862|  6.08M|            return unexpected(eof_error::eof);
 1863|  6.08M|        }
 1864|       |
 1865|  6.08M|        return ranges::next(range.begin(), count);
 1866|  6.08M|    }
 1867|  6.08M|    else {
 1868|  6.08M|        auto it = range.begin();
 1869|  6.08M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 3.74M, False: 2.33M]
  ------------------
 1870|  3.74M|            return ranges::next(it, count);
 1871|  3.74M|        }
 1872|       |
 1873|  9.31M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.03M, False: 2.27M]
  ------------------
 1874|  7.03M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 51.1k, False: 6.97M]
  ------------------
 1875|  51.1k|                return unexpected(eof_error::eof);
 1876|  51.1k|            }
 1877|  7.03M|        }
 1878|       |
 1879|  2.27M|        return it;
 1880|  2.33M|    }
 1881|  6.08M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  6.08M|{
 1095|  6.08M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  6.08M|        return r.size();
 1097|  6.08M|    }
 1098|  6.08M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  6.08M|                           ranges::const_iterator_t<Range>,
 1100|  6.08M|                           typename detail::basic_scan_buffer<
 1101|  6.08M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  6.08M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  6.08M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  6.08M|        }
 1105|  6.08M|        else {
 1106|  6.08M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 6.08M, False: 0]
  ------------------
 1107|  6.08M|                return static_cast<size_t>(
 1108|  6.08M|                    r.begin().parent()->chars_available() -
 1109|  6.08M|                    r.begin().position());
 1110|  6.08M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  6.08M|        }
 1113|  6.08M|    }
 1114|  6.08M|    else {
 1115|  6.08M|        return 0;
 1116|  6.08M|    }
 1117|  6.08M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  8.78M|    {
  763|  8.78M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.78M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.52M|    {
  754|  2.52M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  4.35M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.35M|              cvref<T> obj = *get<T>(fn);
  745|  4.35M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.35M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.35M|              }
  748|  4.35M|              else {
  749|  4.35M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.35M|              }
  751|  4.35M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.35M|    {
  684|  4.35M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.35M|            return static_cast<T*>(s.m_cp);
  686|  4.35M|        }
  687|  4.35M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.35M|            return static_cast<T*>(s.m_p);
  689|  4.35M|        }
  690|  4.35M|        else {
  691|  4.35M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.35M|        }
  693|  4.35M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.52M|        {
  662|  2.52M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.23M|    return [code, msg](parse_error err) {
  869|  5.23M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.23M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   929k|    {
 1780|   929k|        auto stdloc = loc.get<std::locale>();
 1781|   929k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   929k|        grouping = numpunct.grouping();
 1783|   929k|        thousands_sep =
 1784|   929k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 929k]
  ------------------
 1785|   929k|        decimal_point = numpunct.decimal_point();
 1786|   929k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   929k|{
 1717|   929k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 929k, False: 0]
  ------------------
 1718|   929k|        return std::use_facet<Facet>(stdloc);
 1719|   929k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   929k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  6.57M|{
 1846|  6.57M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.3k, False: 6.55M]
  |  |  ------------------
  ------------------
 1847|  28.3k|        return unexpected(e);
 1848|  28.3k|    }
 1849|       |
 1850|  6.55M|    return ranges::next(range.begin());
 1851|  6.57M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  9.51M|{
  950|  9.51M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  9.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.1k, False: 9.46M]
  |  |  ------------------
  ------------------
  951|  56.1k|        return eof_error::eof;
  952|  56.1k|    }
  953|  9.46M|    return eof_error::good;
  954|  9.51M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  13.2M|{
  944|  13.2M|    return is_range_eof(r.begin(), r.end());
  945|  13.2M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  13.2M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  13.2M|    {
  937|  13.2M|        return begin == end;
  938|  13.2M|    }
  939|  13.2M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  6.55M|    {
  296|  6.55M|        ++x;
  297|  6.55M|        return x;
  298|  6.55M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.50M|{
 3141|  2.50M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.50M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.78M, False: 724k]
  ------------------
 3143|  1.78M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.78M, False: 491]
  ------------------
 3144|  1.78M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.78M|        }
 3146|    491|        return unexpected(eof_error::eof);
 3147|  1.78M|    }
 3148|       |
 3149|   724k|    auto& it = *r;
 3150|   724k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 289k, False: 435k]
  ------------------
 3151|   289k|        return std::pair{it, sign_type::minus_sign};
 3152|   289k|    }
 3153|   435k|    return std::pair{it, sign_type::plus_sign};
 3154|   724k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  4.40M|{
 2272|  4.40M|    auto it = read_code_unit(range);
 2273|  4.40M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 4.38M]
  |  |  ------------------
  ------------------
 2274|  16.5k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  16.5k|    }
 2276|       |
 2277|  8.16M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.16M, False: 3.42M]
  ------------------
 2278|  8.16M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 961k, False: 7.19M]
  ------------------
 2279|   961k|            return *it;
 2280|   961k|        }
 2281|  8.16M|    }
 2282|       |
 2283|  3.42M|    return unexpected(parse_error::error);
 2284|  4.38M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  6.08M|{
 2231|  6.08M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.08M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.08M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.08M|        if (range.size() < str.size()) {
 2236|  6.08M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.08M|        }
 2238|  6.08M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.08M|            return unexpected(parse_error::error);
 2240|  6.08M|        }
 2241|  6.08M|        return ranges::next(range.begin(), str.size());
 2242|  6.08M|    }
 2243|  6.08M|    else {
 2244|  6.08M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.08M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.08M|                return ch;
 2247|  6.08M|            }
 2248|  6.08M|            return static_cast<char_type>(ch +
 2249|  6.08M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.08M|        };
 2251|       |
 2252|  6.08M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  6.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.1k, False: 6.02M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  51.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  51.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  51.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  51.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  51.1k|    }                                                  \
  |  |  |  | 3642|  6.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.02M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.02M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.02M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.80M, False: 226k]
  |  |  ------------------
  ------------------
 2257|  6.02M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.02M|                    return ascii_tolower(a) ==
 2259|  6.02M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.02M|                }))) {
 2261|  5.80M|            return unexpected(parse_error::error);
 2262|  5.80M|        }
 2263|       |
 2264|   226k|        return it;
 2265|  6.02M|    }
 2266|  6.08M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  7.05M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.05M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 6.32M, False: 726k]
  |  Branch (2245:29): [True: 616k, False: 110k]
  ------------------
 2246|  6.94M|                return ch;
 2247|  6.94M|            }
 2248|   110k|            return static_cast<char_type>(ch +
 2249|   110k|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.05M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.17M|{
 2146|  2.17M|    auto it = read_code_unit(range);
 2147|  2.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 2.16M]
  |  |  ------------------
  ------------------
 2148|  11.8k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  11.8k|    }
 2150|       |
 2151|  2.16M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.82M, False: 339k]
  |  |  ------------------
  ------------------
 2152|  2.16M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.82M|        return unexpected(parse_error::error);
 2154|  1.82M|    }
 2155|       |
 2156|   339k|    return *it;
 2157|  2.16M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  4.45M|{
 1996|  4.45M|    auto it = read_while_code_unit(range, pred);
 1997|  4.45M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.86M, False: 2.59M]
  ------------------
 1998|  1.86M|        return unexpected(parse_error::error);
 1999|  1.86M|    }
 2000|  2.59M|    return it;
 2001|  4.45M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.06M|    {
 1621|  2.06M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.06M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.06M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.06M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.06M|            m_storage.reset();
 1627|  2.06M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.06M|        }
 1629|  2.06M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.06M|                                          std::basic_string<CharT>>) {
 1631|  2.06M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.06M|            m_view = string_view_type{*m_storage};
 1633|  2.06M|        }
 1634|  2.06M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.06M|                                          typename detail::basic_scan_buffer<
 1636|  2.06M|                                              value_t>::forward_iterator> &&
 1637|  2.06M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.06M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.06M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.06M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 290k, False: 1.77M]
  |  |  ------------------
  ------------------
 1641|  2.06M|                             detail::to_address(end_seg.end()))) {
 1642|   290k|                auto& str = m_storage.emplace();
 1643|   290k|                str.reserve(range.end().position() - range.begin().position());
 1644|   290k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   290k|                m_view = string_view_type{str};
 1646|   290k|                return;
 1647|   290k|            }
 1648|       |
 1649|  1.77M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.77M|                                                            end_seg.data());
 1651|  1.77M|            m_storage.reset();
 1652|  1.77M|        }
 1653|  2.06M|        else {
 1654|  2.06M|            auto& str = m_storage.emplace();
 1655|  2.06M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.06M|                str.reserve(range.size());
 1657|  2.06M|            }
 1658|  2.06M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.06M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.06M|                          std::back_inserter(str));
 1661|  2.06M|            }
 1662|  2.06M|            else {
 1663|  2.06M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.06M|                     ++it) {
 1665|  2.06M|                    str.push_back(*it);
 1666|  2.06M|                }
 1667|  2.06M|            }
 1668|  2.06M|            m_view = string_view_type{str};
 1669|  2.06M|        }
 1670|  2.06M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  15.3M|    {
 1582|  15.3M|        return m_view;
 1583|  15.3M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  9.11M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  1.54M|    {
 6080|  1.54M|        const bool need_skipped_width =
 6081|  1.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 1.54M]
  |  Branch (6081:33): [True: 0, False: 1.54M]
  ------------------
 6082|  1.54M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  1.54M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.54M]
  ------------------
 6085|  1.54M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 1.54M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  1.54M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 1.54M, False: 0]
  ------------------
 6090|  1.54M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 1.54M]
  ------------------
 6091|  1.54M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  1.54M|        return result_type{rng.begin(), 0};
 6115|  1.54M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.40M|{
 1846|  3.40M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.86k, False: 3.39M]
  |  |  ------------------
  ------------------
 1847|  6.86k|        return unexpected(e);
 1848|  6.86k|    }
 1849|       |
 1850|  3.39M|    return ranges::next(range.begin());
 1851|  3.40M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  6.40M|{
  950|  6.40M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.2k, False: 6.37M]
  |  |  ------------------
  ------------------
  951|  32.2k|        return eof_error::eof;
  952|  32.2k|    }
  953|  6.37M|    return eof_error::good;
  954|  6.40M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  6.40M|{
  944|  6.40M|    return is_range_eof(r.begin(), r.end());
  945|  6.40M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  6.40M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.40M|    {
  937|  6.40M|        return begin == end;
  938|  6.40M|    }
  939|  6.40M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.39M|    {
  296|  3.39M|        ++x;
  297|  3.39M|        return x;
  298|  3.39M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.36M|{
 3141|  2.36M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.36M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.67M, False: 690k]
  ------------------
 3143|  1.67M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.67M, False: 156]
  ------------------
 3144|  1.67M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.67M|        }
 3146|    156|        return unexpected(eof_error::eof);
 3147|  1.67M|    }
 3148|       |
 3149|   690k|    auto& it = *r;
 3150|   690k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 278k, False: 412k]
  ------------------
 3151|   278k|        return std::pair{it, sign_type::minus_sign};
 3152|   278k|    }
 3153|   412k|    return std::pair{it, sign_type::plus_sign};
 3154|   690k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.74M|{
 2272|  2.74M|    auto it = read_code_unit(range);
 2273|  2.74M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 2.74M]
  |  |  ------------------
  ------------------
 2274|  3.18k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.18k|    }
 2276|       |
 2277|  5.01M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.01M, False: 1.97M]
  ------------------
 2278|  5.01M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 767k, False: 4.24M]
  ------------------
 2279|   767k|            return *it;
 2280|   767k|        }
 2281|  5.01M|    }
 2282|       |
 2283|  1.97M|    return unexpected(parse_error::error);
 2284|  2.74M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.15M|{
 2231|  6.15M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.15M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.15M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 55.4k, False: 6.09M]
  ------------------
 2236|  55.4k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  55.4k|        }
 2238|  6.09M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 5.86M, False: 228k]
  ------------------
 2239|  5.86M|            return unexpected(parse_error::error);
 2240|  5.86M|        }
 2241|   228k|        return ranges::next(range.begin(), str.size());
 2242|  6.09M|    }
 2243|  6.15M|    else {
 2244|  6.15M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.15M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.15M|                return ch;
 2247|  6.15M|            }
 2248|  6.15M|            return static_cast<char_type>(ch +
 2249|  6.15M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.15M|        };
 2251|       |
 2252|  6.15M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  6.15M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.15M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.15M|        if (SCN_UNLIKELY(!std::equal(
 2257|  6.15M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.15M|                    return ascii_tolower(a) ==
 2259|  6.15M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.15M|                }))) {
 2261|  6.15M|            return unexpected(parse_error::error);
 2262|  6.15M|        }
 2263|       |
 2264|  6.15M|        return it;
 2265|  6.15M|    }
 2266|  6.15M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   654k|{
 2146|   654k|    auto it = read_code_unit(range);
 2147|   654k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   654k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.68k, False: 651k]
  |  |  ------------------
  ------------------
 2148|  3.68k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.68k|    }
 2150|       |
 2151|   651k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 541k, False: 109k]
  |  |  ------------------
  ------------------
 2152|   651k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   541k|        return unexpected(parse_error::error);
 2154|   541k|    }
 2155|       |
 2156|   109k|    return *it;
 2157|   651k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  8.71M|    {
 1503|  8.71M|        return sv;
 1504|  8.71M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.22M|{
 1976|  1.22M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.22M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.22M|{
 1957|  1.22M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.22M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.22M|    }
 1960|  1.22M|    else {
 1961|  1.22M|        auto first = range.begin();
 1962|  1.22M|        for (; first != range.end(); ++first) {
 1963|  1.22M|            if (pred(*first)) {
 1964|  1.22M|                return first;
 1965|  1.22M|            }
 1966|  1.22M|        }
 1967|  1.22M|        return first;
 1968|  1.22M|    }
 1969|  1.22M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.30M|{
 2951|  2.30M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.30M, False: 0]
  ------------------
 2952|  2.30M|        auto it = read_while_classic_space(range);
 2953|  2.30M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.30M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.3k, False: 2.28M]
  |  |  ------------------
  ------------------
 2955|  19.3k|            return unexpected(e);
 2956|  19.3k|        }
 2957|       |
 2958|  2.28M|        return it;
 2959|  2.30M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.30M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.30M|{
 2117|  2.30M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.30M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.30M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.30M|        auto buf = make_contiguous_buffer(range);
 2121|  2.30M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.30M|        return ranges::next(range.begin(),
 2123|  2.30M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.30M|    }
 2125|  2.30M|    else {
 2126|  2.30M|        auto it = range.begin();
 2127|       |
 2128|  2.30M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.30M|            auto seg = get_contiguous_beginning(range);
 2130|  2.30M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.30M|                seg_it != seg.end()) {
 2132|  2.30M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.30M|            }
 2134|  2.30M|            ranges::advance(it, seg.size());
 2135|  2.30M|        }
 2136|       |
 2137|  2.30M|        return read_while_code_point(
 2138|  2.30M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.30M|    }
 2140|  2.30M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.30M|{
 1683|  2.30M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.30M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.30M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.30M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.30M|    }
 1688|  2.30M|    else {
 1689|  2.30M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.30M|    }
 1691|  2.30M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.30M|    {
 1490|  2.30M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  6.21M|    {
  304|  6.21M|        ranges::advance(x, n);
  305|  6.21M|        return x;
  306|  6.21M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  8.22M|    {
  268|  8.22M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.22M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  8.22M|    {
  181|  39.4M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 31.2M, False: 8.22M]
  ------------------
  182|  31.2M|            ++i;
  183|  31.2M|        }
  184|  8.22M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   521k|    {
 6179|   521k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   521k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   521k|            auto rd = make_reader<T, char_type>();
 6184|   521k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   521k|                return unexpected(e);
 6186|   521k|            }
 6187|       |
 6188|   521k|            return impl(rd, range, value);
 6189|   521k|        }
 6190|   521k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   521k|            auto rd = make_reader<T, char_type>();
 6192|   521k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 521k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   521k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 521k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   521k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   521k|                return impl(rd, range, value);
 6199|   521k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   521k|        else {
 6207|   521k|            SCN_EXPECT(false);
 6208|   521k|            SCN_UNREACHABLE;
 6209|   521k|        }
 6210|   521k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.26M|    {
 3040|  3.26M|        reader_error_handler eh{};
 3041|  3.26M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.26M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.26M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.26M|        return {};
 3046|  3.26M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.26M|    {
 3051|  3.26M|        return static_cast<Derived&>(*this);
 3052|  3.26M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|  3.26M|    {
 4146|  3.26M|        detail::check_float_type_specs(specs, eh);
 4147|  3.26M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   521k|    {
 6121|   521k|        const bool need_skipped_width =
 6122|   521k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 521k]
  |  Branch (6122:33): [True: 0, False: 521k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   521k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   521k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   521k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   521k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.26k, False: 514k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.26k|    }                                                  \
  |  |  |  | 3642|   521k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   514k|        auto [it, prefix_width] = prefix_result;
 6127|   514k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   514k|        std::ptrdiff_t value_width = 0;
 6131|   514k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 514k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   514k|        else {
 6147|   514k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   514k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   514k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   514k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.5k, False: 492k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  22.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  22.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  22.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  22.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  22.5k|    }                                                  \
  |  | 3642|   514k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   492k|                                             specs, value, loc));
 6149|       |
 6150|   492k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 492k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   492k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   492k|        std::ptrdiff_t postfix_width = 0;
 6159|   492k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 487k, False: 4.81k]
  ------------------
 6160|   487k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   487k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   487k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   487k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 487k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   487k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   487k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   487k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   487k|                                 value_width));
 6164|   487k|            std::tie(it, postfix_width) = postfix_result;
 6165|   487k|        }
 6166|       |
 6167|   492k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   492k|                                                 value_width, postfix_width);
 6169|   492k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 492k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   492k|        return it;
 6174|   492k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  7.66M|    {
 3035|  7.66M|        return true;
 3036|  7.66M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4217|  3.22M|    {
 4218|  3.22M|        unsigned options{};
 4219|  3.22M|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 929k, False: 2.29M]
  ------------------
 4220|   929k|            options |= float_reader_base::allow_thsep;
 4221|   929k|        }
 4222|       |
 4223|  3.22M|        SCN_GCC_COMPAT_PUSH
 4224|  3.22M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|  3.22M|        switch (specs.type) {
 4227|   406k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 406k, False: 2.81M]
  ------------------
 4228|   406k|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|  62.2k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 62.2k, False: 3.16M]
  ------------------
 4231|  62.2k|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|  1.04M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 1.04M, False: 2.18M]
  ------------------
 4234|  1.04M|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|   782k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 782k, False: 2.44M]
  ------------------
 4237|   782k|                return options | float_reader_base::allow_scientific |
 4238|   782k|                       float_reader_base::allow_fixed;
 4239|       |
 4240|   929k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 929k, False: 2.29M]
  ------------------
 4241|   929k|                return options | float_reader_base::allow_scientific |
 4242|   929k|                       float_reader_base::allow_fixed |
 4243|   929k|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 3.22M]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|  3.22M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|  3.22M|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|  3.22M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|  3.22M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  4.55M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  9.11M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|  1.39M|    {
 3692|  1.39M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.39M|        const std::ptrdiff_t sign_len =
 3695|  1.39M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 417k, False: 977k]
  ------------------
 3696|       |
 3697|  1.39M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.39M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.39M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.39M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.3k, False: 1.37M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  21.3k|    }                                                  \
  |  |  |  | 3642|  1.39M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.37M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.39M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|  4.43M|    {
 4058|  4.43M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 4.43M, False: 0]
  ------------------
 4059|  4.43M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 4.43M, False: 0]
  ------------------
 4060|  4.43M|            return;
 4061|  4.43M|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  5.23M|    {
 1587|  5.23M|        return m_storage.has_value();
 1588|  5.23M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.07M|    {
 1592|  3.07M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.07M|        return *m_storage;
 1594|  3.07M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   514k|    {
 4171|   514k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   514k|#if !SCN_DISABLE_LOCALE
 4174|   514k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 144k, False: 370k]
  ------------------
 4175|   144k|            return read_impl<Range>(
 4176|   144k|                range, rd,
 4177|   144k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   144k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   144k|                },
 4180|   144k|                value, loc);
 4181|   144k|        }
 4182|   370k|#endif
 4183|       |
 4184|   370k|        return read_impl<Range>(
 4185|   370k|            range, rd,
 4186|   370k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   370k|                return r.read_source(SCN_FWD(args)...);
 4188|   370k|            },
 4189|   370k|            value);
 4190|   514k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   713k|    {
 4207|   713k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   713k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 690k]
  |  |  ------------------
  ------------------
 4209|  23.4k|            return unexpected(r.error());
 4210|  23.4k|        }
 4211|       |
 4212|   690k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   690k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   690k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   690k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   690k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.64k, False: 684k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.64k|    }                                                  \
  |  |  |  | 3642|   690k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   684k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   684k|        return ranges::next(range.begin(), n);
 4214|   690k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.26M|    {
  763|  2.26M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.26M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   144k|    {
  754|   144k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|   144k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   144k|                  obj(static_cast<decltype(args)>(args)...);
  747|   144k|              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   144k|    {
  684|   144k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   144k|            return static_cast<T*>(s.m_cp);
  686|   144k|        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   144k|            return static_cast<T*>(s.m_p);
  689|   144k|        }
  690|   144k|        else {
  691|   144k|            return reinterpret_cast<T*>(s.m_fp);
  692|   144k|        }
  693|   144k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   144k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   144k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   144k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|   468k|    {
 3680|   468k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|   468k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   468k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 468k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|   468k|        return read_source_impl(range);
 3686|   468k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|  2.26M|    {
 3706|  2.26M|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.26M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.26M|        auto it = sign_result.first;
 3709|  2.26M|        m_sign = sign_result.second;
 3710|       |
 3711|  2.26M|        auto digits_begin = it;
 3712|  2.26M|        auto r = ranges::subrange{it, range.end()};
 3713|  2.26M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.26M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.26M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|  2.26M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|  2.26M|                SCN_TRY_ASSIGN(
 3718|  2.26M|                    it,
 3719|  2.26M|                    do_read_source_impl(
 3720|  2.26M|                        r,
 3721|  2.26M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|  2.26M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|  2.26M|            }
 3724|  2.26M|            else {
 3725|  2.26M|                auto cb = [&](const auto& rr)
 3726|  2.26M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.26M|                    auto res = read_all(rr);
 3728|  2.26M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.26M|                        return unexpected_scan_error(
 3730|  2.26M|                            scan_error::invalid_scanned_value,
 3731|  2.26M|                            "Invalid float value");
 3732|  2.26M|                    }
 3733|  2.26M|                    return res;
 3734|  2.26M|                };
 3735|  2.26M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|  2.26M|            }
 3737|  2.26M|        }
 3738|  2.26M|        else {
 3739|  2.26M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|  2.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 75.5k, False: 2.19M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  75.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  75.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  75.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  75.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  75.5k|    }                                                  \
  |  | 3642|  2.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|  2.19M|                it,
 3741|  2.19M|                do_read_source_impl(
 3742|  2.19M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  2.19M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  2.19M|        }
 3745|       |
 3746|  2.19M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  2.19M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 2.17M, False: 21.5k]
  |  Branch (3748:48): [True: 2.15M, False: 15.5k]
  ------------------
 3749|  2.19M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 2.06M, False: 87.3k]
  ------------------
 3750|  2.19M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 2.06M, False: 2.66k]
  ------------------
 3751|  2.06M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  2.06M|        }
 3753|       |
 3754|  2.19M|        handle_separators();
 3755|       |
 3756|  2.19M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 2.19M]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  2.19M|        return it;
 3769|  2.19M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|  2.26M|    {
 4001|  2.26M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.26M|        const bool allowed_nonhex =
 4003|  2.26M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.26M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.26M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.23M, False: 37.1k]
  |  Branch (4006:45): [True: 0, False: 2.23M]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.26M|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 37.1k, False: 2.23M]
  ------------------
 4012|  37.1k|            return *r;
 4013|  37.1k|        }
 4014|       |
 4015|  2.23M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.14M, False: 89.9k]
  |  Branch (4015:45): [True: 1.14k, False: 2.14M]
  ------------------
 4016|  1.14k|            return unexpected(r.error());
 4017|  1.14k|        }
 4018|  2.23M|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 89.9k, False: 2.14M]
  ------------------
 4019|  89.9k|            return *r;
 4020|  89.9k|        }
 4021|       |
 4022|  2.14M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.54M, False: 595k]
  |  Branch (4022:28): [True: 497k, False: 1.04M]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|   497k|            auto it = range.begin();
 4026|       |
 4027|   497k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 25.3k, False: 472k]
  ------------------
 4028|  25.3k|                m_kind = float_kind::hex_with_prefix;
 4029|  25.3k|                it = *r;
 4030|  25.3k|            }
 4031|   472k|            else {
 4032|   472k|                m_kind = float_kind::hex_without_prefix;
 4033|   472k|            }
 4034|       |
 4035|   497k|            return read_hex(ranges::subrange{it, range.end()});
 4036|   497k|        }
 4037|  1.64M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 595k, False: 1.04M]
  |  Branch (4037:29): [True: 595k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   595k|            m_kind = float_kind::generic;
 4041|   595k|            return read_regular_float(range);
 4042|   595k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  1.04M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.1k, False: 989k]
  |  |  ------------------
  ------------------
 4048|  57.1k|            m_kind = float_kind::hex_with_prefix;
 4049|  57.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  57.1k|        }
 4051|       |
 4052|   989k|        m_kind = float_kind::generic;
 4053|   989k|        return read_regular(range);
 4054|  1.04M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|  2.26M|    {
 3812|  2.26M|        auto it = range.begin();
 3813|  2.26M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.23M, False: 37.1k]
  ------------------
 3814|  2.23M|            return unexpected(r.error());
 3815|  2.23M|        }
 3816|  37.1k|        else {
 3817|  37.1k|            it = *r;
 3818|  37.1k|        }
 3819|       |
 3820|  37.1k|        if (auto r = read_matching_string_classic_nocase(
 3821|  37.1k|                ranges::subrange{it, range.end()}, "inity");
 3822|  37.1k|            !r) {
  ------------------
  |  Branch (3822:13): [True: 21.5k, False: 15.5k]
  ------------------
 3823|  21.5k|            m_kind = float_kind::inf_short;
 3824|  21.5k|            return it;
 3825|  21.5k|        }
 3826|  15.5k|        else {
 3827|  15.5k|            m_kind = float_kind::inf_long;
 3828|  15.5k|            return *r;
 3829|  15.5k|        }
 3830|  37.1k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|  2.23M|    {
 3835|  2.23M|        auto it = range.begin();
 3836|  2.23M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.14M, False: 91.1k]
  ------------------
 3837|  2.14M|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.14M|                scan_error::invalid_scanned_value,
 3839|  2.14M|                "Invalid floating-point NaN value"));
 3840|  2.14M|        }
 3841|  91.1k|        else {
 3842|  91.1k|            it = *r;
 3843|  91.1k|        }
 3844|       |
 3845|  91.1k|        if (auto r =
 3846|  91.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  91.1k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 87.3k, False: 3.80k]
  ------------------
 3848|  87.3k|            m_kind = float_kind::nan_simple;
 3849|  87.3k|            return it;
 3850|  87.3k|        }
 3851|  3.80k|        else {
 3852|  3.80k|            it = *r;
 3853|  3.80k|        }
 3854|       |
 3855|  3.80k|        auto payload_beg_it = it;
 3856|  3.80k|        it = read_while_code_unit(
 3857|  3.80k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  3.80k|                return is_ascii_char(ch) &&
 3859|  3.80k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|  3.80k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|  3.80k|            });
 3862|  3.80k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|  3.80k|        m_kind = float_kind::nan_with_payload;
 3865|  3.80k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 2.66k, False: 1.14k]
  ------------------
 3866|  3.80k|                                             ')')) {
 3867|  2.66k|            return *r;
 3868|  2.66k|        }
 3869|  1.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|  1.14k|                                     "Invalid floating-point NaN payload");
 3871|  3.80k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.80k|    {
  754|  3.80k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  23.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.1k|              cvref<T> obj = *get<T>(fn);
  745|  23.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.1k|              }
  748|  23.1k|              else {
  749|  23.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.1k|              }
  751|  23.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  23.1k|    {
  684|  23.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.1k|            return static_cast<T*>(s.m_cp);
  686|  23.1k|        }
  687|  23.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.1k|            return static_cast<T*>(s.m_p);
  689|  23.1k|        }
  690|  23.1k|        else {
  691|  23.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.1k|        }
  693|  23.1k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3857|  23.1k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  23.1k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3858:24): [True: 22.9k, False: 189]
  ------------------
 3859|  23.1k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3859:26): [True: 20.2k, False: 2.76k]
  |  Branch (3859:39): [True: 12.4k, False: 7.77k]
  |  Branch (3859:54): [True: 2.53k, False: 8.00k]
  |  Branch (3859:67): [True: 2.45k, False: 83]
  ------------------
 3860|  22.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3860:26): [True: 5.32k, False: 2.76k]
  |  Branch (3860:39): [True: 2.51k, False: 2.80k]
  |  Branch (3860:53): [True: 2.72k, False: 2.85k]
  ------------------
 3861|  23.1k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.80k|        {
  662|  3.80k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|  1.54M|    {
 3805|  1.54M|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.54M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|   555k|    {
 3905|   555k|        auto it = range.begin();
 3906|       |
 3907|   555k|        std::ptrdiff_t digits_count = 0;
 3908|   555k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|   555k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.26k, False: 545k]
  |  |  ------------------
  ------------------
 3910|  9.26k|            return r.transform_error(map_parse_error_to_scan_error(
 3911|  9.26k|                scan_error::invalid_scanned_value,
 3912|  9.26k|                "Invalid hexadecimal floating-point value"));
 3913|  9.26k|        }
 3914|   545k|        else {
 3915|   545k|            digits_count += ranges::distance(it, *r);
 3916|   545k|            it = *r;
 3917|   545k|        }
 3918|       |
 3919|   545k|        m_integral_part_length = digits_count;
 3920|   545k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 71.8k, False: 473k]
  ------------------
 3921|   545k|                                             m_locale_options.decimal_point)) {
 3922|  71.8k|            it = *r;
 3923|  71.8k|        }
 3924|       |
 3925|   545k|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 57.0k, False: 488k]
  ------------------
 3926|   545k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|  57.0k|            digits_count += ranges::distance(it, *r);
 3928|  57.0k|            it = *r;
 3929|  57.0k|        }
 3930|       |
 3931|   545k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 545k]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|   545k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|   545k|        return it;
 3939|   545k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|  1.10M|    {
 3790|  1.10M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10M]
  |  |  |  Branch (859:45): [True: 0, False: 1.10M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|  1.10M|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|  1.10M|        return read_while1_code_unit(
 3799|  1.10M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|  1.10M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.10M|    {
  754|  1.10M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  5.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.71M|              cvref<T> obj = *get<T>(fn);
  745|  5.71M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.71M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.71M|              }
  748|  5.71M|              else {
  749|  5.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.71M|              }
  751|  5.71M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  5.71M|    {
  684|  5.71M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.71M|            return static_cast<T*>(s.m_cp);
  686|  5.71M|        }
  687|  5.71M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.71M|            return static_cast<T*>(s.m_p);
  689|  5.71M|        }
  690|  5.71M|        else {
  691|  5.71M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.71M|        }
  693|  5.71M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3799|  5.71M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.10M|        {
  662|  1.10M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3876|  1.89M|    {
 3877|  1.89M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 237k, False: 1.66M]
  ------------------
 3878|   237k|            auto beg_exp_it = range.begin();
 3879|   237k|            auto it = *r;
 3880|       |
 3881|   237k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 237k, False: 491]
  ------------------
 3882|   237k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|   237k|                it = r_sign->first;
 3884|   237k|            }
 3885|       |
 3886|   237k|            if (auto r_exp = read_while1_code_unit(
 3887|   237k|                    ranges::subrange{it, range.end()},
 3888|   237k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|   237k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 234k]
  |  |  ------------------
  ------------------
 3890|  2.70k|                it = beg_exp_it;
 3891|  2.70k|            }
 3892|   234k|            else {
 3893|   234k|                it = *r_exp;
 3894|   234k|            }
 3895|       |
 3896|   237k|            return it;
 3897|   237k|        }
 3898|  1.66M|        return range.begin();
 3899|  1.89M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   237k|    {
  754|   237k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   758k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   758k|              cvref<T> obj = *get<T>(fn);
  745|   758k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   758k|                  obj(static_cast<decltype(args)>(args)...);
  747|   758k|              }
  748|   758k|              else {
  749|   758k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   758k|              }
  751|   758k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   758k|    {
  684|   758k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   758k|            return static_cast<T*>(s.m_cp);
  686|   758k|        }
  687|   758k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   758k|            return static_cast<T*>(s.m_p);
  689|   758k|        }
  690|   758k|        else {
  691|   758k|            return reinterpret_cast<T*>(s.m_fp);
  692|   758k|        }
  693|   758k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3888|   758k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   237k|        {
  662|   237k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|  1.58M|    {
 3945|  1.58M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|  1.58M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 1.38M, False: 197k]
  |  Branch (3946:50): [True: 29.4k, False: 1.35M]
  ------------------
 3947|       |
 3948|  1.58M|        auto it = ranges::begin(range);
 3949|  1.58M|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|  1.58M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|  1.58M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.3k, False: 1.53M]
  |  |  ------------------
  ------------------
 3953|  50.3k|            return r.transform_error(
 3954|  50.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  50.3k|                                              "Invalid floating-point value"));
 3956|  50.3k|        }
 3957|  1.53M|        else {
 3958|  1.53M|            digits_count += ranges::distance(it, *r);
 3959|  1.53M|            it = *r;
 3960|  1.53M|        }
 3961|       |
 3962|  1.53M|        m_integral_part_length = digits_count;
 3963|  1.53M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 261k, False: 1.27M]
  ------------------
 3964|  1.53M|                                             m_locale_options.decimal_point)) {
 3965|   261k|            it = *r;
 3966|   261k|        }
 3967|       |
 3968|  1.53M|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 221k, False: 1.31M]
  ------------------
 3969|  1.53M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|   221k|            digits_count += ranges::distance(it, *r);
 3971|   221k|            it = *r;
 3972|   221k|        }
 3973|       |
 3974|  1.53M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  1.53M|        auto beg_exp_it = it;
 3980|  1.53M|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 1.35M, False: 182k]
  ------------------
 3981|  1.35M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  1.35M|        }
 3983|  1.53M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 28.6k, False: 1.50M]
  |  Branch (3983:29): [True: 14.7k, False: 13.8k]
  ------------------
 3984|  14.7k|            return unexpected_scan_error(
 3985|  14.7k|                scan_error::invalid_scanned_value,
 3986|  14.7k|                "No exponent given to scientific float");
 3987|  14.7k|        }
 3988|       |
 3989|  1.51M|        m_kind =
 3990|  1.51M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 1.28M, False: 234k]
  ------------------
 3991|       |
 3992|  1.51M|        return it;
 3993|  1.53M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|  3.11M|    {
 3775|  3.11M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.11M]
  |  |  |  Branch (859:45): [True: 0, False: 3.11M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  3.11M|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  3.11M|        return read_while1_code_unit(
 3784|  3.11M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  3.11M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.11M|    {
  754|  3.11M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  18.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.1M|              cvref<T> obj = *get<T>(fn);
  745|  18.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.1M|              }
  748|  18.1M|              else {
  749|  18.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.1M|              }
  751|  18.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  18.1M|    {
  684|  18.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.1M|            return static_cast<T*>(s.m_cp);
  686|  18.1M|        }
  687|  18.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.1M|            return static_cast<T*>(s.m_p);
  689|  18.1M|        }
  690|  18.1M|        else {
  691|  18.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.1M|        }
  693|  18.1M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3784|  18.1M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.11M|        {
  662|  3.11M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.06M|    {
 1577|  2.06M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.06M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   144k|        {
  662|   144k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   370k|    {
  754|   370k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   370k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   370k|              cvref<T> obj = *get<T>(fn);
  745|   370k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   370k|                  obj(static_cast<decltype(args)>(args)...);
  747|   370k|              }
  748|   370k|              else {
  749|   370k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   370k|              }
  751|   370k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   370k|    {
  684|   370k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   370k|            return static_cast<T*>(s.m_cp);
  686|   370k|        }
  687|   370k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   370k|            return static_cast<T*>(s.m_p);
  689|   370k|        }
  690|   370k|        else {
  691|   370k|            return reinterpret_cast<T*>(s.m_fp);
  692|   370k|        }
  693|   370k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   370k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   370k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   370k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|  1.79M|    {
 3666|  1.79M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  1.79M|        return read_source_impl(range);
 3672|  1.79M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   370k|        {
  662|   370k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   506k|    {
 4171|   506k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   506k|#if !SCN_DISABLE_LOCALE
 4174|   506k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 142k, False: 364k]
  ------------------
 4175|   142k|            return read_impl<Range>(
 4176|   142k|                range, rd,
 4177|   142k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   142k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   142k|                },
 4180|   142k|                value, loc);
 4181|   142k|        }
 4182|   364k|#endif
 4183|       |
 4184|   364k|        return read_impl<Range>(
 4185|   364k|            range, rd,
 4186|   364k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   364k|                return r.read_source(SCN_FWD(args)...);
 4188|   364k|            },
 4189|   364k|            value);
 4190|   506k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   719k|    {
 4207|   719k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   719k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   719k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.1k, False: 705k]
  |  |  ------------------
  ------------------
 4209|  14.1k|            return unexpected(r.error());
 4210|  14.1k|        }
 4211|       |
 4212|   705k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   705k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   705k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   705k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.6k, False: 689k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  15.6k|    }                                                  \
  |  |  |  | 3642|   705k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   689k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   689k|        return ranges::next(range.begin(), n);
 4214|   705k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.28M|    {
  763|  2.28M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.28M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   142k|    {
  754|   142k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   142k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   142k|              cvref<T> obj = *get<T>(fn);
  745|   142k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   142k|                  obj(static_cast<decltype(args)>(args)...);
  747|   142k|              }
  748|   142k|              else {
  749|   142k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   142k|              }
  751|   142k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   142k|    {
  684|   142k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   142k|            return static_cast<T*>(s.m_cp);
  686|   142k|        }
  687|   142k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   142k|            return static_cast<T*>(s.m_p);
  689|   142k|        }
  690|   142k|        else {
  691|   142k|            return reinterpret_cast<T*>(s.m_fp);
  692|   142k|        }
  693|   142k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   142k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   142k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   142k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|   460k|    {
 3680|   460k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|   460k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   460k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|   460k|        return read_source_impl(range);
 3686|   460k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|  2.28M|    {
 3706|  2.28M|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.28M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.28M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.28M|        auto it = sign_result.first;
 3709|  2.28M|        m_sign = sign_result.second;
 3710|       |
 3711|  2.28M|        auto digits_begin = it;
 3712|  2.28M|        auto r = ranges::subrange{it, range.end()};
 3713|  2.28M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.28M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.28M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28M]
  |  |  |  Branch (859:45): [True: 0, False: 2.28M]
  |  |  |  Branch (859:45): [True: 0, False: 2.28M]
  |  |  ------------------
  ------------------
 3716|  2.28M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|  2.28M|            else {
 3725|  2.28M|                auto cb = [&](const auto& rr)
 3726|  2.28M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.28M|                    auto res = read_all(rr);
 3728|  2.28M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.28M|                        return unexpected_scan_error(
 3730|  2.28M|                            scan_error::invalid_scanned_value,
 3731|  2.28M|                            "Invalid float value");
 3732|  2.28M|                    }
 3733|  2.28M|                    return res;
 3734|  2.28M|                };
 3735|  2.28M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|  2.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44.1k, False: 2.24M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  44.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  44.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  44.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  44.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  44.1k|    }                                                  \
  |  | 3642|  2.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|  2.24M|            }
 3737|  2.28M|        }
 3738|  2.24M|        else {
 3739|  2.24M|            SCN_TRY_ASSIGN(
 3740|  2.24M|                it,
 3741|  2.24M|                do_read_source_impl(
 3742|  2.24M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  2.24M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  2.24M|        }
 3745|       |
 3746|  2.24M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  2.24M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 2.22M, False: 21.2k]
  |  Branch (3748:48): [True: 2.20M, False: 15.5k]
  ------------------
 3749|  2.24M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 2.12M, False: 87.2k]
  ------------------
 3750|  2.24M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 2.11M, False: 2.65k]
  ------------------
 3751|  2.11M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  2.11M|        }
 3753|       |
 3754|  2.24M|        handle_separators();
 3755|       |
 3756|  2.24M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 2.24M]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  2.24M|        return it;
 3769|  2.24M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|  2.28M|    {
 3812|  2.28M|        auto it = range.begin();
 3813|  2.28M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.25M, False: 36.8k]
  ------------------
 3814|  2.25M|            return unexpected(r.error());
 3815|  2.25M|        }
 3816|  36.8k|        else {
 3817|  36.8k|            it = *r;
 3818|  36.8k|        }
 3819|       |
 3820|  36.8k|        if (auto r = read_matching_string_classic_nocase(
 3821|  36.8k|                ranges::subrange{it, range.end()}, "inity");
 3822|  36.8k|            !r) {
  ------------------
  |  Branch (3822:13): [True: 21.2k, False: 15.5k]
  ------------------
 3823|  21.2k|            m_kind = float_kind::inf_short;
 3824|  21.2k|            return it;
 3825|  21.2k|        }
 3826|  15.5k|        else {
 3827|  15.5k|            m_kind = float_kind::inf_long;
 3828|  15.5k|            return *r;
 3829|  15.5k|        }
 3830|  36.8k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|  2.25M|    {
 3835|  2.25M|        auto it = range.begin();
 3836|  2.25M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.16M, False: 91.0k]
  ------------------
 3837|  2.16M|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.16M|                scan_error::invalid_scanned_value,
 3839|  2.16M|                "Invalid floating-point NaN value"));
 3840|  2.16M|        }
 3841|  91.0k|        else {
 3842|  91.0k|            it = *r;
 3843|  91.0k|        }
 3844|       |
 3845|  91.0k|        if (auto r =
 3846|  91.0k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  91.0k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 87.2k, False: 3.77k]
  ------------------
 3848|  87.2k|            m_kind = float_kind::nan_simple;
 3849|  87.2k|            return it;
 3850|  87.2k|        }
 3851|  3.77k|        else {
 3852|  3.77k|            it = *r;
 3853|  3.77k|        }
 3854|       |
 3855|  3.77k|        auto payload_beg_it = it;
 3856|  3.77k|        it = read_while_code_unit(
 3857|  3.77k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  3.77k|                return is_ascii_char(ch) &&
 3859|  3.77k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|  3.77k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|  3.77k|            });
 3862|  3.77k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|  3.77k|        m_kind = float_kind::nan_with_payload;
 3865|  3.77k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 2.65k, False: 1.11k]
  ------------------
 3866|  3.77k|                                             ')')) {
 3867|  2.65k|            return *r;
 3868|  2.65k|        }
 3869|  1.11k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|  1.11k|                                     "Invalid floating-point NaN payload");
 3871|  3.77k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.77k|    {
  754|  3.77k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.1k|              cvref<T> obj = *get<T>(fn);
  745|  23.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.1k|              }
  748|  23.1k|              else {
  749|  23.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.1k|              }
  751|  23.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.1k|    {
  684|  23.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.1k|            return static_cast<T*>(s.m_cp);
  686|  23.1k|        }
  687|  23.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.1k|            return static_cast<T*>(s.m_p);
  689|  23.1k|        }
  690|  23.1k|        else {
  691|  23.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.1k|        }
  693|  23.1k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3857|  23.1k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  23.1k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3858:24): [True: 22.9k, False: 161]
  ------------------
 3859|  23.1k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3859:26): [True: 20.1k, False: 2.76k]
  |  Branch (3859:39): [True: 12.4k, False: 7.76k]
  |  Branch (3859:54): [True: 2.52k, False: 8.00k]
  |  Branch (3859:67): [True: 2.44k, False: 83]
  ------------------
 3860|  22.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3860:26): [True: 5.32k, False: 2.76k]
  |  Branch (3860:39): [True: 2.51k, False: 2.80k]
  |  Branch (3860:53): [True: 2.72k, False: 2.84k]
  ------------------
 3861|  23.1k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.77k|        {
  662|  3.77k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  1.57M|    {
 3805|  1.57M|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.57M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.22M|{
 1996|  1.22M|    auto it = read_while_code_unit(range, pred);
 1997|  1.22M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 499k, False: 724k]
  ------------------
 1998|   499k|        return unexpected(parse_error::error);
 1999|   499k|    }
 2000|   724k|    return it;
 2001|  1.22M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3876|   380k|    {
 3877|   380k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 76.8k, False: 303k]
  ------------------
 3878|  76.8k|            auto beg_exp_it = range.begin();
 3879|  76.8k|            auto it = *r;
 3880|       |
 3881|  76.8k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 76.6k, False: 156]
  ------------------
 3882|  76.8k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  76.6k|                it = r_sign->first;
 3884|  76.6k|            }
 3885|       |
 3886|  76.8k|            if (auto r_exp = read_while1_code_unit(
 3887|  76.8k|                    ranges::subrange{it, range.end()},
 3888|  76.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  76.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 988, False: 75.8k]
  |  |  ------------------
  ------------------
 3890|    988|                it = beg_exp_it;
 3891|    988|            }
 3892|  75.8k|            else {
 3893|  75.8k|                it = *r_exp;
 3894|  75.8k|            }
 3895|       |
 3896|  76.8k|            return it;
 3897|  76.8k|        }
 3898|   303k|        return range.begin();
 3899|   380k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  76.8k|    {
  754|  76.8k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   239k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   239k|              cvref<T> obj = *get<T>(fn);
  745|   239k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   239k|                  obj(static_cast<decltype(args)>(args)...);
  747|   239k|              }
  748|   239k|              else {
  749|   239k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   239k|              }
  751|   239k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   239k|    {
  684|   239k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   239k|            return static_cast<T*>(s.m_cp);
  686|   239k|        }
  687|   239k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   239k|            return static_cast<T*>(s.m_p);
  689|   239k|        }
  690|   239k|        else {
  691|   239k|            return reinterpret_cast<T*>(s.m_fp);
  692|   239k|        }
  693|   239k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3888|   239k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  76.8k|        {
  662|  76.8k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|   586k|    {
 3945|   586k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   586k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 392k, False: 194k]
  |  Branch (3946:50): [True: 29.6k, False: 362k]
  ------------------
 3947|       |
 3948|   586k|        auto it = ranges::begin(range);
 3949|   586k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   586k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   586k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.9k, False: 559k]
  |  |  ------------------
  ------------------
 3953|  26.9k|            return r.transform_error(
 3954|  26.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  26.9k|                                              "Invalid floating-point value"));
 3956|  26.9k|        }
 3957|   559k|        else {
 3958|   559k|            digits_count += ranges::distance(it, *r);
 3959|   559k|            it = *r;
 3960|   559k|        }
 3961|       |
 3962|   559k|        m_integral_part_length = digits_count;
 3963|   559k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 102k, False: 457k]
  ------------------
 3964|   559k|                                             m_locale_options.decimal_point)) {
 3965|   102k|            it = *r;
 3966|   102k|        }
 3967|       |
 3968|   559k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 88.5k, False: 471k]
  ------------------
 3969|   559k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|  88.5k|            digits_count += ranges::distance(it, *r);
 3971|  88.5k|            it = *r;
 3972|  88.5k|        }
 3973|       |
 3974|   559k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 559k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|   559k|        auto beg_exp_it = it;
 3980|   559k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 380k, False: 179k]
  ------------------
 3981|   380k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|   380k|        }
 3983|   559k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 28.6k, False: 531k]
  |  Branch (3983:29): [True: 14.7k, False: 13.8k]
  ------------------
 3984|  14.7k|            return unexpected_scan_error(
 3985|  14.7k|                scan_error::invalid_scanned_value,
 3986|  14.7k|                "No exponent given to scientific float");
 3987|  14.7k|        }
 3988|       |
 3989|   545k|        m_kind =
 3990|   545k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 469k, False: 75.8k]
  ------------------
 3991|       |
 3992|   545k|        return it;
 3993|   559k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|  1.14M|    {
 3775|  1.14M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  |  Branch (859:45): [True: 0, False: 1.14M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  1.14M|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  1.14M|        return read_while1_code_unit(
 3784|  1.14M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  1.14M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.14M|    {
  754|  1.14M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  7.09M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.09M|              cvref<T> obj = *get<T>(fn);
  745|  7.09M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.09M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.09M|              }
  748|  7.09M|              else {
  749|  7.09M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.09M|              }
  751|  7.09M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  7.09M|    {
  684|  7.09M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.09M|            return static_cast<T*>(s.m_cp);
  686|  7.09M|        }
  687|  7.09M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.09M|            return static_cast<T*>(s.m_p);
  689|  7.09M|        }
  690|  7.09M|        else {
  691|  7.09M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.09M|        }
  693|  7.09M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|  7.09M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.14M|        {
  662|  1.14M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|  2.28M|    {
 4001|  2.28M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.28M|        const bool allowed_nonhex =
 4003|  2.28M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.28M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.28M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.25M, False: 36.8k]
  |  Branch (4006:45): [True: 0, False: 2.25M]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.28M|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 36.8k, False: 2.25M]
  ------------------
 4012|  36.8k|            return *r;
 4013|  36.8k|        }
 4014|       |
 4015|  2.25M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.16M, False: 89.9k]
  |  Branch (4015:45): [True: 1.11k, False: 2.16M]
  ------------------
 4016|  1.11k|            return unexpected(r.error());
 4017|  1.11k|        }
 4018|  2.25M|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 89.9k, False: 2.16M]
  ------------------
 4019|  89.9k|            return *r;
 4020|  89.9k|        }
 4021|       |
 4022|  2.16M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.57M, False: 586k]
  |  Branch (4022:28): [True: 488k, False: 1.08M]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|   488k|            auto it = range.begin();
 4026|       |
 4027|   488k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 24.7k, False: 463k]
  ------------------
 4028|  24.7k|                m_kind = float_kind::hex_with_prefix;
 4029|  24.7k|                it = *r;
 4030|  24.7k|            }
 4031|   463k|            else {
 4032|   463k|                m_kind = float_kind::hex_without_prefix;
 4033|   463k|            }
 4034|       |
 4035|   488k|            return read_hex(ranges::subrange{it, range.end()});
 4036|   488k|        }
 4037|  1.67M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 586k, False: 1.08M]
  |  Branch (4037:29): [True: 586k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   586k|            m_kind = float_kind::generic;
 4041|   586k|            return read_regular_float(range);
 4042|   586k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  1.08M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.8k, False: 1.02M]
  |  |  ------------------
  ------------------
 4048|  60.8k|            m_kind = float_kind::hex_with_prefix;
 4049|  60.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  60.8k|        }
 4051|       |
 4052|  1.02M|        m_kind = float_kind::generic;
 4053|  1.02M|        return read_regular(range);
 4054|  1.08M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  1.57M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  1.57M|                    auto res = read_all(rr);
 3728|  1.57M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.24k, False: 1.57M]
  |  |  ------------------
  ------------------
 3729|  1.24k|                        return unexpected_scan_error(
 3730|  1.24k|                            scan_error::invalid_scanned_value,
 3731|  1.24k|                            "Invalid float value");
 3732|  1.24k|                    }
 3733|  1.57M|                    return res;
 3734|  1.57M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.57M|{
 1839|  1.57M|    return ranges::next(range.begin(), range.end());
 1840|  1.57M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.57M|    {
  313|  1.57M|        ranges::advance(x, bound);
  314|  1.57M|        return x;
  315|  1.57M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.57M|    {
  275|  1.57M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.57M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.57M|    {
  190|  1.57M|        i = std::move(bound);
  191|  1.57M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.12M|    {
 1577|  2.12M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.12M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.12M|    {
 1621|  2.12M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.12M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.12M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.12M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.12M|            m_storage.reset();
 1627|  2.12M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.12M|        }
 1629|  2.12M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.12M|                                          std::basic_string<CharT>>) {
 1631|  2.12M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.12M|            m_view = string_view_type{*m_storage};
 1633|  2.12M|        }
 1634|  2.12M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.12M|                                          typename detail::basic_scan_buffer<
 1636|  2.12M|                                              value_t>::forward_iterator> &&
 1637|  2.12M|                           ranges::common_range<Range>) {
 1638|  2.12M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.12M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.12M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.12M|                             detail::to_address(end_seg.end()))) {
 1642|  2.12M|                auto& str = m_storage.emplace();
 1643|  2.12M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.12M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.12M|                m_view = string_view_type{str};
 1646|  2.12M|                return;
 1647|  2.12M|            }
 1648|       |
 1649|  2.12M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.12M|                                                            end_seg.data());
 1651|  2.12M|            m_storage.reset();
 1652|  2.12M|        }
 1653|  2.12M|        else {
 1654|  2.12M|            auto& str = m_storage.emplace();
 1655|  2.12M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.12M|                str.reserve(range.size());
 1657|  2.12M|            }
 1658|  2.12M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.12M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.12M|                          std::back_inserter(str));
 1661|  2.12M|            }
 1662|  2.12M|            else {
 1663|  2.12M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.12M|                     ++it) {
 1665|  2.12M|                    str.push_back(*it);
 1666|  2.12M|                }
 1667|  2.12M|            }
 1668|  2.12M|            m_view = string_view_type{str};
 1669|  2.12M|        }
 1670|  2.12M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   142k|        {
  662|   142k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   364k|    {
  754|   364k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   364k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   364k|              cvref<T> obj = *get<T>(fn);
  745|   364k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   364k|                  obj(static_cast<decltype(args)>(args)...);
  747|   364k|              }
  748|   364k|              else {
  749|   364k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   364k|              }
  751|   364k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   364k|    {
  684|   364k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   364k|            return static_cast<T*>(s.m_cp);
  686|   364k|        }
  687|   364k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   364k|            return static_cast<T*>(s.m_p);
  689|   364k|        }
  690|   364k|        else {
  691|   364k|            return reinterpret_cast<T*>(s.m_fp);
  692|   364k|        }
  693|   364k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   364k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   364k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   364k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|  1.82M|    {
 3666|  1.82M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  1.82M|        return read_source_impl(range);
 3672|  1.82M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   364k|        {
  662|   364k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   559k|    {
 6179|   559k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   559k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   559k|            auto rd = make_reader<T, char_type>();
 6184|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   559k|                return unexpected(e);
 6186|   559k|            }
 6187|       |
 6188|   559k|            return impl(rd, range, value);
 6189|   559k|        }
 6190|   559k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   559k|            auto rd = make_reader<T, char_type>();
 6192|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 559k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   559k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 559k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   559k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   559k|                return impl(rd, range, value);
 6199|   559k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   559k|        else {
 6207|   559k|            SCN_EXPECT(false);
 6208|   559k|            SCN_UNREACHABLE;
 6209|   559k|        }
 6210|   559k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   559k|    {
 6121|   559k|        const bool need_skipped_width =
 6122|   559k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 559k]
  |  Branch (6122:33): [True: 0, False: 559k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   559k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   559k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   559k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   559k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.04k, False: 552k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  7.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  7.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  7.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  7.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  7.04k|    }                                                  \
  |  |  |  | 3642|   559k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   552k|        auto [it, prefix_width] = prefix_result;
 6127|   552k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   552k|        std::ptrdiff_t value_width = 0;
 6131|   552k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 552k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   552k|        else {
 6147|   552k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   552k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   552k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.7k, False: 530k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  21.7k|    }                                                  \
  |  | 3642|   552k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   530k|                                             specs, value, loc));
 6149|       |
 6150|   530k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 530k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   530k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   530k|        std::ptrdiff_t postfix_width = 0;
 6159|   530k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 525k, False: 5.44k]
  ------------------
 6160|   525k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   525k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   525k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   525k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 525k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   525k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   525k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   525k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   525k|                                 value_width));
 6164|   525k|            std::tie(it, postfix_width) = postfix_result;
 6165|   525k|        }
 6166|       |
 6167|   530k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   530k|                                                 value_width, postfix_width);
 6169|   530k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 530k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   530k|        return it;
 6174|   530k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  1.51M|    {
 3692|  1.51M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.51M|        const std::ptrdiff_t sign_len =
 3695|  1.51M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 448k, False: 1.06M]
  ------------------
 3696|       |
 3697|  1.51M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.51M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.51M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.51M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.4k, False: 1.49M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  16.4k|    }                                                  \
  |  |  |  | 3642|  1.51M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.49M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.51M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   552k|    {
 4171|   552k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   552k|#if !SCN_DISABLE_LOCALE
 4174|   552k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 160k, False: 391k]
  ------------------
 4175|   160k|            return read_impl<Range>(
 4176|   160k|                range, rd,
 4177|   160k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   160k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   160k|                },
 4180|   160k|                value, loc);
 4181|   160k|        }
 4182|   391k|#endif
 4183|       |
 4184|   391k|        return read_impl<Range>(
 4185|   391k|            range, rd,
 4186|   391k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   391k|                return r.read_source(SCN_FWD(args)...);
 4188|   391k|            },
 4189|   391k|            value);
 4190|   552k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   772k|    {
 4207|   772k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   772k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   772k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.4k, False: 747k]
  |  |  ------------------
  ------------------
 4209|  25.4k|            return unexpected(r.error());
 4210|  25.4k|        }
 4211|       |
 4212|   747k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   747k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   747k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   747k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.46k, False: 744k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.46k|    }                                                  \
  |  |  |  | 3642|   747k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   744k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   744k|        return ranges::next(range.begin(), n);
 4214|   747k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   160k|    {
  684|   160k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   160k|            return static_cast<T*>(s.m_cp);
  686|   160k|        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   160k|            return static_cast<T*>(s.m_p);
  689|   160k|        }
  690|   160k|        else {
  691|   160k|            return reinterpret_cast<T*>(s.m_fp);
  692|   160k|        }
  693|   160k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   160k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   160k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   160k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   391k|    {
  754|   391k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   391k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   391k|              cvref<T> obj = *get<T>(fn);
  745|   391k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   391k|                  obj(static_cast<decltype(args)>(args)...);
  747|   391k|              }
  748|   391k|              else {
  749|   391k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   391k|              }
  751|   391k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   391k|    {
  684|   391k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   391k|            return static_cast<T*>(s.m_cp);
  686|   391k|        }
  687|   391k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   391k|            return static_cast<T*>(s.m_p);
  689|   391k|        }
  690|   391k|        else {
  691|   391k|            return reinterpret_cast<T*>(s.m_fp);
  692|   391k|        }
  693|   391k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   391k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   391k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   391k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   391k|        {
  662|   391k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   543k|    {
 4171|   543k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   543k|#if !SCN_DISABLE_LOCALE
 4174|   543k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 157k, False: 385k]
  ------------------
 4175|   157k|            return read_impl<Range>(
 4176|   157k|                range, rd,
 4177|   157k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   157k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   157k|                },
 4180|   157k|                value, loc);
 4181|   157k|        }
 4182|   385k|#endif
 4183|       |
 4184|   385k|        return read_impl<Range>(
 4185|   385k|            range, rd,
 4186|   385k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   385k|                return r.read_source(SCN_FWD(args)...);
 4188|   385k|            },
 4189|   385k|            value);
 4190|   543k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   779k|    {
 4207|   779k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   779k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.7k, False: 764k]
  |  |  ------------------
  ------------------
 4209|  14.7k|            return unexpected(r.error());
 4210|  14.7k|        }
 4211|       |
 4212|   764k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   764k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   764k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   764k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   764k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 750k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  14.0k|    }                                                  \
  |  |  |  | 3642|   764k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   750k|        return ranges::next(range.begin(), n);
 4214|   764k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   157k|    {
  754|   157k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   157k|              cvref<T> obj = *get<T>(fn);
  745|   157k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   157k|                  obj(static_cast<decltype(args)>(args)...);
  747|   157k|              }
  748|   157k|              else {
  749|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   157k|              }
  751|   157k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   157k|    {
  684|   157k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   157k|            return static_cast<T*>(s.m_cp);
  686|   157k|        }
  687|   157k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   157k|            return static_cast<T*>(s.m_p);
  689|   157k|        }
  690|   157k|        else {
  691|   157k|            return reinterpret_cast<T*>(s.m_fp);
  692|   157k|        }
  693|   157k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   157k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   157k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   157k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   157k|        {
  662|   157k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   385k|    {
  754|   385k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   385k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   385k|              cvref<T> obj = *get<T>(fn);
  745|   385k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   385k|                  obj(static_cast<decltype(args)>(args)...);
  747|   385k|              }
  748|   385k|              else {
  749|   385k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   385k|              }
  751|   385k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   385k|    {
  684|   385k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   385k|            return static_cast<T*>(s.m_cp);
  686|   385k|        }
  687|   385k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   385k|            return static_cast<T*>(s.m_p);
  689|   385k|        }
  690|   385k|        else {
  691|   385k|            return reinterpret_cast<T*>(s.m_fp);
  692|   385k|        }
  693|   385k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   385k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   385k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   385k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   385k|        {
  662|   385k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   565k|    {
 6179|   565k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   565k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   565k|            auto rd = make_reader<T, char_type>();
 6184|   565k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   565k|                return unexpected(e);
 6186|   565k|            }
 6187|       |
 6188|   565k|            return impl(rd, range, value);
 6189|   565k|        }
 6190|   565k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   565k|            auto rd = make_reader<T, char_type>();
 6192|   565k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 565k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   565k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 565k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   565k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   565k|                return impl(rd, range, value);
 6199|   565k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   565k|        else {
 6207|   565k|            SCN_EXPECT(false);
 6208|   565k|            SCN_UNREACHABLE;
 6209|   565k|        }
 6210|   565k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   565k|    {
 6121|   565k|        const bool need_skipped_width =
 6122|   565k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 565k]
  |  Branch (6122:33): [True: 0, False: 565k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   565k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   565k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   565k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   565k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.43k, False: 558k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  7.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  7.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  7.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  7.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  7.43k|    }                                                  \
  |  |  |  | 3642|   565k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   558k|        auto [it, prefix_width] = prefix_result;
 6127|   558k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   558k|        std::ptrdiff_t value_width = 0;
 6131|   558k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 558k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   558k|        else {
 6147|   558k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   558k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   558k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.3k, False: 537k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  21.3k|    }                                                  \
  |  | 3642|   558k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   537k|                                             specs, value, loc));
 6149|       |
 6150|   537k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 537k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   537k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   537k|        std::ptrdiff_t postfix_width = 0;
 6159|   537k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 531k, False: 5.77k]
  ------------------
 6160|   531k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   531k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   531k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   531k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   531k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   531k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   531k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   531k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   531k|                                 value_width));
 6164|   531k|            std::tie(it, postfix_width) = postfix_result;
 6165|   531k|        }
 6166|       |
 6167|   537k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   537k|                                                 value_width, postfix_width);
 6169|   537k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 537k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   537k|        return it;
 6174|   537k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|  1.53M|    {
 3692|  1.53M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.53M|        const std::ptrdiff_t sign_len =
 3695|  1.53M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 460k, False: 1.06M]
  ------------------
 3696|       |
 3697|  1.53M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 1.51M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  13.8k|    }                                                  \
  |  |  |  | 3642|  1.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.51M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.53M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   558k|    {
 4171|   558k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   558k|#if !SCN_DISABLE_LOCALE
 4174|   558k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 163k, False: 394k]
  ------------------
 4175|   163k|            return read_impl<Range>(
 4176|   163k|                range, rd,
 4177|   163k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   163k|                },
 4180|   163k|                value, loc);
 4181|   163k|        }
 4182|   394k|#endif
 4183|       |
 4184|   394k|        return read_impl<Range>(
 4185|   394k|            range, rd,
 4186|   394k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   394k|                return r.read_source(SCN_FWD(args)...);
 4188|   394k|            },
 4189|   394k|            value);
 4190|   558k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   781k|    {
 4207|   781k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   781k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 755k]
  |  |  ------------------
  ------------------
 4209|  26.6k|            return unexpected(r.error());
 4210|  26.6k|        }
 4211|       |
 4212|   755k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   755k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   755k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   755k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 774, False: 754k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    774|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    774|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    774|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    774|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    774|    }                                                  \
  |  |  |  | 3642|   755k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   754k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   754k|        return ranges::next(range.begin(), n);
 4214|   755k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   163k|    {
  754|   163k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|   163k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   163k|                  obj(static_cast<decltype(args)>(args)...);
  747|   163k|              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   163k|    {
  684|   163k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   163k|            return static_cast<T*>(s.m_cp);
  686|   163k|        }
  687|   163k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   163k|            return static_cast<T*>(s.m_p);
  689|   163k|        }
  690|   163k|        else {
  691|   163k|            return reinterpret_cast<T*>(s.m_fp);
  692|   163k|        }
  693|   163k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   163k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   163k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   163k|        {
  662|   163k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   394k|    {
  754|   394k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   394k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   394k|              cvref<T> obj = *get<T>(fn);
  745|   394k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   394k|                  obj(static_cast<decltype(args)>(args)...);
  747|   394k|              }
  748|   394k|              else {
  749|   394k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   394k|              }
  751|   394k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   394k|    {
  684|   394k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   394k|            return static_cast<T*>(s.m_cp);
  686|   394k|        }
  687|   394k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   394k|            return static_cast<T*>(s.m_p);
  689|   394k|        }
  690|   394k|        else {
  691|   394k|            return reinterpret_cast<T*>(s.m_fp);
  692|   394k|        }
  693|   394k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   394k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   394k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   394k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   394k|        {
  662|   394k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   549k|    {
 4171|   549k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   549k|#if !SCN_DISABLE_LOCALE
 4174|   549k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 160k, False: 388k]
  ------------------
 4175|   160k|            return read_impl<Range>(
 4176|   160k|                range, rd,
 4177|   160k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   160k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   160k|                },
 4180|   160k|                value, loc);
 4181|   160k|        }
 4182|   388k|#endif
 4183|       |
 4184|   388k|        return read_impl<Range>(
 4185|   388k|            range, rd,
 4186|   388k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   388k|                return r.read_source(SCN_FWD(args)...);
 4188|   388k|            },
 4189|   388k|            value);
 4190|   549k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   789k|    {
 4207|   789k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   789k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.2k, False: 774k]
  |  |  ------------------
  ------------------
 4209|  15.2k|            return unexpected(r.error());
 4210|  15.2k|        }
 4211|       |
 4212|   774k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   774k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   774k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   774k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.0k, False: 761k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  13.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  13.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  13.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  13.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  13.0k|    }                                                  \
  |  |  |  | 3642|   774k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   761k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   761k|        return ranges::next(range.begin(), n);
 4214|   774k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   160k|    {
  684|   160k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   160k|            return static_cast<T*>(s.m_cp);
  686|   160k|        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   160k|            return static_cast<T*>(s.m_p);
  689|   160k|        }
  690|   160k|        else {
  691|   160k|            return reinterpret_cast<T*>(s.m_fp);
  692|   160k|        }
  693|   160k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   160k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   160k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   160k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   388k|    {
  754|   388k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   388k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   388k|              cvref<T> obj = *get<T>(fn);
  745|   388k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   388k|                  obj(static_cast<decltype(args)>(args)...);
  747|   388k|              }
  748|   388k|              else {
  749|   388k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   388k|              }
  751|   388k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   388k|    {
  684|   388k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   388k|            return static_cast<T*>(s.m_cp);
  686|   388k|        }
  687|   388k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   388k|            return static_cast<T*>(s.m_p);
  689|   388k|        }
  690|   388k|        else {
  691|   388k|            return reinterpret_cast<T*>(s.m_fp);
  692|   388k|        }
  693|   388k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   388k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   388k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   388k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   388k|        {
  662|   388k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.29M|{
 1039|  2.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.29M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.29M|        return r;
 1042|  2.29M|    }
 1043|  2.29M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.29M|                           ranges::const_iterator_t<Range>,
 1045|  2.29M|                           typename detail::basic_scan_buffer<
 1046|  2.29M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.29M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.29M|            auto seg = r.begin().contiguous_segment();
 1049|  2.29M|            auto dist =
 1050|  2.29M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.29M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.29M|        }
 1053|  2.29M|        else {
 1054|  2.29M|            return r.begin().contiguous_segment();
 1055|  2.29M|        }
 1056|  2.29M|    }
 1057|  2.29M|    else {
 1058|  2.29M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.29M|    }
 1060|  2.29M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.00M|{
 2061|  2.00M|    auto it = range.begin();
 2062|  3.79M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.77M, False: 21.8k]
  ------------------
 2063|  3.77M|        const auto val =
 2064|  3.77M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.77M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.77M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.76M, False: 5.41k]
  |  |  ------------------
  ------------------
 2066|  3.76M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.76M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.76M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.98M, False: 1.78M]
  ------------------
 2069|  1.98M|                return it;
 2070|  1.98M|            }
 2071|  3.76M|        }
 2072|  1.78M|        it = val.iterator;
 2073|  1.78M|    }
 2074|       |
 2075|  21.8k|    return it;
 2076|  2.00M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  3.77M|{
 1899|  3.77M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.77M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.77M|    auto it = range.begin();
 1903|  3.77M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.77M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.41k, False: 3.76M]
  |  |  ------------------
  ------------------
 1906|  5.41k|        ++it;
 1907|  5.41k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  5.41k|        return {it, {}};
 1909|  5.41k|    }
 1910|       |
 1911|  3.76M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.71M, False: 52.0k]
  ------------------
 1912|  3.71M|        ++it;
 1913|  3.71M|        return {it, string_type(1, *range.begin())};
 1914|  3.71M|    }
 1915|       |
 1916|  52.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  52.0k|    return {it, string_type{range.begin(), it}};
 1918|  3.76M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  5.41k|{
 1155|  5.41k|    auto it = input.begin();
 1156|  48.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 47.3k, False: 1.53k]
  ------------------
 1157|  47.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 3.87k, False: 43.4k]
  ------------------
 1158|  3.87k|            break;
 1159|  3.87k|        }
 1160|  47.3k|    }
 1161|  5.41k|    return it;
 1162|  5.41k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  52.0k|    {
  283|  52.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  52.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  52.0k|    {
  252|  52.0k|        constexpr iter_difference_t<I> zero{0};
  253|  52.0k|        iter_difference_t<I> counter{0};
  254|       |
  255|   158k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 107k, False: 51.0k]
  |  Branch (255:30): [True: 106k, False: 1.05k]
  ------------------
  256|   106k|            ++i;
  257|   106k|            ++counter;
  258|   106k|        }
  259|       |
  260|  52.0k|        return counter;
  261|  52.0k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  3.77M|    {
 1890|  3.77M|        return !codepoint.empty();
 1891|  3.77M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.00M|{
 2082|  2.00M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.00M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.29M|{
 2951|  2.29M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.29M, False: 0]
  ------------------
 2952|  2.29M|        auto it = read_while_classic_space(range);
 2953|  2.29M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.29M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.8k, False: 2.26M]
  |  |  ------------------
  ------------------
 2955|  21.8k|            return unexpected(e);
 2956|  21.8k|        }
 2957|       |
 2958|  2.26M|        return it;
 2959|  2.29M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.29M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.29M|{
 2117|  2.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.29M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.29M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.29M|        auto buf = make_contiguous_buffer(range);
 2121|  2.29M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.29M|        return ranges::next(range.begin(),
 2123|  2.29M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.29M|    }
 2125|  2.29M|    else {
 2126|  2.29M|        auto it = range.begin();
 2127|       |
 2128|  2.29M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.29M|            auto seg = get_contiguous_beginning(range);
 2130|  2.29M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.29M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 283k, False: 2.00M]
  ------------------
 2132|   283k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   283k|            }
 2134|  2.00M|            ranges::advance(it, seg.size());
 2135|  2.00M|        }
 2136|       |
 2137|  2.00M|        return read_while_code_point(
 2138|  2.00M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.29M|    }
 2140|  2.29M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.00M|    {
  754|  2.00M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.76M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.76M|              cvref<T> obj = *get<T>(fn);
  745|  3.76M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.76M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.76M|              }
  748|  3.76M|              else {
  749|  3.76M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.76M|              }
  751|  3.76M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.76M|    {
  684|  3.76M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.76M|            return static_cast<T*>(s.m_cp);
  686|  3.76M|        }
  687|  3.76M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.76M|            return static_cast<T*>(s.m_p);
  689|  3.76M|        }
  690|  3.76M|        else {
  691|  3.76M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.76M|        }
  693|  3.76M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.76M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.00M|        {
  662|  2.00M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   261k|{
  981|   261k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   261k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   261k|        return true;
  984|   261k|    }
  985|   261k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   261k|                           ranges::const_iterator_t<Range>,
  987|   261k|                           typename detail::basic_scan_buffer<
  988|   261k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   261k|        auto beg = r.begin();
  990|   261k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 261k, False: 0]
  ------------------
  991|   261k|            return false;
  992|   261k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   261k|    else {
 1006|   261k|        return false;
 1007|   261k|    }
 1008|   261k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|   199k|    {
 6038|   199k|        const bool need_skipped_width =
 6039|   199k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 199k]
  |  Branch (6039:33): [True: 0, False: 199k]
  ------------------
 6040|   199k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|   199k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 199k]
  ------------------
 6044|   199k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 199k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|   199k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 199k, False: 0]
  |  Branch (6048:56): [True: 199k, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|   199k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 199k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   398k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.48k|    }                                                  \
  |  |  |  | 3642|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   398k|                            make_eof_scan_error));
 6059|       |
 6060|   398k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 198k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|   198k|            return result_type{it, 0};
 6068|   398k|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|   199k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   300k|{
 1976|   300k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   300k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   300k|{
 1957|   300k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   300k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   300k|    }
 1960|   300k|    else {
 1961|   300k|        auto first = range.begin();
 1962|   344k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 343k, False: 945]
  ------------------
 1963|   343k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 299k, False: 43.6k]
  ------------------
 1964|   299k|                return first;
 1965|   299k|            }
 1966|   343k|        }
 1967|    945|        return first;
 1968|   300k|    }
 1969|   300k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   982k|    {
  763|   982k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   982k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   982k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   432k|    {
  754|   432k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   491k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   491k|              cvref<T> obj = *get<T>(fn);
  745|   491k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   491k|                  obj(static_cast<decltype(args)>(args)...);
  747|   491k|              }
  748|   491k|              else {
  749|   491k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   491k|              }
  751|   491k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   491k|    {
  684|   491k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   491k|            return static_cast<T*>(s.m_cp);
  686|   491k|        }
  687|   491k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   491k|            return static_cast<T*>(s.m_p);
  689|   491k|        }
  690|   491k|        else {
  691|   491k|            return reinterpret_cast<T*>(s.m_fp);
  692|   491k|        }
  693|   491k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   432k|        {
  662|   432k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  65.9k|    {
  108|  65.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  65.9k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  65.9k|    {
   94|  65.9k|        iter_difference_t<I> counter{0};
   95|   160k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 94.9k, False: 65.9k]
  ------------------
   96|  94.9k|            ++i;
   97|  94.9k|            ++counter;
   98|  94.9k|        }
   99|  65.9k|        return counter;
  100|  65.9k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   662k|{
 1857|   662k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   662k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   662k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   662k|        if (sz < count) {
 1862|   662k|            return unexpected(eof_error::eof);
 1863|   662k|        }
 1864|       |
 1865|   662k|        return ranges::next(range.begin(), count);
 1866|   662k|    }
 1867|   662k|    else {
 1868|   662k|        auto it = range.begin();
 1869|   662k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 376k, False: 286k]
  ------------------
 1870|   376k|            return ranges::next(it, count);
 1871|   376k|        }
 1872|       |
 1873|  1.06M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 829k, False: 239k]
  ------------------
 1874|   829k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 47.3k, False: 782k]
  ------------------
 1875|  47.3k|                return unexpected(eof_error::eof);
 1876|  47.3k|            }
 1877|   829k|        }
 1878|       |
 1879|   239k|        return it;
 1880|   286k|    }
 1881|   662k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   662k|{
 1095|   662k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   662k|        return r.size();
 1097|   662k|    }
 1098|   662k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   662k|                           ranges::const_iterator_t<Range>,
 1100|   662k|                           typename detail::basic_scan_buffer<
 1101|   662k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   662k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   662k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   662k|        }
 1105|   662k|        else {
 1106|   662k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 662k, False: 0]
  ------------------
 1107|   662k|                return static_cast<size_t>(
 1108|   662k|                    r.begin().parent()->chars_available() -
 1109|   662k|                    r.begin().position());
 1110|   662k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   662k|        }
 1113|   662k|    }
 1114|   662k|    else {
 1115|   662k|        return 0;
 1116|   662k|    }
 1117|   662k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|  81.8k|    {
 1780|  81.8k|        auto stdloc = loc.get<std::locale>();
 1781|  81.8k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  81.8k|        grouping = numpunct.grouping();
 1783|  81.8k|        thousands_sep =
 1784|  81.8k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 81.8k]
  ------------------
 1785|  81.8k|        decimal_point = numpunct.decimal_point();
 1786|  81.8k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|  81.8k|{
 1717|  81.8k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 81.8k, False: 0]
  ------------------
 1718|  81.8k|        return std::use_facet<Facet>(stdloc);
 1719|  81.8k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  81.8k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   332k|{
 1846|   332k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 699, False: 331k]
  |  |  ------------------
  ------------------
 1847|    699|        return unexpected(e);
 1848|    699|    }
 1849|       |
 1850|   331k|    return ranges::next(range.begin());
 1851|   332k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   655k|{
  950|   655k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.66k, False: 653k]
  |  |  ------------------
  ------------------
  951|  2.66k|        return eof_error::eof;
  952|  2.66k|    }
  953|   653k|    return eof_error::good;
  954|   655k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   950k|{
  944|   950k|    return is_range_eof(r.begin(), r.end());
  945|   950k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   950k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   950k|    {
  937|   950k|        return begin == end;
  938|   950k|    }
  939|   950k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   331k|    {
  296|   331k|        ++x;
  297|   331k|        return x;
  298|   331k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   261k|{
 3141|   261k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   261k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 261k, False: 282]
  ------------------
 3143|   261k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 261k, False: 27]
  ------------------
 3144|   261k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   261k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   261k|    }
 3148|       |
 3149|    282|    auto& it = *r;
 3150|    282|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 243, False: 39]
  ------------------
 3151|    243|        return std::pair{it, sign_type::minus_sign};
 3152|    243|    }
 3153|     39|    return std::pair{it, sign_type::plus_sign};
 3154|    282|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   293k|{
 2272|   293k|    auto it = read_code_unit(range);
 2273|   293k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 339, False: 293k]
  |  |  ------------------
  ------------------
 2274|    339|        return unexpected(make_eof_parse_error(it.error()));
 2275|    339|    }
 2276|       |
 2277|   586k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 586k, False: 291k]
  ------------------
 2278|   586k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.23k, False: 584k]
  ------------------
 2279|  2.23k|            return *it;
 2280|  2.23k|        }
 2281|   586k|    }
 2282|       |
 2283|   291k|    return unexpected(parse_error::error);
 2284|   293k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   662k|{
 2231|   662k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   662k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   662k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   662k|        if (range.size() < str.size()) {
 2236|   662k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   662k|        }
 2238|   662k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   662k|            return unexpected(parse_error::error);
 2240|   662k|        }
 2241|   662k|        return ranges::next(range.begin(), str.size());
 2242|   662k|    }
 2243|   662k|    else {
 2244|   662k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   662k|            if (ch < 'A' || ch > 'Z') {
 2246|   662k|                return ch;
 2247|   662k|            }
 2248|   662k|            return static_cast<char_type>(ch +
 2249|   662k|                                          static_cast<char_type>('a' - 'A'));
 2250|   662k|        };
 2251|       |
 2252|   662k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|   662k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   662k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   662k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 47.3k, False: 615k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  47.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  47.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  47.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  47.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  47.3k|    }                                                  \
  |  |  |  | 3642|   662k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   615k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   615k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   615k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 615k, False: 210]
  |  |  ------------------
  ------------------
 2257|   615k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   615k|                    return ascii_tolower(a) ==
 2259|   615k|                           static_cast<detail::char_t<Range>>(b);
 2260|   615k|                }))) {
 2261|   615k|            return unexpected(parse_error::error);
 2262|   615k|        }
 2263|       |
 2264|    210|        return it;
 2265|   615k|    }
 2266|   662k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   636k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   636k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 391k, False: 245k]
  |  Branch (2245:29): [True: 241k, False: 3.86k]
  ------------------
 2246|   633k|                return ch;
 2247|   633k|            }
 2248|  3.86k|            return static_cast<char_type>(ch +
 2249|  3.86k|                                          static_cast<char_type>('a' - 'A'));
 2250|   636k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  38.7k|{
 2146|  38.7k|    auto it = read_code_unit(range);
 2147|  38.7k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 38.3k]
  |  |  ------------------
  ------------------
 2148|    360|        return unexpected(make_eof_parse_error(it.error()));
 2149|    360|    }
 2150|       |
 2151|  38.3k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.3k, False: 0]
  |  |  ------------------
  ------------------
 2152|  38.3k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  38.3k|        return unexpected(parse_error::error);
 2154|  38.3k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  38.3k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   300k|{
 1996|   300k|    auto it = read_while_code_unit(range, pred);
 1997|   300k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 260k, False: 39.7k]
  ------------------
 1998|   260k|        return unexpected(parse_error::error);
 1999|   260k|    }
 2000|  39.7k|    return it;
 2001|   300k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  37.6k|    {
 1621|  37.6k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  37.6k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  37.6k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  37.6k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  37.6k|            m_storage.reset();
 1627|  37.6k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  37.6k|        }
 1629|  37.6k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  37.6k|                                          std::basic_string<CharT>>) {
 1631|  37.6k|            m_storage.emplace(SCN_FWD(range));
 1632|  37.6k|            m_view = string_view_type{*m_storage};
 1633|  37.6k|        }
 1634|  37.6k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  37.6k|                                          typename detail::basic_scan_buffer<
 1636|  37.6k|                                              value_t>::forward_iterator> &&
 1637|  37.6k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  37.6k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  37.6k|            auto end_seg = range.end().contiguous_segment();
 1640|  37.6k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  37.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.35k, False: 35.3k]
  |  |  ------------------
  ------------------
 1641|  37.6k|                             detail::to_address(end_seg.end()))) {
 1642|  2.35k|                auto& str = m_storage.emplace();
 1643|  2.35k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.35k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.35k|                m_view = string_view_type{str};
 1646|  2.35k|                return;
 1647|  2.35k|            }
 1648|       |
 1649|  35.3k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  35.3k|                                                            end_seg.data());
 1651|  35.3k|            m_storage.reset();
 1652|  35.3k|        }
 1653|  37.6k|        else {
 1654|  37.6k|            auto& str = m_storage.emplace();
 1655|  37.6k|            if constexpr (ranges::sized_range<Range>) {
 1656|  37.6k|                str.reserve(range.size());
 1657|  37.6k|            }
 1658|  37.6k|            if constexpr (ranges::common_range<Range>) {
 1659|  37.6k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  37.6k|                          std::back_inserter(str));
 1661|  37.6k|            }
 1662|  37.6k|            else {
 1663|  37.6k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  37.6k|                     ++it) {
 1665|  37.6k|                    str.push_back(*it);
 1666|  37.6k|                }
 1667|  37.6k|            }
 1668|  37.6k|            m_view = string_view_type{str};
 1669|  37.6k|        }
 1670|  37.6k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|   552k|    {
 1582|   552k|        return m_view;
 1583|   552k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.03M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  26.9k|    {
 6080|  26.9k|        const bool need_skipped_width =
 6081|  26.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 26.9k]
  |  Branch (6081:33): [True: 0, False: 26.9k]
  ------------------
 6082|  26.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  26.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 26.9k]
  ------------------
 6085|  26.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 26.9k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  26.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 26.9k, False: 0]
  ------------------
 6090|  26.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 26.9k]
  ------------------
 6091|  26.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  26.9k|        return result_type{rng.begin(), 0};
 6115|  26.9k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   663k|{
 1857|   663k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   663k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   663k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   663k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   663k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   663k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 47.3k, False: 615k]
  ------------------
 1862|  47.3k|            return unexpected(eof_error::eof);
 1863|  47.3k|        }
 1864|       |
 1865|   615k|        return ranges::next(range.begin(), count);
 1866|   663k|    }
 1867|   663k|    else {
 1868|   663k|        auto it = range.begin();
 1869|   663k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   663k|            return ranges::next(it, count);
 1871|   663k|        }
 1872|       |
 1873|   663k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   663k|            if (it == range.end()) {
 1875|   663k|                return unexpected(eof_error::eof);
 1876|   663k|            }
 1877|   663k|        }
 1878|       |
 1879|   663k|        return it;
 1880|   663k|    }
 1881|   663k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   365k|{
 1899|   365k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   365k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   365k|    auto it = range.begin();
 1903|   365k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   365k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   365k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 365k, False: 0]
  ------------------
 1912|   365k|        ++it;
 1913|   365k|        return {it, string_type(1, *range.begin())};
 1914|   365k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   365k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   972k|{
  944|   972k|    return is_range_eof(r.begin(), r.end());
  945|   972k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   972k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   972k|    {
  937|   972k|        return begin == end;
  938|   972k|    }
  939|   972k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   143k|    {
  190|   143k|        i = std::move(bound);
  191|   143k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   365k|    {
 1890|   365k|        return !codepoint.empty();
 1891|   365k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   607k|{
  950|   607k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.21k, False: 604k]
  |  |  ------------------
  ------------------
  951|  2.21k|        return eof_error::eof;
  952|  2.21k|    }
  953|   604k|    return eof_error::good;
  954|   607k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   283k|{
 1846|   283k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240, False: 283k]
  |  |  ------------------
  ------------------
 1847|    240|        return unexpected(e);
 1848|    240|    }
 1849|       |
 1850|   283k|    return ranges::next(range.begin());
 1851|   283k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   283k|    {
  296|   283k|        ++x;
  297|   283k|        return x;
  298|   283k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   260k|{
 3141|   260k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   260k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 260k, False: 207]
  ------------------
 3143|   260k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 260k, False: 12]
  ------------------
 3144|   260k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   260k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   260k|    }
 3148|       |
 3149|    207|    auto& it = *r;
 3150|    207|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 168, False: 39]
  ------------------
 3151|    168|        return std::pair{it, sign_type::minus_sign};
 3152|    168|    }
 3153|     39|    return std::pair{it, sign_type::plus_sign};
 3154|    207|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   268k|{
 2272|   268k|    auto it = read_code_unit(range);
 2273|   268k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 268k]
  |  |  ------------------
  ------------------
 2274|    102|        return unexpected(make_eof_parse_error(it.error()));
 2275|    102|    }
 2276|       |
 2277|   537k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 537k, False: 267k]
  ------------------
 2278|   537k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.03k, False: 536k]
  ------------------
 2279|  1.03k|            return *it;
 2280|  1.03k|        }
 2281|   537k|    }
 2282|       |
 2283|   267k|    return unexpected(parse_error::error);
 2284|   268k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   663k|{
 2231|   663k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   663k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   663k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   663k|        if (range.size() < str.size()) {
 2236|   663k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   663k|        }
 2238|   663k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   663k|            return unexpected(parse_error::error);
 2240|   663k|        }
 2241|   663k|        return ranges::next(range.begin(), str.size());
 2242|   663k|    }
 2243|   663k|    else {
 2244|   663k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   663k|            if (ch < 'A' || ch > 'Z') {
 2246|   663k|                return ch;
 2247|   663k|            }
 2248|   663k|            return static_cast<char_type>(ch +
 2249|   663k|                                          static_cast<char_type>('a' - 'A'));
 2250|   663k|        };
 2251|       |
 2252|   663k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|   663k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   663k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   663k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   663k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 47.3k, False: 615k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  47.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  47.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  47.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  47.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  47.3k|    }                                                  \
  |  |  |  | 3642|   663k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   615k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   615k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   615k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 615k, False: 210]
  |  |  ------------------
  ------------------
 2257|   615k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   615k|                    return ascii_tolower(a) ==
 2259|   615k|                           static_cast<detail::char_t<Range>>(b);
 2260|   615k|                }))) {
 2261|   615k|            return unexpected(parse_error::error);
 2262|   615k|        }
 2263|       |
 2264|    210|        return it;
 2265|   615k|    }
 2266|   663k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   637k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   637k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 391k, False: 246k]
  |  Branch (2245:29): [True: 242k, False: 3.86k]
  ------------------
 2246|   633k|                return ch;
 2247|   633k|            }
 2248|  3.86k|            return static_cast<char_type>(ch +
 2249|  3.86k|                                          static_cast<char_type>('a' - 'A'));
 2250|   637k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  14.8k|{
 2146|  14.8k|    auto it = read_code_unit(range);
 2147|  14.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 14.6k]
  |  |  ------------------
  ------------------
 2148|    138|        return unexpected(make_eof_parse_error(it.error()));
 2149|    138|    }
 2150|       |
 2151|  14.6k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 0]
  |  |  ------------------
  ------------------
 2152|  14.6k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  14.6k|        return unexpected(parse_error::error);
 2154|  14.6k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  14.6k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   132k|{
 1976|   132k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   132k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   132k|{
 1957|   132k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   132k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   132k|    }
 1960|   132k|    else {
 1961|   132k|        auto first = range.begin();
 1962|   132k|        for (; first != range.end(); ++first) {
 1963|   132k|            if (pred(*first)) {
 1964|   132k|                return first;
 1965|   132k|            }
 1966|   132k|        }
 1967|   132k|        return first;
 1968|   132k|    }
 1969|   132k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   261k|{
 2951|   261k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 261k, False: 0]
  ------------------
 2952|   261k|        auto it = read_while_classic_space(range);
 2953|   261k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   261k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.87k, False: 259k]
  |  |  ------------------
  ------------------
 2955|  1.87k|            return unexpected(e);
 2956|  1.87k|        }
 2957|       |
 2958|   259k|        return it;
 2959|   261k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   261k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   261k|{
 2117|   261k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   261k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   261k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   261k|        auto buf = make_contiguous_buffer(range);
 2121|   261k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   261k|        return ranges::next(range.begin(),
 2123|   261k|                            ranges::distance(buf.view().begin(), it));
 2124|   261k|    }
 2125|   261k|    else {
 2126|   261k|        auto it = range.begin();
 2127|       |
 2128|   261k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   261k|            auto seg = get_contiguous_beginning(range);
 2130|   261k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   261k|                seg_it != seg.end()) {
 2132|   261k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   261k|            }
 2134|   261k|            ranges::advance(it, seg.size());
 2135|   261k|        }
 2136|       |
 2137|   261k|        return read_while_code_point(
 2138|   261k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   261k|    }
 2140|   261k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   261k|{
 2082|   261k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   261k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   295k|{
 2061|   295k|    auto it = range.begin();
 2062|   389k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 365k, False: 23.8k]
  ------------------
 2063|   365k|        const auto val =
 2064|   365k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   365k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   365k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 365k, False: 0]
  |  |  ------------------
  ------------------
 2066|   365k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   365k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   365k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 271k, False: 93.8k]
  ------------------
 2069|   271k|                return it;
 2070|   271k|            }
 2071|   365k|        }
 2072|  93.8k|        it = val.iterator;
 2073|  93.8k|    }
 2074|       |
 2075|  23.8k|    return it;
 2076|   295k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   261k|    {
  754|   261k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   294k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   294k|              cvref<T> obj = *get<T>(fn);
  745|   294k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   294k|                  obj(static_cast<decltype(args)>(args)...);
  747|   294k|              }
  748|   294k|              else {
  749|   294k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   294k|              }
  751|   294k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   294k|    {
  684|   294k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   294k|            return static_cast<T*>(s.m_cp);
  686|   294k|        }
  687|   294k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   294k|            return static_cast<T*>(s.m_p);
  689|   294k|        }
  690|   294k|        else {
  691|   294k|            return reinterpret_cast<T*>(s.m_fp);
  692|   294k|        }
  693|   294k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   294k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   261k|        {
  662|   261k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   413k|    {
  304|   413k|        ranges::advance(x, n);
  305|   413k|        return x;
  306|   413k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   413k|    {
  268|   413k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   413k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   413k|    {
  181|  1.44M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.03M, False: 413k]
  ------------------
  182|  1.03M|            ++i;
  183|  1.03M|        }
  184|   413k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  66.5k|    {
 6179|  66.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  66.5k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  66.5k|            auto rd = make_reader<T, char_type>();
 6184|  66.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  66.5k|                return unexpected(e);
 6186|  66.5k|            }
 6187|       |
 6188|  66.5k|            return impl(rd, range, value);
 6189|  66.5k|        }
 6190|  66.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  66.5k|            auto rd = make_reader<T, char_type>();
 6192|  66.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  66.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 66.5k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  66.5k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  66.5k|                return impl(rd, range, value);
 6199|  66.5k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  66.5k|        else {
 6207|  66.5k|            SCN_EXPECT(false);
 6208|  66.5k|            SCN_UNREACHABLE;
 6209|  66.5k|        }
 6210|  66.5k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   399k|    {
 3040|   399k|        reader_error_handler eh{};
 3041|   399k|        get_derived().check_specs_impl(specs, eh);
 3042|   399k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 399k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   399k|        return {};
 3046|   399k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   399k|    {
 3051|   399k|        return static_cast<Derived&>(*this);
 3052|   399k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|   399k|    {
 4146|   399k|        detail::check_float_type_specs(specs, eh);
 4147|   399k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  66.5k|    {
 6121|  66.5k|        const bool need_skipped_width =
 6122|  66.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 66.5k]
  |  Branch (6122:33): [True: 0, False: 66.5k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  66.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  66.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  66.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  66.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 478, False: 66.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    478|    }                                                  \
  |  |  |  | 3642|  66.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  66.0k|        auto [it, prefix_width] = prefix_result;
 6127|  66.0k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  66.0k|        std::ptrdiff_t value_width = 0;
 6131|  66.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 66.0k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  66.0k|        else {
 6147|  66.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  66.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  66.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.0k, False: 8.99k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.0k|    }                                                  \
  |  | 3642|  66.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  8.99k|                                             specs, value, loc));
 6149|       |
 6150|  8.99k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 8.99k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  8.99k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  8.99k|        std::ptrdiff_t postfix_width = 0;
 6159|  8.99k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 8.90k, False: 86]
  ------------------
 6160|  8.90k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  8.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  8.90k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  8.90k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  8.90k|                                 value_width));
 6164|  8.90k|            std::tie(it, postfix_width) = postfix_result;
 6165|  8.90k|        }
 6166|       |
 6167|  8.99k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  8.99k|                                                 value_width, postfix_width);
 6169|  8.99k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 8.99k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  8.99k|        return it;
 6174|  8.99k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   577k|    {
 3035|   577k|        return true;
 3036|   577k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4217|   396k|    {
 4218|   396k|        unsigned options{};
 4219|   396k|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 81.8k, False: 315k]
  ------------------
 4220|  81.8k|            options |= float_reader_base::allow_thsep;
 4221|  81.8k|        }
 4222|       |
 4223|   396k|        SCN_GCC_COMPAT_PUSH
 4224|   396k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|   396k|        switch (specs.type) {
 4227|  82.0k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 82.0k, False: 314k]
  ------------------
 4228|  82.0k|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|  69.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 69.0k, False: 327k]
  ------------------
 4231|  69.0k|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|  82.0k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 82.0k, False: 314k]
  ------------------
 4234|  82.0k|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|  81.8k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 81.8k, False: 314k]
  ------------------
 4237|  81.8k|                return options | float_reader_base::allow_scientific |
 4238|  81.8k|                       float_reader_base::allow_fixed;
 4239|       |
 4240|  81.8k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 81.8k, False: 315k]
  ------------------
 4241|  81.8k|                return options | float_reader_base::allow_scientific |
 4242|  81.8k|                       float_reader_base::allow_fixed |
 4243|  81.8k|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 396k]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|   396k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|   396k|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|   396k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|   396k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   519k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.03M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|  64.8k|    {
 3692|  64.8k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  64.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  64.8k|        const std::ptrdiff_t sign_len =
 3695|  64.8k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 18, False: 64.8k]
  ------------------
 3696|       |
 3697|  64.8k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  64.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  64.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  64.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.2k, False: 24.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.2k|    }                                                  \
  |  |  |  | 3642|  64.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  24.6k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  64.8k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|   194k|    {
 4058|   194k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 194k, False: 0]
  ------------------
 4059|   194k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 194k, False: 0]
  ------------------
 4060|   194k|            return;
 4061|   194k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  84.4k|    {
 1587|  84.4k|        return m_storage.has_value();
 1588|  84.4k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  49.1k|    {
 1592|  49.1k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  49.1k|        return *m_storage;
 1594|  49.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  66.0k|    {
 4171|  66.0k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  66.0k|#if !SCN_DISABLE_LOCALE
 4174|  66.0k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 13.6k, False: 52.4k]
  ------------------
 4175|  13.6k|            return read_impl<Range>(
 4176|  13.6k|                range, rd,
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  13.6k|                },
 4180|  13.6k|                value, loc);
 4181|  13.6k|        }
 4182|  52.4k|#endif
 4183|       |
 4184|  52.4k|        return read_impl<Range>(
 4185|  52.4k|            range, rd,
 4186|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.4k|                return r.read_source(SCN_FWD(args)...);
 4188|  52.4k|            },
 4189|  52.4k|            value);
 4190|  66.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  86.4k|    {
 4207|  86.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  86.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.9k, False: 12.5k]
  |  |  ------------------
  ------------------
 4209|  73.9k|            return unexpected(r.error());
 4210|  73.9k|        }
 4211|       |
 4212|  12.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 261, False: 12.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    261|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    261|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    261|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    261|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    261|    }                                                  \
  |  |  |  | 3642|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  12.2k|        return ranges::next(range.begin(), n);
 4214|  12.5k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   259k|    {
  763|   259k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   259k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  13.6k|    {
  754|  13.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.6k|              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  13.6k|    {
  684|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.6k|            return static_cast<T*>(s.m_cp);
  686|  13.6k|        }
  687|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.6k|            return static_cast<T*>(s.m_p);
  689|  13.6k|        }
  690|  13.6k|        else {
  691|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.6k|        }
  693|  13.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  13.6k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|  40.8k|    {
 3680|  40.8k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  40.8k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  40.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 40.8k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  40.8k|        return read_source_impl(range);
 3686|  40.8k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|   259k|    {
 3706|   259k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   259k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   259k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   259k|        auto it = sign_result.first;
 3709|   259k|        m_sign = sign_result.second;
 3710|       |
 3711|   259k|        auto digits_begin = it;
 3712|   259k|        auto r = ranges::subrange{it, range.end()};
 3713|   259k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   259k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   259k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|   259k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|   259k|                SCN_TRY_ASSIGN(
 3718|   259k|                    it,
 3719|   259k|                    do_read_source_impl(
 3720|   259k|                        r,
 3721|   259k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|   259k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|   259k|            }
 3724|   259k|            else {
 3725|   259k|                auto cb = [&](const auto& rr)
 3726|   259k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   259k|                    auto res = read_all(rr);
 3728|   259k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   259k|                        return unexpected_scan_error(
 3730|   259k|                            scan_error::invalid_scanned_value,
 3731|   259k|                            "Invalid float value");
 3732|   259k|                    }
 3733|   259k|                    return res;
 3734|   259k|                };
 3735|   259k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|   259k|            }
 3737|   259k|        }
 3738|   259k|        else {
 3739|   259k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 222k, False: 37.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|   222k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|   222k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|   222k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|   222k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|   222k|    }                                                  \
  |  | 3642|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|  37.6k|                it,
 3741|  37.6k|                do_read_source_impl(
 3742|  37.6k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  37.6k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  37.6k|        }
 3745|       |
 3746|  37.6k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  37.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  37.6k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 37.6k, False: 0]
  |  Branch (3748:48): [True: 37.6k, False: 0]
  ------------------
 3749|  37.6k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 37.6k, False: 0]
  ------------------
 3750|  37.6k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 37.6k, False: 0]
  ------------------
 3751|  37.6k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  37.6k|        }
 3753|       |
 3754|  37.6k|        handle_separators();
 3755|       |
 3756|  37.6k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 37.6k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  37.6k|        return it;
 3769|  37.6k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|   259k|    {
 4001|   259k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   259k|        const bool allowed_nonhex =
 4003|   259k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   259k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   259k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 259k, False: 0]
  |  Branch (4006:45): [True: 0, False: 259k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   259k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 259k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|   259k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 259k, False: 0]
  |  Branch (4015:45): [True: 0, False: 259k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   259k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 259k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|   259k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 143k, False: 116k]
  |  Branch (4022:28): [True: 41.0k, False: 102k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  41.0k|            auto it = range.begin();
 4026|       |
 4027|  41.0k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 60, False: 40.9k]
  ------------------
 4028|     60|                m_kind = float_kind::hex_with_prefix;
 4029|     60|                it = *r;
 4030|     60|            }
 4031|  40.9k|            else {
 4032|  40.9k|                m_kind = float_kind::hex_without_prefix;
 4033|  40.9k|            }
 4034|       |
 4035|  41.0k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  41.0k|        }
 4037|   218k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 116k, False: 102k]
  |  Branch (4037:29): [True: 116k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   116k|            m_kind = float_kind::generic;
 4041|   116k|            return read_regular_float(range);
 4042|   116k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|   102k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150, False: 102k]
  |  |  ------------------
  ------------------
 4048|    150|            m_kind = float_kind::hex_with_prefix;
 4049|    150|            return read_hex(ranges::subrange{*r, range.end()});
 4050|    150|        }
 4051|       |
 4052|   102k|        m_kind = float_kind::generic;
 4053|   102k|        return read_regular(range);
 4054|   102k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|   259k|    {
 3812|   259k|        auto it = range.begin();
 3813|   259k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 259k, False: 0]
  ------------------
 3814|   259k|            return unexpected(r.error());
 3815|   259k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|   259k|    {
 3835|   259k|        auto it = range.begin();
 3836|   259k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 259k, False: 0]
  ------------------
 3837|   259k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   259k|                scan_error::invalid_scanned_value,
 3839|   259k|                "Invalid floating-point NaN value"));
 3840|   259k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|   143k|    {
 3805|   143k|        return read_matching_string_classic_nocase(range, "0x");
 3806|   143k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|  41.1k|    {
 3905|  41.1k|        auto it = range.begin();
 3906|       |
 3907|  41.1k|        std::ptrdiff_t digits_count = 0;
 3908|  41.1k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|  41.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.1k, False: 7.03k]
  |  |  ------------------
  ------------------
 3910|  34.1k|            return r.transform_error(map_parse_error_to_scan_error(
 3911|  34.1k|                scan_error::invalid_scanned_value,
 3912|  34.1k|                "Invalid hexadecimal floating-point value"));
 3913|  34.1k|        }
 3914|  7.03k|        else {
 3915|  7.03k|            digits_count += ranges::distance(it, *r);
 3916|  7.03k|            it = *r;
 3917|  7.03k|        }
 3918|       |
 3919|  7.03k|        m_integral_part_length = digits_count;
 3920|  7.03k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 0, False: 7.03k]
  ------------------
 3921|  7.03k|                                             m_locale_options.decimal_point)) {
 3922|      0|            it = *r;
 3923|      0|        }
 3924|       |
 3925|  7.03k|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 0, False: 7.03k]
  ------------------
 3926|  7.03k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|      0|            digits_count += ranges::distance(it, *r);
 3928|      0|            it = *r;
 3929|      0|        }
 3930|       |
 3931|  7.03k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  7.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.03k]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|  7.03k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|  7.03k|        return it;
 3939|  7.03k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|  48.1k|    {
 3790|  48.1k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 48.1k]
  |  |  |  Branch (859:45): [True: 0, False: 48.1k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|  48.1k|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|  48.1k|        return read_while1_code_unit(
 3799|  48.1k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|  48.1k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  48.1k|    {
  754|  48.1k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  56.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.3k|              cvref<T> obj = *get<T>(fn);
  745|  56.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  56.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.3k|              }
  748|  56.3k|              else {
  749|  56.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.3k|              }
  751|  56.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  56.3k|    {
  684|  56.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  56.3k|            return static_cast<T*>(s.m_cp);
  686|  56.3k|        }
  687|  56.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  56.3k|            return static_cast<T*>(s.m_p);
  689|  56.3k|        }
  690|  56.3k|        else {
  691|  56.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  56.3k|        }
  693|  56.3k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3799|  56.3k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  48.1k|        {
  662|  48.1k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3876|  31.9k|    {
 3877|  31.9k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 1.95k, False: 29.9k]
  ------------------
 3878|  1.95k|            auto beg_exp_it = range.begin();
 3879|  1.95k|            auto it = *r;
 3880|       |
 3881|  1.95k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 1.93k, False: 27]
  ------------------
 3882|  1.95k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  1.93k|                it = r_sign->first;
 3884|  1.93k|            }
 3885|       |
 3886|  1.95k|            if (auto r_exp = read_while1_code_unit(
 3887|  1.95k|                    ranges::subrange{it, range.end()},
 3888|  1.95k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  1.95k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 898, False: 1.05k]
  |  |  ------------------
  ------------------
 3890|    898|                it = beg_exp_it;
 3891|    898|            }
 3892|  1.05k|            else {
 3893|  1.05k|                it = *r_exp;
 3894|  1.05k|            }
 3895|       |
 3896|  1.95k|            return it;
 3897|  1.95k|        }
 3898|  29.9k|        return range.begin();
 3899|  31.9k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  1.95k|    {
  754|  1.95k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  4.19k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.19k|              cvref<T> obj = *get<T>(fn);
  745|  4.19k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.19k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.19k|              }
  748|  4.19k|              else {
  749|  4.19k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.19k|              }
  751|  4.19k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  4.19k|    {
  684|  4.19k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.19k|            return static_cast<T*>(s.m_cp);
  686|  4.19k|        }
  687|  4.19k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.19k|            return static_cast<T*>(s.m_p);
  689|  4.19k|        }
  690|  4.19k|        else {
  691|  4.19k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.19k|        }
  693|  4.19k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3888|  4.19k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  1.95k|        {
  662|  1.95k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|   218k|    {
 3945|   218k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   218k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 177k, False: 41.0k]
  |  Branch (3946:50): [True: 34.5k, False: 143k]
  ------------------
 3947|       |
 3948|   218k|        auto it = ranges::begin(range);
 3949|   218k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   218k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   218k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 186k, False: 31.6k]
  |  |  ------------------
  ------------------
 3953|   186k|            return r.transform_error(
 3954|   186k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|   186k|                                              "Invalid floating-point value"));
 3956|   186k|        }
 3957|  31.6k|        else {
 3958|  31.6k|            digits_count += ranges::distance(it, *r);
 3959|  31.6k|            it = *r;
 3960|  31.6k|        }
 3961|       |
 3962|  31.6k|        m_integral_part_length = digits_count;
 3963|  31.6k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 31.6k]
  ------------------
 3964|  31.6k|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|  31.6k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 31.6k]
  ------------------
 3969|  31.6k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|  31.6k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.6k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  31.6k|        auto beg_exp_it = it;
 3980|  31.6k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 24.9k, False: 6.76k]
  ------------------
 3981|  24.9k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  24.9k|        }
 3983|  31.6k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 1.23k, False: 30.4k]
  |  Branch (3983:29): [True: 1.04k, False: 186]
  ------------------
 3984|  1.04k|            return unexpected_scan_error(
 3985|  1.04k|                scan_error::invalid_scanned_value,
 3986|  1.04k|                "No exponent given to scientific float");
 3987|  1.04k|        }
 3988|       |
 3989|  30.6k|        m_kind =
 3990|  30.6k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 29.5k, False: 1.04k]
  ------------------
 3991|       |
 3992|  30.6k|        return it;
 3993|  31.6k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|   250k|    {
 3775|   250k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  |  Branch (859:45): [True: 0, False: 250k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|   250k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|   250k|        return read_while1_code_unit(
 3784|   250k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|   250k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   250k|    {
  754|   250k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   282k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   282k|              cvref<T> obj = *get<T>(fn);
  745|   282k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   282k|                  obj(static_cast<decltype(args)>(args)...);
  747|   282k|              }
  748|   282k|              else {
  749|   282k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   282k|              }
  751|   282k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   282k|    {
  684|   282k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   282k|            return static_cast<T*>(s.m_cp);
  686|   282k|        }
  687|   282k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   282k|            return static_cast<T*>(s.m_p);
  689|   282k|        }
  690|   282k|        else {
  691|   282k|            return reinterpret_cast<T*>(s.m_fp);
  692|   282k|        }
  693|   282k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3784|   282k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   250k|        {
  662|   250k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  37.6k|    {
 1577|  37.6k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  37.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  37.6k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  13.6k|        {
  662|  13.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  52.4k|    {
  754|  52.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.4k|              cvref<T> obj = *get<T>(fn);
  745|  52.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  52.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.4k|              }
  748|  52.4k|              else {
  749|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.4k|              }
  751|  52.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  52.4k|    {
  684|  52.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  52.4k|            return static_cast<T*>(s.m_cp);
  686|  52.4k|        }
  687|  52.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  52.4k|            return static_cast<T*>(s.m_p);
  689|  52.4k|        }
  690|  52.4k|        else {
  691|  52.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  52.4k|        }
  693|  52.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  52.4k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|   218k|    {
 3666|   218k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|   218k|        return read_source_impl(range);
 3672|   218k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  52.4k|        {
  662|  52.4k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  66.0k|    {
 4171|  66.0k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  66.0k|#if !SCN_DISABLE_LOCALE
 4174|  66.0k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 13.6k, False: 52.4k]
  ------------------
 4175|  13.6k|            return read_impl<Range>(
 4176|  13.6k|                range, rd,
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  13.6k|                },
 4180|  13.6k|                value, loc);
 4181|  13.6k|        }
 4182|  52.4k|#endif
 4183|       |
 4184|  52.4k|        return read_impl<Range>(
 4185|  52.4k|            range, rd,
 4186|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.4k|                return r.read_source(SCN_FWD(args)...);
 4188|  52.4k|            },
 4189|  52.4k|            value);
 4190|  66.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  86.5k|    {
 4207|  86.5k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  86.5k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.2k, False: 52.2k]
  |  |  ------------------
  ------------------
 4209|  34.2k|            return unexpected(r.error());
 4210|  34.2k|        }
 4211|       |
 4212|  52.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.9k, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  39.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  39.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  39.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  39.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  39.9k|    }                                                  \
  |  |  |  | 3642|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  12.3k|        return ranges::next(range.begin(), n);
 4214|  52.2k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   259k|    {
  763|   259k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   259k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  13.6k|    {
  754|  13.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.6k|              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  13.6k|    {
  684|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.6k|            return static_cast<T*>(s.m_cp);
  686|  13.6k|        }
  687|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.6k|            return static_cast<T*>(s.m_p);
  689|  13.6k|        }
  690|  13.6k|        else {
  691|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.6k|        }
  693|  13.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  13.6k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|  40.9k|    {
 3680|  40.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  40.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  40.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 40.9k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  40.9k|        return read_source_impl(range);
 3686|  40.9k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|   259k|    {
 3706|   259k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   259k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   259k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   259k|        auto it = sign_result.first;
 3709|   259k|        m_sign = sign_result.second;
 3710|       |
 3711|   259k|        auto digits_begin = it;
 3712|   259k|        auto r = ranges::subrange{it, range.end()};
 3713|   259k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   259k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   259k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 259k]
  |  |  |  Branch (859:45): [True: 0, False: 259k]
  |  |  |  Branch (859:45): [True: 0, False: 259k]
  |  |  ------------------
  ------------------
 3716|   259k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|   259k|            else {
 3725|   259k|                auto cb = [&](const auto& rr)
 3726|   259k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   259k|                    auto res = read_all(rr);
 3728|   259k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   259k|                        return unexpected_scan_error(
 3730|   259k|                            scan_error::invalid_scanned_value,
 3731|   259k|                            "Invalid float value");
 3732|   259k|                    }
 3733|   259k|                    return res;
 3734|   259k|                };
 3735|   259k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 102k, False: 157k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|   102k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|   102k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|   102k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|   102k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|   102k|    }                                                  \
  |  | 3642|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|   157k|            }
 3737|   259k|        }
 3738|   157k|        else {
 3739|   157k|            SCN_TRY_ASSIGN(
 3740|   157k|                it,
 3741|   157k|                do_read_source_impl(
 3742|   157k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|   157k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|   157k|        }
 3745|       |
 3746|   157k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|   157k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 157k, False: 0]
  |  Branch (3748:48): [True: 157k, False: 0]
  ------------------
 3749|   157k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 157k, False: 0]
  ------------------
 3750|   157k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 157k, False: 0]
  ------------------
 3751|   157k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|   157k|        }
 3753|       |
 3754|   157k|        handle_separators();
 3755|       |
 3756|   157k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 157k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|   157k|        return it;
 3769|   157k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|   259k|    {
 3812|   259k|        auto it = range.begin();
 3813|   259k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 259k, False: 0]
  ------------------
 3814|   259k|            return unexpected(r.error());
 3815|   259k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|   259k|    {
 3835|   259k|        auto it = range.begin();
 3836|   259k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 259k, False: 0]
  ------------------
 3837|   259k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   259k|                scan_error::invalid_scanned_value,
 3839|   259k|                "Invalid floating-point NaN value"));
 3840|   259k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|   143k|    {
 3805|   143k|        return read_matching_string_classic_nocase(range, "0x");
 3806|   143k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   132k|{
 1996|   132k|    auto it = read_while_code_unit(range, pred);
 1997|   132k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 116k, False: 15.2k]
  ------------------
 1998|   116k|        return unexpected(parse_error::error);
 1999|   116k|    }
 2000|  15.2k|    return it;
 2001|   132k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3876|  8.03k|    {
 3877|  8.03k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 824, False: 7.21k]
  ------------------
 3878|    824|            auto beg_exp_it = range.begin();
 3879|    824|            auto it = *r;
 3880|       |
 3881|    824|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 812, False: 12]
  ------------------
 3882|    824|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|    812|                it = r_sign->first;
 3884|    812|            }
 3885|       |
 3886|    824|            if (auto r_exp = read_while1_code_unit(
 3887|    824|                    ranges::subrange{it, range.end()},
 3888|    824|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|    824|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|    824|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 392, False: 432]
  |  |  ------------------
  ------------------
 3890|    392|                it = beg_exp_it;
 3891|    392|            }
 3892|    432|            else {
 3893|    432|                it = *r_exp;
 3894|    432|            }
 3895|       |
 3896|    824|            return it;
 3897|    824|        }
 3898|  7.21k|        return range.begin();
 3899|  8.03k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|    824|    {
  754|    824|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  1.71k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.71k|              cvref<T> obj = *get<T>(fn);
  745|  1.71k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.71k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.71k|              }
  748|  1.71k|              else {
  749|  1.71k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.71k|              }
  751|  1.71k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  1.71k|    {
  684|  1.71k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.71k|            return static_cast<T*>(s.m_cp);
  686|  1.71k|        }
  687|  1.71k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.71k|            return static_cast<T*>(s.m_p);
  689|  1.71k|        }
  690|  1.71k|        else {
  691|  1.71k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.71k|        }
  693|  1.71k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3888|  1.71k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|    824|        {
  662|    824|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|   116k|    {
 3945|   116k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   116k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 75.4k, False: 41.0k]
  |  Branch (3946:50): [True: 34.5k, False: 40.9k]
  ------------------
 3947|       |
 3948|   116k|        auto it = ranges::begin(range);
 3949|   116k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   116k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   116k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 101k, False: 14.8k]
  |  |  ------------------
  ------------------
 3953|   101k|            return r.transform_error(
 3954|   101k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|   101k|                                              "Invalid floating-point value"));
 3956|   101k|        }
 3957|  14.8k|        else {
 3958|  14.8k|            digits_count += ranges::distance(it, *r);
 3959|  14.8k|            it = *r;
 3960|  14.8k|        }
 3961|       |
 3962|  14.8k|        m_integral_part_length = digits_count;
 3963|  14.8k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 14.8k]
  ------------------
 3964|  14.8k|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|  14.8k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 14.8k]
  ------------------
 3969|  14.8k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|  14.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  14.8k|        auto beg_exp_it = it;
 3980|  14.8k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 8.03k, False: 6.76k]
  ------------------
 3981|  8.03k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  8.03k|        }
 3983|  14.8k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 1.23k, False: 13.5k]
  |  Branch (3983:29): [True: 1.04k, False: 186]
  ------------------
 3984|  1.04k|            return unexpected_scan_error(
 3985|  1.04k|                scan_error::invalid_scanned_value,
 3986|  1.04k|                "No exponent given to scientific float");
 3987|  1.04k|        }
 3988|       |
 3989|  13.7k|        m_kind =
 3990|  13.7k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 13.3k, False: 432]
  ------------------
 3991|       |
 3992|  13.7k|        return it;
 3993|  14.8k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|   131k|    {
 3775|   131k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 131k]
  |  |  |  Branch (859:45): [True: 0, False: 131k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|   131k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|   131k|        return read_while1_code_unit(
 3784|   131k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|   131k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   131k|    {
  754|   131k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   146k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   146k|              cvref<T> obj = *get<T>(fn);
  745|   146k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   146k|                  obj(static_cast<decltype(args)>(args)...);
  747|   146k|              }
  748|   146k|              else {
  749|   146k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   146k|              }
  751|   146k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   146k|    {
  684|   146k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   146k|            return static_cast<T*>(s.m_cp);
  686|   146k|        }
  687|   146k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   146k|            return static_cast<T*>(s.m_p);
  689|   146k|        }
  690|   146k|        else {
  691|   146k|            return reinterpret_cast<T*>(s.m_fp);
  692|   146k|        }
  693|   146k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3784|   146k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   131k|        {
  662|   131k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|   259k|    {
 4001|   259k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   259k|        const bool allowed_nonhex =
 4003|   259k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   259k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   259k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 259k, False: 0]
  |  Branch (4006:45): [True: 0, False: 259k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   259k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 259k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|   259k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 259k, False: 0]
  |  Branch (4015:45): [True: 0, False: 259k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   259k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 259k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|   259k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 143k, False: 116k]
  |  Branch (4022:28): [True: 41.0k, False: 102k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  41.0k|            auto it = range.begin();
 4026|       |
 4027|  41.0k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 60, False: 40.9k]
  ------------------
 4028|     60|                m_kind = float_kind::hex_with_prefix;
 4029|     60|                it = *r;
 4030|     60|            }
 4031|  40.9k|            else {
 4032|  40.9k|                m_kind = float_kind::hex_without_prefix;
 4033|  40.9k|            }
 4034|       |
 4035|  41.0k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  41.0k|        }
 4037|   218k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 116k, False: 102k]
  |  Branch (4037:29): [True: 116k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   116k|            m_kind = float_kind::generic;
 4041|   116k|            return read_regular_float(range);
 4042|   116k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|   102k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150, False: 102k]
  |  |  ------------------
  ------------------
 4048|    150|            m_kind = float_kind::hex_with_prefix;
 4049|    150|            return read_hex(ranges::subrange{*r, range.end()});
 4050|    150|        }
 4051|       |
 4052|   102k|        m_kind = float_kind::generic;
 4053|   102k|        return read_regular(range);
 4054|   102k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|   143k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   143k|                    auto res = read_all(rr);
 3728|   143k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 143k]
  |  |  ------------------
  ------------------
 3729|     63|                        return unexpected_scan_error(
 3730|     63|                            scan_error::invalid_scanned_value,
 3731|     63|                            "Invalid float value");
 3732|     63|                    }
 3733|   143k|                    return res;
 3734|   143k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   143k|{
 1839|   143k|    return ranges::next(range.begin(), range.end());
 1840|   143k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   143k|    {
  313|   143k|        ranges::advance(x, bound);
  314|   143k|        return x;
  315|   143k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   143k|    {
  275|   143k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   143k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   157k|    {
 1577|   157k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   157k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   157k|    {
 1621|   157k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   157k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   157k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   157k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   157k|            m_storage.reset();
 1627|   157k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   157k|        }
 1629|   157k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   157k|                                          std::basic_string<CharT>>) {
 1631|   157k|            m_storage.emplace(SCN_FWD(range));
 1632|   157k|            m_view = string_view_type{*m_storage};
 1633|   157k|        }
 1634|   157k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   157k|                                          typename detail::basic_scan_buffer<
 1636|   157k|                                              value_t>::forward_iterator> &&
 1637|   157k|                           ranges::common_range<Range>) {
 1638|   157k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   157k|            auto end_seg = range.end().contiguous_segment();
 1640|   157k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   157k|                             detail::to_address(end_seg.end()))) {
 1642|   157k|                auto& str = m_storage.emplace();
 1643|   157k|                str.reserve(range.end().position() - range.begin().position());
 1644|   157k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   157k|                m_view = string_view_type{str};
 1646|   157k|                return;
 1647|   157k|            }
 1648|       |
 1649|   157k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   157k|                                                            end_seg.data());
 1651|   157k|            m_storage.reset();
 1652|   157k|        }
 1653|   157k|        else {
 1654|   157k|            auto& str = m_storage.emplace();
 1655|   157k|            if constexpr (ranges::sized_range<Range>) {
 1656|   157k|                str.reserve(range.size());
 1657|   157k|            }
 1658|   157k|            if constexpr (ranges::common_range<Range>) {
 1659|   157k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   157k|                          std::back_inserter(str));
 1661|   157k|            }
 1662|   157k|            else {
 1663|   157k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   157k|                     ++it) {
 1665|   157k|                    str.push_back(*it);
 1666|   157k|                }
 1667|   157k|            }
 1668|   157k|            m_view = string_view_type{str};
 1669|   157k|        }
 1670|   157k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  13.6k|        {
  662|  13.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  52.4k|    {
  754|  52.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.4k|              cvref<T> obj = *get<T>(fn);
  745|  52.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  52.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.4k|              }
  748|  52.4k|              else {
  749|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.4k|              }
  751|  52.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  52.4k|    {
  684|  52.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  52.4k|            return static_cast<T*>(s.m_cp);
  686|  52.4k|        }
  687|  52.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  52.4k|            return static_cast<T*>(s.m_p);
  689|  52.4k|        }
  690|  52.4k|        else {
  691|  52.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  52.4k|        }
  693|  52.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  52.4k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|   218k|    {
 3666|   218k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|   218k|        return read_source_impl(range);
 3672|   218k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  52.4k|        {
  662|  52.4k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  66.6k|    {
 6179|  66.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  66.6k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  66.6k|            auto rd = make_reader<T, char_type>();
 6184|  66.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  66.6k|                return unexpected(e);
 6186|  66.6k|            }
 6187|       |
 6188|  66.6k|            return impl(rd, range, value);
 6189|  66.6k|        }
 6190|  66.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  66.6k|            auto rd = make_reader<T, char_type>();
 6192|  66.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.6k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  66.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 66.6k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  66.6k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  66.6k|                return impl(rd, range, value);
 6199|  66.6k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  66.6k|        else {
 6207|  66.6k|            SCN_EXPECT(false);
 6208|  66.6k|            SCN_UNREACHABLE;
 6209|  66.6k|        }
 6210|  66.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  66.6k|    {
 6121|  66.6k|        const bool need_skipped_width =
 6122|  66.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 66.6k]
  |  Branch (6122:33): [True: 0, False: 66.6k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  66.6k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  66.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  66.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  66.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 500, False: 66.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    500|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    500|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    500|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    500|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    500|    }                                                  \
  |  |  |  | 3642|  66.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  66.1k|        auto [it, prefix_width] = prefix_result;
 6127|  66.1k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  66.1k|        std::ptrdiff_t value_width = 0;
 6131|  66.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 66.1k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  66.1k|        else {
 6147|  66.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  66.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  66.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.0k, False: 9.06k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.0k|    }                                                  \
  |  | 3642|  66.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  9.06k|                                             specs, value, loc));
 6149|       |
 6150|  9.06k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 9.06k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  9.06k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  9.06k|        std::ptrdiff_t postfix_width = 0;
 6159|  9.06k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 8.97k, False: 92]
  ------------------
 6160|  8.97k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  8.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  8.97k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  8.97k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  8.97k|                                 value_width));
 6164|  8.97k|            std::tie(it, postfix_width) = postfix_result;
 6165|  8.97k|        }
 6166|       |
 6167|  9.06k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  9.06k|                                                 value_width, postfix_width);
 6169|  9.06k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 9.06k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  9.06k|        return it;
 6174|  9.06k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  64.8k|    {
 3692|  64.8k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  64.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  64.8k|        const std::ptrdiff_t sign_len =
 3695|  64.8k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 18, False: 64.8k]
  ------------------
 3696|       |
 3697|  64.8k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  64.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  64.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  64.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.0k, False: 24.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.0k|    }                                                  \
  |  |  |  | 3642|  64.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  24.8k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  64.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  66.1k|    {
 4171|  66.1k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  66.1k|#if !SCN_DISABLE_LOCALE
 4174|  66.1k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 13.6k, False: 52.4k]
  ------------------
 4175|  13.6k|            return read_impl<Range>(
 4176|  13.6k|                range, rd,
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  13.6k|                },
 4180|  13.6k|                value, loc);
 4181|  13.6k|        }
 4182|  52.4k|#endif
 4183|       |
 4184|  52.4k|        return read_impl<Range>(
 4185|  52.4k|            range, rd,
 4186|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.4k|                return r.read_source(SCN_FWD(args)...);
 4188|  52.4k|            },
 4189|  52.4k|            value);
 4190|  66.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  86.5k|    {
 4207|  86.5k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  86.5k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.0k, False: 12.5k]
  |  |  ------------------
  ------------------
 4209|  74.0k|            return unexpected(r.error());
 4210|  74.0k|        }
 4211|       |
 4212|  12.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 150, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    150|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    150|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    150|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    150|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    150|    }                                                  \
  |  |  |  | 3642|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  12.4k|        return ranges::next(range.begin(), n);
 4214|  12.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  13.6k|    {
  754|  13.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.6k|              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  13.6k|    {
  684|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.6k|            return static_cast<T*>(s.m_cp);
  686|  13.6k|        }
  687|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.6k|            return static_cast<T*>(s.m_p);
  689|  13.6k|        }
  690|  13.6k|        else {
  691|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.6k|        }
  693|  13.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  13.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  13.6k|        {
  662|  13.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  52.4k|    {
  754|  52.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.4k|              cvref<T> obj = *get<T>(fn);
  745|  52.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  52.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.4k|              }
  748|  52.4k|              else {
  749|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.4k|              }
  751|  52.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  52.4k|    {
  684|  52.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  52.4k|            return static_cast<T*>(s.m_cp);
  686|  52.4k|        }
  687|  52.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  52.4k|            return static_cast<T*>(s.m_p);
  689|  52.4k|        }
  690|  52.4k|        else {
  691|  52.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  52.4k|        }
  693|  52.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  52.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  52.4k|        {
  662|  52.4k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  66.1k|    {
 4171|  66.1k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  66.1k|#if !SCN_DISABLE_LOCALE
 4174|  66.1k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 13.6k, False: 52.5k]
  ------------------
 4175|  13.6k|            return read_impl<Range>(
 4176|  13.6k|                range, rd,
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  13.6k|                },
 4180|  13.6k|                value, loc);
 4181|  13.6k|        }
 4182|  52.5k|#endif
 4183|       |
 4184|  52.5k|        return read_impl<Range>(
 4185|  52.5k|            range, rd,
 4186|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.5k|                return r.read_source(SCN_FWD(args)...);
 4188|  52.5k|            },
 4189|  52.5k|            value);
 4190|  66.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  86.6k|    {
 4207|  86.6k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  86.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.2k, False: 52.3k]
  |  |  ------------------
  ------------------
 4209|  34.2k|            return unexpected(r.error());
 4210|  34.2k|        }
 4211|       |
 4212|  52.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.8k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  39.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  39.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  39.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  39.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  39.8k|    }                                                  \
  |  |  |  | 3642|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  12.4k|        return ranges::next(range.begin(), n);
 4214|  52.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  13.6k|    {
  754|  13.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.6k|              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  13.6k|    {
  684|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.6k|            return static_cast<T*>(s.m_cp);
  686|  13.6k|        }
  687|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.6k|            return static_cast<T*>(s.m_p);
  689|  13.6k|        }
  690|  13.6k|        else {
  691|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.6k|        }
  693|  13.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  13.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  13.6k|        {
  662|  13.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  52.5k|    {
  754|  52.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  52.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.5k|              cvref<T> obj = *get<T>(fn);
  745|  52.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  52.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.5k|              }
  748|  52.5k|              else {
  749|  52.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.5k|              }
  751|  52.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  52.5k|    {
  684|  52.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  52.5k|            return static_cast<T*>(s.m_cp);
  686|  52.5k|        }
  687|  52.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  52.5k|            return static_cast<T*>(s.m_p);
  689|  52.5k|        }
  690|  52.5k|        else {
  691|  52.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  52.5k|        }
  693|  52.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  52.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  52.5k|        {
  662|  52.5k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  66.7k|    {
 6179|  66.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  66.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  66.7k|            auto rd = make_reader<T, char_type>();
 6184|  66.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  66.7k|                return unexpected(e);
 6186|  66.7k|            }
 6187|       |
 6188|  66.7k|            return impl(rd, range, value);
 6189|  66.7k|        }
 6190|  66.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  66.7k|            auto rd = make_reader<T, char_type>();
 6192|  66.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.7k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  66.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 66.7k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  66.7k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  66.7k|                return impl(rd, range, value);
 6199|  66.7k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  66.7k|        else {
 6207|  66.7k|            SCN_EXPECT(false);
 6208|  66.7k|            SCN_UNREACHABLE;
 6209|  66.7k|        }
 6210|  66.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  66.7k|    {
 6121|  66.7k|        const bool need_skipped_width =
 6122|  66.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 66.7k]
  |  Branch (6122:33): [True: 0, False: 66.7k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  66.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  66.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  66.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  66.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 506, False: 66.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    506|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    506|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    506|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    506|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    506|    }                                                  \
  |  |  |  | 3642|  66.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  66.2k|        auto [it, prefix_width] = prefix_result;
 6127|  66.2k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  66.2k|        std::ptrdiff_t value_width = 0;
 6131|  66.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 66.2k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  66.2k|        else {
 6147|  66.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  66.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  66.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  66.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.0k, False: 9.14k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.0k|    }                                                  \
  |  | 3642|  66.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  66.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  9.14k|                                             specs, value, loc));
 6149|       |
 6150|  9.14k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 9.14k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  9.14k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  9.14k|        std::ptrdiff_t postfix_width = 0;
 6159|  9.14k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 9.05k, False: 92]
  ------------------
 6160|  9.05k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  9.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  9.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  9.05k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  9.05k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  9.05k|                                 value_width));
 6164|  9.05k|            std::tie(it, postfix_width) = postfix_result;
 6165|  9.05k|        }
 6166|       |
 6167|  9.14k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  9.14k|                                                 value_width, postfix_width);
 6169|  9.14k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 9.14k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  9.14k|        return it;
 6174|  9.14k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|  64.9k|    {
 3692|  64.9k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  64.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  64.9k|        const std::ptrdiff_t sign_len =
 3695|  64.9k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 18, False: 64.9k]
  ------------------
 3696|       |
 3697|  64.9k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  64.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  64.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  64.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.8k, False: 25.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  39.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  39.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  39.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  39.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  39.8k|    }                                                  \
  |  |  |  | 3642|  64.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  25.1k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  64.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  66.2k|    {
 4171|  66.2k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  66.2k|#if !SCN_DISABLE_LOCALE
 4174|  66.2k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 13.6k, False: 52.5k]
  ------------------
 4175|  13.6k|            return read_impl<Range>(
 4176|  13.6k|                range, rd,
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  13.6k|                },
 4180|  13.6k|                value, loc);
 4181|  13.6k|        }
 4182|  52.5k|#endif
 4183|       |
 4184|  52.5k|        return read_impl<Range>(
 4185|  52.5k|            range, rd,
 4186|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.5k|                return r.read_source(SCN_FWD(args)...);
 4188|  52.5k|            },
 4189|  52.5k|            value);
 4190|  66.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  86.6k|    {
 4207|  86.6k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  86.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.1k, False: 12.5k]
  |  |  ------------------
  ------------------
 4209|  74.1k|            return unexpected(r.error());
 4210|  74.1k|        }
 4211|       |
 4212|  12.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  12.5k|        return ranges::next(range.begin(), n);
 4214|  12.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  13.6k|    {
  754|  13.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.6k|              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  13.6k|    {
  684|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.6k|            return static_cast<T*>(s.m_cp);
  686|  13.6k|        }
  687|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.6k|            return static_cast<T*>(s.m_p);
  689|  13.6k|        }
  690|  13.6k|        else {
  691|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.6k|        }
  693|  13.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  13.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  13.6k|        {
  662|  13.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  52.5k|    {
  754|  52.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  52.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.5k|              cvref<T> obj = *get<T>(fn);
  745|  52.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  52.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.5k|              }
  748|  52.5k|              else {
  749|  52.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.5k|              }
  751|  52.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  52.5k|    {
  684|  52.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  52.5k|            return static_cast<T*>(s.m_cp);
  686|  52.5k|        }
  687|  52.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  52.5k|            return static_cast<T*>(s.m_p);
  689|  52.5k|        }
  690|  52.5k|        else {
  691|  52.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  52.5k|        }
  693|  52.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  52.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  52.5k|        {
  662|  52.5k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  66.2k|    {
 4171|  66.2k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  66.2k|#if !SCN_DISABLE_LOCALE
 4174|  66.2k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 13.6k, False: 52.5k]
  ------------------
 4175|  13.6k|            return read_impl<Range>(
 4176|  13.6k|                range, rd,
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  13.6k|                },
 4180|  13.6k|                value, loc);
 4181|  13.6k|        }
 4182|  52.5k|#endif
 4183|       |
 4184|  52.5k|        return read_impl<Range>(
 4185|  52.5k|            range, rd,
 4186|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.5k|                return r.read_source(SCN_FWD(args)...);
 4188|  52.5k|            },
 4189|  52.5k|            value);
 4190|  66.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  86.7k|    {
 4207|  86.7k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  86.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.3k, False: 52.4k]
  |  |  ------------------
  ------------------
 4209|  34.3k|            return unexpected(r.error());
 4210|  34.3k|        }
 4211|       |
 4212|  52.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.8k, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  39.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  39.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  39.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  39.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  39.8k|    }                                                  \
  |  |  |  | 3642|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  12.5k|        return ranges::next(range.begin(), n);
 4214|  52.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  13.6k|    {
  754|  13.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.6k|              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  13.6k|    {
  684|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.6k|            return static_cast<T*>(s.m_cp);
  686|  13.6k|        }
  687|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.6k|            return static_cast<T*>(s.m_p);
  689|  13.6k|        }
  690|  13.6k|        else {
  691|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.6k|        }
  693|  13.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  13.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  13.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  13.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  13.6k|        {
  662|  13.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  52.5k|    {
  754|  52.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  52.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.5k|              cvref<T> obj = *get<T>(fn);
  745|  52.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  52.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.5k|              }
  748|  52.5k|              else {
  749|  52.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.5k|              }
  751|  52.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  52.5k|    {
  684|  52.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  52.5k|            return static_cast<T*>(s.m_cp);
  686|  52.5k|        }
  687|  52.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  52.5k|            return static_cast<T*>(s.m_p);
  689|  52.5k|        }
  690|  52.5k|        else {
  691|  52.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  52.5k|        }
  693|  52.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  52.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  52.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  52.5k|        {
  662|  52.5k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   261k|{
 2061|   261k|    auto it = range.begin();
 2062|   296k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 294k, False: 1.87k]
  ------------------
 2063|   294k|        const auto val =
 2064|   294k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   294k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   294k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 294k, False: 0]
  |  |  ------------------
  ------------------
 2066|   294k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   294k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   294k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 259k, False: 35.0k]
  ------------------
 2069|   259k|                return it;
 2070|   259k|            }
 2071|   294k|        }
 2072|  35.0k|        it = val.iterator;
 2073|  35.0k|    }
 2074|       |
 2075|  1.87k|    return it;
 2076|   261k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   294k|{
 1899|   294k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   294k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   294k|    auto it = range.begin();
 1903|   294k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   294k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   294k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 294k, False: 0]
  ------------------
 1912|   294k|        ++it;
 1913|   294k|        return {it, string_type(1, *range.begin())};
 1914|   294k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   294k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   294k|    {
 1890|   294k|        return !codepoint.empty();
 1891|   294k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   261k|{
 2082|   261k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   261k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   261k|{
 2951|   261k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 261k, False: 0]
  ------------------
 2952|   261k|        auto it = read_while_classic_space(range);
 2953|   261k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   261k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.87k, False: 259k]
  |  |  ------------------
  ------------------
 2955|  1.87k|            return unexpected(e);
 2956|  1.87k|        }
 2957|       |
 2958|   259k|        return it;
 2959|   261k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   261k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   261k|{
 2117|   261k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   261k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   261k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   261k|        auto buf = make_contiguous_buffer(range);
 2121|   261k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   261k|        return ranges::next(range.begin(),
 2123|   261k|                            ranges::distance(buf.view().begin(), it));
 2124|   261k|    }
 2125|   261k|    else {
 2126|   261k|        auto it = range.begin();
 2127|       |
 2128|   261k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   261k|            auto seg = get_contiguous_beginning(range);
 2130|   261k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   261k|                seg_it != seg.end()) {
 2132|   261k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   261k|            }
 2134|   261k|            ranges::advance(it, seg.size());
 2135|   261k|        }
 2136|       |
 2137|   261k|        return read_while_code_point(
 2138|   261k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   261k|    }
 2140|   261k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   261k|    {
  754|   261k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   294k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   294k|              cvref<T> obj = *get<T>(fn);
  745|   294k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   294k|                  obj(static_cast<decltype(args)>(args)...);
  747|   294k|              }
  748|   294k|              else {
  749|   294k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   294k|              }
  751|   294k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   294k|    {
  684|   294k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   294k|            return static_cast<T*>(s.m_cp);
  686|   294k|        }
  687|   294k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   294k|            return static_cast<T*>(s.m_p);
  689|   294k|        }
  690|   294k|        else {
  691|   294k|            return reinterpret_cast<T*>(s.m_fp);
  692|   294k|        }
  693|   294k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   294k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   261k|        {
  662|   261k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.04M|{
 2088|  2.04M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.04M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.04M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.04M|        auto buf = make_contiguous_buffer(range);
 2092|  2.04M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.04M|        return ranges::next(range.begin(),
 2094|  2.04M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.04M|    }
 2096|  2.04M|    else {
 2097|  2.04M|        auto it = range.begin();
 2098|       |
 2099|  2.04M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.04M|            auto seg = get_contiguous_beginning(range);
 2101|  2.04M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.04M|                seg_it != seg.end()) {
 2103|  2.04M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.04M|            }
 2105|  2.04M|            ranges::advance(it, seg.size());
 2106|  2.04M|        }
 2107|       |
 2108|  2.04M|        return read_until_code_point(
 2109|  2.04M|            ranges::subrange{it, range.end()},
 2110|  2.04M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.04M|    }
 2112|  2.04M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.04M|{
 1683|  2.04M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.04M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.04M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.04M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.04M|    }
 1688|  2.04M|    else {
 1689|  2.04M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.04M|    }
 1691|  2.04M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.04M|    {
 1490|  2.04M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.04M|    {
 1577|  2.04M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.04M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.04M|    {
 1621|  2.04M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.04M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.04M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.04M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.04M|            m_storage.reset();
 1627|  2.04M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.04M|        }
 1629|  2.04M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.04M|                                          std::basic_string<CharT>>) {
 1631|  2.04M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.04M|            m_view = string_view_type{*m_storage};
 1633|  2.04M|        }
 1634|  2.04M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.04M|                                          typename detail::basic_scan_buffer<
 1636|  2.04M|                                              value_t>::forward_iterator> &&
 1637|  2.04M|                           ranges::common_range<Range>) {
 1638|  2.04M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.04M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.04M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.04M|                             detail::to_address(end_seg.end()))) {
 1642|  2.04M|                auto& str = m_storage.emplace();
 1643|  2.04M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.04M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.04M|                m_view = string_view_type{str};
 1646|  2.04M|                return;
 1647|  2.04M|            }
 1648|       |
 1649|  2.04M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.04M|                                                            end_seg.data());
 1651|  2.04M|            m_storage.reset();
 1652|  2.04M|        }
 1653|  2.04M|        else {
 1654|  2.04M|            auto& str = m_storage.emplace();
 1655|  2.04M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.04M|                str.reserve(range.size());
 1657|  2.04M|            }
 1658|  2.04M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.04M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.04M|                          std::back_inserter(str));
 1661|  2.04M|            }
 1662|  2.04M|            else {
 1663|  2.04M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.04M|                     ++it) {
 1665|  2.04M|                    str.push_back(*it);
 1666|  2.04M|                }
 1667|  2.04M|            }
 1668|  2.04M|            m_view = string_view_type{str};
 1669|  2.04M|        }
 1670|  2.04M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4100|  1.39M|    {
 4101|  1.39M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 169k, False: 1.22M]
  ------------------
 4102|   169k|            return std::copysign(value, T{-1.0});
 4103|   169k|        }
 4104|  1.22M|        return std::copysign(value, T{1.0});
 4105|  1.39M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  33.8k|{
 2088|  33.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  33.8k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  33.8k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  33.8k|        auto buf = make_contiguous_buffer(range);
 2092|  33.8k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  33.8k|        return ranges::next(range.begin(),
 2094|  33.8k|                            ranges::distance(buf.view().begin(), it));
 2095|  33.8k|    }
 2096|  33.8k|    else {
 2097|  33.8k|        auto it = range.begin();
 2098|       |
 2099|  33.8k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  33.8k|            auto seg = get_contiguous_beginning(range);
 2101|  33.8k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  33.8k|                seg_it != seg.end()) {
 2103|  33.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  33.8k|            }
 2105|  33.8k|            ranges::advance(it, seg.size());
 2106|  33.8k|        }
 2107|       |
 2108|  33.8k|        return read_until_code_point(
 2109|  33.8k|            ranges::subrange{it, range.end()},
 2110|  33.8k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  33.8k|    }
 2112|  33.8k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  33.8k|    {
  754|  33.8k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  70.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.7k|              cvref<T> obj = *get<T>(fn);
  745|  70.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  70.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.7k|              }
  748|  70.7k|              else {
  749|  70.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.7k|              }
  751|  70.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  70.7k|    {
  684|  70.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  70.7k|            return static_cast<T*>(s.m_cp);
  686|  70.7k|        }
  687|  70.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  70.7k|            return static_cast<T*>(s.m_p);
  689|  70.7k|        }
  690|  70.7k|        else {
  691|  70.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  70.7k|        }
  693|  70.7k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|  70.7k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  33.8k|        {
  662|  33.8k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  33.8k|    {
 1577|  33.8k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  33.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  33.8k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  33.8k|    {
 1621|  33.8k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  33.8k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  33.8k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  33.8k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  33.8k|            m_storage.reset();
 1627|  33.8k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  33.8k|        }
 1629|  33.8k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  33.8k|                                          std::basic_string<CharT>>) {
 1631|  33.8k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  33.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  33.8k|            m_view = string_view_type{*m_storage};
 1633|  33.8k|        }
 1634|  33.8k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  33.8k|                                          typename detail::basic_scan_buffer<
 1636|  33.8k|                                              value_t>::forward_iterator> &&
 1637|  33.8k|                           ranges::common_range<Range>) {
 1638|  33.8k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  33.8k|            auto end_seg = range.end().contiguous_segment();
 1640|  33.8k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  33.8k|                             detail::to_address(end_seg.end()))) {
 1642|  33.8k|                auto& str = m_storage.emplace();
 1643|  33.8k|                str.reserve(range.end().position() - range.begin().position());
 1644|  33.8k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  33.8k|                m_view = string_view_type{str};
 1646|  33.8k|                return;
 1647|  33.8k|            }
 1648|       |
 1649|  33.8k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  33.8k|                                                            end_seg.data());
 1651|  33.8k|            m_storage.reset();
 1652|  33.8k|        }
 1653|  33.8k|        else {
 1654|  33.8k|            auto& str = m_storage.emplace();
 1655|  33.8k|            if constexpr (ranges::sized_range<Range>) {
 1656|  33.8k|                str.reserve(range.size());
 1657|  33.8k|            }
 1658|  33.8k|            if constexpr (ranges::common_range<Range>) {
 1659|  33.8k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  33.8k|                          std::back_inserter(str));
 1661|  33.8k|            }
 1662|  33.8k|            else {
 1663|  33.8k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  33.8k|                     ++it) {
 1665|  33.8k|                    str.push_back(*it);
 1666|  33.8k|                }
 1667|  33.8k|            }
 1668|  33.8k|            m_view = string_view_type{str};
 1669|  33.8k|        }
 1670|  33.8k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4100|  64.8k|    {
 4101|  64.8k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 18, False: 64.8k]
  ------------------
 4102|     18|            return std::copysign(value, T{-1.0});
 4103|     18|        }
 4104|  64.8k|        return std::copysign(value, T{1.0});
 4105|  64.8k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|  1.51M|    {
 4101|  1.51M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 181k, False: 1.33M]
  ------------------
 4102|   181k|            return std::copysign(value, T{-1.0});
 4103|   181k|        }
 4104|  1.33M|        return std::copysign(value, T{1.0});
 4105|  1.51M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|  64.8k|    {
 4101|  64.8k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 18, False: 64.8k]
  ------------------
 4102|     18|            return std::copysign(value, T{-1.0});
 4103|     18|        }
 4104|  64.8k|        return std::copysign(value, T{1.0});
 4105|  64.8k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4100|  1.53M|    {
 4101|  1.53M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 187k, False: 1.34M]
  ------------------
 4102|   187k|            return std::copysign(value, T{-1.0});
 4103|   187k|        }
 4104|  1.34M|        return std::copysign(value, T{1.0});
 4105|  1.53M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4100|  64.9k|    {
 4101|  64.9k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 18, False: 64.9k]
  ------------------
 4102|     18|            return std::copysign(value, T{-1.0});
 4103|     18|        }
 4104|  64.9k|        return std::copysign(value, T{1.0});
 4105|  64.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|   698k|{
 5796|   698k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 692k]
  |  |  ------------------
  ------------------
 5797|  6.00k|        return unexpected(e);
 5798|  6.00k|    }
 5799|       |
 5800|   692k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 692k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|   692k|    return skip_classic_whitespace(range);
 5805|   692k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5871|   215k|    {
 5872|   215k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   215k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   215k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   215k|            auto rd = make_reader<T, char_type>();
 5877|   215k|            return impl(rd, range, value);
 5878|   215k|        }
 5879|   215k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   215k|            auto rd = make_reader<T, char_type>();
 5881|   215k|            if (!is_segment_contiguous(range)) {
 5882|   215k|                return impl(rd, range, value);
 5883|   215k|            }
 5884|   215k|            auto crange = get_as_contiguous(range);
 5885|   215k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   215k|            return ranges::next(range.begin(),
 5887|   215k|                                ranges::distance(crange.begin(), it));
 5888|   215k|        }
 5889|   215k|        else {
 5890|   215k|            SCN_EXPECT(false);
 5891|   215k|            SCN_UNREACHABLE;
 5892|   215k|        }
 5893|   215k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   215k|    {
 5864|   215k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.11k, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.11k|    }                                                  \
  |  |  |  | 3642|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   213k|                        .transform_error(make_eof_scan_error));
 5866|   213k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   215k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   213k|    {
 4153|   213k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   213k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   213k|        float_reader<CharT> rd{};
 4156|   213k|        return read_impl<Range>(
 4157|   213k|            range, rd,
 4158|   213k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   213k|                return r.read_source(SCN_FWD(args)...);
 4160|   213k|            },
 4161|   213k|            value);
 4162|   213k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|  1.33M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  1.45M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   213k|    {
  754|   213k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   213k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   213k|              cvref<T> obj = *get<T>(fn);
  745|   213k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   213k|                  obj(static_cast<decltype(args)>(args)...);
  747|   213k|              }
  748|   213k|              else {
  749|   213k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   213k|              }
  751|   213k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   213k|    {
  684|   213k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   213k|            return static_cast<T*>(s.m_cp);
  686|   213k|        }
  687|   213k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   213k|            return static_cast<T*>(s.m_p);
  689|   213k|        }
  690|   213k|        else {
  691|   213k|            return reinterpret_cast<T*>(s.m_fp);
  692|   213k|        }
  693|   213k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   213k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   213k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   213k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   213k|        {
  662|   213k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5871|   239k|    {
 5872|   239k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   239k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   239k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   239k|            auto rd = make_reader<T, char_type>();
 5877|   239k|            return impl(rd, range, value);
 5878|   239k|        }
 5879|   239k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   239k|            auto rd = make_reader<T, char_type>();
 5881|   239k|            if (!is_segment_contiguous(range)) {
 5882|   239k|                return impl(rd, range, value);
 5883|   239k|            }
 5884|   239k|            auto crange = get_as_contiguous(range);
 5885|   239k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   239k|            return ranges::next(range.begin(),
 5887|   239k|                                ranges::distance(crange.begin(), it));
 5888|   239k|        }
 5889|   239k|        else {
 5890|   239k|            SCN_EXPECT(false);
 5891|   239k|            SCN_UNREACHABLE;
 5892|   239k|        }
 5893|   239k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   239k|    {
 5864|   239k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.43k, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.43k|    }                                                  \
  |  |  |  | 3642|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   236k|                        .transform_error(make_eof_scan_error));
 5866|   236k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   239k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   236k|    {
 4153|   236k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   236k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   236k|        float_reader<CharT> rd{};
 4156|   236k|        return read_impl<Range>(
 4157|   236k|            range, rd,
 4158|   236k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   236k|                return r.read_source(SCN_FWD(args)...);
 4160|   236k|            },
 4161|   236k|            value);
 4162|   236k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   236k|    {
  754|   236k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   236k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   236k|              cvref<T> obj = *get<T>(fn);
  745|   236k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   236k|                  obj(static_cast<decltype(args)>(args)...);
  747|   236k|              }
  748|   236k|              else {
  749|   236k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   236k|              }
  751|   236k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   236k|    {
  684|   236k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   236k|            return static_cast<T*>(s.m_cp);
  686|   236k|        }
  687|   236k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   236k|            return static_cast<T*>(s.m_p);
  689|   236k|        }
  690|   236k|        else {
  691|   236k|            return reinterpret_cast<T*>(s.m_fp);
  692|   236k|        }
  693|   236k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   236k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   236k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   236k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   236k|        {
  662|   236k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5871|   243k|    {
 5872|   243k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   243k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   243k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   243k|            auto rd = make_reader<T, char_type>();
 5877|   243k|            return impl(rd, range, value);
 5878|   243k|        }
 5879|   243k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   243k|            auto rd = make_reader<T, char_type>();
 5881|   243k|            if (!is_segment_contiguous(range)) {
 5882|   243k|                return impl(rd, range, value);
 5883|   243k|            }
 5884|   243k|            auto crange = get_as_contiguous(range);
 5885|   243k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   243k|            return ranges::next(range.begin(),
 5887|   243k|                                ranges::distance(crange.begin(), it));
 5888|   243k|        }
 5889|   243k|        else {
 5890|   243k|            SCN_EXPECT(false);
 5891|   243k|            SCN_UNREACHABLE;
 5892|   243k|        }
 5893|   243k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   243k|    {
 5864|   243k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.59k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.59k|    }                                                  \
  |  |  |  | 3642|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   240k|                        .transform_error(make_eof_scan_error));
 5866|   240k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   243k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   240k|    {
 4153|   240k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   240k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   240k|        float_reader<CharT> rd{};
 4156|   240k|        return read_impl<Range>(
 4157|   240k|            range, rd,
 4158|   240k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   240k|                return r.read_source(SCN_FWD(args)...);
 4160|   240k|            },
 4161|   240k|            value);
 4162|   240k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   240k|    {
  754|   240k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   240k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   240k|              cvref<T> obj = *get<T>(fn);
  745|   240k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   240k|                  obj(static_cast<decltype(args)>(args)...);
  747|   240k|              }
  748|   240k|              else {
  749|   240k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   240k|              }
  751|   240k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   240k|    {
  684|   240k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   240k|            return static_cast<T*>(s.m_cp);
  686|   240k|        }
  687|   240k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   240k|            return static_cast<T*>(s.m_p);
  689|   240k|        }
  690|   240k|        else {
  691|   240k|            return reinterpret_cast<T*>(s.m_fp);
  692|   240k|        }
  693|   240k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   240k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   240k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   240k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   240k|        {
  662|   240k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|   649k|{
 5796|   649k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.99k, False: 643k]
  |  |  ------------------
  ------------------
 5797|  5.99k|        return unexpected(e);
 5798|  5.99k|    }
 5799|       |
 5800|   643k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 643k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|   643k|    return skip_classic_whitespace(range);
 5805|   643k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   200k|    {
 5872|   200k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   200k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   200k|            auto rd = make_reader<T, char_type>();
 5877|   200k|            return impl(rd, range, value);
 5878|   200k|        }
 5879|   200k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   200k|            auto rd = make_reader<T, char_type>();
 5881|   200k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 200k, False: 0]
  ------------------
 5882|   200k|                return impl(rd, range, value);
 5883|   200k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   200k|        else {
 5890|   200k|            SCN_EXPECT(false);
 5891|   200k|            SCN_UNREACHABLE;
 5892|   200k|        }
 5893|   200k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   200k|    {
 5864|   200k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.09k|    }                                                  \
  |  |  |  | 3642|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   198k|                        .transform_error(make_eof_scan_error));
 5866|   198k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   200k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   198k|    {
 4153|   198k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   198k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   198k|        float_reader<CharT> rd{};
 4156|   198k|        return read_impl<Range>(
 4157|   198k|            range, rd,
 4158|   198k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   198k|                return r.read_source(SCN_FWD(args)...);
 4160|   198k|            },
 4161|   198k|            value);
 4162|   198k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   198k|    {
  754|   198k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   198k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   198k|              cvref<T> obj = *get<T>(fn);
  745|   198k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   198k|                  obj(static_cast<decltype(args)>(args)...);
  747|   198k|              }
  748|   198k|              else {
  749|   198k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   198k|              }
  751|   198k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   198k|    {
  684|   198k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   198k|            return static_cast<T*>(s.m_cp);
  686|   198k|        }
  687|   198k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   198k|            return static_cast<T*>(s.m_p);
  689|   198k|        }
  690|   198k|        else {
  691|   198k|            return reinterpret_cast<T*>(s.m_fp);
  692|   198k|        }
  693|   198k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   198k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   198k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   198k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   198k|        {
  662|   198k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   223k|    {
 5872|   223k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   223k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   223k|            auto rd = make_reader<T, char_type>();
 5877|   223k|            return impl(rd, range, value);
 5878|   223k|        }
 5879|   223k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   223k|            auto rd = make_reader<T, char_type>();
 5881|   223k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 223k, False: 0]
  ------------------
 5882|   223k|                return impl(rd, range, value);
 5883|   223k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   223k|        else {
 5890|   223k|            SCN_EXPECT(false);
 5891|   223k|            SCN_UNREACHABLE;
 5892|   223k|        }
 5893|   223k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   223k|    {
 5864|   223k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.40k, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.40k|    }                                                  \
  |  |  |  | 3642|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   220k|                        .transform_error(make_eof_scan_error));
 5866|   220k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   223k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   220k|    {
 4153|   220k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   220k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   220k|        float_reader<CharT> rd{};
 4156|   220k|        return read_impl<Range>(
 4157|   220k|            range, rd,
 4158|   220k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   220k|                return r.read_source(SCN_FWD(args)...);
 4160|   220k|            },
 4161|   220k|            value);
 4162|   220k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   220k|    {
  754|   220k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   220k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   220k|              cvref<T> obj = *get<T>(fn);
  745|   220k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   220k|                  obj(static_cast<decltype(args)>(args)...);
  747|   220k|              }
  748|   220k|              else {
  749|   220k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   220k|              }
  751|   220k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   220k|    {
  684|   220k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   220k|            return static_cast<T*>(s.m_cp);
  686|   220k|        }
  687|   220k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   220k|            return static_cast<T*>(s.m_p);
  689|   220k|        }
  690|   220k|        else {
  691|   220k|            return reinterpret_cast<T*>(s.m_fp);
  692|   220k|        }
  693|   220k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   220k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   220k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   220k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   220k|        {
  662|   220k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   226k|    {
 5872|   226k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   226k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   226k|            auto rd = make_reader<T, char_type>();
 5877|   226k|            return impl(rd, range, value);
 5878|   226k|        }
 5879|   226k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   226k|            auto rd = make_reader<T, char_type>();
 5881|   226k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 226k, False: 0]
  ------------------
 5882|   226k|                return impl(rd, range, value);
 5883|   226k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   226k|        else {
 5890|   226k|            SCN_EXPECT(false);
 5891|   226k|            SCN_UNREACHABLE;
 5892|   226k|        }
 5893|   226k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   226k|    {
 5864|   226k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.55k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.55k|    }                                                  \
  |  |  |  | 3642|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   223k|                        .transform_error(make_eof_scan_error));
 5866|   223k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   226k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   223k|    {
 4153|   223k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   223k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   223k|        float_reader<CharT> rd{};
 4156|   223k|        return read_impl<Range>(
 4157|   223k|            range, rd,
 4158|   223k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   223k|                return r.read_source(SCN_FWD(args)...);
 4160|   223k|            },
 4161|   223k|            value);
 4162|   223k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   223k|    {
  754|   223k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   223k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   223k|              cvref<T> obj = *get<T>(fn);
  745|   223k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   223k|                  obj(static_cast<decltype(args)>(args)...);
  747|   223k|              }
  748|   223k|              else {
  749|   223k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   223k|              }
  751|   223k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   223k|    {
  684|   223k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   223k|            return static_cast<T*>(s.m_cp);
  686|   223k|        }
  687|   223k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   223k|            return static_cast<T*>(s.m_p);
  689|   223k|        }
  690|   223k|        else {
  691|   223k|            return reinterpret_cast<T*>(s.m_fp);
  692|   223k|        }
  693|   223k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   223k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   223k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   223k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   223k|        {
  662|   223k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.61M|    {
 2879|  1.61M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  4.76M|    {
 2883|  4.76M|        return m_current;
 2884|  4.76M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.14M|    {
 2888|  3.14M|        return m_range.end();
 2889|  3.14M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.53M|    {
 2903|  1.53M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.53M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.53M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.53M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.53M|        }
 2909|  1.53M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.53M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.61M|    {
 2893|  1.61M|        return ranges::subrange{begin(), end()};
 2894|  1.61M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  1.61M|    {
 6038|  1.61M|        const bool need_skipped_width =
 6039|  1.61M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 1.61M]
  |  Branch (6039:33): [True: 0, False: 1.61M]
  ------------------
 6040|  1.61M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  1.61M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.61M]
  ------------------
 6044|  1.61M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.61M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  1.61M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 1.61M, False: 0]
  |  Branch (6048:56): [True: 1.61M, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  1.61M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 1.61M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  3.21M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.61M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.61M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.61M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.2k, False: 1.59M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  18.2k|    }                                                  \
  |  |  |  | 3642|  1.61M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.21M|                            make_eof_scan_error));
 6059|       |
 6060|  3.21M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 1.59M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  1.59M|            return result_type{it, 0};
 6068|  3.21M|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|  1.61M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  1.51M|    {
 6080|  1.51M|        const bool need_skipped_width =
 6081|  1.51M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 1.51M]
  |  Branch (6081:33): [True: 0, False: 1.51M]
  ------------------
 6082|  1.51M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  1.51M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.51M]
  ------------------
 6085|  1.51M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 1.51M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  1.51M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 1.51M, False: 0]
  ------------------
 6090|  1.51M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 1.51M]
  ------------------
 6091|  1.51M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  1.51M|        return result_type{rng.begin(), 0};
 6115|  1.51M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6178|   511k|    {
 6179|   511k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   511k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   511k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   511k|            auto rd = make_reader<T, char_type>();
 6184|   511k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   511k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 511k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   511k|            return impl(rd, range, value);
 6189|   511k|        }
 6190|   511k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   511k|            auto rd = make_reader<T, char_type>();
 6192|   511k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   511k|                return unexpected(e);
 6194|   511k|            }
 6195|       |
 6196|   511k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   511k|                specs.width != 0) {
 6198|   511k|                return impl(rd, range, value);
 6199|   511k|            }
 6200|       |
 6201|   511k|            auto crange = get_as_contiguous(range);
 6202|   511k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   511k|            return ranges::next(range.begin(),
 6204|   511k|                                ranges::distance(crange.begin(), it));
 6205|   511k|        }
 6206|   511k|        else {
 6207|   511k|            SCN_EXPECT(false);
 6208|   511k|            SCN_UNREACHABLE;
 6209|   511k|        }
 6210|   511k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   511k|    {
 6121|   511k|        const bool need_skipped_width =
 6122|   511k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 511k]
  |  Branch (6122:33): [True: 0, False: 511k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   511k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   511k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   511k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   511k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   511k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.53k, False: 506k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.53k|    }                                                  \
  |  |  |  | 3642|   511k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   506k|        auto [it, prefix_width] = prefix_result;
 6127|   506k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   506k|        std::ptrdiff_t value_width = 0;
 6131|   506k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 506k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   506k|        else {
 6147|   506k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.2k, False: 483k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  23.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  23.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  23.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  23.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  23.2k|    }                                                  \
  |  | 3642|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   483k|                                             specs, value, loc));
 6149|       |
 6150|   483k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 483k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   483k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   483k|        std::ptrdiff_t postfix_width = 0;
 6159|   483k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 478k, False: 4.61k]
  ------------------
 6160|   478k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   478k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   478k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   478k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 478k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   478k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   478k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   478k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   478k|                                 value_width));
 6164|   478k|            std::tie(it, postfix_width) = postfix_result;
 6165|   478k|        }
 6166|       |
 6167|   483k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   483k|                                                 value_width, postfix_width);
 6169|   483k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 483k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   483k|        return it;
 6174|   483k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6178|   549k|    {
 6179|   549k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   549k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   549k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   549k|            auto rd = make_reader<T, char_type>();
 6184|   549k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 549k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   549k|            return impl(rd, range, value);
 6189|   549k|        }
 6190|   549k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   549k|            auto rd = make_reader<T, char_type>();
 6192|   549k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   549k|                return unexpected(e);
 6194|   549k|            }
 6195|       |
 6196|   549k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   549k|                specs.width != 0) {
 6198|   549k|                return impl(rd, range, value);
 6199|   549k|            }
 6200|       |
 6201|   549k|            auto crange = get_as_contiguous(range);
 6202|   549k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   549k|            return ranges::next(range.begin(),
 6204|   549k|                                ranges::distance(crange.begin(), it));
 6205|   549k|        }
 6206|   549k|        else {
 6207|   549k|            SCN_EXPECT(false);
 6208|   549k|            SCN_UNREACHABLE;
 6209|   549k|        }
 6210|   549k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   549k|    {
 6121|   549k|        const bool need_skipped_width =
 6122|   549k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 549k]
  |  Branch (6122:33): [True: 0, False: 549k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   549k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   549k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   549k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   549k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.16k, False: 543k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.16k|    }                                                  \
  |  |  |  | 3642|   549k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   543k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   543k|        auto [it, prefix_width] = prefix_result;
 6127|   543k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   543k|        std::ptrdiff_t value_width = 0;
 6131|   543k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 543k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   543k|        else {
 6147|   543k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   543k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   543k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.6k, False: 520k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  22.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  22.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  22.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  22.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  22.6k|    }                                                  \
  |  | 3642|   543k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   543k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   520k|                                             specs, value, loc));
 6149|       |
 6150|   520k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 520k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   520k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   520k|        std::ptrdiff_t postfix_width = 0;
 6159|   520k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 515k, False: 5.15k]
  ------------------
 6160|   515k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   515k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   515k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   515k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 515k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   515k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   515k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   515k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   515k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   515k|                                 value_width));
 6164|   515k|            std::tie(it, postfix_width) = postfix_result;
 6165|   515k|        }
 6166|       |
 6167|   520k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   520k|                                                 value_width, postfix_width);
 6169|   520k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 520k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   520k|        return it;
 6174|   520k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6178|   555k|    {
 6179|   555k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   555k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   555k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   555k|            auto rd = make_reader<T, char_type>();
 6184|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   555k|            return impl(rd, range, value);
 6189|   555k|        }
 6190|   555k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   555k|            auto rd = make_reader<T, char_type>();
 6192|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   555k|                return unexpected(e);
 6194|   555k|            }
 6195|       |
 6196|   555k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   555k|                specs.width != 0) {
 6198|   555k|                return impl(rd, range, value);
 6199|   555k|            }
 6200|       |
 6201|   555k|            auto crange = get_as_contiguous(range);
 6202|   555k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   555k|            return ranges::next(range.begin(),
 6204|   555k|                                ranges::distance(crange.begin(), it));
 6205|   555k|        }
 6206|   555k|        else {
 6207|   555k|            SCN_EXPECT(false);
 6208|   555k|            SCN_UNREACHABLE;
 6209|   555k|        }
 6210|   555k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   555k|    {
 6121|   555k|        const bool need_skipped_width =
 6122|   555k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 555k]
  |  Branch (6122:33): [True: 0, False: 555k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   555k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.50k, False: 549k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.50k|    }                                                  \
  |  |  |  | 3642|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   549k|        auto [it, prefix_width] = prefix_result;
 6127|   549k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   549k|        std::ptrdiff_t value_width = 0;
 6131|   549k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 549k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   549k|        else {
 6147|   549k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   549k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   549k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.2k, False: 526k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  22.2k|    }                                                  \
  |  | 3642|   549k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   526k|                                             specs, value, loc));
 6149|       |
 6150|   526k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 526k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   526k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   526k|        std::ptrdiff_t postfix_width = 0;
 6159|   526k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 521k, False: 5.46k]
  ------------------
 6160|   521k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   521k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   521k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   521k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 521k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   521k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   521k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   521k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   521k|                                 value_width));
 6164|   521k|            std::tie(it, postfix_width) = postfix_result;
 6165|   521k|        }
 6166|       |
 6167|   526k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   526k|                                                 value_width, postfix_width);
 6169|   526k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 526k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   526k|        return it;
 6174|   526k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  61.8k|{
 5796|  61.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 61.7k]
  |  |  ------------------
  ------------------
 5797|     96|        return unexpected(e);
 5798|     96|    }
 5799|       |
 5800|  61.7k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 61.7k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  61.7k|    return skip_classic_whitespace(range);
 5805|  61.7k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5871|  20.5k|    {
 5872|  20.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  20.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  20.5k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  20.5k|            auto rd = make_reader<T, char_type>();
 5877|  20.5k|            return impl(rd, range, value);
 5878|  20.5k|        }
 5879|  20.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  20.5k|            auto rd = make_reader<T, char_type>();
 5881|  20.5k|            if (!is_segment_contiguous(range)) {
 5882|  20.5k|                return impl(rd, range, value);
 5883|  20.5k|            }
 5884|  20.5k|            auto crange = get_as_contiguous(range);
 5885|  20.5k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  20.5k|            return ranges::next(range.begin(),
 5887|  20.5k|                                ranges::distance(crange.begin(), it));
 5888|  20.5k|        }
 5889|  20.5k|        else {
 5890|  20.5k|            SCN_EXPECT(false);
 5891|  20.5k|            SCN_UNREACHABLE;
 5892|  20.5k|        }
 5893|  20.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  20.5k|    {
 5864|  20.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  20.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  20.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  20.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 153, False: 20.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    153|    }                                                  \
  |  |  |  | 3642|  20.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  20.4k|                        .transform_error(make_eof_scan_error));
 5866|  20.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  20.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  20.4k|    {
 4153|  20.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  20.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  20.4k|        float_reader<CharT> rd{};
 4156|  20.4k|        return read_impl<Range>(
 4157|  20.4k|            range, rd,
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
 4160|  20.4k|            },
 4161|  20.4k|            value);
 4162|  20.4k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|   122k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  20.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.4k|        {
  662|  20.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5871|  20.6k|    {
 5872|  20.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  20.6k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  20.6k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  20.6k|            auto rd = make_reader<T, char_type>();
 5877|  20.6k|            return impl(rd, range, value);
 5878|  20.6k|        }
 5879|  20.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  20.6k|            auto rd = make_reader<T, char_type>();
 5881|  20.6k|            if (!is_segment_contiguous(range)) {
 5882|  20.6k|                return impl(rd, range, value);
 5883|  20.6k|            }
 5884|  20.6k|            auto crange = get_as_contiguous(range);
 5885|  20.6k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  20.6k|            return ranges::next(range.begin(),
 5887|  20.6k|                                ranges::distance(crange.begin(), it));
 5888|  20.6k|        }
 5889|  20.6k|        else {
 5890|  20.6k|            SCN_EXPECT(false);
 5891|  20.6k|            SCN_UNREACHABLE;
 5892|  20.6k|        }
 5893|  20.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  20.6k|    {
 5864|  20.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 165, False: 20.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    165|    }                                                  \
  |  |  |  | 3642|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  20.4k|                        .transform_error(make_eof_scan_error));
 5866|  20.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  20.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  20.4k|    {
 4153|  20.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  20.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  20.4k|        float_reader<CharT> rd{};
 4156|  20.4k|        return read_impl<Range>(
 4157|  20.4k|            range, rd,
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
 4160|  20.4k|            },
 4161|  20.4k|            value);
 4162|  20.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  20.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.4k|        {
  662|  20.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5871|  20.6k|    {
 5872|  20.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  20.6k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  20.6k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  20.6k|            auto rd = make_reader<T, char_type>();
 5877|  20.6k|            return impl(rd, range, value);
 5878|  20.6k|        }
 5879|  20.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  20.6k|            auto rd = make_reader<T, char_type>();
 5881|  20.6k|            if (!is_segment_contiguous(range)) {
 5882|  20.6k|                return impl(rd, range, value);
 5883|  20.6k|            }
 5884|  20.6k|            auto crange = get_as_contiguous(range);
 5885|  20.6k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  20.6k|            return ranges::next(range.begin(),
 5887|  20.6k|                                ranges::distance(crange.begin(), it));
 5888|  20.6k|        }
 5889|  20.6k|        else {
 5890|  20.6k|            SCN_EXPECT(false);
 5891|  20.6k|            SCN_UNREACHABLE;
 5892|  20.6k|        }
 5893|  20.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  20.6k|    {
 5864|  20.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 20.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    168|    }                                                  \
  |  |  |  | 3642|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  20.5k|                        .transform_error(make_eof_scan_error));
 5866|  20.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  20.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  20.5k|    {
 4153|  20.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  20.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  20.5k|        float_reader<CharT> rd{};
 4156|  20.5k|        return read_impl<Range>(
 4157|  20.5k|            range, rd,
 4158|  20.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.5k|                return r.read_source(SCN_FWD(args)...);
 4160|  20.5k|            },
 4161|  20.5k|            value);
 4162|  20.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  20.5k|    {
  754|  20.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  20.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.5k|              cvref<T> obj = *get<T>(fn);
  745|  20.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.5k|              }
  748|  20.5k|              else {
  749|  20.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.5k|              }
  751|  20.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.5k|    {
  684|  20.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.5k|            return static_cast<T*>(s.m_cp);
  686|  20.5k|        }
  687|  20.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.5k|            return static_cast<T*>(s.m_p);
  689|  20.5k|        }
  690|  20.5k|        else {
  691|  20.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.5k|        }
  693|  20.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  20.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  20.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.5k|        {
  662|  20.5k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   199k|    {
 2879|   199k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   427k|    {
 2883|   427k|        return m_current;
 2884|   427k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   227k|    {
 2888|   227k|        return m_range.end();
 2889|   227k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  27.2k|    {
 2903|  27.2k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  27.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  27.2k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  27.2k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 27.2k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  27.2k|        }
 2909|  27.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  27.2k|    static_cast<    \
  |  |  929|  27.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  27.2k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   199k|    {
 2893|   199k|        return ranges::subrange{begin(), end()};
 2894|   199k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|   199k|    {
 6038|   199k|        const bool need_skipped_width =
 6039|   199k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 199k]
  |  Branch (6039:33): [True: 0, False: 199k]
  ------------------
 6040|   199k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|   199k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 199k]
  ------------------
 6044|   199k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 199k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|   199k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 199k, False: 0]
  |  Branch (6048:56): [True: 199k, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|   199k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 199k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   398k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.48k|    }                                                  \
  |  |  |  | 3642|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   398k|                            make_eof_scan_error));
 6059|       |
 6060|   398k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 198k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|   198k|            return result_type{it, 0};
 6068|   398k|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|   199k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  27.0k|    {
 6080|  27.0k|        const bool need_skipped_width =
 6081|  27.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 27.0k]
  |  Branch (6081:33): [True: 0, False: 27.0k]
  ------------------
 6082|  27.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  27.0k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 27.0k]
  ------------------
 6085|  27.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 27.0k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  27.0k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 27.0k, False: 0]
  ------------------
 6090|  27.0k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 27.0k]
  ------------------
 6091|  27.0k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  27.0k|        return result_type{rng.begin(), 0};
 6115|  27.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6178|  66.5k|    {
 6179|  66.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  66.5k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  66.5k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  66.5k|            auto rd = make_reader<T, char_type>();
 6184|  66.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.5k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  66.5k|            return impl(rd, range, value);
 6189|  66.5k|        }
 6190|  66.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  66.5k|            auto rd = make_reader<T, char_type>();
 6192|  66.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  66.5k|                return unexpected(e);
 6194|  66.5k|            }
 6195|       |
 6196|  66.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  66.5k|                specs.width != 0) {
 6198|  66.5k|                return impl(rd, range, value);
 6199|  66.5k|            }
 6200|       |
 6201|  66.5k|            auto crange = get_as_contiguous(range);
 6202|  66.5k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  66.5k|            return ranges::next(range.begin(),
 6204|  66.5k|                                ranges::distance(crange.begin(), it));
 6205|  66.5k|        }
 6206|  66.5k|        else {
 6207|  66.5k|            SCN_EXPECT(false);
 6208|  66.5k|            SCN_UNREACHABLE;
 6209|  66.5k|        }
 6210|  66.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  66.5k|    {
 6121|  66.5k|        const bool need_skipped_width =
 6122|  66.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 66.5k]
  |  Branch (6122:33): [True: 0, False: 66.5k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  66.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  66.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  66.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  66.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 478, False: 66.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    478|    }                                                  \
  |  |  |  | 3642|  66.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  66.0k|        auto [it, prefix_width] = prefix_result;
 6127|  66.0k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  66.0k|        std::ptrdiff_t value_width = 0;
 6131|  66.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 66.0k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  66.0k|        else {
 6147|  66.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  66.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  66.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.0k, False: 9.01k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.0k|    }                                                  \
  |  | 3642|  66.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  9.01k|                                             specs, value, loc));
 6149|       |
 6150|  9.01k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 9.01k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  9.01k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  9.01k|        std::ptrdiff_t postfix_width = 0;
 6159|  9.01k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 8.93k, False: 86]
  ------------------
 6160|  8.93k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  8.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  8.93k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  8.93k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  8.93k|                                 value_width));
 6164|  8.93k|            std::tie(it, postfix_width) = postfix_result;
 6165|  8.93k|        }
 6166|       |
 6167|  9.01k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  9.01k|                                                 value_width, postfix_width);
 6169|  9.01k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 9.01k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  9.01k|        return it;
 6174|  9.01k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6178|  66.6k|    {
 6179|  66.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  66.6k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  66.6k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  66.6k|            auto rd = make_reader<T, char_type>();
 6184|  66.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.6k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  66.6k|            return impl(rd, range, value);
 6189|  66.6k|        }
 6190|  66.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  66.6k|            auto rd = make_reader<T, char_type>();
 6192|  66.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  66.6k|                return unexpected(e);
 6194|  66.6k|            }
 6195|       |
 6196|  66.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  66.6k|                specs.width != 0) {
 6198|  66.6k|                return impl(rd, range, value);
 6199|  66.6k|            }
 6200|       |
 6201|  66.6k|            auto crange = get_as_contiguous(range);
 6202|  66.6k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  66.6k|            return ranges::next(range.begin(),
 6204|  66.6k|                                ranges::distance(crange.begin(), it));
 6205|  66.6k|        }
 6206|  66.6k|        else {
 6207|  66.6k|            SCN_EXPECT(false);
 6208|  66.6k|            SCN_UNREACHABLE;
 6209|  66.6k|        }
 6210|  66.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  66.6k|    {
 6121|  66.6k|        const bool need_skipped_width =
 6122|  66.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 66.6k]
  |  Branch (6122:33): [True: 0, False: 66.6k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  66.6k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  66.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  66.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  66.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 500, False: 66.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    500|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    500|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    500|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    500|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    500|    }                                                  \
  |  |  |  | 3642|  66.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  66.1k|        auto [it, prefix_width] = prefix_result;
 6127|  66.1k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  66.1k|        std::ptrdiff_t value_width = 0;
 6131|  66.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 66.1k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  66.1k|        else {
 6147|  66.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  66.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  66.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.0k, False: 9.08k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.0k|    }                                                  \
  |  | 3642|  66.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  9.08k|                                             specs, value, loc));
 6149|       |
 6150|  9.08k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 9.08k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  9.08k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  9.08k|        std::ptrdiff_t postfix_width = 0;
 6159|  9.08k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 8.99k, False: 92]
  ------------------
 6160|  8.99k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  8.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 8.99k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  8.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  8.99k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  8.99k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  8.99k|                                 value_width));
 6164|  8.99k|            std::tie(it, postfix_width) = postfix_result;
 6165|  8.99k|        }
 6166|       |
 6167|  9.08k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  9.08k|                                                 value_width, postfix_width);
 6169|  9.08k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 9.08k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  9.08k|        return it;
 6174|  9.08k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6178|  66.7k|    {
 6179|  66.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  66.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  66.7k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  66.7k|            auto rd = make_reader<T, char_type>();
 6184|  66.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.7k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  66.7k|            return impl(rd, range, value);
 6189|  66.7k|        }
 6190|  66.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  66.7k|            auto rd = make_reader<T, char_type>();
 6192|  66.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  66.7k|                return unexpected(e);
 6194|  66.7k|            }
 6195|       |
 6196|  66.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  66.7k|                specs.width != 0) {
 6198|  66.7k|                return impl(rd, range, value);
 6199|  66.7k|            }
 6200|       |
 6201|  66.7k|            auto crange = get_as_contiguous(range);
 6202|  66.7k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  66.7k|            return ranges::next(range.begin(),
 6204|  66.7k|                                ranges::distance(crange.begin(), it));
 6205|  66.7k|        }
 6206|  66.7k|        else {
 6207|  66.7k|            SCN_EXPECT(false);
 6208|  66.7k|            SCN_UNREACHABLE;
 6209|  66.7k|        }
 6210|  66.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  66.7k|    {
 6121|  66.7k|        const bool need_skipped_width =
 6122|  66.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 66.7k]
  |  Branch (6122:33): [True: 0, False: 66.7k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  66.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  66.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  66.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  66.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 506, False: 66.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    506|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    506|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    506|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    506|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    506|    }                                                  \
  |  |  |  | 3642|  66.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  66.2k|        auto [it, prefix_width] = prefix_result;
 6127|  66.2k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  66.2k|        std::ptrdiff_t value_width = 0;
 6131|  66.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 66.2k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  66.2k|        else {
 6147|  66.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  66.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  66.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  66.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.0k, False: 9.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.0k|    }                                                  \
  |  | 3642|  66.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  66.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  9.17k|                                             specs, value, loc));
 6149|       |
 6150|  9.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 9.17k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  9.17k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  9.17k|        std::ptrdiff_t postfix_width = 0;
 6159|  9.17k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 9.08k, False: 92]
  ------------------
 6160|  9.08k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  9.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  9.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  9.08k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  9.08k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  9.08k|                                 value_width));
 6164|  9.08k|            std::tie(it, postfix_width) = postfix_result;
 6165|  9.08k|        }
 6166|       |
 6167|  9.17k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  9.17k|                                                 value_width, postfix_width);
 6169|  9.17k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 9.17k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  9.17k|        return it;
 6174|  9.17k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|  61.8k|{
 5796|  61.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 61.7k]
  |  |  ------------------
  ------------------
 5797|     96|        return unexpected(e);
 5798|     96|    }
 5799|       |
 5800|  61.7k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 61.7k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  61.7k|    return skip_classic_whitespace(range);
 5805|  61.7k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  20.5k|    {
 5872|  20.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  20.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  20.5k|            auto rd = make_reader<T, char_type>();
 5877|  20.5k|            return impl(rd, range, value);
 5878|  20.5k|        }
 5879|  20.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  20.5k|            auto rd = make_reader<T, char_type>();
 5881|  20.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 20.5k, False: 0]
  ------------------
 5882|  20.5k|                return impl(rd, range, value);
 5883|  20.5k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  20.5k|        else {
 5890|  20.5k|            SCN_EXPECT(false);
 5891|  20.5k|            SCN_UNREACHABLE;
 5892|  20.5k|        }
 5893|  20.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  20.5k|    {
 5864|  20.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  20.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  20.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  20.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 153, False: 20.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    153|    }                                                  \
  |  |  |  | 3642|  20.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  20.4k|                        .transform_error(make_eof_scan_error));
 5866|  20.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  20.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  20.4k|    {
 4153|  20.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  20.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  20.4k|        float_reader<CharT> rd{};
 4156|  20.4k|        return read_impl<Range>(
 4157|  20.4k|            range, rd,
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
 4160|  20.4k|            },
 4161|  20.4k|            value);
 4162|  20.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  20.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.4k|        {
  662|  20.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  20.6k|    {
 5872|  20.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  20.6k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  20.6k|            auto rd = make_reader<T, char_type>();
 5877|  20.6k|            return impl(rd, range, value);
 5878|  20.6k|        }
 5879|  20.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  20.6k|            auto rd = make_reader<T, char_type>();
 5881|  20.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 20.6k, False: 0]
  ------------------
 5882|  20.6k|                return impl(rd, range, value);
 5883|  20.6k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  20.6k|        else {
 5890|  20.6k|            SCN_EXPECT(false);
 5891|  20.6k|            SCN_UNREACHABLE;
 5892|  20.6k|        }
 5893|  20.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  20.6k|    {
 5864|  20.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 165, False: 20.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    165|    }                                                  \
  |  |  |  | 3642|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  20.4k|                        .transform_error(make_eof_scan_error));
 5866|  20.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  20.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  20.4k|    {
 4153|  20.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  20.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  20.4k|        float_reader<CharT> rd{};
 4156|  20.4k|        return read_impl<Range>(
 4157|  20.4k|            range, rd,
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
 4160|  20.4k|            },
 4161|  20.4k|            value);
 4162|  20.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  20.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.4k|        {
  662|  20.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  20.6k|    {
 5872|  20.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  20.6k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  20.6k|            auto rd = make_reader<T, char_type>();
 5877|  20.6k|            return impl(rd, range, value);
 5878|  20.6k|        }
 5879|  20.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  20.6k|            auto rd = make_reader<T, char_type>();
 5881|  20.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 20.6k, False: 0]
  ------------------
 5882|  20.6k|                return impl(rd, range, value);
 5883|  20.6k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  20.6k|        else {
 5890|  20.6k|            SCN_EXPECT(false);
 5891|  20.6k|            SCN_UNREACHABLE;
 5892|  20.6k|        }
 5893|  20.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  20.6k|    {
 5864|  20.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  20.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  20.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  20.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 20.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    168|    }                                                  \
  |  |  |  | 3642|  20.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  20.4k|                        .transform_error(make_eof_scan_error));
 5866|  20.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  20.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  20.4k|    {
 4153|  20.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  20.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  20.4k|        float_reader<CharT> rd{};
 4156|  20.4k|        return read_impl<Range>(
 4157|  20.4k|            range, rd,
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
 4160|  20.4k|            },
 4161|  20.4k|            value);
 4162|  20.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  20.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.4k|        {
  662|  20.4k|        }

LLVMFuzzerTestOneInput:
   54|  2.87k|{
   55|  2.87k|    scn::fuzz::run(data, size);
   56|  2.87k|    return 0;
   57|  2.87k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.87k|{
   33|  2.87k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.87k]
  |  Branch (33:35): [True: 0, False: 2.87k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.87k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.87k|    const auto& f =
   40|  2.87k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.87k|    do_basic_run(sv, f);
   42|       |
   43|  2.87k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.87k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.87k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.87k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.87k, False: 0]
  ------------------
   47|  2.87k|        do_basic_run(wsv_transcode, wf);
   48|  2.87k|    }
   49|  2.87k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.87k|{
   25|  2.87k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.87k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.87k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.87k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.87k|{
   25|  2.87k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.87k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.87k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.87k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  5.75k|{
   25|  5.75k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.75k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.75k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.75k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  5.75k|{
   25|  5.75k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.75k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.75k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.75k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.87k|{
   52|  2.87k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.87k|    string_buffer.resize(size);
   56|  2.87k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.87k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.87k|    const auto wsv_reinterpret_size =
   61|  2.87k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 67, False: 2.81k]
  ------------------
   62|  2.87k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.87k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.87k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.87k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.87k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.87k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.87k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.87k|{
  122|  2.87k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.87k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.87k|    buf.resize(sizeof...(Args));
  125|  2.87k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.87k|    return buf;
  127|  2.87k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.87k|{
  108|  2.87k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.87k|        return format_string_view_buffer;
  110|  2.87k|    }
  111|  2.87k|    else {
  112|  2.87k|        return wformat_string_view_buffer;
  113|  2.87k|    }
  114|  2.87k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  2.87k|{
  182|  2.87k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  2.87k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  2.87k|                                   format_strings);
  185|  2.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.87k|{
  133|       |    // Regular scan
  134|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.2k, False: 2.87k]
  ------------------
  135|  17.2k|        auto it = scn::ranges::begin(source);
  136|   327k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   327k|            auto result = scn::scan<T>(
  138|   327k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   327k|                scn::runtime_format(f));
  140|   327k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.2k, False: 310k]
  ------------------
  141|  17.2k|                break;
  142|  17.2k|            }
  143|   310k|            it = result->begin();
  144|   310k|        }
  145|  17.2k|    }
  146|       |
  147|       |    // scan localized
  148|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.2k, False: 2.87k]
  ------------------
  149|  17.2k|        auto it = scn::ranges::begin(source);
  150|   327k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   327k|            auto result = scn::scan<T>(
  152|   327k|                global_locale,
  153|   327k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   327k|                scn::runtime_format(f));
  155|   327k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.2k, False: 310k]
  ------------------
  156|  17.2k|                break;
  157|  17.2k|            }
  158|   310k|            it = result->begin();
  159|   310k|        }
  160|  17.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.87k|    {
  164|  2.87k|        auto it = scn::ranges::begin(source);
  165|  71.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.8k|            auto result = scn::scan_value<T>(
  167|  71.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  71.8k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.87k, False: 68.9k]
  ------------------
  169|  2.87k|                break;
  170|  2.87k|            }
  171|  68.9k|            it = result->begin();
  172|  68.9k|        }
  173|  2.87k|    }
  174|  2.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.87k|{
  133|       |    // Regular scan
  134|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.2k, False: 2.87k]
  ------------------
  135|  17.2k|        auto it = scn::ranges::begin(source);
  136|   354k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   354k|            auto result = scn::scan<T>(
  138|   354k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   354k|                scn::runtime_format(f));
  140|   354k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.2k, False: 336k]
  ------------------
  141|  17.2k|                break;
  142|  17.2k|            }
  143|   336k|            it = result->begin();
  144|   336k|        }
  145|  17.2k|    }
  146|       |
  147|       |    // scan localized
  148|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.2k, False: 2.87k]
  ------------------
  149|  17.2k|        auto it = scn::ranges::begin(source);
  150|   354k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   354k|            auto result = scn::scan<T>(
  152|   354k|                global_locale,
  153|   354k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   354k|                scn::runtime_format(f));
  155|   354k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.2k, False: 336k]
  ------------------
  156|  17.2k|                break;
  157|  17.2k|            }
  158|   336k|            it = result->begin();
  159|   336k|        }
  160|  17.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.87k|    {
  164|  2.87k|        auto it = scn::ranges::begin(source);
  165|  79.6k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  79.6k|            auto result = scn::scan_value<T>(
  167|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  79.6k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.87k, False: 76.7k]
  ------------------
  169|  2.87k|                break;
  170|  2.87k|            }
  171|  76.7k|            it = result->begin();
  172|  76.7k|        }
  173|  2.87k|    }
  174|  2.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.87k|{
  133|       |    // Regular scan
  134|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.2k, False: 2.87k]
  ------------------
  135|  17.2k|        auto it = scn::ranges::begin(source);
  136|   358k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   358k|            auto result = scn::scan<T>(
  138|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   358k|                scn::runtime_format(f));
  140|   358k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.2k, False: 341k]
  ------------------
  141|  17.2k|                break;
  142|  17.2k|            }
  143|   341k|            it = result->begin();
  144|   341k|        }
  145|  17.2k|    }
  146|       |
  147|       |    // scan localized
  148|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.2k, False: 2.87k]
  ------------------
  149|  17.2k|        auto it = scn::ranges::begin(source);
  150|   358k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   358k|            auto result = scn::scan<T>(
  152|   358k|                global_locale,
  153|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   358k|                scn::runtime_format(f));
  155|   358k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.2k, False: 341k]
  ------------------
  156|  17.2k|                break;
  157|  17.2k|            }
  158|   341k|            it = result->begin();
  159|   341k|        }
  160|  17.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.87k|    {
  164|  2.87k|        auto it = scn::ranges::begin(source);
  165|  81.1k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  81.1k|            auto result = scn::scan_value<T>(
  167|  81.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  81.1k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.87k, False: 78.2k]
  ------------------
  169|  2.87k|                break;
  170|  2.87k|            }
  171|  78.2k|            it = result->begin();
  172|  78.2k|        }
  173|  2.87k|    }
  174|  2.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.87k|{
  133|       |    // Regular scan
  134|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.2k, False: 2.87k]
  ------------------
  135|  17.2k|        auto it = scn::ranges::begin(source);
  136|   327k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   327k|            auto result = scn::scan<T>(
  138|   327k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   327k|                scn::runtime_format(f));
  140|   327k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.2k, False: 310k]
  ------------------
  141|  17.2k|                break;
  142|  17.2k|            }
  143|   310k|            it = result->begin();
  144|   310k|        }
  145|  17.2k|    }
  146|       |
  147|       |    // scan localized
  148|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.2k, False: 2.87k]
  ------------------
  149|  17.2k|        auto it = scn::ranges::begin(source);
  150|   327k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   327k|            auto result = scn::scan<T>(
  152|   327k|                global_locale,
  153|   327k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   327k|                scn::runtime_format(f));
  155|   327k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.2k, False: 310k]
  ------------------
  156|  17.2k|                break;
  157|  17.2k|            }
  158|   310k|            it = result->begin();
  159|   310k|        }
  160|  17.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.87k|    {
  164|  2.87k|        auto it = scn::ranges::begin(source);
  165|  66.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  66.8k|            auto result = scn::scan_value<T>(
  167|  66.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  66.8k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.87k, False: 64.0k]
  ------------------
  169|  2.87k|                break;
  170|  2.87k|            }
  171|  64.0k|            it = result->begin();
  172|  64.0k|        }
  173|  2.87k|    }
  174|  2.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.87k|{
  133|       |    // Regular scan
  134|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.2k, False: 2.87k]
  ------------------
  135|  17.2k|        auto it = scn::ranges::begin(source);
  136|   354k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   354k|            auto result = scn::scan<T>(
  138|   354k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   354k|                scn::runtime_format(f));
  140|   354k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.2k, False: 336k]
  ------------------
  141|  17.2k|                break;
  142|  17.2k|            }
  143|   336k|            it = result->begin();
  144|   336k|        }
  145|  17.2k|    }
  146|       |
  147|       |    // scan localized
  148|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.2k, False: 2.87k]
  ------------------
  149|  17.2k|        auto it = scn::ranges::begin(source);
  150|   354k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   354k|            auto result = scn::scan<T>(
  152|   354k|                global_locale,
  153|   354k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   354k|                scn::runtime_format(f));
  155|   354k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.2k, False: 336k]
  ------------------
  156|  17.2k|                break;
  157|  17.2k|            }
  158|   336k|            it = result->begin();
  159|   336k|        }
  160|  17.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.87k|    {
  164|  2.87k|        auto it = scn::ranges::begin(source);
  165|  74.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  74.3k|            auto result = scn::scan_value<T>(
  167|  74.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  74.3k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.87k, False: 71.4k]
  ------------------
  169|  2.87k|                break;
  170|  2.87k|            }
  171|  71.4k|            it = result->begin();
  172|  71.4k|        }
  173|  2.87k|    }
  174|  2.87k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.87k|{
  133|       |    // Regular scan
  134|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.2k, False: 2.87k]
  ------------------
  135|  17.2k|        auto it = scn::ranges::begin(source);
  136|   358k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   358k|            auto result = scn::scan<T>(
  138|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   358k|                scn::runtime_format(f));
  140|   358k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.2k, False: 341k]
  ------------------
  141|  17.2k|                break;
  142|  17.2k|            }
  143|   341k|            it = result->begin();
  144|   341k|        }
  145|  17.2k|    }
  146|       |
  147|       |    // scan localized
  148|  17.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.2k, False: 2.87k]
  ------------------
  149|  17.2k|        auto it = scn::ranges::begin(source);
  150|   358k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   358k|            auto result = scn::scan<T>(
  152|   358k|                global_locale,
  153|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   358k|                scn::runtime_format(f));
  155|   358k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.2k, False: 341k]
  ------------------
  156|  17.2k|                break;
  157|  17.2k|            }
  158|   341k|            it = result->begin();
  159|   341k|        }
  160|  17.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.87k|    {
  164|  2.87k|        auto it = scn::ranges::begin(source);
  165|  75.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  75.3k|            auto result = scn::scan_value<T>(
  167|  75.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  75.3k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.87k, False: 72.5k]
  ------------------
  169|  2.87k|                break;
  170|  2.87k|            }
  171|  72.5k|            it = result->begin();
  172|  72.5k|        }
  173|  2.87k|    }
  174|  2.87k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.87k|{
   90|  2.87k|    using char_type = ranges::range_value_t<Source>;
   91|  2.87k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.87k|    deque.clear();
   93|  2.87k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.87k|              std::back_inserter(deque));
   95|  2.87k|    return deque;
   96|  2.87k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.87k|{
   79|  2.87k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.87k|        return noncontiguous_buffer;
   81|  2.87k|    }
   82|  2.87k|    else {
   83|  2.87k|        return wnoncontiguous_buffer;
   84|  2.87k|    }
   85|  2.87k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.87k|{
  122|  2.87k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.87k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.87k|    buf.resize(sizeof...(Args));
  125|  2.87k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.87k|    return buf;
  127|  2.87k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.87k|{
  108|  2.87k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.87k|        return format_string_view_buffer;
  110|  2.87k|    }
  111|  2.87k|    else {
  112|  2.87k|        return wformat_string_view_buffer;
  113|  2.87k|    }
  114|  2.87k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  5.75k|{
  182|  5.75k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  5.75k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  5.75k|                                   format_strings);
  185|  5.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.75k|{
  133|       |    // Regular scan
  134|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 34.5k, False: 5.75k]
  ------------------
  135|  34.5k|        auto it = scn::ranges::begin(source);
  136|  40.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.1k|            auto result = scn::scan<T>(
  138|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  40.1k|                scn::runtime_format(f));
  140|  40.1k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 34.5k, False: 5.61k]
  ------------------
  141|  34.5k|                break;
  142|  34.5k|            }
  143|  5.61k|            it = result->begin();
  144|  5.61k|        }
  145|  34.5k|    }
  146|       |
  147|       |    // scan localized
  148|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 34.5k, False: 5.75k]
  ------------------
  149|  34.5k|        auto it = scn::ranges::begin(source);
  150|  40.1k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  40.1k|            auto result = scn::scan<T>(
  152|  40.1k|                global_locale,
  153|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  40.1k|                scn::runtime_format(f));
  155|  40.1k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 34.5k, False: 5.61k]
  ------------------
  156|  34.5k|                break;
  157|  34.5k|            }
  158|  5.61k|            it = result->begin();
  159|  5.61k|        }
  160|  34.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.75k|    {
  164|  5.75k|        auto it = scn::ranges::begin(source);
  165|  6.86k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.86k|            auto result = scn::scan_value<T>(
  167|  6.86k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.86k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.75k, False: 1.10k]
  ------------------
  169|  5.75k|                break;
  170|  5.75k|            }
  171|  1.10k|            it = result->begin();
  172|  1.10k|        }
  173|  5.75k|    }
  174|  5.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.75k|{
  133|       |    // Regular scan
  134|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 34.5k, False: 5.75k]
  ------------------
  135|  34.5k|        auto it = scn::ranges::begin(source);
  136|  40.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.1k|            auto result = scn::scan<T>(
  138|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  40.1k|                scn::runtime_format(f));
  140|  40.1k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 34.5k, False: 5.66k]
  ------------------
  141|  34.5k|                break;
  142|  34.5k|            }
  143|  5.66k|            it = result->begin();
  144|  5.66k|        }
  145|  34.5k|    }
  146|       |
  147|       |    // scan localized
  148|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 34.5k, False: 5.75k]
  ------------------
  149|  34.5k|        auto it = scn::ranges::begin(source);
  150|  40.1k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  40.1k|            auto result = scn::scan<T>(
  152|  40.1k|                global_locale,
  153|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  40.1k|                scn::runtime_format(f));
  155|  40.1k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 34.5k, False: 5.66k]
  ------------------
  156|  34.5k|                break;
  157|  34.5k|            }
  158|  5.66k|            it = result->begin();
  159|  5.66k|        }
  160|  34.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.75k|    {
  164|  5.75k|        auto it = scn::ranges::begin(source);
  165|  6.87k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.87k|            auto result = scn::scan_value<T>(
  167|  6.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.87k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.75k, False: 1.11k]
  ------------------
  169|  5.75k|                break;
  170|  5.75k|            }
  171|  1.11k|            it = result->begin();
  172|  1.11k|        }
  173|  5.75k|    }
  174|  5.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.75k|{
  133|       |    // Regular scan
  134|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 34.5k, False: 5.75k]
  ------------------
  135|  34.5k|        auto it = scn::ranges::begin(source);
  136|  40.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.2k|            auto result = scn::scan<T>(
  138|  40.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  40.2k|                scn::runtime_format(f));
  140|  40.2k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 34.5k, False: 5.72k]
  ------------------
  141|  34.5k|                break;
  142|  34.5k|            }
  143|  5.72k|            it = result->begin();
  144|  5.72k|        }
  145|  34.5k|    }
  146|       |
  147|       |    // scan localized
  148|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 34.5k, False: 5.75k]
  ------------------
  149|  34.5k|        auto it = scn::ranges::begin(source);
  150|  40.2k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  40.2k|            auto result = scn::scan<T>(
  152|  40.2k|                global_locale,
  153|  40.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  40.2k|                scn::runtime_format(f));
  155|  40.2k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 34.5k, False: 5.72k]
  ------------------
  156|  34.5k|                break;
  157|  34.5k|            }
  158|  5.72k|            it = result->begin();
  159|  5.72k|        }
  160|  34.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.75k|    {
  164|  5.75k|        auto it = scn::ranges::begin(source);
  165|  6.89k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.89k|            auto result = scn::scan_value<T>(
  167|  6.89k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.89k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.75k, False: 1.13k]
  ------------------
  169|  5.75k|                break;
  170|  5.75k|            }
  171|  1.13k|            it = result->begin();
  172|  1.13k|        }
  173|  5.75k|    }
  174|  5.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.75k|{
  133|       |    // Regular scan
  134|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 34.5k, False: 5.75k]
  ------------------
  135|  34.5k|        auto it = scn::ranges::begin(source);
  136|  40.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.1k|            auto result = scn::scan<T>(
  138|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  40.1k|                scn::runtime_format(f));
  140|  40.1k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 34.5k, False: 5.59k]
  ------------------
  141|  34.5k|                break;
  142|  34.5k|            }
  143|  5.59k|            it = result->begin();
  144|  5.59k|        }
  145|  34.5k|    }
  146|       |
  147|       |    // scan localized
  148|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 34.5k, False: 5.75k]
  ------------------
  149|  34.5k|        auto it = scn::ranges::begin(source);
  150|  40.1k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  40.1k|            auto result = scn::scan<T>(
  152|  40.1k|                global_locale,
  153|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  40.1k|                scn::runtime_format(f));
  155|  40.1k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 34.5k, False: 5.59k]
  ------------------
  156|  34.5k|                break;
  157|  34.5k|            }
  158|  5.59k|            it = result->begin();
  159|  5.59k|        }
  160|  34.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.75k|    {
  164|  5.75k|        auto it = scn::ranges::begin(source);
  165|  6.85k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.85k|            auto result = scn::scan_value<T>(
  167|  6.85k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.85k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.75k, False: 1.09k]
  ------------------
  169|  5.75k|                break;
  170|  5.75k|            }
  171|  1.09k|            it = result->begin();
  172|  1.09k|        }
  173|  5.75k|    }
  174|  5.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.75k|{
  133|       |    // Regular scan
  134|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 34.5k, False: 5.75k]
  ------------------
  135|  34.5k|        auto it = scn::ranges::begin(source);
  136|  40.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.1k|            auto result = scn::scan<T>(
  138|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  40.1k|                scn::runtime_format(f));
  140|  40.1k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 34.5k, False: 5.64k]
  ------------------
  141|  34.5k|                break;
  142|  34.5k|            }
  143|  5.64k|            it = result->begin();
  144|  5.64k|        }
  145|  34.5k|    }
  146|       |
  147|       |    // scan localized
  148|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 34.5k, False: 5.75k]
  ------------------
  149|  34.5k|        auto it = scn::ranges::begin(source);
  150|  40.1k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  40.1k|            auto result = scn::scan<T>(
  152|  40.1k|                global_locale,
  153|  40.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  40.1k|                scn::runtime_format(f));
  155|  40.1k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 34.5k, False: 5.64k]
  ------------------
  156|  34.5k|                break;
  157|  34.5k|            }
  158|  5.64k|            it = result->begin();
  159|  5.64k|        }
  160|  34.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.75k|    {
  164|  5.75k|        auto it = scn::ranges::begin(source);
  165|  6.86k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.86k|            auto result = scn::scan_value<T>(
  167|  6.86k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.86k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.75k, False: 1.11k]
  ------------------
  169|  5.75k|                break;
  170|  5.75k|            }
  171|  1.11k|            it = result->begin();
  172|  1.11k|        }
  173|  5.75k|    }
  174|  5.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.75k|{
  133|       |    // Regular scan
  134|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 34.5k, False: 5.75k]
  ------------------
  135|  34.5k|        auto it = scn::ranges::begin(source);
  136|  40.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.2k|            auto result = scn::scan<T>(
  138|  40.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  40.2k|                scn::runtime_format(f));
  140|  40.2k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 34.5k, False: 5.70k]
  ------------------
  141|  34.5k|                break;
  142|  34.5k|            }
  143|  5.70k|            it = result->begin();
  144|  5.70k|        }
  145|  34.5k|    }
  146|       |
  147|       |    // scan localized
  148|  34.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 34.5k, False: 5.75k]
  ------------------
  149|  34.5k|        auto it = scn::ranges::begin(source);
  150|  40.2k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  40.2k|            auto result = scn::scan<T>(
  152|  40.2k|                global_locale,
  153|  40.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  40.2k|                scn::runtime_format(f));
  155|  40.2k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 34.5k, False: 5.70k]
  ------------------
  156|  34.5k|                break;
  157|  34.5k|            }
  158|  5.70k|            it = result->begin();
  159|  5.70k|        }
  160|  34.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.75k|    {
  164|  5.75k|        auto it = scn::ranges::begin(source);
  165|  6.88k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.88k|            auto result = scn::scan_value<T>(
  167|  6.88k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.88k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.75k, False: 1.12k]
  ------------------
  169|  5.75k|                break;
  170|  5.75k|            }
  171|  1.12k|            it = result->begin();
  172|  1.12k|        }
  173|  5.75k|    }
  174|  5.75k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  5.75k|{
   90|  5.75k|    using char_type = ranges::range_value_t<Source>;
   91|  5.75k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  5.75k|    deque.clear();
   93|  5.75k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  5.75k|              std::back_inserter(deque));
   95|  5.75k|    return deque;
   96|  5.75k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  5.75k|{
   79|  5.75k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  5.75k|        return noncontiguous_buffer;
   81|  5.75k|    }
   82|  5.75k|    else {
   83|  5.75k|        return wnoncontiguous_buffer;
   84|  5.75k|    }
   85|  5.75k|}

