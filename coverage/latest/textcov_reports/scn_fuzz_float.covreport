_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.59M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.59M|  chars_format const fmt = options.format;
  277|  2.59M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.59M|  parsed_number_string_t<UC> answer;
  280|  2.59M|  answer.valid = false;
  281|  2.59M|  answer.too_many_digits = false;
  282|  2.59M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.59M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.59M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.59M|  UC const * const start_digits = p;
  303|       |
  304|  2.59M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  15.1M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 13.8M, False: 1.27M]
  |  Branch (306:25): [True: 12.5M, False: 1.31M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  12.5M|    i = 10 * i +
  310|  12.5M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  12.5M|    ++p;
  312|  12.5M|  }
  313|  2.59M|  UC const * const end_of_integer_part = p;
  314|  2.59M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.59M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.59M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.59M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.59M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.59M|  int64_t exponent = 0;
  324|  2.59M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.31M, False: 1.27M]
  |  Branch (324:49): [True: 458k, False: 858k]
  ------------------
  325|  2.59M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 458k, False: 2.13M]
  ------------------
  326|   458k|    ++p;
  327|   458k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   458k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.84M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.57M, False: 275k]
  |  Branch (332:27): [True: 1.38M, False: 182k]
  ------------------
  333|  1.38M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.38M|      ++p;
  335|  1.38M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.38M|    }
  337|   458k|    exponent = before - p;
  338|   458k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   458k|    digit_count -= exponent;
  340|   458k|  }
  341|  2.59M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.59M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.59M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.59M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.59M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.59M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.59M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 2.26M, False: 328k]
  ------------------
  352|  2.59M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 1.04M, False: 1.22M]
  ------------------
  353|  2.59M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 255k, False: 786k]
  |  Branch (353:29): [True: 95.0k, False: 691k]
  ------------------
  354|  2.59M|       ||
  355|  2.59M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  2.24M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 2.24M]
  ------------------
  356|  2.24M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  2.24M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   350k|    UC const * location_of_e = p;
  359|   350k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 255k, False: 95.0k]
  |  Branch (359:28): [True: 95.0k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   350k|      ++p;
  361|   350k|    }
  362|   350k|    bool neg_exp = false;
  363|   350k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 349k, False: 225]
  |  Branch (363:24): [True: 24.9k, False: 324k]
  ------------------
  364|  24.9k|      neg_exp = true;
  365|  24.9k|      ++p;
  366|   325k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 324k, False: 225]
  |  Branch (366:31): [True: 61.9k, False: 262k]
  ------------------
  367|  61.9k|      ++p;
  368|  61.9k|    }
  369|   350k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 265, False: 349k]
  |  Branch (369:24): [True: 1.08k, False: 348k]
  ------------------
  370|  1.35k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.35k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.35k|      p = location_of_e;
  376|   348k|    } else {
  377|  1.12M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 891k, False: 237k]
  |  Branch (377:29): [True: 780k, False: 111k]
  ------------------
  378|   780k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   780k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 731k, False: 48.8k]
  ------------------
  380|   731k|          exp_number = 10 * exp_number + digit;
  381|   731k|        }
  382|   780k|        ++p;
  383|   780k|      }
  384|   348k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 24.8k, False: 323k]
  ------------------
  385|   348k|      exponent += exp_number;
  386|   348k|    }
  387|  2.24M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  2.24M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.91M, False: 328k]
  |  Branch (389:44): [True: 0, False: 1.91M]
  ------------------
  390|  2.24M|  }
  391|  2.59M|  answer.lastmatch = p;
  392|  2.59M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.59M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 422k, False: 2.16M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   422k|    UC const * start = start_digits;
  405|  3.50M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.49M, False: 15.3k]
  |  Branch (405:32): [True: 3.01M, False: 473k]
  |  Branch (405:53): [True: 66.4k, False: 406k]
  ------------------
  406|  3.08M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 3.01M, False: 66.4k]
  ------------------
  407|  3.08M|      start++;
  408|  3.08M|    }
  409|       |
  410|   422k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 367k, False: 55.1k]
  ------------------
  411|   367k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   367k|      i = 0;
  416|   367k|      p = answer.integer.ptr;
  417|   367k|      UC const* int_end = p + answer.integer.len();
  418|   367k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  4.81M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 4.70M, False: 108k]
  |  Branch (419:54): [True: 4.44M, False: 258k]
  ------------------
  420|  4.44M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  4.44M|        ++p;
  422|  4.44M|      }
  423|   367k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 108k, False: 258k]
  ------------------
  424|   108k|        exponent = end_of_integer_part - p + exp_number;
  425|   108k|      }
  426|   258k|      else { // We have a value with a fractional component.
  427|   258k|        p = answer.fraction.ptr;
  428|   258k|        UC const* frac_end = p + answer.fraction.len();
  429|  4.66M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 4.40M, False: 258k]
  |  Branch (429:56): [True: 4.40M, False: 0]
  ------------------
  430|  4.40M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  4.40M|          ++p;
  432|  4.40M|        }
  433|   258k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   258k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   367k|    }
  437|   422k|  }
  438|  2.59M|  answer.exponent = exponent;
  439|  2.59M|  answer.mantissa = i;
  440|  2.59M|  return answer;
  441|  2.59M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  16.6M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  16.6M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 396k, False: 16.2M]
  |  Branch (36:27): [True: 1.21M, False: 15.0M]
  ------------------
   37|  16.6M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   458k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.82M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.52M, False: 301k]
  |  Branch (249:43): [True: 1.36M, False: 156k]
  ------------------
  250|  1.36M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.36M|    p += 8;
  252|  1.36M|  }
  253|   458k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.52M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.52M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.52M|     0x8080808080808080));
  172|  1.52M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  3.43M|uint64_t read8_to_u64(const UC *chars) {
   54|  3.43M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  3.43M|  uint64_t val;
   63|  3.43M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  3.43M|  return val;
   69|  3.43M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.90M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.90M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.90M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.90M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.90M|  val -= 0x3030303030303030;
  151|  1.90M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.90M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.90M|  return uint32_t(val);
  154|  1.90M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   539k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   539k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   539k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   539k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   539k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   147k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   147k|  chars_format const fmt = options.format;
  277|   147k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   147k|  parsed_number_string_t<UC> answer;
  280|   147k|  answer.valid = false;
  281|   147k|  answer.too_many_digits = false;
  282|   147k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   147k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 147k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   147k|  UC const * const start_digits = p;
  303|       |
  304|   147k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   304k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 201k, False: 103k]
  |  Branch (306:25): [True: 157k, False: 44.0k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   157k|    i = 10 * i +
  310|   157k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   157k|    ++p;
  312|   157k|  }
  313|   147k|  UC const * const end_of_integer_part = p;
  314|   147k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   147k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   147k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   147k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 147k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   147k|  int64_t exponent = 0;
  324|   147k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 44.0k, False: 103k]
  |  Branch (324:49): [True: 252, False: 43.7k]
  ------------------
  325|   147k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 252, False: 146k]
  ------------------
  326|    252|    ++p;
  327|    252|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    252|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|    252|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 60, False: 192]
  |  Branch (332:27): [True: 0, False: 60]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|    252|    exponent = before - p;
  338|    252|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    252|    digit_count -= exponent;
  340|    252|  }
  341|   147k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   147k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 147k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   147k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 147k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   147k|  int64_t exp_number = 0;            // explicit exponential part
  351|   147k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 114k, False: 32.5k]
  ------------------
  352|   147k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 43.8k, False: 70.8k]
  ------------------
  353|   147k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 92, False: 43.7k]
  |  Branch (353:29): [True: 5.26k, False: 38.4k]
  ------------------
  354|   147k|       ||
  355|   147k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   141k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 141k]
  ------------------
  356|   141k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   141k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  5.35k|    UC const * location_of_e = p;
  359|  5.35k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 92, False: 5.26k]
  |  Branch (359:28): [True: 5.26k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  5.35k|      ++p;
  361|  5.35k|    }
  362|  5.35k|    bool neg_exp = false;
  363|  5.35k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 5.33k, False: 20]
  |  Branch (363:24): [True: 820, False: 4.51k]
  ------------------
  364|    820|      neg_exp = true;
  365|    820|      ++p;
  366|  4.53k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 4.51k, False: 20]
  |  Branch (366:31): [True: 150, False: 4.36k]
  ------------------
  367|    150|      ++p;
  368|    150|    }
  369|  5.35k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 20, False: 5.33k]
  |  Branch (369:24): [True: 570, False: 4.76k]
  ------------------
  370|    590|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 590]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    590|      p = location_of_e;
  376|  4.76k|    } else {
  377|  15.3k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 11.9k, False: 3.40k]
  |  Branch (377:29): [True: 10.5k, False: 1.36k]
  ------------------
  378|  10.5k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  10.5k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 10.5k, False: 0]
  ------------------
  380|  10.5k|          exp_number = 10 * exp_number + digit;
  381|  10.5k|        }
  382|  10.5k|        ++p;
  383|  10.5k|      }
  384|  4.76k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 800, False: 3.96k]
  ------------------
  385|  4.76k|      exponent += exp_number;
  386|  4.76k|    }
  387|   141k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   141k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 109k, False: 32.5k]
  |  Branch (389:44): [True: 0, False: 109k]
  ------------------
  390|   141k|  }
  391|   147k|  answer.lastmatch = p;
  392|   147k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   147k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 147k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|   147k|  answer.exponent = exponent;
  439|   147k|  answer.mantissa = i;
  440|   147k|  return answer;
  441|   147k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   218k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   218k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 45.1k, False: 173k]
  |  Branch (36:27): [True: 862, False: 172k]
  ------------------
   37|   218k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    252|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    252|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    252|    return;
  240|    252|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|   126k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   273k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   431k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   431k|    return small_mul(vec, y);
  565|   431k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   655k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   655k|  limb carry = 0;
  284|  2.91M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.25M, False: 655k]
  ------------------
  285|  2.25M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.25M|  }
  287|   655k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 406k, False: 249k]
  ------------------
  288|   406k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   406k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
  289|   406k|  }
  290|   655k|  return true;
  291|   655k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  5.36M|  constexpr size_t len() const noexcept {
   77|  5.36M|    return length;
   78|  5.36M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.25M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.25M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.25M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.25M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.25M|  carry = limb(z >> limb_bits);
  235|  2.25M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.25M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  6.08M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  6.08M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  6.08M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  6.08M|    return data[index];
   60|  6.08M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   565k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   565k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 565k, False: 0]
  ------------------
   93|   565k|      push_unchecked(value);
   94|   565k|      return true;
   95|   565k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   565k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   674k|  constexpr size_t capacity() const noexcept {
   83|   674k|    return size;
   84|   674k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   675k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   675k|    data[length] = value;
   88|   675k|    length++;
   89|   675k|  }
_ZN10fast_float6bigint3addEm:
  567|   431k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   431k|    return small_add(vec, y);
  569|   431k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   431k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   431k|  return small_add_from(vec, y, 0);
  277|   431k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   431k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   431k|  size_t index = start;
  259|   431k|  limb carry = y;
  260|   431k|  bool overflow;
  261|   646k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 341k, False: 305k]
  |  Branch (261:24): [True: 215k, False: 126k]
  ------------------
  262|   215k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   215k|    carry = limb(overflow);
  264|   215k|    index += 1;
  265|   215k|  }
  266|   431k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 126k, False: 305k]
  ------------------
  267|   126k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   126k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  268|   126k|  }
  269|   431k|  return true;
  270|   431k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   628k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   628k|  limb z;
  211|       |// gcc and clang
  212|   628k|#if defined(__has_builtin)
  213|   628k|  #if __has_builtin(__builtin_add_overflow)
  214|   628k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   628k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   628k|      return z;
  217|   628k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   628k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  15.8k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  15.8k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  15.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.8k]
  |  |  ------------------
  ------------------
  611|  15.8k|    return pow2(exp);
  612|  15.8k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|   126k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|   126k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|   126k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|   135k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 9.36k, False: 126k]
  ------------------
  582|  9.36k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  9.36k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.36k]
  |  |  ------------------
  ------------------
  583|  9.36k|      exp -= large_step;
  584|  9.36k|    }
  585|   126k|#ifdef FASTFLOAT_64BIT_LIMB
  586|   126k|    uint32_t small_step = 27;
  587|   126k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   198k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 72.6k, False: 126k]
  ------------------
  593|  72.6k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  72.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 72.6k]
  |  |  ------------------
  ------------------
  594|  72.6k|      exp -= small_step;
  595|  72.6k|    }
  596|   126k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 104k, False: 21.4k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|   104k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|   104k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 104k]
  |  |  ------------------
  ------------------
  601|   104k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|   104k|      );
  603|   104k|    }
  604|       |
  605|   126k|    return true;
  606|   126k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  9.36k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  9.36k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 9.36k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  9.36k|  } else {
  368|  9.36k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  9.36k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.36k]
  |  |  ------------------
  ------------------
  369|  9.36k|  }
  370|  9.36k|  return true;
  371|  9.36k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  9.36k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  9.36k|  limb_span xs = limb_span(x.data, x.len());
  337|  9.36k|  stackvec<size> z(xs);
  338|  9.36k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  9.36k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 9.36k, False: 0]
  ------------------
  341|  9.36k|    limb y0 = y[0];
  342|  9.36k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  9.36k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.36k]
  |  |  ------------------
  ------------------
  343|  46.8k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 37.4k, False: 9.36k]
  ------------------
  344|  37.4k|      limb yi = y[index];
  345|  37.4k|      stackvec<size> zi;
  346|  37.4k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 37.4k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  37.4k|        zi.set_len(0);
  349|  37.4k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  37.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 37.4k]
  |  |  ------------------
  ------------------
  350|  37.4k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  37.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 37.4k]
  |  |  ------------------
  ------------------
  351|  37.4k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  37.4k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  37.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 37.4k]
  |  |  ------------------
  ------------------
  353|  37.4k|      }
  354|  37.4k|    }
  355|  9.36k|  }
  356|       |
  357|  9.36k|  x.normalize();
  358|  9.36k|  return true;
  359|  9.36k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  9.36k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  9.36k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  9.36k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  9.36k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   146k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   146k|    length = uint16_t(len);
   75|   146k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  46.8k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  46.8k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 46.8k, False: 0]
  ------------------
  108|  46.8k|      extend_unchecked(s);
  109|  46.8k|      return true;
  110|  46.8k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  46.8k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  46.8k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  46.8k|    limb* ptr = data + length;
  102|  46.8k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  46.8k|    set_len(len() + s.len());
  104|  46.8k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  37.4k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  37.4k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 37.4k]
  |  Branch (300:26): [True: 37.0k, False: 396]
  ------------------
  301|  37.0k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  37.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
  302|  37.0k|  }
  303|       |
  304|  37.4k|  bool carry = false;
  305|   338k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 301k, False: 37.4k]
  ------------------
  306|   301k|    limb xi = x[index + start];
  307|   301k|    limb yi = y[index];
  308|   301k|    bool c1 = false;
  309|   301k|    bool c2 = false;
  310|   301k|    xi = scalar_add(xi, yi, c1);
  311|   301k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 112k, False: 189k]
  ------------------
  312|   112k|      xi = scalar_add(xi, 1, c2);
  313|   112k|    }
  314|   301k|    x[index + start] = xi;
  315|   301k|    carry = c1 | c2;
  316|   301k|  }
  317|       |
  318|       |  // handle overflow
  319|  37.4k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 37.4k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  37.4k|  return true;
  323|  37.4k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  37.0k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  37.0k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 37.0k]
  ------------------
  132|      0|      return false;
  133|  37.0k|    } else {
  134|  37.0k|      resize_unchecked(new_len, value);
  135|  37.0k|      return true;
  136|  37.0k|    }
  137|  37.0k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  37.0k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  37.0k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 37.0k, False: 0]
  ------------------
  120|  37.0k|      size_t count = new_len - len();
  121|  37.0k|      limb* first = data + len();
  122|  37.0k|      limb* last = first + count;
  123|  37.0k|      ::std::fill(first, last, value);
  124|  37.0k|      set_len(new_len);
  125|  37.0k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  37.0k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|   119k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|   119k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 119k, False: 0]
  |  Branch (152:25): [True: 0, False: 119k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|   119k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   165k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   165k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   165k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   165k|    size_t rindex = length - index - 1;
   69|   165k|    return data[rindex];
   70|   165k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|   125k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|   125k|    return shl(exp);
  574|   125k|  }
_ZN10fast_float6bigint3shlEm:
  530|   125k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|   125k|    size_t rem = n % limb_bits;
  532|   125k|    size_t div = n / limb_bits;
  533|   125k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 109k, False: 16.0k]
  ------------------
  534|   109k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|   109k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
  535|   109k|    }
  536|   125k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 25.2k, False: 100k]
  ------------------
  537|  25.2k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  25.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 25.2k]
  |  |  ------------------
  ------------------
  538|  25.2k|    }
  539|   125k|    return true;
  540|   125k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|   109k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|   109k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|   109k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|   109k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|   109k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|   109k|    size_t shl = n;
  493|   109k|    size_t shr = limb_bits - shl;
  494|   109k|    limb prev = 0;
  495|   376k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 267k, False: 109k]
  ------------------
  496|   267k|      limb xi = vec[index];
  497|   267k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   267k|      prev = xi;
  499|   267k|    }
  500|       |
  501|   109k|    limb carry = prev >> shr;
  502|   109k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 33.2k, False: 76.5k]
  ------------------
  503|  33.2k|      return vec.try_push(carry);
  504|  33.2k|    }
  505|  76.5k|    return true;
  506|   109k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  25.2k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  25.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  25.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  25.2k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 25.2k]
  ------------------
  512|      0|      return false;
  513|  25.2k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 25.2k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  25.2k|      limb* dst = vec.data + n;
  516|  25.2k|      const limb* src = vec.data;
  517|  25.2k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  25.2k|      limb* first = vec.data;
  520|  25.2k|      limb* last = first + n;
  521|  25.2k|      ::std::fill(first, last, 0);
  522|  25.2k|      vec.set_len(n + vec.len());
  523|  25.2k|      return true;
  524|  25.2k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  25.2k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  41.1k|  constexpr bool is_empty() const noexcept {
   80|  41.1k|    return length == 0;
   81|  41.1k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  15.8k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  15.8k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  15.8k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 15.8k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  15.8k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 2.33k, False: 13.5k]
  ------------------
  435|  2.33k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.5k|    } else {
  437|  13.5k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.5k|      truncated |= vec.nonzero(2);
  439|  13.5k|      return result;
  440|  13.5k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  15.8k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  2.33k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  2.33k|  truncated = false;
  167|  2.33k|  int shl = leading_zeroes(r0);
  168|  2.33k|  return r0 << shl;
  169|  2.33k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.5k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.5k|  int shl = leading_zeroes(r0);
  174|  13.5k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.4k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.4k|  } else {
  178|  13.4k|    int shr = 64 - shl;
  179|  13.4k|    truncated = (r1 << shl) != 0;
  180|  13.4k|    return (r0 << shl) | (r1 >> shr);
  181|  13.4k|  }
  182|  13.5k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.5k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.5k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 851, False: 12.7k]
  ------------------
  143|    851|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 797, False: 54]
  ------------------
  144|    797|        return true;
  145|    797|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.7k|    return false;
  149|  13.5k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  15.8k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  15.8k|    int lz = ctlz();
  560|  15.8k|    return int(limb_bits * vec.len()) - lz;
  561|  15.8k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  15.8k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  15.8k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 15.8k]
  ------------------
  545|      0|      return 0;
  546|  15.8k|    } else {
  547|  15.8k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  15.8k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  15.8k|    }
  555|  15.8k|  }
_ZN10fast_float6bigintC2Em:
  418|   110k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|   110k|#ifdef FASTFLOAT_64BIT_LIMB
  420|   110k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|   110k|    vec.normalize();
  426|   110k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|   110k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|   110k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 110k]
  ------------------
  464|      0|      return 1;
  465|   110k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 110k]
  ------------------
  466|      0|      return -1;
  467|   110k|    } else {
  468|   215k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 205k, False: 10.6k]
  ------------------
  469|   205k|        limb xi = vec[index - 1];
  470|   205k|        limb yi = other.vec[index - 1];
  471|   205k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 15.2k, False: 189k]
  ------------------
  472|  15.2k|          return 1;
  473|   189k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 84.2k, False: 105k]
  ------------------
  474|  84.2k|          return -1;
  475|  84.2k|        }
  476|   205k|      }
  477|  10.6k|      return 0;
  478|   110k|    }
  479|   110k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   410k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   410k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   410k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   410k|    return data[index];
   64|   410k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   529k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   529k|  adjusted_mantissa answer;
   96|   529k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 13.9k, False: 515k]
  |  Branch (96:19): [True: 2.23k, False: 513k]
  ------------------
   97|  16.1k|    answer.power2 = 0;
   98|  16.1k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  16.1k|    return answer;
  101|  16.1k|  }
  102|   513k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 10.8k, False: 502k]
  ------------------
  103|       |    // we want to get infinity:
  104|  10.8k|    answer.power2 = binary::infinite_power();
  105|  10.8k|    answer.mantissa = 0;
  106|  10.8k|    return answer;
  107|  10.8k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   502k|  int lz = leading_zeroes(w);
  112|   502k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   502k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   502k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   502k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   502k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   502k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.08k, False: 501k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.08k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 72, False: 1.01k]
  ------------------
  137|     72|      answer.power2 = 0;
  138|     72|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     72|      return answer;
  141|     72|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.01k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.01k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.01k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.01k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.01k, False: 0]
  ------------------
  156|  1.01k|    return answer;
  157|  1.08k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   501k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 188k, False: 312k]
  |  Branch (162:30): [True: 186k, False: 1.56k]
  |  Branch (162:77): [True: 169k, False: 17.6k]
  ------------------
  163|   501k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 28.5k, False: 140k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  28.5k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 13.3k, False: 15.2k]
  ------------------
  168|  13.3k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  13.3k|    }
  170|  28.5k|  }
  171|       |
  172|   501k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   501k|  answer.mantissa >>= 1;
  174|   501k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 20.1k, False: 481k]
  ------------------
  175|  20.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  20.1k|    answer.power2++; // undo previous addition
  177|  20.1k|  }
  178|       |
  179|   501k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   501k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 3.13k, False: 498k]
  ------------------
  181|  3.13k|    answer.power2 = binary::infinite_power();
  182|  3.13k|    answer.mantissa = 0;
  183|  3.13k|  }
  184|   501k|  return answer;
  185|   502k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   565k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   565k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   565k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   565k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   565k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   565k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   565k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 102k, False: 463k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   102k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   102k|    firstproduct.low += secondproduct.high;
   35|   102k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 82.6k, False: 19.5k]
  ------------------
   36|  82.6k|      firstproduct.high++;
   37|  82.6k|    }
   38|   102k|  }
   39|   565k|  return firstproduct;
   40|   565k|}
_ZN10fast_float6detail5powerEi:
   58|  1.11M|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|  1.11M|    return (((152170 + 65536) * q) >> 16) + 63;
   60|  1.11M|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  63.1k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  63.1k|  int lz = leading_zeroes(w);
   82|  63.1k|  w <<= lz;
   83|  63.1k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  63.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  63.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  63.1k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  63.1k|  int hilz = int(w >> 63) ^ 1;
   69|  63.1k|  adjusted_mantissa answer;
   70|  63.1k|  answer.mantissa = w << hilz;
   71|  63.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  63.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  63.1k|  return answer;
   74|  63.1k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   498k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   498k|  adjusted_mantissa answer;
   96|   498k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 8.50k, False: 490k]
  |  Branch (96:19): [True: 450, False: 489k]
  ------------------
   97|  8.95k|    answer.power2 = 0;
   98|  8.95k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  8.95k|    return answer;
  101|  8.95k|  }
  102|   489k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 5.27k, False: 484k]
  ------------------
  103|       |    // we want to get infinity:
  104|  5.27k|    answer.power2 = binary::infinite_power();
  105|  5.27k|    answer.mantissa = 0;
  106|  5.27k|    return answer;
  107|  5.27k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   484k|  int lz = leading_zeroes(w);
  112|   484k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   484k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   484k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   484k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   484k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   484k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 15.5k, False: 468k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  15.5k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 15.4k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  15.4k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  15.4k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  15.4k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  15.4k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 15.4k, False: 0]
  ------------------
  156|  15.4k|    return answer;
  157|  15.5k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   468k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 150k, False: 318k]
  |  Branch (162:30): [True: 79.3k, False: 70.8k]
  |  Branch (162:77): [True: 70.8k, False: 8.47k]
  ------------------
  163|   468k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 24.2k, False: 46.6k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  24.2k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 15.7k, False: 8.44k]
  ------------------
  168|  15.7k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  15.7k|    }
  170|  24.2k|  }
  171|       |
  172|   468k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   468k|  answer.mantissa >>= 1;
  174|   468k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 16.9k, False: 451k]
  ------------------
  175|  16.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  16.9k|    answer.power2++; // undo previous addition
  177|  16.9k|  }
  178|       |
  179|   468k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   468k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 298, False: 468k]
  ------------------
  181|    298|    answer.power2 = binary::infinite_power();
  182|    298|    answer.mantissa = 0;
  183|    298|  }
  184|   468k|  return answer;
  185|   484k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   547k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   547k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   547k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   547k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   547k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   547k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   547k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 158k, False: 388k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   158k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   158k|    firstproduct.low += secondproduct.high;
   35|   158k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 78.6k, False: 79.9k]
  ------------------
   36|  78.6k|      firstproduct.high++;
   37|  78.6k|    }
   38|   158k|  }
   39|   547k|  return firstproduct;
   40|   547k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  62.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  62.8k|  int lz = leading_zeroes(w);
   82|  62.8k|  w <<= lz;
   83|  62.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  62.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  62.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  62.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  62.8k|  int hilz = int(w >> 63) ^ 1;
   69|  62.8k|  adjusted_mantissa answer;
   70|  62.8k|  answer.mantissa = w << hilz;
   71|  62.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  62.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  62.8k|  return answer;
   74|  62.8k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  63.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  63.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  63.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  63.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  63.1k|  size_t digits = 0;
  413|  63.1k|  bigint bigmant;
  414|  63.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  63.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  63.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 890, False: 62.2k]
  ------------------
  418|    890|    return positive_digit_comp<T>(bigmant, exponent);
  419|  62.2k|  } else {
  420|  62.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  62.2k|  }
  422|  63.1k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|   126k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|   126k|  uint64_t mantissa = num.mantissa;
   30|   126k|  int32_t exponent = int32_t(num.exponent);
   31|   630k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 504k, False: 126k]
  ------------------
   32|   504k|    mantissa /= 10000;
   33|   504k|    exponent += 4;
   34|   504k|  }
   35|   252k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 126k, False: 126k]
  ------------------
   36|   126k|    mantissa /= 100;
   37|   126k|    exponent += 2;
   38|   126k|  }
   39|   126k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 126k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|   126k|  return exponent;
   44|   126k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|   126k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|   126k|  size_t counter = 0;
  245|   126k|  digits = 0;
  246|   126k|  limb value = 0;
  247|   126k|#ifdef FASTFLOAT_64BIT_LIMB
  248|   126k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|   126k|  UC const * p = num.integer.ptr;
  255|   126k|  UC const * pend = p + num.integer.len();
  256|   126k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   270k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 144k, False: 125k]
  ------------------
  259|   263k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 147k, False: 116k]
  |  Branch (259:45): [True: 119k, False: 27.5k]
  |  Branch (259:70): [True: 119k, False: 427]
  ------------------
  260|   119k|      parse_eight_digits(p, value, counter, digits);
  261|   119k|    }
  262|   509k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 475k, False: 34.5k]
  |  Branch (262:30): [True: 365k, False: 109k]
  |  Branch (262:43): [True: 365k, False: 427]
  ------------------
  263|   365k|      parse_one_digit(p, value, counter, digits);
  264|   365k|    }
  265|   144k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 427, False: 144k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    427|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    427|      bool truncated = is_truncated(p, pend);
  269|    427|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 395, False: 32]
  ------------------
  270|    395|        truncated |= is_truncated(num.fraction);
  271|    395|      }
  272|    427|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 239, False: 188]
  ------------------
  273|    239|        round_up_bigint(result, digits);
  274|    239|      }
  275|    427|      return;
  276|   144k|    } else {
  277|   144k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   144k|      counter = 0;
  279|   144k|      value = 0;
  280|   144k|    }
  281|   144k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|   125k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 111k, False: 14.4k]
  ------------------
  285|   111k|    p = num.fraction.ptr;
  286|   111k|    pend = p + num.fraction.len();
  287|   111k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 16.0k, False: 95.0k]
  ------------------
  288|  16.0k|      skip_zeros(p, pend);
  289|  16.0k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   383k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 281k, False: 102k]
  ------------------
  292|   701k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 571k, False: 129k]
  |  Branch (292:47): [True: 423k, False: 148k]
  |  Branch (292:72): [True: 420k, False: 3.25k]
  ------------------
  293|   420k|        parse_eight_digits(p, value, counter, digits);
  294|   420k|      }
  295|  1.16M|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 994k, False: 175k]
  |  Branch (295:32): [True: 894k, False: 99.6k]
  |  Branch (295:45): [True: 888k, False: 6.21k]
  ------------------
  296|   888k|        parse_one_digit(p, value, counter, digits);
  297|   888k|      }
  298|   281k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 8.78k, False: 272k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  8.78k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  8.78k|        bool truncated = is_truncated(p, pend);
  302|  8.78k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 5.18k, False: 3.59k]
  ------------------
  303|  5.18k|          round_up_bigint(result, digits);
  304|  5.18k|        }
  305|  8.78k|        return;
  306|   272k|      } else {
  307|   272k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   272k|        counter = 0;
  309|   272k|        value = 0;
  310|   272k|      }
  311|   281k|    }
  312|   111k|  }
  313|       |
  314|   116k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 116k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|   116k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   142k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   142k|  uint64_t val;
  161|   216k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 153k, False: 63.1k]
  ------------------
  162|   153k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   153k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 78.8k, False: 74.6k]
  ------------------
  164|  78.8k|      break;
  165|  78.8k|    }
  166|  74.6k|    first += int_cmp_len<UC>();
  167|  74.6k|  }
  168|   344k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 328k, False: 16.0k]
  ------------------
  169|   328k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 126k, False: 202k]
  ------------------
  170|   126k|      break;
  171|   126k|    }
  172|   202k|    first++;
  173|   202k|  }
  174|   142k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   539k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   539k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   539k|  p += 8;
  210|   539k|  counter += 8;
  211|   539k|  count += 8;
  212|   539k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  1.25M|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  1.25M|  value = value * 10 + limb(*p - UC('0'));
  218|  1.25M|  p++;
  219|  1.25M|  counter++;
  220|  1.25M|  count++;
  221|  1.25M|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   431k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   431k|  big.mul(power);
  226|   431k|  big.add(value);
  227|   431k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  9.60k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  9.60k|  uint64_t val;
  183|  21.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 13.9k, False: 7.19k]
  ------------------
  184|  13.9k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  13.9k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 2.40k, False: 11.5k]
  ------------------
  186|  2.40k|      return true;
  187|  2.40k|    }
  188|  11.5k|    first += int_cmp_len<UC>();
  189|  11.5k|  }
  190|  11.6k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 7.57k, False: 4.10k]
  ------------------
  191|  7.57k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 3.09k, False: 4.47k]
  ------------------
  192|  3.09k|      return true;
  193|  3.09k|    }
  194|  4.47k|    ++first;
  195|  4.47k|  }
  196|  4.10k|  return false;
  197|  7.19k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    395|bool is_truncated(span<const UC> s) noexcept {
  201|    395|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    395|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  5.42k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  5.42k|  add_native(big, 10, 1);
  234|  5.42k|  count++;
  235|  5.42k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    890|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    890|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    890|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    890|  adjusted_mantissa answer;
  324|    890|  bool truncated;
  325|    890|  answer.mantissa = bigmant.hi64(truncated);
  326|    890|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    890|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    890|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    890|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    890|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    890|    });
  333|    890|  });
  334|       |
  335|    890|  return answer;
  336|    890|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    890|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    890|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    890|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 890]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    890|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    890|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 890]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    890|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    890|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 890]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    890|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    890|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    890|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    890|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    890|    });
  333|    890|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    890|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    890|  const uint64_t mask
  125|    890|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 890]
  ------------------
  126|    890|    ? UINT64_MAX
  127|    890|    : (uint64_t(1) << shift) - 1;
  128|    890|  const uint64_t halfway
  129|    890|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 890]
  ------------------
  130|    890|    ? 0
  131|    890|    : uint64_t(1) << (shift - 1);
  132|    890|  uint64_t truncated_bits = am.mantissa & mask;
  133|    890|  bool is_above = truncated_bits > halfway;
  134|    890|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    890|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 890]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    890|  } else {
  140|    890|    am.mantissa >>= shift;
  141|    890|  }
  142|    890|  am.power2 += shift;
  143|       |
  144|    890|  bool is_odd = (am.mantissa & 1) == 1;
  145|    890|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    890|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    890|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    890|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 90, False: 800]
  |  Branch (331:27): [True: 646, False: 154]
  |  Branch (331:41): [True: 70, False: 576]
  |  Branch (331:56): [True: 100, False: 630]
  |  Branch (331:66): [True: 32, False: 68]
  ------------------
  332|    890|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  62.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  62.2k|  bigint& real_digits = bigmant;
  347|  62.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  62.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  62.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  62.2k|  T b;
  354|  62.2k|  to_float(false, am_b, b);
  355|  62.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  62.2k|  bigint theor_digits(theor.mantissa);
  357|  62.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  62.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  62.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  62.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 62.2k, False: 0]
  ------------------
  363|  62.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  62.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  62.2k|  }
  365|  62.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 62.2k, False: 0]
  ------------------
  366|  62.2k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  62.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  62.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  62.2k|  int ord = real_digits.compare(theor_digits);
  373|  62.2k|  adjusted_mantissa answer = am;
  374|  62.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  62.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  62.2k|      (void)_;  // not needed, since we've done our comparison
  377|  62.2k|      (void)__; // not needed, since we've done our comparison
  378|  62.2k|      if (ord > 0) {
  379|  62.2k|        return true;
  380|  62.2k|      } else if (ord < 0) {
  381|  62.2k|        return false;
  382|  62.2k|      } else {
  383|  62.2k|        return is_odd;
  384|  62.2k|      }
  385|  62.2k|    });
  386|  62.2k|  });
  387|       |
  388|  62.2k|  return answer;
  389|  62.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  62.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  62.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  62.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 62.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  62.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  62.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 62.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  62.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  62.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 62.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  62.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  62.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|   110k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|   110k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 110k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|   110k|  } else {
  153|   110k|    am.mantissa >>= shift;
  154|   110k|  }
  155|   110k|  am.power2 += shift;
  156|   110k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  62.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  62.2k|  adjusted_mantissa am = to_extended(value);
   84|  62.2k|  am.mantissa <<= 1;
   85|  62.2k|  am.mantissa += 1;
   86|  62.2k|  am.power2 -= 1;
   87|  62.2k|  return am;
   88|  62.2k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  62.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  62.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  62.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  62.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  62.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  62.2k|  adjusted_mantissa am;
   56|  62.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  62.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  62.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  62.2k|#endif
   63|  62.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 62.2k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  62.2k|  } else {
   68|       |    // normal
   69|  62.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  62.2k|    am.power2 -= bias;
   71|  62.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  62.2k|  }
   73|       |
   74|  62.2k|  return am;
   75|  62.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  62.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  62.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  62.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 62.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  62.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  62.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 62.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  62.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  62.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 62.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  62.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  62.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  62.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  62.2k|      (void)_;  // not needed, since we've done our comparison
  377|  62.2k|      (void)__; // not needed, since we've done our comparison
  378|  62.2k|      if (ord > 0) {
  379|  62.2k|        return true;
  380|  62.2k|      } else if (ord < 0) {
  381|  62.2k|        return false;
  382|  62.2k|      } else {
  383|  62.2k|        return is_odd;
  384|  62.2k|      }
  385|  62.2k|    });
  386|  62.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  62.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  62.2k|  const uint64_t mask
  125|  62.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 62.2k]
  ------------------
  126|  62.2k|    ? UINT64_MAX
  127|  62.2k|    : (uint64_t(1) << shift) - 1;
  128|  62.2k|  const uint64_t halfway
  129|  62.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 62.2k]
  ------------------
  130|  62.2k|    ? 0
  131|  62.2k|    : uint64_t(1) << (shift - 1);
  132|  62.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  62.2k|  bool is_above = truncated_bits > halfway;
  134|  62.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  62.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 62.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  62.2k|  } else {
  140|  62.2k|    am.mantissa >>= shift;
  141|  62.2k|  }
  142|  62.2k|  am.power2 += shift;
  143|       |
  144|  62.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  62.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  62.2k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  62.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  62.2k|      (void)_;  // not needed, since we've done our comparison
  377|  62.2k|      (void)__; // not needed, since we've done our comparison
  378|  62.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 546, False: 61.7k]
  ------------------
  379|    546|        return true;
  380|  61.7k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 52.1k, False: 9.56k]
  ------------------
  381|  52.1k|        return false;
  382|  52.1k|      } else {
  383|  9.56k|        return is_odd;
  384|  9.56k|      }
  385|  62.2k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  62.8k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  62.8k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  62.8k|  int32_t sci_exp = scientific_exponent(num);
  411|  62.8k|  size_t max_digits = binary_format<T>::max_digits();
  412|  62.8k|  size_t digits = 0;
  413|  62.8k|  bigint bigmant;
  414|  62.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  62.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  62.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 14.9k, False: 47.8k]
  ------------------
  418|  14.9k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  47.8k|  } else {
  420|  47.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  47.8k|  }
  422|  62.8k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.9k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.9k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  14.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.9k|  adjusted_mantissa answer;
  324|  14.9k|  bool truncated;
  325|  14.9k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.9k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.9k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.9k|    });
  333|  14.9k|  });
  334|       |
  335|  14.9k|  return answer;
  336|  14.9k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.43k, False: 13.5k]
  ------------------
  109|  1.43k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.43k|    am.power2++;
  111|  1.43k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.9k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.9k|    });
  333|  14.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.9k|  const uint64_t mask
  125|  14.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.9k]
  ------------------
  126|  14.9k|    ? UINT64_MAX
  127|  14.9k|    : (uint64_t(1) << shift) - 1;
  128|  14.9k|  const uint64_t halfway
  129|  14.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.9k]
  ------------------
  130|  14.9k|    ? 0
  131|  14.9k|    : uint64_t(1) << (shift - 1);
  132|  14.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.9k|  bool is_above = truncated_bits > halfway;
  134|  14.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.9k|  } else {
  140|  14.9k|    am.mantissa >>= shift;
  141|  14.9k|  }
  142|  14.9k|  am.power2 += shift;
  143|       |
  144|  14.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.9k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.59k, False: 13.3k]
  |  Branch (331:27): [True: 12.3k, False: 1.01k]
  |  Branch (331:41): [True: 4.06k, False: 8.28k]
  |  Branch (331:56): [True: 401, False: 8.90k]
  |  Branch (331:66): [True: 82, False: 319]
  ------------------
  332|  14.9k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  47.8k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  47.8k|  bigint& real_digits = bigmant;
  347|  47.8k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  47.8k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  47.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  47.8k|  T b;
  354|  47.8k|  to_float(false, am_b, b);
  355|  47.8k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  47.8k|  bigint theor_digits(theor.mantissa);
  357|  47.8k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  47.8k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  47.8k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  47.8k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 47.8k, False: 0]
  ------------------
  363|  47.8k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  47.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  47.8k|  }
  365|  47.8k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 6.05k, False: 41.8k]
  ------------------
  366|  6.05k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  6.05k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  41.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 41.6k, False: 172]
  ------------------
  368|  41.6k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  41.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  41.6k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  47.8k|  int ord = real_digits.compare(theor_digits);
  373|  47.8k|  adjusted_mantissa answer = am;
  374|  47.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  47.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  47.8k|      (void)_;  // not needed, since we've done our comparison
  377|  47.8k|      (void)__; // not needed, since we've done our comparison
  378|  47.8k|      if (ord > 0) {
  379|  47.8k|        return true;
  380|  47.8k|      } else if (ord < 0) {
  381|  47.8k|        return false;
  382|  47.8k|      } else {
  383|  47.8k|        return is_odd;
  384|  47.8k|      }
  385|  47.8k|    });
  386|  47.8k|  });
  387|       |
  388|  47.8k|  return answer;
  389|  47.8k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  47.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  47.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  47.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 212, False: 47.6k]
  ------------------
   96|       |    // have a denormal float
   97|    212|    int32_t shift = -am.power2 + 1;
   98|    212|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    212|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 212, False: 0]
  ------------------
  101|    212|    return;
  102|    212|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  47.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  47.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 47.6k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  47.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  47.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 47.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  47.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  47.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  47.8k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  47.8k|  adjusted_mantissa am = to_extended(value);
   84|  47.8k|  am.mantissa <<= 1;
   85|  47.8k|  am.mantissa += 1;
   86|  47.8k|  am.power2 -= 1;
   87|  47.8k|  return am;
   88|  47.8k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  47.8k|adjusted_mantissa to_extended(T value) noexcept {
   50|  47.8k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  47.8k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  47.8k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  47.8k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  47.8k|  adjusted_mantissa am;
   56|  47.8k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  47.8k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  47.8k|  ::memcpy(&bits, &value, sizeof(T));
   62|  47.8k|#endif
   63|  47.8k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 212, False: 47.6k]
  ------------------
   64|       |    // denormal
   65|    212|    am.power2 = 1 - bias;
   66|    212|    am.mantissa = bits & mantissa_mask;
   67|  47.6k|  } else {
   68|       |    // normal
   69|  47.6k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  47.6k|    am.power2 -= bias;
   71|  47.6k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  47.6k|  }
   73|       |
   74|  47.8k|  return am;
   75|  47.8k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  47.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  47.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  47.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 212, False: 47.6k]
  ------------------
   96|       |    // have a denormal float
   97|    212|    int32_t shift = -am.power2 + 1;
   98|    212|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    212|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 212, False: 0]
  ------------------
  101|    212|    return;
  102|    212|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  47.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  47.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 118, False: 47.5k]
  ------------------
  109|    118|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    118|    am.power2++;
  111|    118|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  47.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  47.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 47.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  47.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  47.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  47.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  47.8k|      (void)_;  // not needed, since we've done our comparison
  377|  47.8k|      (void)__; // not needed, since we've done our comparison
  378|  47.8k|      if (ord > 0) {
  379|  47.8k|        return true;
  380|  47.8k|      } else if (ord < 0) {
  381|  47.8k|        return false;
  382|  47.8k|      } else {
  383|  47.8k|        return is_odd;
  384|  47.8k|      }
  385|  47.8k|    });
  386|  47.8k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  47.8k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  47.8k|  const uint64_t mask
  125|  47.8k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 47.8k]
  ------------------
  126|  47.8k|    ? UINT64_MAX
  127|  47.8k|    : (uint64_t(1) << shift) - 1;
  128|  47.8k|  const uint64_t halfway
  129|  47.8k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 47.8k]
  ------------------
  130|  47.8k|    ? 0
  131|  47.8k|    : uint64_t(1) << (shift - 1);
  132|  47.8k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  47.8k|  bool is_above = truncated_bits > halfway;
  134|  47.8k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  47.8k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 47.8k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  47.8k|  } else {
  140|  47.8k|    am.mantissa >>= shift;
  141|  47.8k|  }
  142|  47.8k|  am.power2 += shift;
  143|       |
  144|  47.8k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  47.8k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  47.8k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  47.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  47.8k|      (void)_;  // not needed, since we've done our comparison
  377|  47.8k|      (void)__; // not needed, since we've done our comparison
  378|  47.8k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 14.7k, False: 33.1k]
  ------------------
  379|  14.7k|        return true;
  380|  33.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 32.0k, False: 1.08k]
  ------------------
  381|  32.0k|        return false;
  382|  32.0k|      } else {
  383|  1.08k|        return is_odd;
  384|  1.08k|      }
  385|  47.8k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  5.18M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  3.04M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   863k|  constexpr size_t len() const noexcept {
  238|   863k|    return length;
  239|   863k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.31M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.31M|  return -10;
  469|  1.31M|#endif
  470|  1.31M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.23M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.23M|  return 10;
  517|  1.23M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|  1.04M|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|  1.04M|  return uint64_t(2) << mantissa_explicit_bits();
  531|  1.04M|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  3.57M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  3.57M|  return 23;
  477|  3.57M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   959k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   959k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   959k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  1.28M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   515k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   515k|  return -65;
  568|   515k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   513k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   513k|  return 38;
  559|   513k|}
_ZN10fast_float14leading_zeroesEm:
  268|  1.14M|int leading_zeroes(uint64_t input_num) {
  269|  1.14M|  assert(input_num > 0);
  270|  1.14M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|  1.14M|  return __builtin_clzll(input_num);
  285|  1.14M|#endif
  286|  1.14M|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.37M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.37M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.37M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.37M|  answer.low = uint64_t(r);
  337|  1.37M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.37M|  return answer;
  342|  1.37M|}
_ZN10fast_float8value128C2Ev:
  251|  1.37M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   628k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   628k|  return -127;
  500|   628k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   188k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   188k|  return -17;
  493|   188k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   186k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   186k|  return 10;
  485|   186k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   367k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   367k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 126k, False: 241k]
  |  Branch (352:38): [True: 0, False: 241k]
  ------------------
  353|   367k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  63.1k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  63.1k|  return 114;
  575|  63.1k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   324k|{
  650|   324k|    return sizeof(uint64_t) / sizeof(UC);
  651|   324k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   167k|{
  644|   167k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   167k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   167k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   182k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   619k|  constexpr size_t len() const noexcept {
  238|   619k|    return length;
  239|   619k|  }
_ZNK10fast_float4spanImEixEm:
  241|   348k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   348k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   348k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   348k|    return ptr[index];
  244|   348k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   416k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   416k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   416k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   416k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   416k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   416k|  ::memcpy(&value, &word, sizeof(T));
  615|   416k|#endif
  616|   416k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   416k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   992k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   992k|  return 0xFF;
  507|   992k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.59M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   294k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   147k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   147k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.42M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.42M|  return -22;
  461|  1.42M|#endif
  462|  1.42M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.38M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.38M|  return 22;
  514|  1.38M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|  1.14M|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|  1.14M|  return uint64_t(2) << mantissa_explicit_bits();
  521|  1.14M|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  3.48M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  3.48M|  return 52;
  474|  3.48M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|  1.11M|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|  1.11M|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|  1.11M|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   490k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   490k|  return -342;
  564|   490k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   489k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   489k|  return 308;
  555|   489k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   610k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   610k|  return -1023;
  497|   610k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   150k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   150k|  return -4;
  489|   150k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  79.3k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  79.3k|  return 23;
  481|  79.3k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  62.8k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  62.8k|  return 769;
  572|  62.8k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   354k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   354k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   354k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   354k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   354k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   354k|  ::memcpy(&value, &word, sizeof(T));
  615|   354k|#endif
  616|   354k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   354k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   891k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   891k|  return 0x7FF;
  504|   891k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.23M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.23M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.23M|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  1.23M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.23M|    return from_chars_advanced(first, last, value, options);
  143|  1.23M|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.23M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.23M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.23M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.23M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.23M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.23M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.23M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.23M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.23M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.23M|  answer.ec = std::errc(); // be optimistic
  221|  1.23M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.23M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.16M, False: 76.2k]
  |  Branch (227:69): [True: 1.08M, False: 76.9k]
  |  Branch (227:131): [True: 968k, False: 118k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   968k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 968k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   968k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 887k, False: 80.7k]
  ------------------
  239|   887k|        value = T(pns.mantissa);
  240|   887k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 14.1k, False: 873k]
  ------------------
  241|   873k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   887k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 887k]
  ------------------
  243|   887k|        return answer;
  244|   887k|      }
  245|   968k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   968k|  }
  262|   352k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   352k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 175k, False: 176k]
  |  Branch (263:29): [True: 175k, False: 0]
  ------------------
  264|   175k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 63.1k, False: 112k]
  ------------------
  265|  63.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  63.1k|    }
  267|   175k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   352k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 63.1k, False: 289k]
  ------------------
  271|   352k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   352k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 338k, False: 13.8k]
  |  Branch (273:29): [True: 24.9k, False: 313k]
  |  Branch (273:49): [True: 1.80k, False: 23.1k]
  |  Branch (273:68): [True: 9.27k, False: 341k]
  ------------------
  274|  11.0k|    answer.ec = std::errc::result_out_of_range;
  275|  11.0k|  }
  276|   352k|  return answer;
  277|  1.23M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  2.18M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  2.18M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  2.18M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  2.18M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  2.18M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  2.18M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  73.5k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  73.5k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  73.5k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  73.5k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  73.5k|    return from_chars_advanced(first, last, value, options);
  143|  73.5k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  73.5k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  73.5k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  73.5k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  73.5k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  73.5k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 73.5k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  73.5k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  73.5k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 73.5k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  73.5k|  answer.ec = std::errc(); // be optimistic
  221|  73.5k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  73.5k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 73.1k, False: 322]
  |  Branch (227:69): [True: 71.9k, False: 1.26k]
  |  Branch (227:131): [True: 71.9k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  71.9k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 71.9k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  71.9k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 71.8k, False: 36]
  ------------------
  239|  71.8k|        value = T(pns.mantissa);
  240|  71.8k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 78, False: 71.8k]
  ------------------
  241|  71.8k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  71.8k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 71.8k]
  ------------------
  243|  71.8k|        return answer;
  244|  71.8k|      }
  245|  71.9k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  71.9k|  }
  262|  1.62k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  1.62k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 1.62k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  1.62k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 1.62k]
  ------------------
  271|  1.62k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  1.62k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 1.53k, False: 86]
  |  Branch (273:29): [True: 1.30k, False: 234]
  |  Branch (273:49): [True: 198, False: 1.10k]
  |  Branch (273:68): [True: 1.10k, False: 320]
  ------------------
  274|  1.30k|    answer.ec = std::errc::result_out_of_range;
  275|  1.30k|  }
  276|  1.62k|  return answer;
  277|  73.5k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.35M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.35M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.35M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.35M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.35M|    return from_chars_advanced(first, last, value, options);
  143|  1.35M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.35M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.35M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.35M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.35M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.35M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.35M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.35M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.35M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.35M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.35M|  answer.ec = std::errc(); // be optimistic
  221|  1.35M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.35M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.31M, False: 38.7k]
  |  Branch (227:69): [True: 1.23M, False: 79.4k]
  |  Branch (227:131): [True: 1.06M, False: 164k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  1.06M|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 1.06M, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  1.06M|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 1.04M, False: 22.6k]
  ------------------
  239|  1.04M|        value = T(pns.mantissa);
  240|  1.04M|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 55.1k, False: 990k]
  ------------------
  241|   990k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  1.04M|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 1.04M]
  ------------------
  243|  1.04M|        return answer;
  244|  1.04M|      }
  245|  1.06M|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  1.06M|  }
  262|   305k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   305k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 191k, False: 114k]
  |  Branch (263:29): [True: 191k, False: 0]
  ------------------
  264|   191k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 62.8k, False: 128k]
  ------------------
  265|  62.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  62.8k|    }
  267|   191k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   305k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 62.8k, False: 242k]
  ------------------
  271|   305k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   305k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 297k, False: 8.43k]
  |  Branch (273:29): [True: 14.1k, False: 283k]
  |  Branch (273:49): [True: 466, False: 13.6k]
  |  Branch (273:68): [True: 4.28k, False: 300k]
  ------------------
  274|  4.75k|    answer.ec = std::errc::result_out_of_range;
  275|  4.75k|  }
  276|   305k|  return answer;
  277|  1.35M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  73.6k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  73.6k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  73.6k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  73.6k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  73.6k|    return from_chars_advanced(first, last, value, options);
  143|  73.6k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  73.6k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  73.6k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  73.6k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  73.6k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  73.6k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 73.6k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  73.6k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  73.6k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 73.6k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  73.6k|  answer.ec = std::errc(); // be optimistic
  221|  73.6k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  73.6k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 73.3k, False: 280]
  |  Branch (227:69): [True: 72.1k, False: 1.20k]
  |  Branch (227:131): [True: 72.1k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  72.1k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 72.1k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  72.1k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 72.1k, False: 0]
  ------------------
  239|  72.1k|        value = T(pns.mantissa);
  240|  72.1k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 120, False: 72.0k]
  ------------------
  241|  72.0k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  72.1k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 72.1k]
  ------------------
  243|  72.1k|        return answer;
  244|  72.1k|      }
  245|  72.1k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  72.1k|  }
  262|  1.48k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  1.48k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 1.48k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  1.48k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 1.48k]
  ------------------
  271|  1.48k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  1.48k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 1.41k, False: 72]
  |  Branch (273:29): [True: 664, False: 752]
  |  Branch (273:49): [True: 0, False: 664]
  |  Branch (273:68): [True: 664, False: 824]
  ------------------
  274|    664|    answer.ec = std::errc::result_out_of_range;
  275|    664|  }
  276|  1.48k|  return answer;
  277|  73.6k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  9.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  8.32M|{
 3807|  8.32M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  8.32M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  8.32M|    }
 3810|  8.32M|    else if constexpr (sizeof(U) == 2) {
 3811|  8.32M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  8.32M|    }
 3813|  8.32M|    else {
 3814|       |        // utf-32
 3815|  8.32M|        static_assert(sizeof(U) == 4);
 3816|  8.32M|        SCN_UNUSED(ch);
 3817|  8.32M|        return 1;
 3818|  8.32M|    }
 3819|  8.32M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  8.32M|{
 3771|  8.32M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  8.32M|    SCN_GCC_COMPAT_PUSH
 3774|  8.32M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  8.32M|    constexpr char lengths[] =
 3776|  8.32M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  8.32M|        "\1\1\1\1\1\1\1\1"
 3778|  8.32M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  8.32M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  8.32M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  8.32M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  8.32M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  8.32M|    SCN_GCC_COMPAT_POP
 3785|  8.32M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  7.63M|{
 4013|  7.63M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  7.63M|        return decode_utf8_code_point_exhaustive(input);
 4015|  7.63M|    }
 4016|  7.63M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  7.63M|        return decode_utf16_code_point_exhaustive(input);
 4018|  7.63M|    }
 4019|  7.63M|    else {
 4020|  7.63M|        SCN_EXPECT(input.size() == 1);
 4021|  7.63M|        auto cp = static_cast<char32_t>(input.front());
 4022|  7.63M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  7.63M|            return invalid_code_point;
 4024|  7.63M|        }
 4025|  7.63M|        return cp;
 4026|  7.63M|    }
 4027|  7.63M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  7.63M|{
 3826|  7.63M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  7.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  7.63M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  7.63M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  7.63M|    };
 3831|       |
 3832|  7.63M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 7.28M, False: 355k]
  ------------------
 3833|  7.28M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 895, False: 7.28M]
  ------------------
 3834|    895|            SCN_UNLIKELY_ATTR
 3835|    895|            return invalid_code_point;
 3836|    895|        }
 3837|  7.28M|        return static_cast<char32_t>(input[0]);
 3838|  7.28M|    }
 3839|       |
 3840|   355k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 319k, False: 36.0k]
  ------------------
 3841|   319k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 247, False: 319k]
  ------------------
 3842|    247|            SCN_UNLIKELY_ATTR
 3843|    247|            return invalid_code_point;
 3844|    247|        }
 3845|   319k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 96.6k, False: 222k]
  ------------------
 3846|  96.6k|            SCN_UNLIKELY_ATTR
 3847|  96.6k|            return invalid_code_point;
 3848|  96.6k|        }
 3849|       |
 3850|   222k|        char32_t cp{};
 3851|   222k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   222k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   222k|        return cp;
 3854|   319k|    }
 3855|       |
 3856|  36.0k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 15.3k, False: 20.7k]
  ------------------
 3857|  15.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 197, False: 15.1k]
  ------------------
 3858|    197|            SCN_UNLIKELY_ATTR
 3859|    197|            return invalid_code_point;
 3860|    197|        }
 3861|  15.1k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 7.18k, False: 7.92k]
  ------------------
 3862|  15.1k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.61k, False: 6.30k]
  ------------------
 3863|  8.79k|            SCN_UNLIKELY_ATTR
 3864|  8.79k|            return invalid_code_point;
 3865|  8.79k|        }
 3866|       |
 3867|  6.30k|        char32_t cp{};
 3868|  6.30k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  6.30k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  6.30k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  6.30k|        return cp;
 3872|  15.1k|    }
 3873|       |
 3874|  20.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 20.7k, False: 0]
  ------------------
 3875|  20.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 20.7k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  20.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 3.23k, False: 17.5k]
  ------------------
 3880|  3.23k|            SCN_UNLIKELY_ATTR
 3881|  3.23k|            return invalid_code_point;
 3882|  3.23k|        }
 3883|  17.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 4.32k, False: 13.2k]
  ------------------
 3884|  17.5k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.85k, False: 11.3k]
  ------------------
 3885|  17.5k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 1.80k, False: 9.55k]
  ------------------
 3886|  7.97k|            SCN_UNLIKELY_ATTR
 3887|  7.97k|            return invalid_code_point;
 3888|  7.97k|        }
 3889|       |
 3890|  9.55k|        char32_t cp{};
 3891|  9.55k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  9.55k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  9.55k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  9.55k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  9.55k|        return cp;
 3896|  17.5k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   384k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   384k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   384k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  15.1M|{
 3699|  15.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  15.1M|                                          decltype(first), decltype(last)> &&
 3701|  15.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  15.1M|        return {first, last};
 3703|  15.1M|    }
 3704|  15.1M|    else {
 3705|  15.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  15.1M|                                       to_address(first), to_address(last)))};
 3707|  15.1M|    }
 3708|  15.1M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  46.1M|{
  326|  46.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  46.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  46.1M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  51.6M|{
  304|  51.6M|    return p;
  305|  51.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  22.5M|{
 3730|  22.5M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  22.5M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  22.5M|                      decltype(it)> &&
 3733|  22.5M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  22.5M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  22.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  22.5M|        return it;
 3736|  22.5M|    }
 3737|  22.5M|    else {
 3738|  22.5M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  22.5M|    }
 3740|  22.5M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   156k|    {
 2724|   156k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   156k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   156k|    {
 2705|   156k|        return decay_copy(t.begin());
 2706|   156k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  30.8M|{
 1949|  30.8M|    return SCN_FWD(t);
  ------------------
  |  |  930|  30.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  30.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.77M|    {
 2781|  5.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.77M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.77M|    {
 2763|  5.77M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.77M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   410k|{
 8867|   410k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   410k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   410k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   410k|    static_cast<    \
  |  |  929|   410k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   410k|    static_cast<    \
  |  |  929|   410k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   410k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|  1.68M|{
 5396|  1.68M|    detail::check_scan_arg_types<Args...>();
 5397|  1.68M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.68M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  2.15M|{
 5135|  2.15M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.15M|                  "Scan argument types must be default constructible");
 5137|  2.15M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.15M|                  "Scan argument types must be Destructible");
 5139|  2.15M|    static_assert(
 5140|  2.15M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.15M|        "Scan argument types must not be references");
 5142|  2.15M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|  1.68M|    {
 5349|  1.68M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.68M|    {
 5360|  1.68M|        return {detail::make_arg<
 5361|  1.68M|            kind, Context,
 5362|  1.68M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.68M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.68M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|  1.68M|{
 5170|  1.68M|    return make_value<Context>(value).ref_value;
 5171|  1.68M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|  1.86M|{
 5120|  1.86M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.86M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.86M|                                  needs_context_tag>) {
 5124|  1.86M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.86M|    }
 5126|  1.86M|    else {
 5127|  1.86M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.86M|            value, context_tag<Context>{}));
 5129|  1.86M|    }
 5130|  1.86M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|  1.86M|    {                                                                        \
 4959|  1.86M|        return val;                                                          \
 4960|  1.86M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  2.15M|{
 5089|  2.15M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.15M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.15M|    constexpr bool scannable_char =
 5093|  2.15M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.15M|    static_assert(scannable_char,
 5095|  2.15M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.15M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.15M|    constexpr bool scannable_const =
 5099|  2.15M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.15M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.15M|    constexpr bool scannable_disabled =
 5103|  2.15M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.15M|    static_assert(scannable_disabled,
 5105|  2.15M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.15M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.15M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.15M|    static_assert(
 5110|  2.15M|        scannable,
 5111|  2.15M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.15M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.15M|    return arg_value{arg};
 5115|  2.15M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  2.15M|    {
 4902|  2.15M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.29M|{
 8654|  1.29M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.29M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  1.29M|{
 8591|  1.29M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.29M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.29M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.4k, False: 1.22M]
  |  |  ------------------
  ------------------
 8595|  70.4k|        return unexpected(result.error());
 8596|  70.4k|    }
 8597|  1.22M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.29M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  2.88M|{
 4720|  2.88M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.88M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.88M|                  "\n"
 4724|  2.88M|                  "Unsupported range type given as input to a scanning "
 4725|  2.88M|                  "function.\n"
 4726|  2.88M|                  "A range needs to have a character type (value type) "
 4727|  2.88M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.88M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.88M|                  "to be included.\n"
 4730|  2.88M|                  "See the scnlib documentation for more details.");
 4731|  2.88M|    static_assert(
 4732|  2.88M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.88M|        "\n"
 4734|  2.88M|        "Unsupported range type given as input to a scanning "
 4735|  2.88M|        "function.\n"
 4736|  2.88M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.88M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.88M|        "not supported.");
 4739|  2.88M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.88M|                  "\n"
 4741|  2.88M|                  "Unsupported range type given as input to a scanning "
 4742|  2.88M|                  "function.\n"
 4743|  2.88M|                  "file_marker_found cannot be used as an "
 4744|  2.88M|                  "source range type to scn::scan.\n"
 4745|  2.88M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.88M|                  "and do not provide an explicit source range, "
 4747|  2.88M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.88M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.88M|                  "\n"
 4750|  2.88M|                  "Unsupported range type given as input to a scanning "
 4751|  2.88M|                  "function.\n"
 4752|  2.88M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.88M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.88M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.88M|                  "\n"
 4756|  2.88M|                  "Unsupported range type given as input to a scanning "
 4757|  2.88M|                  "function.\n"
 4758|  2.88M|                  "A range needs to model forward_range and have a valid "
 4759|  2.88M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.88M|                  "Examples of scannable ranges are std::string, "
 4761|  2.88M|                  "std::string_view, "
 4762|  2.88M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.88M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.88M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.88M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  2.88M|{
 4659|  2.88M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  2.88M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  2.88M|    }
 4662|  2.88M|    else {
 4663|  2.88M|        return invalid_char_type{};
 4664|  2.88M|    }
 4665|  2.88M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.88M|    {
 2855|  2.88M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.88M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.88M|    {
 2836|  2.88M|        return t.data();
 2837|  2.88M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  2.88M|    {
 3231|  2.88M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 22.6k, False: 2.86M]
  ------------------
 3232|  2.88M|                   ? nullptr
 3233|  2.88M|                   : std::addressof(*ranges::begin(derived()));
 3234|  2.88M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  2.88M|    {
 3005|  2.88M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  2.88M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  2.88M|    {
 2978|  2.88M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  2.88M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  16.0M|    {
 3339|  16.0M|        return m_iterator == m_sentinel;
 3340|  16.0M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  5.75M|    {
 3185|  5.75M|        return static_cast<const D&>(*this);
 3186|  5.75M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.59M|    {
 2724|  5.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.59M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.59M|    {
 2705|  5.59M|        return decay_copy(t.begin());
 2706|  5.59M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  70.1M|    {
 3330|  70.1M|        return m_iterator;
 3331|  70.1M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  2.88M|    {
 2930|  2.88M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.88M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.88M|    {
 2896|  2.88M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.88M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  9.19M|{
 1949|  9.19M|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  9.19M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  16.1M|    {
 3346|  16.1M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  16.1M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  22.4M|    {
 1598|  22.4M|        return has_value();
 1599|  22.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  44.4M|    {
  485|  44.4M|        return m_has_value;
  486|  44.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.39M|    {
 1604|  1.39M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.39M|        return this->get_unexpected().error();
 1606|  1.39M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.39M|    {
  468|  1.39M|        return m_unexpected;
  469|  1.39M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  10.7M|    {
  361|  10.7M|        return m_unexpected;
  362|  10.7M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  5.24M|    {
  347|  5.24M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  5.24M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   152k|    {
 1476|   152k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   152k|    {
  447|   152k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  12.5M|    {
  356|  12.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  12.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  12.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.88M|    {
 1177|  2.88M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  2.73M|{
 5923|  2.73M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.73M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.73M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.73M|    }
 5927|  2.73M|    else {
 5928|  2.73M|        auto it = ranges::begin(source);
 5929|  2.73M|        while (n > 0) {
 5930|  2.73M|            --n;
 5931|  2.73M|            ++it;
 5932|  2.73M|        }
 5933|  2.73M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.73M|    }
 5935|  2.73M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  16.6M|    {
 2724|  16.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  16.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  16.6M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  16.6M|    {
 2705|  16.6M|        return decay_copy(t.begin());
 2706|  16.6M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  2.73M|{
 5910|  2.73M|    return ranges::end(source);
 5911|  2.73M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.73M|    {
 2781|  2.73M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.73M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.73M|    {
 2763|  2.73M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.73M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  34.2M|    {
 3334|  34.2M|        return m_sentinel;
 3335|  34.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  8.86M|    {
 1653|  8.86M|        return value();
 1654|  8.86M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  20.6M|    {
 1627|  20.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  20.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  20.6M|        return this->get_value();
 1629|  20.6M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  20.6M|    {
  451|  20.6M|        return m_value;
  452|  20.6M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.73M|    {
 1430|  2.73M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.73M|    {
  437|  2.73M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   820k|    {
 7975|   820k|        return m_str;
 7976|   820k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.68M|    {
 5426|  1.68M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|  1.68M|    {
 5379|  1.68M|        return m_argptrs;
 5380|  1.68M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  5.33M|    {
 5478|  5.33M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   820k|{
 8820|   820k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.9k, False: 773k]
  |  |  ------------------
  ------------------
 8821|  46.9k|        return unexpected(result.error());
 8822|  46.9k|    }
 8823|   773k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   773k|    static_cast<    \
  |  |  929|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   773k|    static_cast<    \
  |  |  929|   773k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   820k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  2.88M|    {
 1598|  2.88M|        return has_value();
 1599|  2.88M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.77M|    {
  485|  5.77M|        return m_has_value;
  486|  5.77M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   152k|    {
 1604|   152k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   152k|        return this->get_unexpected().error();
 1606|   152k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   152k|    {
  468|   152k|        return m_unexpected;
  469|   152k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  50.9k|    {
 1476|  50.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  50.9k|    {
  447|  50.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   910k|    {
 1177|   910k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.45M|    {
 1653|  2.45M|        return value();
 1654|  2.45M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.73M|    {
 1627|  2.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.73M|        return this->get_value();
 1629|  2.73M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.73M|    {
  451|  2.73M|        return m_value;
  452|  2.73M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   859k|    {
 5830|   859k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.73M|    {
 5681|  2.73M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|  1.84M|    {
 5616|  1.84M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   859k|    {
 1430|   859k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   859k|    {
  437|   859k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|  1.68M|    {
 5374|  1.68M|        return m_args;
 5375|  1.68M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  27.3M|    {
 3316|  27.3M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  5.33M|{
 7691|  5.33M|    return s;
 7692|  5.33M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  5.33M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   820k|    {
 7971|   820k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   910k|    {
 1598|   910k|        return has_value();
 1599|   910k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.76M|    {
  485|  1.76M|        return m_has_value;
  486|  1.76M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   859k|    {
 1673|   859k|        return &value();
 1674|   859k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   859k|    {
 1627|   859k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   859k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   859k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   859k|        return this->get_value();
 1629|   859k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   859k|    {
  451|   859k|        return m_value;
  452|   859k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  2.73M|    {
 5698|  2.73M|        return ranges::begin(m_range);
 5699|  2.73M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   410k|{
 8934|   410k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   410k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   410k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   410k|    static_cast<    \
  |  |  929|   410k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   410k|    static_cast<    \
  |  |  929|   410k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   410k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.29M|{
 8672|  1.29M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.29M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  1.29M|{
 8607|  1.29M|#if !SCN_DISABLE_LOCALE
 8608|  1.29M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.29M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.29M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.29M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.29M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.4k, False: 1.22M]
  |  |  ------------------
  ------------------
 8615|  70.4k|        return unexpected(result.error());
 8616|  70.4k|    }
 8617|  1.22M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.29M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  89.4k|{
 8973|  89.4k|    T value;
 8974|  89.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  89.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  89.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  89.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  89.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 85.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.91k|    }                                                  \
  |  |  |  | 3671|  89.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  85.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  85.5k|    static_cast<    \
  |  |  929|  85.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  85.5k|    static_cast<    \
  |  |  929|  85.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  89.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|   176k|{
 5155|   176k|    check_scan_arg_types<T>();
 5156|       |
 5157|   176k|    basic_scan_arg<Context> arg;
 5158|   176k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   176k|    arg.m_value = make_value<Context>(value);
 5160|   176k|    return arg;
 5161|   176k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  5.90M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  6.78M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   288k|{
 8685|   288k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   288k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   288k|{
 8631|   288k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   288k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   288k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 276k]
  |  |  ------------------
  ------------------
 8635|  11.7k|        return unexpected(result.error());
 8636|  11.7k|    }
 8637|   276k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   288k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   276k|    {
 1663|   276k|        return std::move(value());
 1664|   276k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   441k|{
 8867|   441k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   441k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   441k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   441k|    static_cast<    \
  |  |  929|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   441k|    static_cast<    \
  |  |  929|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   441k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  1.81M|{
 5396|  1.81M|    detail::check_scan_arg_types<Args...>();
 5397|  1.81M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.81M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  2.30M|{
 5135|  2.30M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.30M|                  "Scan argument types must be default constructible");
 5137|  2.30M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.30M|                  "Scan argument types must be Destructible");
 5139|  2.30M|    static_assert(
 5140|  2.30M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.30M|        "Scan argument types must not be references");
 5142|  2.30M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  1.81M|    {
 5349|  1.81M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.81M|    {
 5360|  1.81M|        return {detail::make_arg<
 5361|  1.81M|            kind, Context,
 5362|  1.81M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.81M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.81M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  1.81M|{
 5170|  1.81M|    return make_value<Context>(value).ref_value;
 5171|  1.81M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  2.00M|{
 5120|  2.00M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.00M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.00M|                                  needs_context_tag>) {
 5124|  2.00M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.00M|    }
 5126|  2.00M|    else {
 5127|  2.00M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.00M|            value, context_tag<Context>{}));
 5129|  2.00M|    }
 5130|  2.00M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  2.00M|    {                                                                        \
 4959|  2.00M|        return val;                                                          \
 4960|  2.00M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  2.30M|{
 5089|  2.30M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.30M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.30M|    constexpr bool scannable_char =
 5093|  2.30M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.30M|    static_assert(scannable_char,
 5095|  2.30M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.30M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.30M|    constexpr bool scannable_const =
 5099|  2.30M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.30M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.30M|    constexpr bool scannable_disabled =
 5103|  2.30M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.30M|    static_assert(scannable_disabled,
 5105|  2.30M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.30M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.30M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.30M|    static_assert(
 5110|  2.30M|        scannable,
 5111|  2.30M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.30M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.30M|    return arg_value{arg};
 5115|  2.30M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  2.30M|    {
 4902|  2.30M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   883k|    {
 7975|   883k|        return m_str;
 7976|   883k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.81M|    {
 5426|  1.81M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  1.81M|    {
 5379|  1.81M|        return m_argptrs;
 5380|  1.81M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   883k|{
 8820|   883k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   883k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.9k, False: 836k]
  |  |  ------------------
  ------------------
 8821|  46.9k|        return unexpected(result.error());
 8822|  46.9k|    }
 8823|   836k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   836k|    static_cast<    \
  |  |  929|   836k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   836k|    static_cast<    \
  |  |  929|   836k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   883k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  50.9k|    {
 1476|  50.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  50.9k|    {
  447|  50.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   982k|    {
 1177|   982k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   931k|    {
 5830|   931k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|  1.99M|    {
 5616|  1.99M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   931k|    {
 1430|   931k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   931k|    {
  437|   931k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  1.81M|    {
 5374|  1.81M|        return m_args;
 5375|  1.81M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   883k|    {
 7971|   883k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   982k|    {
 1598|   982k|        return has_value();
 1599|   982k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.91M|    {
  485|  1.91M|        return m_has_value;
  486|  1.91M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   931k|    {
 1673|   931k|        return &value();
 1674|   931k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   931k|    {
 1627|   931k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   931k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   931k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   931k|        return this->get_value();
 1629|   931k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   931k|    {
  451|   931k|        return m_value;
  452|   931k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   441k|{
 8934|   441k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   441k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   441k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   441k|    static_cast<    \
  |  |  929|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   441k|    static_cast<    \
  |  |  929|   441k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   441k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  98.7k|{
 8973|  98.7k|    T value;
 8974|  98.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  98.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  98.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  98.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  98.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 94.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.91k|    }                                                  \
  |  |  |  | 3671|  98.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  94.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  94.8k|    static_cast<    \
  |  |  929|  94.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  94.8k|    static_cast<    \
  |  |  929|  94.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  98.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|   194k|{
 5155|   194k|    check_scan_arg_types<T>();
 5156|       |
 5157|   194k|    basic_scan_arg<Context> arg;
 5158|   194k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   194k|    arg.m_value = make_value<Context>(value);
 5160|   194k|    return arg;
 5161|   194k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   446k|{
 8867|   446k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   446k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   446k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   446k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|  1.83M|{
 5396|  1.83M|    detail::check_scan_arg_types<Args...>();
 5397|  1.83M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.83M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  2.32M|{
 5135|  2.32M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.32M|                  "Scan argument types must be default constructible");
 5137|  2.32M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.32M|                  "Scan argument types must be Destructible");
 5139|  2.32M|    static_assert(
 5140|  2.32M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.32M|        "Scan argument types must not be references");
 5142|  2.32M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|  1.83M|    {
 5349|  1.83M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.83M|    {
 5360|  1.83M|        return {detail::make_arg<
 5361|  1.83M|            kind, Context,
 5362|  1.83M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.83M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.83M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|  1.83M|{
 5170|  1.83M|    return make_value<Context>(value).ref_value;
 5171|  1.83M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|  2.03M|{
 5120|  2.03M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.03M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.03M|                                  needs_context_tag>) {
 5124|  2.03M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.03M|    }
 5126|  2.03M|    else {
 5127|  2.03M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.03M|            value, context_tag<Context>{}));
 5129|  2.03M|    }
 5130|  2.03M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|  2.03M|    {                                                                        \
 4959|  2.03M|        return val;                                                          \
 4960|  2.03M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  2.32M|{
 5089|  2.32M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.32M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.32M|    constexpr bool scannable_char =
 5093|  2.32M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.32M|    static_assert(scannable_char,
 5095|  2.32M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.32M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.32M|    constexpr bool scannable_const =
 5099|  2.32M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.32M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.32M|    constexpr bool scannable_disabled =
 5103|  2.32M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.32M|    static_assert(scannable_disabled,
 5105|  2.32M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.32M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.32M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.32M|    static_assert(
 5110|  2.32M|        scannable,
 5111|  2.32M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.32M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.32M|    return arg_value{arg};
 5115|  2.32M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  2.32M|    {
 4902|  2.32M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   893k|    {
 7975|   893k|        return m_str;
 7976|   893k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.83M|    {
 5426|  1.83M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|  1.83M|    {
 5379|  1.83M|        return m_argptrs;
 5380|  1.83M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   893k|{
 8820|   893k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   893k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.9k, False: 846k]
  |  |  ------------------
  ------------------
 8821|  46.9k|        return unexpected(result.error());
 8822|  46.9k|    }
 8823|   846k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   846k|    static_cast<    \
  |  |  929|   846k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   846k|    static_cast<    \
  |  |  929|   846k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   893k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  50.9k|    {
 1476|  50.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  50.9k|    {
  447|  50.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   994k|    {
 1177|   994k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   943k|    {
 5830|   943k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|  2.02M|    {
 5616|  2.02M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   943k|    {
 1430|   943k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   943k|    {
  437|   943k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|  1.83M|    {
 5374|  1.83M|        return m_args;
 5375|  1.83M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   893k|    {
 7971|   893k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   994k|    {
 1598|   994k|        return has_value();
 1599|   994k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.93M|    {
  485|  1.93M|        return m_has_value;
  486|  1.93M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   943k|    {
 1673|   943k|        return &value();
 1674|   943k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   943k|    {
 1627|   943k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   943k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   943k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   943k|        return this->get_value();
 1629|   943k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   943k|    {
  451|   943k|        return m_value;
  452|   943k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   446k|{
 8934|   446k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   446k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   446k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   446k|    static_cast<    \
  |  |  929|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   446k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|   100k|{
 8973|   100k|    T value;
 8974|   100k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   100k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 96.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.91k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  96.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  96.5k|    static_cast<    \
  |  |  929|  96.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  96.5k|    static_cast<    \
  |  |  929|  96.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   100k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|   197k|{
 5155|   197k|    check_scan_arg_types<T>();
 5156|       |
 5157|   197k|    basic_scan_arg<Context> arg;
 5158|   197k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   197k|    arg.m_value = make_value<Context>(value);
 5160|   197k|    return arg;
 5161|   197k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   152k|    {
 2724|   152k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   152k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   152k|    {
 2705|   152k|        return decay_copy(t.begin());
 2706|   152k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|   134M|{
 1949|   134M|    return SCN_FWD(t);
  ------------------
  |  |  930|   134M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   134M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.03M|    {
 2781|  6.03M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.03M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.03M|    {
 2763|  6.03M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.03M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   432k|{
 8867|   432k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   432k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   432k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   432k|    static_cast<    \
  |  |  929|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   432k|    static_cast<    \
  |  |  929|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   432k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.36M|{
 8654|  1.36M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.36M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  1.36M|{
 8591|  1.36M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.36M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.36M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.4k, False: 1.29M]
  |  |  ------------------
  ------------------
 8595|  70.4k|        return unexpected(result.error());
 8596|  70.4k|    }
 8597|  1.29M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.36M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  3.01M|{
 4720|  3.01M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  3.01M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  3.01M|                  "\n"
 4724|  3.01M|                  "Unsupported range type given as input to a scanning "
 4725|  3.01M|                  "function.\n"
 4726|  3.01M|                  "A range needs to have a character type (value type) "
 4727|  3.01M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  3.01M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  3.01M|                  "to be included.\n"
 4730|  3.01M|                  "See the scnlib documentation for more details.");
 4731|  3.01M|    static_assert(
 4732|  3.01M|        !std::is_same_v<T, custom_char_traits>,
 4733|  3.01M|        "\n"
 4734|  3.01M|        "Unsupported range type given as input to a scanning "
 4735|  3.01M|        "function.\n"
 4736|  3.01M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  3.01M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  3.01M|        "not supported.");
 4739|  3.01M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  3.01M|                  "\n"
 4741|  3.01M|                  "Unsupported range type given as input to a scanning "
 4742|  3.01M|                  "function.\n"
 4743|  3.01M|                  "file_marker_found cannot be used as an "
 4744|  3.01M|                  "source range type to scn::scan.\n"
 4745|  3.01M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  3.01M|                  "and do not provide an explicit source range, "
 4747|  3.01M|                  "or use scn::scan with a FILE* directly.");
 4748|  3.01M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  3.01M|                  "\n"
 4750|  3.01M|                  "Unsupported range type given as input to a scanning "
 4751|  3.01M|                  "function.\n"
 4752|  3.01M|                  "In order to be scannable, a range needs to satisfy "
 4753|  3.01M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  3.01M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  3.01M|                  "\n"
 4756|  3.01M|                  "Unsupported range type given as input to a scanning "
 4757|  3.01M|                  "function.\n"
 4758|  3.01M|                  "A range needs to model forward_range and have a valid "
 4759|  3.01M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  3.01M|                  "Examples of scannable ranges are std::string, "
 4761|  3.01M|                  "std::string_view, "
 4762|  3.01M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  3.01M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  3.01M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  3.01M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  3.01M|{
 4690|  3.01M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  3.01M|        return file_marker_found{};
 4692|  3.01M|    }
 4693|  3.01M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  3.01M|        if constexpr (ranges::range<Range>) {
 4695|  3.01M|            return insufficient_range{};
 4696|  3.01M|        }
 4697|  3.01M|        else {
 4698|  3.01M|            return invalid_input_range{};
 4699|  3.01M|        }
 4700|  3.01M|    }
 4701|  3.01M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  3.01M|        return invalid_char_type{};
 4703|  3.01M|    }
 4704|  3.01M|    else {
 4705|  3.01M|        return make_forward_scan_buffer(r);
 4706|  3.01M|    }
 4707|  3.01M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  3.01M|{
 4524|  3.01M|    return basic_scan_forward_buffer_impl(range);
 4525|  3.01M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  3.01M|    {
 4411|  3.01M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  3.01M|    {
 4382|  3.01M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  3.01M|    {
 4151|  3.01M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  3.01M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.87M|    {
 2724|  5.87M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.87M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.87M|    {
 2705|  5.87M|        return decay_copy(t.begin());
 2706|  5.87M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  8.74M|    {
 3330|  8.74M|        return m_iterator;
 3331|  8.74M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  39.0M|    {
 4415|  39.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 456k, False: 38.6M]
  ------------------
 4416|   456k|            return false;
 4417|   456k|        }
 4418|  38.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  38.6M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  38.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  38.6M|        }
 4421|  38.6M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 35.6M, False: 2.99M]
  ------------------
 4422|  35.6M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  35.6M|                                          this->m_current_view.begin(),
 4424|  35.6M|                                          this->m_current_view.end());
 4425|  35.6M|        }
 4426|  38.6M|        m_latest = *m_cursor;
 4427|  38.6M|        ++m_cursor;
 4428|  38.6M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  38.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  38.6M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  38.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  38.6M|        }
 4432|  38.6M|        return true;
 4433|  38.6M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   116M|    {
 2781|   116M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   116M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   116M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   116M|    {
 2763|   116M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   116M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   116M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|   119M|    {
 3334|   119M|        return m_sentinel;
 3335|   119M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  3.01M|    {
 4071|  3.01M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  3.01M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  3.01M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   152k|    {
 1476|   152k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   152k|    {
  447|   152k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.01M|    {
 1177|  3.01M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  2.86M|{
 5923|  2.86M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.86M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.86M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.86M|    }
 5927|  2.86M|    else {
 5928|  2.86M|        auto it = ranges::begin(source);
 5929|  2.86M|        while (n > 0) {
 5930|  2.86M|            --n;
 5931|  2.86M|            ++it;
 5932|  2.86M|        }
 5933|  2.86M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.86M|    }
 5935|  2.86M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.86M|    {
 2724|  2.86M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.86M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.86M|    {
 2705|  2.86M|        return decay_copy(t.begin());
 2706|  2.86M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  2.86M|{
 5910|  2.86M|    return ranges::end(source);
 5911|  2.86M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.86M|    {
 2781|  2.86M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.86M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.86M|    {
 2763|  2.86M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.86M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  2.86M|    {
 1430|  2.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  2.86M|    {
  437|  2.86M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   864k|    {
 7975|   864k|        return m_str;
 7976|   864k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   864k|{
 8820|   864k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.9k, False: 817k]
  |  |  ------------------
  ------------------
 8821|  46.9k|        return unexpected(result.error());
 8822|  46.9k|    }
 8823|   817k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   817k|    static_cast<    \
  |  |  929|   817k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   817k|    static_cast<    \
  |  |  929|   817k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   864k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  3.01M|    {
 1598|  3.01M|        return has_value();
 1599|  3.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.03M|    {
  485|  6.03M|        return m_has_value;
  486|  6.03M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   152k|    {
 1604|   152k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   152k|        return this->get_unexpected().error();
 1606|   152k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   152k|    {
  468|   152k|        return m_unexpected;
  469|   152k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  50.9k|    {
 1476|  50.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  50.9k|    {
  447|  50.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   951k|    {
 1177|   951k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  2.59M|    {
 1653|  2.59M|        return value();
 1654|  2.59M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  2.86M|    {
 1627|  2.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.86M|        return this->get_value();
 1629|  2.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.86M|    {
  451|  2.86M|        return m_value;
  452|  2.86M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   900k|    {
 5830|   900k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  2.86M|    {
 5681|  2.86M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   900k|    {
 1430|   900k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   900k|    {
  437|   900k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  5.87M|    {
 3316|  5.87M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   864k|    {
 7971|   864k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   951k|    {
 1598|   951k|        return has_value();
 1599|   951k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.85M|    {
  485|  1.85M|        return m_has_value;
  486|  1.85M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   900k|    {
 1673|   900k|        return &value();
 1674|   900k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   900k|    {
 1627|   900k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   900k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   900k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   900k|        return this->get_value();
 1629|   900k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   900k|    {
  451|   900k|        return m_value;
  452|   900k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  2.86M|    {
 5698|  2.86M|        return ranges::begin(m_range);
 5699|  2.86M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   432k|{
 8934|   432k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   432k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   432k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   432k|    static_cast<    \
  |  |  929|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   432k|    static_cast<    \
  |  |  929|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   432k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.36M|{
 8672|  1.36M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.36M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  1.36M|{
 8607|  1.36M|#if !SCN_DISABLE_LOCALE
 8608|  1.36M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.36M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.36M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.36M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.36M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.4k, False: 1.29M]
  |  |  ------------------
  ------------------
 8615|  70.4k|        return unexpected(result.error());
 8616|  70.4k|    }
 8617|  1.29M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.36M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  87.2k|{
 8973|  87.2k|    T value;
 8974|  87.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  87.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  87.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  87.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  87.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  87.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 83.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.91k|    }                                                  \
  |  |  |  | 3671|  87.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  83.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.2k|    static_cast<    \
  |  |  929|  83.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.2k|    static_cast<    \
  |  |  929|  83.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  87.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   280k|{
 8685|   280k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   280k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   280k|{
 8631|   280k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   280k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   280k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 268k]
  |  |  ------------------
  ------------------
 8635|  11.7k|        return unexpected(result.error());
 8636|  11.7k|    }
 8637|   268k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   280k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   268k|    {
 1663|   268k|        return std::move(value());
 1664|   268k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   465k|{
 8867|   465k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   465k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   465k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   465k|    static_cast<    \
  |  |  929|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   465k|    static_cast<    \
  |  |  929|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   465k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   930k|    {
 7975|   930k|        return m_str;
 7976|   930k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   930k|{
 8820|   930k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.9k, False: 883k]
  |  |  ------------------
  ------------------
 8821|  46.9k|        return unexpected(result.error());
 8822|  46.9k|    }
 8823|   883k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   883k|    static_cast<    \
  |  |  929|   883k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   883k|    static_cast<    \
  |  |  929|   883k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   930k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  50.9k|    {
 1476|  50.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  50.9k|    {
  447|  50.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.02M|    {
 1177|  1.02M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   975k|    {
 5830|   975k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   975k|    {
 1430|   975k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   975k|    {
  437|   975k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   930k|    {
 7971|   930k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|  1.02M|    {
 1598|  1.02M|        return has_value();
 1599|  1.02M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.00M|    {
  485|  2.00M|        return m_has_value;
  486|  2.00M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   975k|    {
 1673|   975k|        return &value();
 1674|   975k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   975k|    {
 1627|   975k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   975k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   975k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   975k|        return this->get_value();
 1629|   975k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   975k|    {
  451|   975k|        return m_value;
  452|   975k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   465k|{
 8934|   465k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   465k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   465k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   465k|    static_cast<    \
  |  |  929|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   465k|    static_cast<    \
  |  |  929|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   465k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  96.0k|{
 8973|  96.0k|    T value;
 8974|  96.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  96.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  96.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  96.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  96.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 92.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.91k|    }                                                  \
  |  |  |  | 3671|  96.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  92.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  92.1k|    static_cast<    \
  |  |  929|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  92.1k|    static_cast<    \
  |  |  929|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  96.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   470k|{
 8867|   470k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   470k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   470k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   470k|    static_cast<    \
  |  |  929|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   470k|    static_cast<    \
  |  |  929|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   470k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   940k|    {
 7975|   940k|        return m_str;
 7976|   940k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   940k|{
 8820|   940k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   940k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.9k, False: 893k]
  |  |  ------------------
  ------------------
 8821|  46.9k|        return unexpected(result.error());
 8822|  46.9k|    }
 8823|   893k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   893k|    static_cast<    \
  |  |  929|   893k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   893k|    static_cast<    \
  |  |  929|   893k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   940k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  50.9k|    {
 1476|  50.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  50.9k|    {
  447|  50.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.03M|    {
 1177|  1.03M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   986k|    {
 5830|   986k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   986k|    {
 1430|   986k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   986k|    {
  437|   986k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   940k|    {
 7971|   940k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|  1.03M|    {
 1598|  1.03M|        return has_value();
 1599|  1.03M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.02M|    {
  485|  2.02M|        return m_has_value;
  486|  2.02M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   986k|    {
 1673|   986k|        return &value();
 1674|   986k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   986k|    {
 1627|   986k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   986k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   986k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   986k|        return this->get_value();
 1629|   986k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   986k|    {
  451|   986k|        return m_value;
  452|   986k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   470k|{
 8934|   470k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   470k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   470k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   470k|    static_cast<    \
  |  |  929|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   470k|    static_cast<    \
  |  |  929|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   470k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  97.0k|{
 8973|  97.0k|    T value;
 8974|  97.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  97.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  97.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.91k, False: 93.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.91k|    }                                                  \
  |  |  |  | 3671|  97.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  93.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  93.1k|    static_cast<    \
  |  |  929|  93.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  93.1k|    static_cast<    \
  |  |  929|  93.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  97.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   313k|    {
 2724|   313k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   313k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   313k|    {
 2705|   313k|        return decay_copy(t.begin());
 2706|   313k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.53M|{
 1949|  2.53M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.53M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   889k|    {
 2781|   889k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   889k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   889k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   889k|    {
 2763|   889k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   889k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   889k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   269k|{
 5396|   269k|    detail::check_scan_arg_types<Args...>();
 5397|   269k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   269k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   269k|    {
 5349|   269k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   269k|    {
 5360|   269k|        return {detail::make_arg<
 5361|   269k|            kind, Context,
 5362|   269k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   269k|                                 typename Context::char_type>::value>(args)...};
 5364|   269k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   269k|{
 5170|   269k|    return make_value<Context>(value).ref_value;
 5171|   269k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   292k|{
 5120|   292k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   292k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   292k|                                  needs_context_tag>) {
 5124|   292k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   292k|    }
 5126|   292k|    else {
 5127|   292k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   292k|            value, context_tag<Context>{}));
 5129|   292k|    }
 5130|   292k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   292k|    {                                                                        \
 4959|   292k|        return val;                                                          \
 4960|   292k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   202k|{
 8591|   202k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   202k|    auto result = vscan_impl(buffer, format, args);
 8594|   202k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 61.6k]
  |  |  ------------------
  ------------------
 8595|   140k|        return unexpected(result.error());
 8596|   140k|    }
 8597|  61.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   202k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   440k|{
 4720|   440k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   440k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   440k|                  "\n"
 4724|   440k|                  "Unsupported range type given as input to a scanning "
 4725|   440k|                  "function.\n"
 4726|   440k|                  "A range needs to have a character type (value type) "
 4727|   440k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   440k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   440k|                  "to be included.\n"
 4730|   440k|                  "See the scnlib documentation for more details.");
 4731|   440k|    static_assert(
 4732|   440k|        !std::is_same_v<T, custom_char_traits>,
 4733|   440k|        "\n"
 4734|   440k|        "Unsupported range type given as input to a scanning "
 4735|   440k|        "function.\n"
 4736|   440k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   440k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   440k|        "not supported.");
 4739|   440k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   440k|                  "\n"
 4741|   440k|                  "Unsupported range type given as input to a scanning "
 4742|   440k|                  "function.\n"
 4743|   440k|                  "file_marker_found cannot be used as an "
 4744|   440k|                  "source range type to scn::scan.\n"
 4745|   440k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   440k|                  "and do not provide an explicit source range, "
 4747|   440k|                  "or use scn::scan with a FILE* directly.");
 4748|   440k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   440k|                  "\n"
 4750|   440k|                  "Unsupported range type given as input to a scanning "
 4751|   440k|                  "function.\n"
 4752|   440k|                  "In order to be scannable, a range needs to satisfy "
 4753|   440k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   440k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   440k|                  "\n"
 4756|   440k|                  "Unsupported range type given as input to a scanning "
 4757|   440k|                  "function.\n"
 4758|   440k|                  "A range needs to model forward_range and have a valid "
 4759|   440k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   440k|                  "Examples of scannable ranges are std::string, "
 4761|   440k|                  "std::string_view, "
 4762|   440k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   440k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   440k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   440k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   440k|{
 4659|   440k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   440k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   440k|    }
 4662|   440k|    else {
 4663|   440k|        return invalid_char_type{};
 4664|   440k|    }
 4665|   440k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   440k|    {
 2855|   440k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   440k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   440k|    {
 2836|   440k|        return t.data();
 2837|   440k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   440k|    {
 3231|   440k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 771, False: 440k]
  ------------------
 3232|   440k|                   ? nullptr
 3233|   440k|                   : std::addressof(*ranges::begin(derived()));
 3234|   440k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   440k|    {
 3005|   440k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   440k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   440k|    {
 2978|   440k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   440k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   739k|    {
 3339|   739k|        return m_iterator == m_sentinel;
 3340|   739k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   881k|    {
 3185|   881k|        return static_cast<const D&>(*this);
 3186|   881k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   575k|    {
 2724|   575k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   575k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   575k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   575k|    {
 2705|   575k|        return decay_copy(t.begin());
 2706|   575k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  12.7M|    {
 3330|  12.7M|        return m_iterator;
 3331|  12.7M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   440k|    {
 2930|   440k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   440k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   440k|    {
 2896|   440k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   440k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.86M|    {
 3346|  1.86M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.86M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   305k|    {
 1476|   305k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   305k|    {
  447|   305k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   440k|    {
 1177|   440k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   135k|{
 5923|   135k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   135k|                      ranges::iterator_t<SourceRange>>) {
 5925|   135k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   135k|    }
 5927|   135k|    else {
 5928|   135k|        auto it = ranges::begin(source);
 5929|   135k|        while (n > 0) {
 5930|   135k|            --n;
 5931|   135k|            ++it;
 5932|   135k|        }
 5933|   135k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   135k|    }
 5935|   135k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   623k|    {
 2724|   623k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   623k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   623k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   623k|    {
 2705|   623k|        return decay_copy(t.begin());
 2706|   623k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   135k|{
 5910|   135k|    return ranges::end(source);
 5911|   135k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   135k|    {
 2781|   135k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   135k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   135k|    {
 2763|   135k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   135k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  6.61M|    {
 3334|  6.61M|        return m_sentinel;
 3335|  6.61M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   135k|    {
 1430|   135k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   135k|    {
  437|   135k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   134k|    {
 7975|   134k|        return m_str;
 7976|   134k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   269k|    {
 5426|   269k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   269k|    {
 5379|   269k|        return m_argptrs;
 5380|   269k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   810k|    {
 5478|   810k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   134k|{
 8820|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.9k, False: 40.6k]
  |  |  ------------------
  ------------------
 8821|  93.9k|        return unexpected(result.error());
 8822|  93.9k|    }
 8823|  40.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   134k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   440k|    {
 1598|   440k|        return has_value();
 1599|   440k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   881k|    {
  485|   881k|        return m_has_value;
  486|   881k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   305k|    {
 1604|   305k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   305k|        return this->get_unexpected().error();
 1606|   305k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   305k|    {
  468|   305k|        return m_unexpected;
  469|   305k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   101k|    {
 1476|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   101k|    {
  447|   101k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   146k|    {
 1177|   146k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   123k|    {
 1653|   123k|        return value();
 1654|   123k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   135k|    {
 1627|   135k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   135k|        return this->get_value();
 1629|   135k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   135k|    {
  451|   135k|        return m_value;
  452|   135k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  44.6k|    {
 5830|  44.6k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   135k|    {
 5681|   135k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  44.6k|    {
 1430|  44.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  44.6k|    {
  437|  44.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   269k|    {
 5374|   269k|        return m_args;
 5375|   269k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  4.41M|    {
 3316|  4.41M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   810k|{
 7696|   810k|    return s;
 7697|   810k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   810k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   134k|    {
 7971|   134k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   146k|    {
 1598|   146k|        return has_value();
 1599|   146k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   191k|    {
  485|   191k|        return m_has_value;
  486|   191k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  44.6k|    {
 1673|  44.6k|        return &value();
 1674|  44.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  44.6k|    {
 1627|  44.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  44.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  44.6k|        return this->get_value();
 1629|  44.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  44.6k|    {
  451|  44.6k|        return m_value;
  452|  44.6k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   135k|    {
 5698|   135k|        return ranges::begin(m_range);
 5699|   135k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   202k|{
 8607|   202k|#if !SCN_DISABLE_LOCALE
 8608|   202k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   202k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   202k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   202k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   202k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 61.6k]
  |  |  ------------------
  ------------------
 8615|   140k|        return unexpected(result.error());
 8616|   140k|    }
 8617|  61.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   202k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  23.6k|{
 5155|  23.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  23.6k|    basic_scan_arg<Context> arg;
 5158|  23.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  23.6k|    arg.m_value = make_value<Context>(value);
 5160|  23.6k|    return arg;
 5161|  23.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   881k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  35.6k|{
 8631|  35.6k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  35.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  35.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 12.2k]
  |  |  ------------------
  ------------------
 8635|  23.4k|        return unexpected(result.error());
 8636|  23.4k|    }
 8637|  12.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  35.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  12.2k|    {
 1663|  12.2k|        return std::move(value());
 1664|  12.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   269k|{
 5396|   269k|    detail::check_scan_arg_types<Args...>();
 5397|   269k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   269k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   269k|    {
 5349|   269k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   269k|    {
 5360|   269k|        return {detail::make_arg<
 5361|   269k|            kind, Context,
 5362|   269k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   269k|                                 typename Context::char_type>::value>(args)...};
 5364|   269k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   269k|{
 5170|   269k|    return make_value<Context>(value).ref_value;
 5171|   269k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   293k|{
 5120|   293k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   293k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   293k|                                  needs_context_tag>) {
 5124|   293k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   293k|    }
 5126|   293k|    else {
 5127|   293k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   293k|            value, context_tag<Context>{}));
 5129|   293k|    }
 5130|   293k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   293k|    {                                                                        \
 4959|   293k|        return val;                                                          \
 4960|   293k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   134k|    {
 7975|   134k|        return m_str;
 7976|   134k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   269k|    {
 5426|   269k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   269k|    {
 5379|   269k|        return m_argptrs;
 5380|   269k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   134k|{
 8820|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.9k, False: 40.9k]
  |  |  ------------------
  ------------------
 8821|  93.9k|        return unexpected(result.error());
 8822|  93.9k|    }
 8823|  40.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.9k|    static_cast<    \
  |  |  929|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.9k|    static_cast<    \
  |  |  929|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   134k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   101k|    {
 1476|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   101k|    {
  447|   101k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   146k|    {
 1177|   146k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  45.0k|    {
 5830|  45.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  45.0k|    {
 1430|  45.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  45.0k|    {
  437|  45.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   269k|    {
 5374|   269k|        return m_args;
 5375|   269k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   134k|    {
 7971|   134k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   146k|    {
 1598|   146k|        return has_value();
 1599|   146k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   191k|    {
  485|   191k|        return m_has_value;
  486|   191k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  45.0k|    {
 1673|  45.0k|        return &value();
 1674|  45.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  45.0k|    {
 1627|  45.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  45.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  45.0k|        return this->get_value();
 1629|  45.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  45.0k|    {
  451|  45.0k|        return m_value;
  452|  45.0k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  23.7k|{
 5155|  23.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  23.7k|    basic_scan_arg<Context> arg;
 5158|  23.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  23.7k|    arg.m_value = make_value<Context>(value);
 5160|  23.7k|    return arg;
 5161|  23.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   271k|{
 5396|   271k|    detail::check_scan_arg_types<Args...>();
 5397|   271k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   271k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   271k|    {
 5349|   271k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   271k|    {
 5360|   271k|        return {detail::make_arg<
 5361|   271k|            kind, Context,
 5362|   271k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   271k|                                 typename Context::char_type>::value>(args)...};
 5364|   271k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   271k|{
 5170|   271k|    return make_value<Context>(value).ref_value;
 5171|   271k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   295k|{
 5120|   295k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   295k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   295k|                                  needs_context_tag>) {
 5124|   295k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   295k|    }
 5126|   295k|    else {
 5127|   295k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   295k|            value, context_tag<Context>{}));
 5129|   295k|    }
 5130|   295k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   295k|    {                                                                        \
 4959|   295k|        return val;                                                          \
 4960|   295k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   135k|    {
 7975|   135k|        return m_str;
 7976|   135k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   271k|    {
 5426|   271k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   271k|    {
 5379|   271k|        return m_argptrs;
 5380|   271k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   135k|{
 8820|   135k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.9k, False: 41.6k]
  |  |  ------------------
  ------------------
 8821|  93.9k|        return unexpected(result.error());
 8822|  93.9k|    }
 8823|  41.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.6k|    static_cast<    \
  |  |  929|  41.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.6k|    static_cast<    \
  |  |  929|  41.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   135k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   101k|    {
 1476|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   101k|    {
  447|   101k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   147k|    {
 1177|   147k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  45.7k|    {
 5830|  45.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  45.7k|    {
 1430|  45.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  45.7k|    {
  437|  45.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   271k|    {
 5374|   271k|        return m_args;
 5375|   271k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   135k|    {
 7971|   135k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   147k|    {
 1598|   147k|        return has_value();
 1599|   147k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   193k|    {
  485|   193k|        return m_has_value;
  486|   193k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  45.7k|    {
 1673|  45.7k|        return &value();
 1674|  45.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  45.7k|    {
 1627|  45.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  45.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  45.7k|        return this->get_value();
 1629|  45.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  45.7k|    {
  451|  45.7k|        return m_value;
  452|  45.7k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  23.9k|{
 5155|  23.9k|    check_scan_arg_types<T>();
 5156|       |
 5157|  23.9k|    basic_scan_arg<Context> arg;
 5158|  23.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  23.9k|    arg.m_value = make_value<Context>(value);
 5160|  23.9k|    return arg;
 5161|  23.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   305k|    {
 2724|   305k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   305k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   305k|    {
 2705|   305k|        return decay_copy(t.begin());
 2706|   305k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  7.67M|{
 1949|  7.67M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  7.67M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   881k|    {
 2781|   881k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   881k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   881k|    {
 2763|   881k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   881k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   202k|{
 8591|   202k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   202k|    auto result = vscan_impl(buffer, format, args);
 8594|   202k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 61.4k]
  |  |  ------------------
  ------------------
 8595|   140k|        return unexpected(result.error());
 8596|   140k|    }
 8597|  61.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   202k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   440k|{
 4720|   440k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   440k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   440k|                  "\n"
 4724|   440k|                  "Unsupported range type given as input to a scanning "
 4725|   440k|                  "function.\n"
 4726|   440k|                  "A range needs to have a character type (value type) "
 4727|   440k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   440k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   440k|                  "to be included.\n"
 4730|   440k|                  "See the scnlib documentation for more details.");
 4731|   440k|    static_assert(
 4732|   440k|        !std::is_same_v<T, custom_char_traits>,
 4733|   440k|        "\n"
 4734|   440k|        "Unsupported range type given as input to a scanning "
 4735|   440k|        "function.\n"
 4736|   440k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   440k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   440k|        "not supported.");
 4739|   440k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   440k|                  "\n"
 4741|   440k|                  "Unsupported range type given as input to a scanning "
 4742|   440k|                  "function.\n"
 4743|   440k|                  "file_marker_found cannot be used as an "
 4744|   440k|                  "source range type to scn::scan.\n"
 4745|   440k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   440k|                  "and do not provide an explicit source range, "
 4747|   440k|                  "or use scn::scan with a FILE* directly.");
 4748|   440k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   440k|                  "\n"
 4750|   440k|                  "Unsupported range type given as input to a scanning "
 4751|   440k|                  "function.\n"
 4752|   440k|                  "In order to be scannable, a range needs to satisfy "
 4753|   440k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   440k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   440k|                  "\n"
 4756|   440k|                  "Unsupported range type given as input to a scanning "
 4757|   440k|                  "function.\n"
 4758|   440k|                  "A range needs to model forward_range and have a valid "
 4759|   440k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   440k|                  "Examples of scannable ranges are std::string, "
 4761|   440k|                  "std::string_view, "
 4762|   440k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   440k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   440k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   440k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   440k|{
 4690|   440k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   440k|        return file_marker_found{};
 4692|   440k|    }
 4693|   440k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   440k|        if constexpr (ranges::range<Range>) {
 4695|   440k|            return insufficient_range{};
 4696|   440k|        }
 4697|   440k|        else {
 4698|   440k|            return invalid_input_range{};
 4699|   440k|        }
 4700|   440k|    }
 4701|   440k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   440k|        return invalid_char_type{};
 4703|   440k|    }
 4704|   440k|    else {
 4705|   440k|        return make_forward_scan_buffer(r);
 4706|   440k|    }
 4707|   440k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   440k|{
 4524|   440k|    return basic_scan_forward_buffer_impl(range);
 4525|   440k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   440k|    {
 4411|   440k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   440k|    {
 4382|   440k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   440k|    {
 4151|   440k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   440k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   575k|    {
 2724|   575k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   575k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   575k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   575k|    {
 2705|   575k|        return decay_copy(t.begin());
 2706|   575k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   710k|    {
 3330|   710k|        return m_iterator;
 3331|   710k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  1.99M|    {
 4415|  1.99M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 171k, False: 1.82M]
  ------------------
 4416|   171k|            return false;
 4417|   171k|        }
 4418|  1.82M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.82M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.82M|        }
 4421|  1.82M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.38M, False: 439k]
  ------------------
 4422|  1.38M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.38M|                                          this->m_current_view.begin(),
 4424|  1.38M|                                          this->m_current_view.end());
 4425|  1.38M|        }
 4426|  1.82M|        m_latest = *m_cursor;
 4427|  1.82M|        ++m_cursor;
 4428|  1.82M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.82M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.82M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.82M|        }
 4432|  1.82M|        return true;
 4433|  1.82M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.64M|    {
 2781|  5.64M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.64M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.64M|    {
 2763|  5.64M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.64M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  5.77M|    {
 3334|  5.77M|        return m_sentinel;
 3335|  5.77M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   440k|    {
 4071|   440k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   440k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   305k|    {
 1476|   305k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   305k|    {
  447|   305k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   440k|    {
 1177|   440k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   135k|{
 5923|   135k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   135k|                      ranges::iterator_t<SourceRange>>) {
 5925|   135k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   135k|    }
 5927|   135k|    else {
 5928|   135k|        auto it = ranges::begin(source);
 5929|   135k|        while (n > 0) {
 5930|   135k|            --n;
 5931|   135k|            ++it;
 5932|   135k|        }
 5933|   135k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   135k|    }
 5935|   135k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   135k|    {
 2724|   135k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   135k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   135k|    {
 2705|   135k|        return decay_copy(t.begin());
 2706|   135k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   135k|{
 5910|   135k|    return ranges::end(source);
 5911|   135k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   135k|    {
 2781|   135k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   135k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   135k|    {
 2763|   135k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   135k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   135k|    {
 1430|   135k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   135k|    {
  437|   135k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   134k|    {
 7975|   134k|        return m_str;
 7976|   134k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   134k|{
 8820|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.9k, False: 40.5k]
  |  |  ------------------
  ------------------
 8821|  93.9k|        return unexpected(result.error());
 8822|  93.9k|    }
 8823|  40.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.5k|    static_cast<    \
  |  |  929|  40.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.5k|    static_cast<    \
  |  |  929|  40.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   134k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   440k|    {
 1598|   440k|        return has_value();
 1599|   440k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   881k|    {
  485|   881k|        return m_has_value;
  486|   881k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   305k|    {
 1604|   305k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   305k|        return this->get_unexpected().error();
 1606|   305k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   305k|    {
  468|   305k|        return m_unexpected;
  469|   305k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   101k|    {
 1476|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   101k|    {
  447|   101k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   146k|    {
 1177|   146k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   122k|    {
 1653|   122k|        return value();
 1654|   122k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   135k|    {
 1627|   135k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   135k|        return this->get_value();
 1629|   135k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   135k|    {
  451|   135k|        return m_value;
  452|   135k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  44.5k|    {
 5830|  44.5k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   135k|    {
 5681|   135k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  44.5k|    {
 1430|  44.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  44.5k|    {
  437|  44.5k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   575k|    {
 3316|   575k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   134k|    {
 7971|   134k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   146k|    {
 1598|   146k|        return has_value();
 1599|   146k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   190k|    {
  485|   190k|        return m_has_value;
  486|   190k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  44.5k|    {
 1673|  44.5k|        return &value();
 1674|  44.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  44.5k|    {
 1627|  44.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  44.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  44.5k|        return this->get_value();
 1629|  44.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  44.5k|    {
  451|  44.5k|        return m_value;
  452|  44.5k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   135k|    {
 5698|   135k|        return ranges::begin(m_range);
 5699|   135k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   202k|{
 8607|   202k|#if !SCN_DISABLE_LOCALE
 8608|   202k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   202k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   202k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   202k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   202k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140k, False: 61.4k]
  |  |  ------------------
  ------------------
 8615|   140k|        return unexpected(result.error());
 8616|   140k|    }
 8617|  61.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   202k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  35.6k|{
 8631|  35.6k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  35.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  35.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 12.1k]
  |  |  ------------------
  ------------------
 8635|  23.4k|        return unexpected(result.error());
 8636|  23.4k|    }
 8637|  12.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  35.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  12.1k|    {
 1663|  12.1k|        return std::move(value());
 1664|  12.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   134k|    {
 7975|   134k|        return m_str;
 7976|   134k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   134k|{
 8820|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.9k, False: 40.8k]
  |  |  ------------------
  ------------------
 8821|  93.9k|        return unexpected(result.error());
 8822|  93.9k|    }
 8823|  40.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   134k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   101k|    {
 1476|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   101k|    {
  447|   101k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   146k|    {
 1177|   146k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  44.9k|    {
 5830|  44.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  44.9k|    {
 1430|  44.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  44.9k|    {
  437|  44.9k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   134k|    {
 7971|   134k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   146k|    {
 1598|   146k|        return has_value();
 1599|   146k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   191k|    {
  485|   191k|        return m_has_value;
  486|   191k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  44.9k|    {
 1673|  44.9k|        return &value();
 1674|  44.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  44.9k|    {
 1627|  44.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  44.9k|        return this->get_value();
 1629|  44.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  44.9k|    {
  451|  44.9k|        return m_value;
  452|  44.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   135k|    {
 7975|   135k|        return m_str;
 7976|   135k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   135k|{
 8820|   135k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.9k, False: 41.5k]
  |  |  ------------------
  ------------------
 8821|  93.9k|        return unexpected(result.error());
 8822|  93.9k|    }
 8823|  41.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   135k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   101k|    {
 1476|   101k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   101k|    {
  447|   101k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   147k|    {
 1177|   147k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  45.6k|    {
 5830|  45.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  45.6k|    {
 1430|  45.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  45.6k|    {
  437|  45.6k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   135k|    {
 7971|   135k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   147k|    {
 1598|   147k|        return has_value();
 1599|   147k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   193k|    {
  485|   193k|        return m_has_value;
  486|   193k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  45.6k|    {
 1673|  45.6k|        return &value();
 1674|  45.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  45.6k|    {
 1627|  45.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  45.6k|        return this->get_value();
 1629|  45.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  45.6k|    {
  451|  45.6k|        return m_value;
  452|  45.6k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  7.34M|    {
 3568|  7.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  7.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  7.34M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  31.3M|    {
 3574|  31.3M|        return m_code == good;
 3575|  31.3M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   704k|    {
 3585|   704k|        return m_code;
 3586|   704k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   137M|    {
 3330|   137M|        return m_iterator;
 3331|   137M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  15.7M|    {
 3330|  15.7M|        return m_iterator;
 3331|  15.7M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  4.86M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|  1.34M|    {
 6272|  1.34M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.34M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|  1.34M|            m_specs.localized = true;
 6274|  1.34M|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|  1.34M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  3.52M|    {
 6303|  3.52M|        m_specs.type = type;
 6304|  3.52M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  4.86M|    {
 6376|  4.86M|        return static_cast<bool>(m_error);
 6377|  4.86M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   704k|{
 3609|   704k|    return a.code() == b;
 3610|   704k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   704k|{
 3613|   704k|    return !(a == b);
 3614|   704k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.34M|{
 7063|  1.34M|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.34M]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.34M]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.34M]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 1.34M]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.34M]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.34M]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.34M]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.34M]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 1.34M]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.34M]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.34M]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.34M]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.34M]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.34M]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 1.34M]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.34M]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   419k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 419k, False: 923k]
  ------------------
 7091|   877k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 458k, False: 884k]
  ------------------
 7092|  1.34M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 465k, False: 877k]
  ------------------
 7093|  1.34M|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 1.34M]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 1.34M]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.34M]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 1.34M]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.34M]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.34M]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.34M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.34M|            SCN_CLANG_POP
 7110|  1.34M|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.34M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  5.86M|    {
 2896|  5.86M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  5.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  5.86M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  5.86M|    {
 2930|  5.86M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  5.86M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  5.86M|    {
 2953|  5.86M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  5.86M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  5.86M|    {
 2962|  5.86M|        return fn::impl(std::forward<T>(t));
 2963|  5.86M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.40k|{
 3654|  1.40k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.40k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.43k|{
 3654|  2.43k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.43k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  46.2k|{
 3654|  46.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  46.2k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  4.86M|{
 7193|  4.86M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 3.52M, False: 1.34M]
  ------------------
 7194|  4.86M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 3.52M]
  ------------------
 7195|  3.52M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 3.52M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  4.86M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   882M|    {
 4195|   882M|        return m_end == nullptr;
 4196|   882M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  2.38M|{
 3715|  2.38M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  2.38M|                                          const CharT*, const CharT*>) {
 3717|  2.38M|        return {first, last};
 3718|  2.38M|    }
 3719|  2.38M|    else {
 3720|  2.38M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  2.38M|    }
 3722|  2.38M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  11.4M|    {
 4211|  11.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 11.4M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  11.4M|        return parent()->get_segment_starting_at(position());
 4217|  11.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   491M|    {
 4205|   491M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   491M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   491M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   491M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   491M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  11.4M|    {
 4101|  11.4M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  11.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.10M, False: 6.39M]
  |  |  ------------------
  ------------------
 4102|  11.4M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  5.10M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  5.10M|        }
 4105|  6.39M|        const auto start = pos - m_putback_buffer.size();
 4106|  6.39M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  6.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  6.39M|        return m_current_view.substr(start);
 4108|  6.39M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  7.99M|    {
 4200|  7.99M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  7.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  7.99M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  7.99M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  21.0M|    {
 4190|  21.0M|        return m_position;
 4191|  21.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  9.04M|    {
 4123|  9.04M|        return m_is_contiguous;
 4124|  9.04M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  46.0M|    {
 4195|  46.0M|        return m_end == nullptr;
 4196|  46.0M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   130k|{
 3715|   130k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   130k|                                          const CharT*, const CharT*>) {
 3717|   130k|        return {first, last};
 3718|   130k|    }
 3719|   130k|    else {
 3720|   130k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   130k|    }
 3722|   130k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   713k|    {
 4211|   713k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 713k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   713k|        return parent()->get_segment_starting_at(position());
 4217|   713k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  24.7M|    {
 4205|  24.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  24.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  24.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  24.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   713k|    {
 4101|   713k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 265k, False: 447k]
  |  |  ------------------
  ------------------
 4102|   713k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   265k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   265k|        }
 4105|   447k|        const auto start = pos - m_putback_buffer.size();
 4106|   447k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   447k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   447k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   447k|        return m_current_view.substr(start);
 4108|   447k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.12M|    {
 4200|  1.12M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.12M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.12M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  1.88M|    {
 4190|  1.88M|        return m_position;
 4191|  1.88M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.32M|    {
 4123|  1.32M|        return m_is_contiguous;
 4124|  1.32M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  26.3M|    {
 3180|  26.3M|        return static_cast<D&>(*this);
 3181|  26.3M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  13.1M|    {
 2978|  13.1M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  13.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  13.1M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  13.1M|    {
 3005|  13.1M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  13.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  13.1M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  13.1M|    {
 3221|  13.1M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 19.2k, False: 13.1M]
  ------------------
 3222|  13.1M|                   ? nullptr
 3223|  13.1M|                   : std::addressof(*ranges::begin(derived()));
 3224|  13.1M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   596k|    {
 3180|   596k|        return static_cast<D&>(*this);
 3181|   596k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   298k|    {
 2978|   298k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   298k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   298k|    {
 3005|   298k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   298k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   298k|    {
 3221|   298k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 298k]
  ------------------
 3222|   298k|                   ? nullptr
 3223|   298k|                   : std::addressof(*ranges::begin(derived()));
 3224|   298k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  2.17M|    {
 8169|  2.17M|        return ranges::subrange{begin(), end()};
 8170|  2.17M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  6.40M|    {
 8153|  6.40M|        return m_current;
 8154|  6.40M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  2.17M|    {
 8161|  2.17M|        return ranges::default_sentinel;
 8162|  2.17M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  33.6M|    {
 3316|  33.6M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  10.3M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.01M|    {
 1837|  3.01M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.01M|                                            std::forward<F>(f));
 1839|  3.01M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.01M|{
 1323|  3.01M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.01M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.01M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.01M|            return result(*std::forward<Exp>(exp));
 1327|  3.01M|        }
 1328|       |
 1329|  3.01M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.01M|        return result(unexpect, monostate{});
 1331|  3.01M|    }
 1332|  3.01M|    else {
 1333|  3.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.98M, False: 31.2k]
  |  |  ------------------
  ------------------
 1335|  3.01M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.01M|                   : result(unexpect,
 1337|  31.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  31.2k|                                           std::forward<Exp>(exp).error()));
 1339|  3.01M|    }
 1340|  3.01M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  32.2M|    {
  485|  32.2M|        return m_has_value;
  486|  32.2M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  10.9M|    {
 1663|  10.9M|        return std::move(value());
 1664|  10.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  12.5M|    {
 1627|  12.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.5M|        return this->get_value();
 1629|  12.5M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  12.5M|    {
  451|  12.5M|        return m_value;
  452|  12.5M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  13.6M|    {
 1430|  13.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  13.6M|    {
  437|  13.6M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.0M|    {
 1177|  17.0M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  63.9k|{
 1211|  63.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  63.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  87.7k|    {
 1614|  87.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  87.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  87.7k|        return std::move(this->get_unexpected().error());
 1616|  87.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|   119k|    {
  468|   119k|        return m_unexpected;
  469|   119k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   540k|    {
  361|   540k|        return m_unexpected;
  362|   540k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.95M|    {
 1486|  2.95M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.33M|    {
  447|  3.33M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   333k|    {
 8169|   333k|        return ranges::subrange{begin(), end()};
 8170|   333k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   765k|    {
 8153|   765k|        return m_current;
 8154|   765k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   333k|    {
 8161|   333k|        return ranges::default_sentinel;
 8162|   333k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  3.66M|    {
 3316|  3.66M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   440k|    {
 1837|   440k|        return detail::transform_error_impl(std::move(*this),
 1838|   440k|                                            std::forward<F>(f));
 1839|   440k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   440k|{
 1323|   440k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   440k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   440k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   440k|            return result(*std::forward<Exp>(exp));
 1327|   440k|        }
 1328|       |
 1329|   440k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   440k|        return result(unexpect, monostate{});
 1331|   440k|    }
 1332|   440k|    else {
 1333|   440k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   440k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   440k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 437k, False: 2.77k]
  |  |  ------------------
  ------------------
 1335|   440k|                   ? result(*std::forward<Exp>(exp))
 1336|   440k|                   : result(unexpect,
 1337|  2.77k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.77k|                                           std::forward<Exp>(exp).error()));
 1339|   440k|    }
 1340|   440k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.83M|    {
  485|  3.83M|        return m_has_value;
  486|  3.83M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.50M|    {
 1663|  1.50M|        return std::move(value());
 1664|  1.50M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.51M|    {
 1627|  1.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.51M|        return this->get_value();
 1629|  1.51M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.51M|    {
  451|  1.51M|        return m_value;
  452|  1.51M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   943k|    {
 1430|   943k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   943k|    {
  437|   943k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.52M|    {
 1177|  2.52M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  57.2k|    {
 1614|  57.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  57.2k|        return std::move(this->get_unexpected().error());
 1616|  57.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  58.4k|    {
  468|  58.4k|        return m_unexpected;
  469|  58.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   739k|    {
 1486|   739k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.58M|    {
  447|  1.58M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   266k|    {
  347|   266k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   266k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   266k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   336k|    {
 1476|   336k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  3.11M|    {
  447|  3.11M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.3M|    {
 1177|  16.3M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  13.0M|    {
 1430|  13.0M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  13.0M|    {
  437|  13.0M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  19.1M|    {
 1598|  19.1M|        return has_value();
 1599|  19.1M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  29.9M|    {
  485|  29.9M|        return m_has_value;
  486|  29.9M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   403k|    {
 1604|   403k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   403k|        return this->get_unexpected().error();
 1606|   403k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   403k|    {
  468|   403k|        return m_unexpected;
  469|   403k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  8.39M|    {
 1663|  8.39M|        return std::move(value());
 1664|  8.39M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  10.3M|    {
 1627|  10.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.3M|        return this->get_value();
 1629|  10.3M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  10.3M|    {
  451|  10.3M|        return m_value;
  452|  10.3M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   680k|    {
 1476|   680k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.25M|    {
  447|  1.25M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.52M|    {
 1177|  2.52M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.26M|    {
 1430|  1.26M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.26M|    {
  437|  1.26M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  2.96M|    {
 1598|  2.96M|        return has_value();
 1599|  2.96M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  4.75M|    {
  485|  4.75M|        return m_has_value;
  486|  4.75M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   820k|    {
 1604|   820k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   820k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   820k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   820k|        return this->get_unexpected().error();
 1606|   820k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   820k|    {
  468|   820k|        return m_unexpected;
  469|   820k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   871k|    {
 1663|   871k|        return std::move(value());
 1664|   871k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   970k|    {
 1627|   970k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   970k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   970k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   970k|        return this->get_value();
 1629|   970k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   970k|    {
  451|   970k|        return m_value;
  452|   970k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.88M|    {
 1837|  2.88M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.88M|                                            std::forward<F>(f));
 1839|  2.88M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.88M|{
 1323|  2.88M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.88M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.88M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.88M|            return result(*std::forward<Exp>(exp));
 1327|  2.88M|        }
 1328|       |
 1329|  2.88M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.88M|        return result(unexpect, monostate{});
 1331|  2.88M|    }
 1332|  2.88M|    else {
 1333|  2.88M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.88M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.85M, False: 27.1k]
  |  |  ------------------
  ------------------
 1335|  2.88M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.88M|                   : result(unexpect,
 1337|  27.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  27.1k|                                           std::forward<Exp>(exp).error()));
 1339|  2.88M|    }
 1340|  2.88M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  11.0M|    {
  485|  11.0M|        return m_has_value;
  486|  11.0M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.85M|    {
 1663|  2.85M|        return std::move(value());
 1664|  2.85M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.87M|    {
 1627|  3.87M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.87M|        return this->get_value();
 1629|  3.87M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.87M|    {
  451|  3.87M|        return m_value;
  452|  3.87M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  27.1k|    {
 1614|  27.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  27.1k|        return std::move(this->get_unexpected().error());
 1616|  27.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  34.3k|    {
  468|  34.3k|        return m_unexpected;
  469|  34.3k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.78M|    {
 1486|  2.78M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  21.6M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   380k|    {
 1476|   380k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  26.8M|    {
 4280|  26.8M|        return x.is_at_end();
 4281|  26.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  67.0M|    {
 4324|  67.0M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 67.0M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  67.0M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 67.0M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  67.0M|        return !read_at_position();
 4331|  67.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   289M|    {
 4304|   289M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   289M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   289M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   289M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 289M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   289M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   289M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 249M, False: 39.0M]
  |  |  ------------------
  ------------------
 4311|   249M|            return true;
 4312|   249M|        }
 4313|       |
 4314|  77.6M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 39.0M, False: 38.6M]
  ------------------
 4315|  39.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 456k, False: 38.6M]
  ------------------
 4316|   456k|                return false;
 4317|   456k|            }
 4318|  39.0M|        }
 4319|  38.6M|        return true;
 4320|  39.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   374M|    {
 4081|   374M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   374M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  74.0M|    {
 4239|  74.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  74.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  74.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 74.0M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  74.0M|        auto res = read_at_position();
 4248|  74.0M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  74.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  74.0M|        return parent()->get_character_at(m_position);
 4250|  74.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  74.0M|    {
 4112|  74.0M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  74.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.0M, False: 28.0M]
  |  |  ------------------
  ------------------
 4113|  74.0M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  46.0M|            return m_putback_buffer[pos];
 4115|  46.0M|        }
 4116|  28.0M|        const auto start = pos - m_putback_buffer.size();
 4117|  28.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  28.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  28.0M|        return m_current_view[start];
 4119|  28.0M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  19.5M|    {
 1430|  19.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  19.5M|    {
  437|  19.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.6M|    {
 1177|  19.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   166k|    {
  347|   166k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   166k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   166k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   119k|    {
 1476|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   119k|    {
  447|   119k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   270k|    {
  356|   270k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   270k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   270k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  8.61M|    {
 1598|  8.61M|        return has_value();
 1599|  8.61M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.59M|    {
 1653|  1.59M|        return value();
 1654|  1.59M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  70.5M|    {
 4274|  70.5M|        return !(lhs == rhs);
 4275|  70.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  78.5M|    {
 4269|  78.5M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 78.5M, False: 0]
  |  Branch (4269:46): [True: 10.1M, False: 68.3M]
  ------------------
 4270|  78.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|   147M|    {
 4225|   147M|        ++m_position;
 4226|   147M|        (void)read_at_position();
 4227|   147M|        return *this;
 4228|   147M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|   104k|    {
  347|   104k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   104k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  23.6k|    {
 1476|  23.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  23.6k|    {
  447|  23.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.21M|    {
 1177|  4.21M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  4.19M|    {
 1430|  4.19M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  4.19M|    {
  437|  4.19M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  4.21M|    {
 1598|  4.21M|        return has_value();
 1599|  4.21M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.42M|    {
  485|  8.42M|        return m_has_value;
  486|  8.42M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  23.6k|    {
 1604|  23.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  23.6k|        return this->get_unexpected().error();
 1606|  23.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  23.6k|    {
  468|  23.6k|        return m_unexpected;
  469|  23.6k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.19M|    {
 1663|  4.19M|        return std::move(value());
 1664|  4.19M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.19M|    {
 1627|  4.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.19M|        return this->get_value();
 1629|  4.19M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.19M|    {
  451|  4.19M|        return m_value;
  452|  4.19M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  95.4M|    {
 3334|  95.4M|        return m_sentinel;
 3335|  95.4M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|   100k|    {
  347|   100k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   100k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  26.1M|    {
  361|  26.1M|        return m_unexpected;
  362|  26.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  7.06M|    {
  356|  7.06M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  7.06M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  7.06M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  32.2M|    {
  347|  32.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  32.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  32.2M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  32.2M|    {
  361|  32.2M|        return m_unexpected;
  362|  32.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  32.2M|    {
  356|  32.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  32.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  32.2M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   165k|{
 1211|   165k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   165k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  6.80M|    {
  347|  6.80M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.80M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  6.80M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  31.9k|    {
 1604|  31.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  31.9k|        return this->get_unexpected().error();
 1606|  31.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  3.03M|    {
 1476|  3.03M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  3.08M|    {
  447|  3.08M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.4M|    {
 1177|  33.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  1.61M|    {
 1430|  1.61M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.61M|    {
  437|  1.61M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  17.1M|    {
 1476|  17.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  17.1M|    {
  447|  17.1M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  36.4M|    {
 1598|  36.4M|        return has_value();
 1599|  36.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  64.1M|    {
  485|  64.1M|        return m_has_value;
  486|  64.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  8.35M|    {
 1604|  8.35M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.35M|        return this->get_unexpected().error();
 1606|  8.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  8.35M|    {
  468|  8.35M|        return m_unexpected;
  469|  8.35M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  3.26M|    {
 1430|  3.26M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  3.26M|    {
  437|  3.26M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.26M|    {
 1177|  3.26M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    535|    {
 1476|    535|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    535|    {
  447|    535|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  8.49M|    {
 1653|  8.49M|        return value();
 1654|  8.49M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  16.4M|    {
 1627|  16.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.4M|        return this->get_value();
 1629|  16.4M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  16.4M|    {
  451|  16.4M|        return m_value;
  452|  16.4M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   281k|    {
 1598|   281k|        return has_value();
 1599|   281k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  6.53M|    {
  485|  6.53M|        return m_has_value;
  486|  6.53M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.98M|    {
 1663|  2.98M|        return std::move(value());
 1664|  2.98M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.26M|    {
 1627|  3.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.26M|        return this->get_value();
 1629|  3.26M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  3.26M|    {
  451|  3.26M|        return m_value;
  452|  3.26M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  7.99M|    {
 1837|  7.99M|        return detail::transform_error_impl(std::move(*this),
 1838|  7.99M|                                            std::forward<F>(f));
 1839|  7.99M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  7.99M|{
 1323|  7.99M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  7.99M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  7.99M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  7.99M|            return result(*std::forward<Exp>(exp));
 1327|  7.99M|        }
 1328|       |
 1329|  7.99M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  7.99M|        return result(unexpect, monostate{});
 1331|  7.99M|    }
 1332|  7.99M|    else {
 1333|  7.99M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  7.99M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.99M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.94M, False: 56.4k]
  |  |  ------------------
  ------------------
 1335|  7.99M|                   ? result(*std::forward<Exp>(exp))
 1336|  7.99M|                   : result(unexpect,
 1337|  56.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  56.4k|                                           std::forward<Exp>(exp).error()));
 1339|  7.99M|    }
 1340|  7.99M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  11.6M|    {
 1430|  11.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  11.6M|    {
  437|  11.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  56.4k|    {
 1486|  56.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  7.94M|    {
 1663|  7.94M|        return std::move(value());
 1664|  7.94M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  3.44M|    {
 3330|  3.44M|        return m_iterator;
 3331|  3.44M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  3.44M|    {
 3334|  3.44M|        return m_sentinel;
 3335|  3.44M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  20.0M|    {
 1598|  20.0M|        return has_value();
 1599|  20.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.4M|    {
  485|  31.4M|        return m_has_value;
  486|  31.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   500k|    {
 1604|   500k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   500k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   500k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   500k|        return this->get_unexpected().error();
 1606|   500k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   500k|    {
  468|   500k|        return m_unexpected;
  469|   500k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  8.72M|    {
 1663|  8.72M|        return std::move(value());
 1664|  8.72M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  10.8M|    {
 1627|  10.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.8M|        return this->get_value();
 1629|  10.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  10.8M|    {
  451|  10.8M|        return m_value;
  452|  10.8M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  5.46M|{
  326|  5.46M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  5.46M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  2.73M|    {
 3316|  2.73M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  40.1M|    {
 4291|  40.1M|        return !x.is_at_end();
 4292|  40.1M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  34.3k|    {
 1476|  34.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  34.3k|    {
  447|  34.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.13M|    {
 1177|  7.13M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  7.09M|    {
 1430|  7.09M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  7.09M|    {
  437|  7.09M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  4.24M|    {
 1598|  4.24M|        return has_value();
 1599|  4.24M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.01M|    {
 1653|  1.01M|        return value();
 1654|  1.01M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  19.4k|    {
 1476|  19.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  19.4k|    {
  447|  19.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.90M|    {
 1177|  3.90M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.88M|    {
 1430|  3.88M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  3.88M|    {
  437|  3.88M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  3.90M|    {
 1598|  3.90M|        return has_value();
 1599|  3.90M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.81M|    {
  485|  7.81M|        return m_has_value;
  486|  7.81M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  19.4k|    {
 1604|  19.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.4k|        return this->get_unexpected().error();
 1606|  19.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  19.4k|    {
  468|  19.4k|        return m_unexpected;
  469|  19.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.88M|    {
 1663|  3.88M|        return std::move(value());
 1664|  3.88M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.88M|    {
 1627|  3.88M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.88M|        return this->get_value();
 1629|  3.88M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.88M|    {
  451|  3.88M|        return m_value;
  452|  3.88M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  7.24k|    {
 1604|  7.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.24k|        return this->get_unexpected().error();
 1606|  7.24k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  2.88M|    {
 1476|  2.88M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  2.88M|    {
  447|  2.88M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.3M|    {
 1177|  16.3M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  1.03M|    {
 1430|  1.03M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.03M|    {
  437|  1.03M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  11.2M|    {
 1476|  11.2M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  11.2M|    {
  447|  11.2M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  19.2M|    {
 1598|  19.2M|        return has_value();
 1599|  19.2M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  32.7M|    {
  485|  32.7M|        return m_has_value;
  486|  32.7M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  7.72M|    {
 1604|  7.72M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.72M|        return this->get_unexpected().error();
 1606|  7.72M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  7.72M|    {
  468|  7.72M|        return m_unexpected;
  469|  7.72M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  2.94M|    {
 1430|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  2.94M|    {
  437|  2.94M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.94M|    {
 1177|  2.94M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    168|    {
 1476|    168|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    168|    {
  447|    168|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.08M|    {
 1653|  3.08M|        return value();
 1654|  3.08M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.08M|    {
 1627|  3.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.08M|        return this->get_value();
 1629|  3.08M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  3.08M|    {
  451|  3.08M|        return m_value;
  452|  3.08M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  87.0k|    {
 1598|  87.0k|        return has_value();
 1599|  87.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  5.89M|    {
  485|  5.89M|        return m_has_value;
  486|  5.89M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  2.85M|    {
 1663|  2.85M|        return std::move(value());
 1664|  2.85M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  2.94M|    {
  451|  2.94M|        return m_value;
  452|  2.94M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.20M|    {
 1430|  1.20M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.20M|    {
  437|  1.20M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.53M|    {
 2855|  5.53M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.53M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.53M|    {
 2836|  5.53M|        return t.data();
 2837|  5.53M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  1.39M|    {
 1476|  1.39M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  1.39M|    {
  447|  1.39M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.9M|    {
 1177|  18.9M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  17.3M|    {
 1430|  17.3M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  17.3M|    {
  437|  17.3M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  11.7M|    {
 1663|  11.7M|        return std::move(value());
 1664|  11.7M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  6.99M|{
 1211|  6.99M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  6.99M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  2.98M|    {
 1837|  2.98M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.98M|                                            std::forward<F>(f));
 1839|  2.98M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  2.98M|{
 1323|  2.98M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.98M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.98M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.98M|            return result(*std::forward<Exp>(exp));
 1327|  2.98M|        }
 1328|       |
 1329|  2.98M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.98M|        return result(unexpect, monostate{});
 1331|  2.98M|    }
 1332|  2.98M|    else {
 1333|  2.98M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.98M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.98M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.98M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.98M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.98M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.98M|    }
 1340|  2.98M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  2.98M|    {
 1430|  2.98M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  2.98M|    {
  437|  2.98M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.98M|    {
 1177|  2.98M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  2.98M|    {
 1598|  2.98M|        return has_value();
 1599|  2.98M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.96M|    {
  485|  5.96M|        return m_has_value;
  486|  5.96M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.98M|    {
 1663|  2.98M|        return std::move(value());
 1664|  2.98M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.98M|    {
 1627|  2.98M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.98M|        return this->get_value();
 1629|  2.98M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.98M|    {
  451|  2.98M|        return m_value;
  452|  2.98M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  2.92M|    {
 1823|  2.92M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.92M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  2.92M|{
 1323|  2.92M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.92M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.92M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.92M|            return result(*std::forward<Exp>(exp));
 1327|  2.92M|        }
 1328|       |
 1329|  2.92M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.92M|        return result(unexpect, monostate{});
 1331|  2.92M|    }
 1332|  2.92M|    else {
 1333|  2.92M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.92M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.92M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.92M]
  |  |  ------------------
  ------------------
 1335|  2.92M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.92M|                   : result(unexpect,
 1337|  2.92M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.92M|                                           std::forward<Exp>(exp).error()));
 1339|  2.92M|    }
 1340|  2.92M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|   146k|    {
 1430|   146k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   146k|    {
  437|   146k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  2.15M|    {
 1653|  2.15M|        return value();
 1654|  2.15M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   724k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   281k|    {
 1673|   281k|        return &value();
 1674|   281k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  2.11M|    {
 2724|  2.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.11M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  2.11M|    {
 2705|  2.11M|        return decay_copy(t.begin());
 2706|  2.11M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  2.11M|{
 1949|  2.11M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.11M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|  1.30M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  2.85M|    {
 1837|  2.85M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.85M|                                            std::forward<F>(f));
 1839|  2.85M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  2.85M|{
 1323|  2.85M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.85M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.85M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.85M|            return result(*std::forward<Exp>(exp));
 1327|  2.85M|        }
 1328|       |
 1329|  2.85M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.85M|        return result(unexpect, monostate{});
 1331|  2.85M|    }
 1332|  2.85M|    else {
 1333|  2.85M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.85M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.85M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.85M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.85M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.85M|    }
 1340|  2.85M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.85M|    {
 1430|  2.85M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  2.85M|    {
  437|  2.85M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.85M|    {
 1177|  2.85M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  2.85M|    {
 1598|  2.85M|        return has_value();
 1599|  2.85M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.71M|    {
  485|  5.71M|        return m_has_value;
  486|  5.71M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  2.85M|    {
 1663|  2.85M|        return std::move(value());
 1664|  2.85M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.85M|    {
 1627|  2.85M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.85M|        return this->get_value();
 1629|  2.85M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.85M|    {
  451|  2.85M|        return m_value;
  452|  2.85M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  2.75M|    {
 1823|  2.75M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.75M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  2.75M|{
 1323|  2.75M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.75M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.75M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.75M|            return result(*std::forward<Exp>(exp));
 1327|  2.75M|        }
 1328|       |
 1329|  2.75M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.75M|        return result(unexpect, monostate{});
 1331|  2.75M|    }
 1332|  2.75M|    else {
 1333|  2.75M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.75M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.75M]
  |  |  ------------------
  ------------------
 1335|  2.75M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.75M|                   : result(unexpect,
 1337|  2.75M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.75M|                                           std::forward<Exp>(exp).error()));
 1339|  2.75M|    }
 1340|  2.75M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|   145k|    {
 1430|   145k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   145k|    {
  437|   145k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  2.75M|    {
 3648|  2.75M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.00M|    {
 1653|  2.00M|        return value();
 1654|  2.00M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  86.8k|    {
 1673|  86.8k|        return &value();
 1674|  86.8k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  2.92M|    {
 3648|  2.92M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   842k|    {
 1476|   842k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.18M|    {
 4280|  3.18M|        return x.is_at_end();
 4281|  3.18M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  4.59M|    {
 4324|  4.59M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 4.59M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  4.59M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 4.59M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  4.59M|        return !read_at_position();
 4331|  4.59M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  13.9M|    {
 4304|  13.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  13.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  13.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 13.9M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  13.9M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  13.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.9M, False: 1.99M]
  |  |  ------------------
  ------------------
 4311|  11.9M|            return true;
 4312|  11.9M|        }
 4313|       |
 4314|  3.81M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.99M, False: 1.82M]
  ------------------
 4315|  1.99M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 171k, False: 1.82M]
  ------------------
 4316|   171k|                return false;
 4317|   171k|            }
 4318|  1.99M|        }
 4319|  1.82M|        return true;
 4320|  1.99M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  18.9M|    {
 4081|  18.9M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  18.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  4.29M|    {
 4239|  4.29M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  4.29M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 4.29M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  4.29M|        auto res = read_at_position();
 4248|  4.29M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  4.29M|        return parent()->get_character_at(m_position);
 4250|  4.29M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  4.29M|    {
 4112|  4.29M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.64M, False: 646k]
  |  |  ------------------
  ------------------
 4113|  4.29M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  3.64M|            return m_putback_buffer[pos];
 4115|  3.64M|        }
 4116|   646k|        const auto start = pos - m_putback_buffer.size();
 4117|   646k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   646k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   646k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   646k|        return m_current_view[start];
 4119|   646k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.39M|{
 3807|  1.39M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.39M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.39M|    }
 3810|  1.39M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.39M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.39M|    }
 3813|  1.39M|    else {
 3814|       |        // utf-32
 3815|  1.39M|        static_assert(sizeof(U) == 4);
 3816|  1.39M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.39M|        return 1;
 3818|  1.39M|    }
 3819|  1.39M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.20M|    {
 1430|  2.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.20M|    {
  437|  2.20M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.26M|    {
 1177|  2.26M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  58.4k|    {
 1476|  58.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  58.4k|    {
  447|  58.4k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   696k|    {
 1598|   696k|        return has_value();
 1599|   696k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  6.82k|    {
 1653|  6.82k|        return value();
 1654|  6.82k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  1.76M|    {
 4274|  1.76M|        return !(lhs == rhs);
 4275|  1.76M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  2.46M|    {
 4269|  2.46M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 2.46M, False: 0]
  |  Branch (4269:46): [True: 793k, False: 1.66M]
  ------------------
 4270|  2.46M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  5.07M|    {
 4225|  5.07M|        ++m_position;
 4226|  5.07M|        (void)read_at_position();
 4227|  5.07M|        return *this;
 4228|  5.07M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.39M|{
 4013|  1.39M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.39M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.39M|    }
 4016|  1.39M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.39M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.39M|    }
 4019|  1.39M|    else {
 4020|  1.39M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.39M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.39M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324k, False: 1.07M]
  |  |  ------------------
  ------------------
 4023|   324k|            return invalid_code_point;
 4024|   324k|        }
 4025|  1.07M|        return cp;
 4026|  1.39M|    }
 4027|  1.39M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.07k|    {
 1476|  2.07k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.07k|    {
  447|  2.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   431k|    {
 1177|   431k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   429k|    {
 1430|   429k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   429k|    {
  437|   429k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   431k|    {
 1598|   431k|        return has_value();
 1599|   431k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   863k|    {
  485|   863k|        return m_has_value;
  486|   863k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.07k|    {
 1604|  2.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.07k|        return this->get_unexpected().error();
 1606|  2.07k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.07k|    {
  468|  2.07k|        return m_unexpected;
  469|  2.07k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   429k|    {
 1663|   429k|        return std::move(value());
 1664|   429k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   429k|    {
 1627|   429k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   429k|        return this->get_value();
 1629|   429k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   429k|    {
  451|   429k|        return m_value;
  452|   429k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  7.48M|    {
 3334|  7.48M|        return m_sentinel;
 3335|  7.48M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.20k|    {
 1604|  1.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.20k|        return this->get_unexpected().error();
 1606|  1.20k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   493k|    {
 1476|   493k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   547k|    {
  447|   547k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.96M|    {
 1177|  3.96M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  6.82k|    {
 1430|  6.82k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  6.82k|    {
  437|  6.82k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.19M|    {
 1476|  2.19M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.19M|    {
  447|  2.19M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  4.40M|    {
 1598|  4.40M|        return has_value();
 1599|  4.40M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  8.16M|    {
  485|  8.16M|        return m_has_value;
  486|  8.16M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.67M|    {
 1604|  1.67M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.67M|        return this->get_unexpected().error();
 1606|  1.67M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.67M|    {
  468|  1.67M|        return m_unexpected;
  469|  1.67M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   443k|    {
 1430|   443k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   443k|    {
  437|   443k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   443k|    {
 1177|   443k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     60|    {
 1476|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     60|    {
  447|     60|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   288k|    {
 1653|   288k|        return value();
 1654|   288k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.35M|    {
 1627|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35M|        return this->get_value();
 1629|  1.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.35M|    {
  451|  1.35M|        return m_value;
  452|  1.35M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  5.31k|    {
 1598|  5.31k|        return has_value();
 1599|  5.31k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   886k|    {
  485|   886k|        return m_has_value;
  486|   886k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   437k|    {
 1663|   437k|        return std::move(value());
 1664|   437k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   443k|    {
 1627|   443k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   443k|        return this->get_value();
 1629|   443k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   443k|    {
  451|   443k|        return m_value;
  452|   443k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.12M|    {
 1837|  1.12M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.12M|                                            std::forward<F>(f));
 1839|  1.12M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.12M|{
 1323|  1.12M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.12M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.12M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.12M|            return result(*std::forward<Exp>(exp));
 1327|  1.12M|        }
 1328|       |
 1329|  1.12M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.12M|        return result(unexpect, monostate{});
 1331|  1.12M|    }
 1332|  1.12M|    else {
 1333|  1.12M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.12M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.06M, False: 54.4k]
  |  |  ------------------
  ------------------
 1335|  1.12M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.12M|                   : result(unexpect,
 1337|  54.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  54.4k|                                           std::forward<Exp>(exp).error()));
 1339|  1.12M|    }
 1340|  1.12M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.21M|    {
 1430|  1.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.21M|    {
  437|  1.21M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  54.4k|    {
 1486|  54.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.06M|    {
 1663|  1.06M|        return std::move(value());
 1664|  1.06M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   147k|    {
 3330|   147k|        return m_iterator;
 3331|   147k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   147k|    {
 3334|   147k|        return m_sentinel;
 3335|   147k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.96M|    {
 1598|  2.96M|        return has_value();
 1599|  2.96M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.91M|    {
  485|  4.91M|        return m_has_value;
  486|  4.91M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  1.14M|    {
 1604|  1.14M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.14M|        return this->get_unexpected().error();
 1606|  1.14M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.14M|    {
  468|  1.14M|        return m_unexpected;
  469|  1.14M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   709k|    {
 1663|   709k|        return std::move(value());
 1664|   709k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   807k|    {
 1627|   807k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   807k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   807k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   807k|        return this->get_value();
 1629|   807k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   807k|    {
  451|   807k|        return m_value;
  452|   807k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   272k|{
  304|   272k|    return p;
  305|   272k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   272k|{
  326|   272k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   272k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   136k|    {
 3316|   136k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.41M|    {
 4291|  1.41M|        return !x.is_at_end();
 4292|  1.41M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  57.5k|    {
 1476|  57.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  57.5k|    {
  447|  57.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.08M|    {
 1177|  2.08M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.02M|    {
 1430|  2.02M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.02M|    {
  437|  2.02M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   520k|    {
 1598|   520k|        return has_value();
 1599|   520k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.65M|    {
  485|  3.65M|        return m_has_value;
  486|  3.65M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.88k|    {
 1653|  2.88k|        return value();
 1654|  2.88k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.51M|    {
 1627|  1.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.51M|        return this->get_value();
 1629|  1.51M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.51M|    {
  451|  1.51M|        return m_value;
  452|  1.51M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.07k|    {
 1476|  2.07k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.07k|    {
  447|  2.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   432k|    {
 1177|   432k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   429k|    {
 1430|   429k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   429k|    {
  437|   429k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   440k|    {
 1837|   440k|        return detail::transform_error_impl(std::move(*this),
 1838|   440k|                                            std::forward<F>(f));
 1839|   440k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   440k|{
 1323|   440k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   440k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   440k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   440k|            return result(*std::forward<Exp>(exp));
 1327|   440k|        }
 1328|       |
 1329|   440k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   440k|        return result(unexpect, monostate{});
 1331|   440k|    }
 1332|   440k|    else {
 1333|   440k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   440k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   440k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 438k, False: 2.77k]
  |  |  ------------------
  ------------------
 1335|   440k|                   ? result(*std::forward<Exp>(exp))
 1336|   440k|                   : result(unexpect,
 1337|  2.77k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.77k|                                           std::forward<Exp>(exp).error()));
 1339|   440k|    }
 1340|   440k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.50M|    {
 1663|  1.50M|        return std::move(value());
 1664|  1.50M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  57.2k|    {
 1614|  57.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  57.2k|        return std::move(this->get_unexpected().error());
 1616|  57.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  57.5k|    {
  468|  57.5k|        return m_unexpected;
  469|  57.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   577k|    {
 1486|   577k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   432k|    {
 1598|   432k|        return has_value();
 1599|   432k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   864k|    {
  485|   864k|        return m_has_value;
  486|   864k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.07k|    {
 1604|  2.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.07k|        return this->get_unexpected().error();
 1606|  2.07k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.07k|    {
  468|  2.07k|        return m_unexpected;
  469|  2.07k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   429k|    {
 1663|   429k|        return std::move(value());
 1664|   429k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   429k|    {
 1627|   429k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   429k|        return this->get_value();
 1629|   429k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   429k|    {
  451|   429k|        return m_value;
  452|   429k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    324|    {
 1604|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    324|        return this->get_unexpected().error();
 1606|    324|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   492k|    {
 1476|   492k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   547k|    {
  447|   547k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.45M|    {
 1177|  3.45M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  2.88k|    {
 1430|  2.88k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.88k|    {
  437|  2.88k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.77M|    {
 1476|  1.77M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.77M|    {
  447|  1.77M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  3.89M|    {
 1598|  3.89M|        return has_value();
 1599|  3.89M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  7.15M|    {
  485|  7.15M|        return m_has_value;
  486|  7.15M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.50M|    {
 1604|  1.50M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.50M|        return this->get_unexpected().error();
 1606|  1.50M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.50M|    {
  468|  1.50M|        return m_unexpected;
  469|  1.50M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   440k|    {
 1430|   440k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   440k|    {
  437|   440k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   440k|    {
 1177|   440k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     18|    {
 1476|     18|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     18|    {
  447|     18|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   109k|    {
 1653|   109k|        return value();
 1654|   109k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.17M|    {
 1627|  1.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.17M|        return this->get_value();
 1629|  1.17M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.17M|    {
  451|  1.17M|        return m_value;
  452|  1.17M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.04k|    {
 1598|  2.04k|        return has_value();
 1599|  2.04k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   880k|    {
  485|   880k|        return m_has_value;
  486|   880k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   438k|    {
 1663|   438k|        return std::move(value());
 1664|   438k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   440k|    {
 1627|   440k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   440k|        return this->get_value();
 1629|   440k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   440k|    {
  451|   440k|        return m_value;
  452|   440k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.12M|    {
 1837|  1.12M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.12M|                                            std::forward<F>(f));
 1839|  1.12M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.12M|{
 1323|  1.12M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.12M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.12M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.12M|            return result(*std::forward<Exp>(exp));
 1327|  1.12M|        }
 1328|       |
 1329|  1.12M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.12M|        return result(unexpect, monostate{});
 1331|  1.12M|    }
 1332|  1.12M|    else {
 1333|  1.12M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.12M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.07M, False: 54.4k]
  |  |  ------------------
  ------------------
 1335|  1.12M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.12M|                   : result(unexpect,
 1337|  54.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  54.4k|                                           std::forward<Exp>(exp).error()));
 1339|  1.12M|    }
 1340|  1.12M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.12M|    {
 1430|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.12M|    {
  437|  1.12M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  54.4k|    {
 1486|  54.4k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.07M|    {
 1663|  1.07M|        return std::move(value());
 1664|  1.07M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   298k|    {
 2855|   298k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   298k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   298k|    {
 2836|   298k|        return t.data();
 2837|   298k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   437k|    {
 1837|   437k|        return detail::transform_error_impl(std::move(*this),
 1838|   437k|                                            std::forward<F>(f));
 1839|   437k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   437k|{
 1323|   437k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   437k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   437k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   437k|            return result(*std::forward<Exp>(exp));
 1327|   437k|        }
 1328|       |
 1329|   437k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   437k|        return result(unexpect, monostate{});
 1331|   437k|    }
 1332|   437k|    else {
 1333|   437k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   437k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   437k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 437k, False: 0]
  |  |  ------------------
  ------------------
 1335|   437k|                   ? result(*std::forward<Exp>(exp))
 1336|   437k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   437k|    }
 1340|   437k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   437k|    {
 1430|   437k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   437k|    {
  437|   437k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   437k|    {
 1177|   437k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   437k|    {
 1598|   437k|        return has_value();
 1599|   437k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   875k|    {
  485|   875k|        return m_has_value;
  486|   875k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   437k|    {
 1663|   437k|        return std::move(value());
 1664|   437k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   437k|    {
 1627|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   437k|        return this->get_value();
 1629|   437k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   437k|    {
  451|   437k|        return m_value;
  452|   437k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   736k|    {
 1823|   736k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   736k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   736k|{
 1323|   736k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   736k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   736k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   736k|            return result(*std::forward<Exp>(exp));
 1327|   736k|        }
 1328|       |
 1329|   736k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   736k|        return result(unexpect, monostate{});
 1331|   736k|    }
 1332|   736k|    else {
 1333|   736k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   736k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   736k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 736k]
  |  |  ------------------
  ------------------
 1335|   736k|                   ? result(*std::forward<Exp>(exp))
 1336|   736k|                   : result(unexpect,
 1337|   736k|                            trivial_invoke(std::forward<F>(f),
 1338|   736k|                                           std::forward<Exp>(exp).error()));
 1339|   736k|    }
 1340|   736k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  98.6k|    {
 1653|  98.6k|        return value();
 1654|  98.6k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  71.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  5.25k|    {
 1673|  5.25k|        return &value();
 1674|  5.25k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   365k|    {
 2724|   365k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   365k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   365k|    {
 2705|   365k|        return decay_copy(t.begin());
 2706|   365k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   365k|{
 1949|   365k|    return SCN_FWD(t);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   365k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   176k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   438k|    {
 1837|   438k|        return detail::transform_error_impl(std::move(*this),
 1838|   438k|                                            std::forward<F>(f));
 1839|   438k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   438k|{
 1323|   438k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   438k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   438k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   438k|            return result(*std::forward<Exp>(exp));
 1327|   438k|        }
 1328|       |
 1329|   438k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   438k|        return result(unexpect, monostate{});
 1331|   438k|    }
 1332|   438k|    else {
 1333|   438k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   438k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   438k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 438k, False: 0]
  |  |  ------------------
  ------------------
 1335|   438k|                   ? result(*std::forward<Exp>(exp))
 1336|   438k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   438k|    }
 1340|   438k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   438k|    {
 1430|   438k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   438k|    {
  437|   438k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   438k|    {
 1177|   438k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   438k|    {
 1598|   438k|        return has_value();
 1599|   438k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   876k|    {
  485|   876k|        return m_has_value;
  486|   876k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   438k|    {
 1663|   438k|        return std::move(value());
 1664|   438k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   438k|    {
 1627|   438k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   438k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   438k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   438k|        return this->get_value();
 1629|   438k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   438k|    {
  451|   438k|        return m_value;
  452|   438k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   575k|    {
 1823|   575k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   575k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   575k|{
 1323|   575k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   575k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   575k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   575k|            return result(*std::forward<Exp>(exp));
 1327|   575k|        }
 1328|       |
 1329|   575k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   575k|        return result(unexpect, monostate{});
 1331|   575k|    }
 1332|   575k|    else {
 1333|   575k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   575k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   575k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 575k]
  |  |  ------------------
  ------------------
 1335|   575k|                   ? result(*std::forward<Exp>(exp))
 1336|   575k|                   : result(unexpect,
 1337|   575k|                            trivial_invoke(std::forward<F>(f),
 1338|   575k|                                           std::forward<Exp>(exp).error()));
 1339|   575k|    }
 1340|   575k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   575k|    {
 3648|   575k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  98.8k|    {
 1653|  98.8k|        return value();
 1654|  98.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.02k|    {
 1673|  2.02k|        return &value();
 1674|  2.02k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   736k|    {
 3648|   736k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   281k|    {
 1430|   281k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   281k|    {
  437|   281k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   216k|{
 3654|   216k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   216k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.61M|    {
 2855|  2.61M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.61M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.61M|    {
 2836|  2.61M|        return t.data();
 2837|  2.61M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  5.33M|    {
 5466|  5.33M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  5.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.33M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  5.33M|        return static_cast<std::size_t>(m_desc &
 5471|  5.33M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  5.33M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  10.6M|    {
 5491|  10.6M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  10.6M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  5.33M|    {
 5434|  5.33M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  5.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.33M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  5.33M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  5.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.33M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  5.33M|        const auto t = type(id);
 5446|  5.33M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  5.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.33M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  5.33M|        basic_scan_arg<Context> arg;
 5451|  5.33M|        arg.m_type = t;
 5452|  5.33M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 5.33M, False: 0]
  ------------------
 5453|  5.33M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  5.33M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  5.33M|        return arg;
 5459|  5.33M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  5.33M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  5.33M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  5.33M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  5.33M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  5.33M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  5.33M|    {
 5495|  5.33M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  5.33M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  10.0M|    {
 5247|  10.0M|        return m_type != detail::arg_type::none_type;
 5248|  10.0M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   866k|{
 8417|   866k|#define SCN_VISIT(Type)                                         \
 8418|   866k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   866k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   866k|    }                                                           \
 8421|   866k|    else {                                                      \
 8422|   866k|        return vis(monostate_val);                              \
 8423|   866k|    }
 8424|       |
 8425|   866k|    monostate monostate_val{};
 8426|       |
 8427|   866k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 866k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 866k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 866k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 866k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 866k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 866k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 866k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 866k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 866k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 866k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 866k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 866k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 866k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 866k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 866k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   268k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 268k, False: 597k]
  ------------------
 8459|   268k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   268k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   268k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   268k|    }                                                           \
  |  | 8421|   268k|    else {                                                      \
  |  | 8422|   268k|        return vis(monostate_val);                              \
  |  | 8423|   268k|    }
  ------------------
 8460|   296k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 296k, False: 569k]
  ------------------
 8461|   296k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   296k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   296k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   296k|    }                                                           \
  |  | 8421|   296k|    else {                                                      \
  |  | 8422|   296k|        return vis(monostate_val);                              \
  |  | 8423|   296k|    }
  ------------------
 8462|   301k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 301k, False: 564k]
  ------------------
 8463|   301k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   301k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   301k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   301k|    }                                                           \
  |  | 8421|   301k|    else {                                                      \
  |  | 8422|   301k|        return vis(monostate_val);                              \
  |  | 8423|   301k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 866k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 866k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 866k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 866k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 866k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 866k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 866k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 866k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 866k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   866k|            SCN_CLANG_POP
 8495|   866k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  4.19M|    {
 5545|  4.19M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  2.17M|    {
 8138|  2.17M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  4.19M|    {
 8056|  4.19M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  3.01M|{
 4344|  3.01M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 3.01M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  3.01M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  3.01M|                            ranges::default_sentinel};
 4350|  3.01M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  3.01M|    {
 4177|  3.01M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  3.01M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  3.01M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   840k|{
 8417|   840k|#define SCN_VISIT(Type)                                         \
 8418|   840k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   840k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   840k|    }                                                           \
 8421|   840k|    else {                                                      \
 8422|   840k|        return vis(monostate_val);                              \
 8423|   840k|    }
 8424|       |
 8425|   840k|    monostate monostate_val{};
 8426|       |
 8427|   840k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 840k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 840k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 840k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 840k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 840k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 840k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 840k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 840k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 840k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 840k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 840k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 840k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 840k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 840k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 840k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   261k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 261k, False: 579k]
  ------------------
 8459|   261k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   261k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   261k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   261k|    }                                                           \
  |  | 8421|   261k|    else {                                                      \
  |  | 8422|   261k|        return vis(monostate_val);                              \
  |  | 8423|   261k|    }
  ------------------
 8460|   288k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 288k, False: 552k]
  ------------------
 8461|   288k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   288k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   288k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   288k|    }                                                           \
  |  | 8421|   288k|    else {                                                      \
  |  | 8422|   288k|        return vis(monostate_val);                              \
  |  | 8423|   288k|    }
  ------------------
 8462|   291k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 291k, False: 549k]
  ------------------
 8463|   291k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   291k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   291k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   291k|    }                                                           \
  |  | 8421|   291k|    else {                                                      \
  |  | 8422|   291k|        return vis(monostate_val);                              \
  |  | 8423|   291k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 840k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 840k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 840k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 840k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 840k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 840k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 840k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 840k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 840k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   840k|            SCN_CLANG_POP
 8495|   840k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  2.02M|{
 7044|  2.02M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  2.02M|    handler.check_args_exhausted();
 7046|  2.02M|    return handler.get_error();
 7047|  2.02M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  2.02M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  2.02M|    auto begin = format.data();
 7013|  2.02M|    auto it = begin;
 7014|  2.02M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.92M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 2.02M, False: 1.90M]
  ------------------
 7017|  2.02M|        const auto ch = *it++;
 7018|  2.02M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 2.02M, False: 0]
  ------------------
 7019|  2.02M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  2.02M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  2.02M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 117k, False: 1.90M]
  ------------------
 7023|   117k|                return;
 7024|   117k|            }
 7025|  2.02M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  2.02M|    }
 7036|       |
 7037|  1.90M|    handler.on_literal_text(begin, end);
 7038|  1.90M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  2.02M|{
 6942|  2.02M|    struct id_adapter {
 6943|  2.02M|        constexpr void operator()()
 6944|  2.02M|        {
 6945|  2.02M|            arg_id = handler.on_arg_id();
 6946|  2.02M|        }
 6947|  2.02M|        constexpr void operator()(std::size_t id)
 6948|  2.02M|        {
 6949|  2.02M|            arg_id = handler.on_arg_id(id);
 6950|  2.02M|        }
 6951|       |
 6952|  2.02M|        constexpr void on_error(const char* msg)
 6953|  2.02M|        {
 6954|  2.02M|            SCN_UNLIKELY_ATTR
 6955|  2.02M|            handler.on_error(msg);
 6956|  2.02M|        }
 6957|       |
 6958|  2.02M|        Handler& handler;
 6959|  2.02M|        std::size_t arg_id;
 6960|  2.02M|    };
 6961|       |
 6962|  2.02M|    ++begin;
 6963|  2.02M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.02M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  2.02M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 2.02M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  2.02M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 2.02M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  2.02M|    else {
 6975|  2.02M|        auto adapter = id_adapter{handler, 0};
 6976|  2.02M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  2.02M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.02M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  2.02M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 2.02M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  2.02M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 2.02M, False: 0]
  ------------------
 6987|  2.02M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.02M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  2.02M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  2.02M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.02M]
  |  |  |  Branch (859:45): [True: 0, False: 2.02M]
  |  |  |  Branch (859:45): [True: 0, False: 2.02M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  2.02M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  2.02M|    }
 7003|  2.02M|    return begin + 1;
 7004|  2.02M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  4.19M|    {
 8039|  4.19M|        return m_args.get(id);
 8040|  4.19M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  4.19M|    {
 8049|  4.19M|        return m_locale;
 8050|  4.19M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  4.19M|    {
 5566|  4.19M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  4.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.19M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  4.19M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  4.19M|        do_check_arg_id(id);
 5574|  4.19M|        return id;
 5575|  4.19M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  4.19M|{
 6054|  4.19M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  4.19M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  4.19M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  2.02M|{
 6443|  2.02M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  2.02M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 2.02M, False: 0]
  |  Branch (6444:26): [True: 0, False: 2.02M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  2.02M|    handler();
 6449|  2.02M|    return begin;
 6450|  2.02M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  2.02M|        {
 6945|  2.02M|            arg_id = handler.on_arg_id();
 6946|  2.02M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  8.39M|    {
 5252|  8.39M|        return m_type;
 5253|  8.39M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  4.19M|    {
 5561|  4.19M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  4.19M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  8.39M|    {
 5550|  8.39M|        return m_format.data();
 5551|  8.39M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  2.02M|    {
 7122|  2.02M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  2.02M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  2.02M|{
 6858|  2.02M|    auto do_presentation = [&]() -> const CharT* {
 6859|  2.02M|        if (*begin == CharT{'['}) {
 6860|  2.02M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.02M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  2.02M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  2.02M|                return begin;
 6866|  2.02M|            }
 6867|  2.02M|            handler.on_character_set_string(set);
 6868|  2.02M|            return begin;
 6869|  2.02M|        }
 6870|  2.02M|        if (*begin == CharT{'/'}) {
 6871|  2.02M|            return parse_presentation_regex(begin, end, handler);
 6872|  2.02M|        }
 6873|  2.02M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.02M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  2.02M|            handler.on_error("Invalid type specifier in format string");
 6876|  2.02M|            return begin;
 6877|  2.02M|        }
 6878|  2.02M|        handler.on_type(type);
 6879|  2.02M|        return begin;
 6880|  2.02M|    };
 6881|       |
 6882|  2.02M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 2.02M, False: 0]
  |  Branch (6882:28): [True: 2.02M, False: 0]
  ------------------
 6883|  2.02M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 2.02M, False: 0]
  |  Branch (6883:36): [True: 1.44M, False: 577k]
  ------------------
 6884|  1.44M|        return do_presentation();
 6885|  1.44M|    }
 6886|       |
 6887|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   577k|    begin = parse_align(begin, end, handler);
 6893|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   577k|    begin = parse_width(begin, end, handler);
 6899|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   577k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 577k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   577k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 577k, False: 0]
  ------------------
 6918|   577k|        handler.on_localized();
 6919|   577k|        ++begin;
 6920|   577k|    }
 6921|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   577k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 577k, False: 0]
  |  Branch (6926:25): [True: 0, False: 577k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   577k|    return begin;
 6935|   577k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  4.19M|{
 6507|  4.19M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 2.99M, False: 1.20M]
  |  Branch (6507:33): [True: 2.99M, False: 0]
  ------------------
 6508|  4.19M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 1.20M, False: 0]
  |  Branch (6508:33): [True: 1.20M, False: 0]
  ------------------
 6509|  4.19M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  1.44M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.44M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.44M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.44M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.44M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.44M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.44M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.44M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.44M|        handler.on_type(type);
 6879|  1.44M|        return begin;
 6880|  1.44M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  2.99M|{
 6455|  2.99M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 2.99M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 2.99M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.99M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 2.99M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.99M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 2.99M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.99M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 2.99M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.99M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 2.99M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|  1.33M|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 1.33M, False: 1.65M]
  ------------------
 6474|  1.33M|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 2.99M]
  ------------------
 6475|  1.33M|            return presentation_type::float_hex;
 6476|  83.1k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 83.1k, False: 2.91M]
  ------------------
 6477|  83.1k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 2.99M]
  ------------------
 6478|  83.1k|            return presentation_type::float_scientific;
 6479|   557k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 557k, False: 2.43M]
  ------------------
 6480|   557k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 2.99M]
  ------------------
 6481|   557k|            return presentation_type::float_fixed;
 6482|  1.01M|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 1.01M, False: 1.97M]
  ------------------
 6483|  1.01M|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.99M]
  ------------------
 6484|  1.01M|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.99M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.99M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.99M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 2.99M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.99M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.99M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 2.99M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  2.99M|    }
 6502|  2.99M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   577k|{
 6532|   577k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   577k|    auto check_align = [](wchar_t ch) {
 6535|   577k|        switch (ch) {
 6536|   577k|            case L'<':
 6537|   577k|                return align_type::left;
 6538|   577k|            case L'>':
 6539|   577k|                return align_type::right;
 6540|   577k|            case L'^':
 6541|   577k|                return align_type::center;
 6542|   577k|            default:
 6543|   577k|                return align_type::none;
 6544|   577k|        }
 6545|   577k|    };
 6546|       |
 6547|   577k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   577k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  |  Branch (859:45): [True: 0, False: 577k]
  |  |  |  Branch (859:45): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6549|   577k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   577k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   577k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   577k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   577k|    const auto begin_before_fill = begin;
 6559|   577k|    begin += potential_fill_len;
 6560|       |
 6561|   577k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 577k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   577k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   577k|    const auto begin_after_fill = begin;
 6567|   577k|    ++begin;
 6568|       |
 6569|   577k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 577k, False: 0]
  ------------------
 6570|   577k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   577k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 577k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   577k|    }
 6578|       |
 6579|   577k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 577k, False: 0]
  ------------------
 6580|   577k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 577k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   577k|        return begin_before_fill;
 6585|   577k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   577k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  1.20M|{
 6514|  1.20M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  1.20M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  1.20M|        return 1;
 6517|  1.20M|    }
 6518|  1.20M|    else {
 6519|  1.20M|        const auto lengths =
 6520|  1.20M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  1.20M|            "\3\4";
 6522|  1.20M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  1.20M|        return len;
 6524|  1.20M|    }
 6525|  1.20M|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  1.15M|    auto check_align = [](wchar_t ch) {
 6535|  1.15M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.15M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.15M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.15M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.15M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.15M, False: 0]
  ------------------
 6543|  1.15M|                return align_type::none;
 6544|  1.15M|        }
 6545|  1.15M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   577k|{
 6597|   577k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   577k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 577k, False: 0]
  |  Branch (6599:33): [True: 0, False: 577k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   577k|    return begin;
 6610|   577k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   577k|    {
 7127|   577k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   577k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 577k, False: 0]
  ------------------
 7129|   577k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 577k, False: 0]
  ------------------
 7130|   577k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 577k]
  ------------------
 7131|   577k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   577k|        Handler::on_localized();
 7139|   577k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.02M|{
 8417|  2.02M|#define SCN_VISIT(Type)                                         \
 8418|  2.02M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.02M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.02M|    }                                                           \
 8421|  2.02M|    else {                                                      \
 8422|  2.02M|        return vis(monostate_val);                              \
 8423|  2.02M|    }
 8424|       |
 8425|  2.02M|    monostate monostate_val{};
 8426|       |
 8427|  2.02M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.02M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.02M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.02M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.02M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.02M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.02M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.02M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.02M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.02M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.02M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.02M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.02M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.02M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.02M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.02M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   641k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 641k, False: 1.37M]
  ------------------
 8459|   641k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   641k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   641k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   641k|    }                                                           \
  |  | 8421|   641k|    else {                                                      \
  |  | 8422|   641k|        return vis(monostate_val);                              \
  |  | 8423|   641k|    }
  ------------------
 8460|   686k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 686k, False: 1.33M]
  ------------------
 8461|   686k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   686k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   686k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   686k|    }                                                           \
  |  | 8421|   686k|    else {                                                      \
  |  | 8422|   686k|        return vis(monostate_val);                              \
  |  | 8423|   686k|    }
  ------------------
 8462|   693k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 693k, False: 1.32M]
  ------------------
 8463|   693k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   693k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   693k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   693k|    }                                                           \
  |  | 8421|   693k|    else {                                                      \
  |  | 8422|   693k|        return vis(monostate_val);                              \
  |  | 8423|   693k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.02M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.02M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.02M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.02M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.02M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.02M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.02M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.02M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.02M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.02M|            SCN_CLANG_POP
 8495|  2.02M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  2.17M|{
 7044|  2.17M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  2.17M|    handler.check_args_exhausted();
 7046|  2.17M|    return handler.get_error();
 7047|  2.17M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  2.17M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  2.17M|    auto begin = format.data();
 7013|  2.17M|    auto it = begin;
 7014|  2.17M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  4.23M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 2.17M, False: 2.05M]
  ------------------
 7017|  2.17M|        const auto ch = *it++;
 7018|  2.17M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 2.17M, False: 0]
  ------------------
 7019|  2.17M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  2.17M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  2.17M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 117k, False: 2.05M]
  ------------------
 7023|   117k|                return;
 7024|   117k|            }
 7025|  2.17M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  2.17M|    }
 7036|       |
 7037|  2.05M|    handler.on_literal_text(begin, end);
 7038|  2.05M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  2.05M|    {
 8175|  2.05M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.05M|    static_cast<    \
  |  |  929|  2.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  2.05M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  2.17M|{
 6942|  2.17M|    struct id_adapter {
 6943|  2.17M|        constexpr void operator()()
 6944|  2.17M|        {
 6945|  2.17M|            arg_id = handler.on_arg_id();
 6946|  2.17M|        }
 6947|  2.17M|        constexpr void operator()(std::size_t id)
 6948|  2.17M|        {
 6949|  2.17M|            arg_id = handler.on_arg_id(id);
 6950|  2.17M|        }
 6951|       |
 6952|  2.17M|        constexpr void on_error(const char* msg)
 6953|  2.17M|        {
 6954|  2.17M|            SCN_UNLIKELY_ATTR
 6955|  2.17M|            handler.on_error(msg);
 6956|  2.17M|        }
 6957|       |
 6958|  2.17M|        Handler& handler;
 6959|  2.17M|        std::size_t arg_id;
 6960|  2.17M|    };
 6961|       |
 6962|  2.17M|    ++begin;
 6963|  2.17M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  2.17M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 2.17M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  2.17M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 2.17M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  2.17M|    else {
 6975|  2.17M|        auto adapter = id_adapter{handler, 0};
 6976|  2.17M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  2.17M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  2.17M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 2.17M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  2.17M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 2.17M, False: 0]
  ------------------
 6987|  2.17M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  2.17M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  2.17M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  |  Branch (859:45): [True: 0, False: 2.17M]
  |  |  |  Branch (859:45): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  2.17M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  2.17M|    }
 7003|  2.17M|    return begin + 1;
 7004|  2.17M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  2.17M|{
 6443|  2.17M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  2.17M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 2.17M, False: 0]
  |  Branch (6444:26): [True: 0, False: 2.17M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  2.17M|    handler();
 6449|  2.17M|    return begin;
 6450|  2.17M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  2.17M|        {
 6945|  2.17M|            arg_id = handler.on_arg_id();
 6946|  2.17M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  2.17M|    {
 7122|  2.17M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  2.17M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  2.17M|{
 6858|  2.17M|    auto do_presentation = [&]() -> const CharT* {
 6859|  2.17M|        if (*begin == CharT{'['}) {
 6860|  2.17M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.17M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  2.17M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  2.17M|                return begin;
 6866|  2.17M|            }
 6867|  2.17M|            handler.on_character_set_string(set);
 6868|  2.17M|            return begin;
 6869|  2.17M|        }
 6870|  2.17M|        if (*begin == CharT{'/'}) {
 6871|  2.17M|            return parse_presentation_regex(begin, end, handler);
 6872|  2.17M|        }
 6873|  2.17M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.17M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  2.17M|            handler.on_error("Invalid type specifier in format string");
 6876|  2.17M|            return begin;
 6877|  2.17M|        }
 6878|  2.17M|        handler.on_type(type);
 6879|  2.17M|        return begin;
 6880|  2.17M|    };
 6881|       |
 6882|  2.17M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 2.17M, False: 0]
  |  Branch (6882:28): [True: 2.17M, False: 0]
  ------------------
 6883|  2.17M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 2.17M, False: 0]
  |  Branch (6883:36): [True: 1.55M, False: 623k]
  ------------------
 6884|  1.55M|        return do_presentation();
 6885|  1.55M|    }
 6886|       |
 6887|   623k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   623k|    begin = parse_align(begin, end, handler);
 6893|   623k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   623k|    begin = parse_width(begin, end, handler);
 6899|   623k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   623k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 623k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   623k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 623k, False: 0]
  ------------------
 6918|   623k|        handler.on_localized();
 6919|   623k|        ++begin;
 6920|   623k|    }
 6921|   623k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   623k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 623k, False: 0]
  |  Branch (6926:25): [True: 0, False: 623k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   623k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   623k|    return begin;
 6935|   623k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  1.55M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.55M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.55M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.55M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.55M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.55M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.55M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.55M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.55M|        handler.on_type(type);
 6879|  1.55M|        return begin;
 6880|  1.55M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   623k|{
 6532|   623k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   623k|    auto check_align = [](wchar_t ch) {
 6535|   623k|        switch (ch) {
 6536|   623k|            case L'<':
 6537|   623k|                return align_type::left;
 6538|   623k|            case L'>':
 6539|   623k|                return align_type::right;
 6540|   623k|            case L'^':
 6541|   623k|                return align_type::center;
 6542|   623k|            default:
 6543|   623k|                return align_type::none;
 6544|   623k|        }
 6545|   623k|    };
 6546|       |
 6547|   623k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   623k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 623k]
  |  |  |  Branch (859:45): [True: 0, False: 623k]
  |  |  |  Branch (859:45): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
 6549|   623k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   623k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   623k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   623k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   623k|    const auto begin_before_fill = begin;
 6559|   623k|    begin += potential_fill_len;
 6560|       |
 6561|   623k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 623k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   623k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   623k|    const auto begin_after_fill = begin;
 6567|   623k|    ++begin;
 6568|       |
 6569|   623k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 623k, False: 0]
  ------------------
 6570|   623k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   623k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 623k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   623k|    }
 6578|       |
 6579|   623k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 623k, False: 0]
  ------------------
 6580|   623k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 623k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   623k|        return begin_before_fill;
 6585|   623k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   623k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  1.24M|    auto check_align = [](wchar_t ch) {
 6535|  1.24M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.24M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.24M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.24M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.24M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.24M, False: 0]
  ------------------
 6543|  1.24M|                return align_type::none;
 6544|  1.24M|        }
 6545|  1.24M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   623k|{
 6597|   623k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   623k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 623k, False: 0]
  |  Branch (6599:33): [True: 0, False: 623k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   623k|    return begin;
 6610|   623k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   623k|    {
 7127|   623k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   623k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 623k, False: 0]
  ------------------
 7129|   623k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 623k, False: 0]
  ------------------
 7130|   623k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 623k]
  ------------------
 7131|   623k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   623k|        Handler::on_localized();
 7139|   623k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.17M|{
 8417|  2.17M|#define SCN_VISIT(Type)                                         \
 8418|  2.17M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.17M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.17M|    }                                                           \
 8421|  2.17M|    else {                                                      \
 8422|  2.17M|        return vis(monostate_val);                              \
 8423|  2.17M|    }
 8424|       |
 8425|  2.17M|    monostate monostate_val{};
 8426|       |
 8427|  2.17M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.17M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.17M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.17M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.17M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.17M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.17M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.17M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.17M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.17M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.17M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.17M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.17M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.17M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.17M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.17M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   689k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 689k, False: 1.48M]
  ------------------
 8459|   689k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   689k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   689k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   689k|    }                                                           \
  |  | 8421|   689k|    else {                                                      \
  |  | 8422|   689k|        return vis(monostate_val);                              \
  |  | 8423|   689k|    }
  ------------------
 8460|   738k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 738k, False: 1.43M]
  ------------------
 8461|   738k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   738k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   738k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   738k|    }                                                           \
  |  | 8421|   738k|    else {                                                      \
  |  | 8422|   738k|        return vis(monostate_val);                              \
  |  | 8423|   738k|    }
  ------------------
 8462|   746k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 746k, False: 1.42M]
  ------------------
 8463|   746k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   746k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   746k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   746k|    }                                                           \
  |  | 8421|   746k|    else {                                                      \
  |  | 8422|   746k|        return vis(monostate_val);                              \
  |  | 8423|   746k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.17M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.17M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.17M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.17M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.17M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.17M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.17M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.17M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.17M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.17M|            SCN_CLANG_POP
 8495|  2.17M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   152k|    {
 4076|   152k|        sync(0);
 4077|   152k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   810k|    {
 5466|   810k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   810k|        return static_cast<std::size_t>(m_desc &
 5471|   810k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   810k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.62M|    {
 5491|  1.62M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.62M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   810k|    {
 5434|   810k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   810k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   810k|        const auto t = type(id);
 5446|   810k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   810k|        basic_scan_arg<Context> arg;
 5451|   810k|        arg.m_type = t;
 5452|   810k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 810k, False: 0]
  ------------------
 5453|   810k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   810k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   810k|        return arg;
 5459|   810k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   810k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   810k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   810k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   810k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   810k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   810k|    {
 5495|   810k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   810k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.54M|    {
 5247|  1.54M|        return m_type != detail::arg_type::none_type;
 5248|  1.54M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   107k|{
 8417|   107k|#define SCN_VISIT(Type)                                         \
 8418|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   107k|    }                                                           \
 8421|   107k|    else {                                                      \
 8422|   107k|        return vis(monostate_val);                              \
 8423|   107k|    }
 8424|       |
 8425|   107k|    monostate monostate_val{};
 8426|       |
 8427|   107k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 107k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 107k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 107k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 107k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 107k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 107k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 107k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 107k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 107k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 107k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 107k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 107k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 107k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 107k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 107k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  35.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 35.5k, False: 71.5k]
  ------------------
 8459|  35.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  35.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  35.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  35.5k|    }                                                           \
  |  | 8421|  35.5k|    else {                                                      \
  |  | 8422|  35.5k|        return vis(monostate_val);                              \
  |  | 8423|  35.5k|    }
  ------------------
 8460|  35.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 35.6k, False: 71.4k]
  ------------------
 8461|  35.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  35.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  35.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  35.6k|    }                                                           \
  |  | 8421|  35.6k|    else {                                                      \
  |  | 8422|  35.6k|        return vis(monostate_val);                              \
  |  | 8423|  35.6k|    }
  ------------------
 8462|  35.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 35.9k, False: 71.1k]
  ------------------
 8463|  35.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  35.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  35.9k|    }                                                           \
  |  | 8421|  35.9k|    else {                                                      \
  |  | 8422|  35.9k|        return vis(monostate_val);                              \
  |  | 8423|  35.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 107k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 107k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 107k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 107k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 107k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 107k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 107k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 107k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 107k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   107k|            SCN_CLANG_POP
 8495|   107k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   667k|    {
 5545|   667k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   333k|    {
 8138|   333k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   667k|    {
 8056|   667k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   333k|{
 7044|   333k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   333k|    handler.check_args_exhausted();
 7046|   333k|    return handler.get_error();
 7047|   333k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   333k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   333k|    auto begin = format.data();
 7013|   333k|    auto it = begin;
 7014|   333k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   432k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 333k, False: 98.8k]
  ------------------
 7017|   333k|        const auto ch = *it++;
 7018|   333k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 333k, False: 0]
  ------------------
 7019|   333k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   333k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   333k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 234k, False: 98.8k]
  ------------------
 7023|   234k|                return;
 7024|   234k|            }
 7025|   333k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   333k|    }
 7036|       |
 7037|  98.8k|    handler.on_literal_text(begin, end);
 7038|  98.8k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   333k|{
 6942|   333k|    struct id_adapter {
 6943|   333k|        constexpr void operator()()
 6944|   333k|        {
 6945|   333k|            arg_id = handler.on_arg_id();
 6946|   333k|        }
 6947|   333k|        constexpr void operator()(std::size_t id)
 6948|   333k|        {
 6949|   333k|            arg_id = handler.on_arg_id(id);
 6950|   333k|        }
 6951|       |
 6952|   333k|        constexpr void on_error(const char* msg)
 6953|   333k|        {
 6954|   333k|            SCN_UNLIKELY_ATTR
 6955|   333k|            handler.on_error(msg);
 6956|   333k|        }
 6957|       |
 6958|   333k|        Handler& handler;
 6959|   333k|        std::size_t arg_id;
 6960|   333k|    };
 6961|       |
 6962|   333k|    ++begin;
 6963|   333k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   333k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 333k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   333k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 333k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   333k|    else {
 6975|   333k|        auto adapter = id_adapter{handler, 0};
 6976|   333k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   333k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   333k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 333k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   333k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 333k, False: 0]
  ------------------
 6987|   333k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   333k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   333k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  |  Branch (859:45): [True: 0, False: 333k]
  |  |  |  Branch (859:45): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   333k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   333k|    }
 7003|   333k|    return begin + 1;
 7004|   333k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   667k|    {
 8039|   667k|        return m_args.get(id);
 8040|   667k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   667k|    {
 8049|   667k|        return m_locale;
 8050|   667k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   667k|    {
 5566|   667k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 667k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   667k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   667k|        do_check_arg_id(id);
 5574|   667k|        return id;
 5575|   667k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   667k|{
 6054|   667k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   667k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   667k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   333k|{
 6443|   333k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   333k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 333k, False: 0]
  |  Branch (6444:26): [True: 0, False: 333k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   333k|    handler();
 6449|   333k|    return begin;
 6450|   333k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   333k|        {
 6945|   333k|            arg_id = handler.on_arg_id();
 6946|   333k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.33M|    {
 5252|  1.33M|        return m_type;
 5253|  1.33M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   667k|    {
 5561|   667k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   667k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   440k|{
 4344|   440k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 440k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   440k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   440k|                            ranges::default_sentinel};
 4350|   440k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   440k|    {
 4177|   440k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   440k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   440k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.33M|    {
 5550|  1.33M|        return m_format.data();
 5551|  1.33M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   333k|    {
 7122|   333k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   333k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   333k|{
 6858|   333k|    auto do_presentation = [&]() -> const CharT* {
 6859|   333k|        if (*begin == CharT{'['}) {
 6860|   333k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   333k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   333k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   333k|                return begin;
 6866|   333k|            }
 6867|   333k|            handler.on_character_set_string(set);
 6868|   333k|            return begin;
 6869|   333k|        }
 6870|   333k|        if (*begin == CharT{'/'}) {
 6871|   333k|            return parse_presentation_regex(begin, end, handler);
 6872|   333k|        }
 6873|   333k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   333k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   333k|            handler.on_error("Invalid type specifier in format string");
 6876|   333k|            return begin;
 6877|   333k|        }
 6878|   333k|        handler.on_type(type);
 6879|   333k|        return begin;
 6880|   333k|    };
 6881|       |
 6882|   333k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 333k, False: 0]
  |  Branch (6882:28): [True: 333k, False: 0]
  ------------------
 6883|   333k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 333k, False: 0]
  |  Branch (6883:36): [True: 262k, False: 71.3k]
  ------------------
 6884|   262k|        return do_presentation();
 6885|   262k|    }
 6886|       |
 6887|  71.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  71.3k|    begin = parse_align(begin, end, handler);
 6893|  71.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  71.3k|    begin = parse_width(begin, end, handler);
 6899|  71.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  71.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 71.3k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  71.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 71.3k, False: 0]
  ------------------
 6918|  71.3k|        handler.on_localized();
 6919|  71.3k|        ++begin;
 6920|  71.3k|    }
 6921|  71.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  71.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 71.3k, False: 0]
  |  Branch (6926:25): [True: 0, False: 71.3k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  71.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  71.3k|    return begin;
 6935|  71.3k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   667k|{
 6507|   667k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 524k, False: 142k]
  |  Branch (6507:33): [True: 524k, False: 0]
  ------------------
 6508|   667k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 142k, False: 0]
  |  Branch (6508:33): [True: 142k, False: 0]
  ------------------
 6509|   667k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   262k|    auto do_presentation = [&]() -> const CharT* {
 6859|   262k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 262k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   262k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 262k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   262k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   262k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   262k|        handler.on_type(type);
 6879|   262k|        return begin;
 6880|   262k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   524k|{
 6455|   524k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 524k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 524k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 524k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 524k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 524k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 524k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 524k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 524k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 524k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 524k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   144k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 144k, False: 380k]
  ------------------
 6474|   144k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 524k]
  ------------------
 6475|   144k|            return presentation_type::float_hex;
 6476|  94.7k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 94.7k, False: 430k]
  ------------------
 6477|  94.7k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 524k]
  ------------------
 6478|  94.7k|            return presentation_type::float_scientific;
 6479|   142k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 142k, False: 381k]
  ------------------
 6480|   142k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 524k]
  ------------------
 6481|   142k|            return presentation_type::float_fixed;
 6482|   142k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 142k, False: 381k]
  ------------------
 6483|   142k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 524k]
  ------------------
 6484|   142k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 524k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 524k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 524k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 524k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 524k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 524k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 524k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   524k|    }
 6502|   524k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  71.3k|{
 6532|  71.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  71.3k|    auto check_align = [](wchar_t ch) {
 6535|  71.3k|        switch (ch) {
 6536|  71.3k|            case L'<':
 6537|  71.3k|                return align_type::left;
 6538|  71.3k|            case L'>':
 6539|  71.3k|                return align_type::right;
 6540|  71.3k|            case L'^':
 6541|  71.3k|                return align_type::center;
 6542|  71.3k|            default:
 6543|  71.3k|                return align_type::none;
 6544|  71.3k|        }
 6545|  71.3k|    };
 6546|       |
 6547|  71.3k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  71.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.3k]
  |  |  |  Branch (859:45): [True: 0, False: 71.3k]
  |  |  |  Branch (859:45): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
 6549|  71.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  71.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  71.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  71.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  71.3k|    const auto begin_before_fill = begin;
 6559|  71.3k|    begin += potential_fill_len;
 6560|       |
 6561|  71.3k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 71.3k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  71.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  71.3k|    const auto begin_after_fill = begin;
 6567|  71.3k|    ++begin;
 6568|       |
 6569|  71.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 71.3k, False: 0]
  ------------------
 6570|  71.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  71.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 71.3k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  71.3k|    }
 6578|       |
 6579|  71.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 71.3k, False: 0]
  ------------------
 6580|  71.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 71.3k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  71.3k|        return begin_before_fill;
 6585|  71.3k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  71.3k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   142k|{
 6514|   142k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   142k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   142k|        return 1;
 6517|   142k|    }
 6518|   142k|    else {
 6519|   142k|        const auto lengths =
 6520|   142k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   142k|            "\3\4";
 6522|   142k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   142k|        return len;
 6524|   142k|    }
 6525|   142k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   142k|    auto check_align = [](wchar_t ch) {
 6535|   142k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 142k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 142k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 142k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   142k|            default:
  ------------------
  |  Branch (6542:13): [True: 142k, False: 0]
  ------------------
 6543|   142k|                return align_type::none;
 6544|   142k|        }
 6545|   142k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  71.3k|{
 6597|  71.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  71.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 71.3k, False: 0]
  |  Branch (6599:33): [True: 0, False: 71.3k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  71.3k|    return begin;
 6610|  71.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  71.3k|    {
 7127|  71.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  71.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 71.3k, False: 0]
  ------------------
 7129|  71.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 71.3k, False: 0]
  ------------------
 7130|  71.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 71.3k]
  ------------------
 7131|  71.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  71.3k|        Handler::on_localized();
 7139|  71.3k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   333k|{
 8417|   333k|#define SCN_VISIT(Type)                                         \
 8418|   333k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   333k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   333k|    }                                                           \
 8421|   333k|    else {                                                      \
 8422|   333k|        return vis(monostate_val);                              \
 8423|   333k|    }
 8424|       |
 8425|   333k|    monostate monostate_val{};
 8426|       |
 8427|   333k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 333k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 333k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 333k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 333k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 333k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 333k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 333k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 333k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 333k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 333k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 333k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 333k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 333k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 333k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 333k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   110k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 110k, False: 222k]
  ------------------
 8459|   110k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   110k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   110k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   110k|    }                                                           \
  |  | 8421|   110k|    else {                                                      \
  |  | 8422|   110k|        return vis(monostate_val);                              \
  |  | 8423|   110k|    }
  ------------------
 8460|   111k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 111k, False: 222k]
  ------------------
 8461|   111k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8462|   111k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 111k, False: 222k]
  ------------------
 8463|   111k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 333k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 333k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 333k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 333k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 333k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 333k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 333k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 333k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 333k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   333k|            SCN_CLANG_POP
 8495|   333k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   106k|{
 8417|   106k|#define SCN_VISIT(Type)                                         \
 8418|   106k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   106k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   106k|    }                                                           \
 8421|   106k|    else {                                                      \
 8422|   106k|        return vis(monostate_val);                              \
 8423|   106k|    }
 8424|       |
 8425|   106k|    monostate monostate_val{};
 8426|       |
 8427|   106k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 106k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 106k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 106k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 106k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 106k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 106k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 106k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 106k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 106k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 106k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 106k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 106k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 106k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 106k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 106k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  35.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 35.4k, False: 71.4k]
  ------------------
 8459|  35.4k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  35.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  35.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  35.4k|    }                                                           \
  |  | 8421|  35.4k|    else {                                                      \
  |  | 8422|  35.4k|        return vis(monostate_val);                              \
  |  | 8423|  35.4k|    }
  ------------------
 8460|  35.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 35.6k, False: 71.3k]
  ------------------
 8461|  35.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  35.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  35.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  35.6k|    }                                                           \
  |  | 8421|  35.6k|    else {                                                      \
  |  | 8422|  35.6k|        return vis(monostate_val);                              \
  |  | 8423|  35.6k|    }
  ------------------
 8462|  35.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 35.8k, False: 71.0k]
  ------------------
 8463|  35.8k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  35.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  35.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  35.8k|    }                                                           \
  |  | 8421|  35.8k|    else {                                                      \
  |  | 8422|  35.8k|        return vis(monostate_val);                              \
  |  | 8423|  35.8k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 106k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 106k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 106k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 106k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 106k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 106k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 106k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 106k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 106k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   106k|            SCN_CLANG_POP
 8495|   106k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   333k|{
 7044|   333k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   333k|    handler.check_args_exhausted();
 7046|   333k|    return handler.get_error();
 7047|   333k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   333k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   333k|    auto begin = format.data();
 7013|   333k|    auto it = begin;
 7014|   333k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   432k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 333k, False: 98.6k]
  ------------------
 7017|   333k|        const auto ch = *it++;
 7018|   333k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 333k, False: 0]
  ------------------
 7019|   333k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   333k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   333k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 234k, False: 98.6k]
  ------------------
 7023|   234k|                return;
 7024|   234k|            }
 7025|   333k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   333k|    }
 7036|       |
 7037|  98.6k|    handler.on_literal_text(begin, end);
 7038|  98.6k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  98.6k|    {
 8175|  98.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  98.6k|    static_cast<    \
  |  |  929|  98.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  98.6k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   333k|{
 6942|   333k|    struct id_adapter {
 6943|   333k|        constexpr void operator()()
 6944|   333k|        {
 6945|   333k|            arg_id = handler.on_arg_id();
 6946|   333k|        }
 6947|   333k|        constexpr void operator()(std::size_t id)
 6948|   333k|        {
 6949|   333k|            arg_id = handler.on_arg_id(id);
 6950|   333k|        }
 6951|       |
 6952|   333k|        constexpr void on_error(const char* msg)
 6953|   333k|        {
 6954|   333k|            SCN_UNLIKELY_ATTR
 6955|   333k|            handler.on_error(msg);
 6956|   333k|        }
 6957|       |
 6958|   333k|        Handler& handler;
 6959|   333k|        std::size_t arg_id;
 6960|   333k|    };
 6961|       |
 6962|   333k|    ++begin;
 6963|   333k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   333k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 333k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   333k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 333k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   333k|    else {
 6975|   333k|        auto adapter = id_adapter{handler, 0};
 6976|   333k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   333k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   333k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 333k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   333k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 333k, False: 0]
  ------------------
 6987|   333k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   333k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   333k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  |  Branch (859:45): [True: 0, False: 333k]
  |  |  |  Branch (859:45): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   333k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   333k|    }
 7003|   333k|    return begin + 1;
 7004|   333k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   333k|{
 6443|   333k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   333k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 333k, False: 0]
  |  Branch (6444:26): [True: 0, False: 333k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   333k|    handler();
 6449|   333k|    return begin;
 6450|   333k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   333k|        {
 6945|   333k|            arg_id = handler.on_arg_id();
 6946|   333k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   333k|    {
 7122|   333k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   333k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   333k|{
 6858|   333k|    auto do_presentation = [&]() -> const CharT* {
 6859|   333k|        if (*begin == CharT{'['}) {
 6860|   333k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   333k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   333k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   333k|                return begin;
 6866|   333k|            }
 6867|   333k|            handler.on_character_set_string(set);
 6868|   333k|            return begin;
 6869|   333k|        }
 6870|   333k|        if (*begin == CharT{'/'}) {
 6871|   333k|            return parse_presentation_regex(begin, end, handler);
 6872|   333k|        }
 6873|   333k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   333k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   333k|            handler.on_error("Invalid type specifier in format string");
 6876|   333k|            return begin;
 6877|   333k|        }
 6878|   333k|        handler.on_type(type);
 6879|   333k|        return begin;
 6880|   333k|    };
 6881|       |
 6882|   333k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 333k, False: 0]
  |  Branch (6882:28): [True: 333k, False: 0]
  ------------------
 6883|   333k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 333k, False: 0]
  |  Branch (6883:36): [True: 262k, False: 71.2k]
  ------------------
 6884|   262k|        return do_presentation();
 6885|   262k|    }
 6886|       |
 6887|  71.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  71.2k|    begin = parse_align(begin, end, handler);
 6893|  71.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  71.2k|    begin = parse_width(begin, end, handler);
 6899|  71.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  71.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 71.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  71.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 71.2k, False: 0]
  ------------------
 6918|  71.2k|        handler.on_localized();
 6919|  71.2k|        ++begin;
 6920|  71.2k|    }
 6921|  71.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  71.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 71.2k, False: 0]
  |  Branch (6926:25): [True: 0, False: 71.2k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  71.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  71.2k|    return begin;
 6935|  71.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   262k|    auto do_presentation = [&]() -> const CharT* {
 6859|   262k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 262k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   262k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 262k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   262k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   262k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   262k|        handler.on_type(type);
 6879|   262k|        return begin;
 6880|   262k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  71.2k|{
 6532|  71.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  71.2k|    auto check_align = [](wchar_t ch) {
 6535|  71.2k|        switch (ch) {
 6536|  71.2k|            case L'<':
 6537|  71.2k|                return align_type::left;
 6538|  71.2k|            case L'>':
 6539|  71.2k|                return align_type::right;
 6540|  71.2k|            case L'^':
 6541|  71.2k|                return align_type::center;
 6542|  71.2k|            default:
 6543|  71.2k|                return align_type::none;
 6544|  71.2k|        }
 6545|  71.2k|    };
 6546|       |
 6547|  71.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  71.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.2k]
  |  |  |  Branch (859:45): [True: 0, False: 71.2k]
  |  |  |  Branch (859:45): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 6549|  71.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  71.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  71.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  71.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  71.2k|    const auto begin_before_fill = begin;
 6559|  71.2k|    begin += potential_fill_len;
 6560|       |
 6561|  71.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 71.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  71.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  71.2k|    const auto begin_after_fill = begin;
 6567|  71.2k|    ++begin;
 6568|       |
 6569|  71.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 71.2k, False: 0]
  ------------------
 6570|  71.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  71.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 71.2k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  71.2k|    }
 6578|       |
 6579|  71.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 71.2k, False: 0]
  ------------------
 6580|  71.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 71.2k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  71.2k|        return begin_before_fill;
 6585|  71.2k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  71.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   142k|    auto check_align = [](wchar_t ch) {
 6535|   142k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 142k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 142k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 142k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   142k|            default:
  ------------------
  |  Branch (6542:13): [True: 142k, False: 0]
  ------------------
 6543|   142k|                return align_type::none;
 6544|   142k|        }
 6545|   142k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  71.2k|{
 6597|  71.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  71.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 71.2k, False: 0]
  |  Branch (6599:33): [True: 0, False: 71.2k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  71.2k|    return begin;
 6610|  71.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  71.2k|    {
 7127|  71.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  71.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 71.2k, False: 0]
  ------------------
 7129|  71.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 71.2k, False: 0]
  ------------------
 7130|  71.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 71.2k]
  ------------------
 7131|  71.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  71.2k|        Handler::on_localized();
 7139|  71.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   333k|{
 8417|   333k|#define SCN_VISIT(Type)                                         \
 8418|   333k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   333k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   333k|    }                                                           \
 8421|   333k|    else {                                                      \
 8422|   333k|        return vis(monostate_val);                              \
 8423|   333k|    }
 8424|       |
 8425|   333k|    monostate monostate_val{};
 8426|       |
 8427|   333k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 333k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 333k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 333k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 333k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 333k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 333k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 333k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 333k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 333k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 333k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 333k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 333k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 333k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 333k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 333k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   110k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 110k, False: 222k]
  ------------------
 8459|   110k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   110k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   110k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   110k|    }                                                           \
  |  | 8421|   110k|    else {                                                      \
  |  | 8422|   110k|        return vis(monostate_val);                              \
  |  | 8423|   110k|    }
  ------------------
 8460|   111k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 111k, False: 222k]
  ------------------
 8461|   111k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8462|   111k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 111k, False: 222k]
  ------------------
 8463|   111k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 333k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 333k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 333k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 333k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 333k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 333k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 333k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 333k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 333k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   333k|            SCN_CLANG_POP
 8495|   333k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   305k|    {
 4076|   305k|        sync(0);
 4077|   305k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   569k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  71.3k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  67.3k|{
   89|  67.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  67.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  67.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  67.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   202k|{
   44|   202k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   202k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  67.3k|{
  127|  67.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  67.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  67.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  67.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   202k|{
   60|   202k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   202k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  11.8k|{
  163|  11.8k|    T value;
  164|  11.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.83k, False: 4.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.83k|    }                                                  \
  |  |  |  | 3671|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.00k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.00k|    static_cast<    \
  |  |  929|  4.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.00k|    static_cast<    \
  |  |  929|  4.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  35.6k|{
   72|  35.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  35.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  67.4k|{
   89|  67.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  67.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  67.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  67.4k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  67.4k|{
  127|  67.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  67.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  67.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  67.4k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  11.8k|{
  163|  11.8k|    T value;
  164|  11.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.83k, False: 4.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.83k|    }                                                  \
  |  |  |  | 3671|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.05k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.05k|    static_cast<    \
  |  |  929|  4.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.05k|    static_cast<    \
  |  |  929|  4.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.8k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  67.7k|{
   89|  67.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  67.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  67.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  67.7k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  67.7k|{
  127|  67.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  67.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  67.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  67.7k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  11.9k|{
  163|  11.9k|    T value;
  164|  11.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.83k, False: 4.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.83k|    }                                                  \
  |  |  |  | 3671|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.14k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.14k|    static_cast<    \
  |  |  929|  4.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.14k|    static_cast<    \
  |  |  929|  4.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.9k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  67.2k|{
   89|  67.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  67.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  67.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.2k|    static_cast<    \
  |  |  929|  67.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.2k|    static_cast<    \
  |  |  929|  67.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  67.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   202k|{
   44|   202k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   202k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  67.2k|{
  127|  67.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  67.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  67.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.2k|    static_cast<    \
  |  |  929|  67.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.2k|    static_cast<    \
  |  |  929|  67.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  67.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   202k|{
   60|   202k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   202k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  11.8k|{
  163|  11.8k|    T value;
  164|  11.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.83k, False: 3.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.83k|    }                                                  \
  |  |  |  | 3671|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.98k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.98k|    static_cast<    \
  |  |  929|  3.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.98k|    static_cast<    \
  |  |  929|  3.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  35.6k|{
   72|  35.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  35.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  67.4k|{
   89|  67.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  67.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  67.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  67.4k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  67.4k|{
  127|  67.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  67.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  67.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  67.4k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  11.8k|{
  163|  11.8k|    T value;
  164|  11.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.83k, False: 4.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.83k|    }                                                  \
  |  |  |  | 3671|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.03k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.03k|    static_cast<    \
  |  |  929|  4.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.03k|    static_cast<    \
  |  |  929|  4.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.8k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  67.7k|{
   89|  67.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  67.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  67.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  67.7k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  67.7k|{
  127|  67.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  67.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  67.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  67.7k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  11.9k|{
  163|  11.9k|    T value;
  164|  11.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.83k, False: 4.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.83k|    }                                                  \
  |  |  |  | 3671|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.13k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.13k|    static_cast<    \
  |  |  929|  4.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.13k|    static_cast<    \
  |  |  929|  4.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.9k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  3.07M|{
  653|  3.07M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  3.07M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.33M|{
  659|  1.33M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.33M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 665k, False: 665k]
  ------------------
  661|  1.33M|                    : std::locale{};
  662|  1.33M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.78M|{
 1221|  1.78M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.78M|                                  m_nan_payload_buffer, value);
 1223|  1.78M|    value = this->setsign(value);
 1224|  1.78M|    return n;
 1225|  1.78M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   144k|{
 1221|   144k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   144k|                                  m_nan_payload_buffer, value);
 1223|   144k|    value = this->setsign(value);
 1224|   144k|    return n;
 1225|   144k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.93M|{
 1221|  1.93M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.93M|                                  m_nan_payload_buffer, value);
 1223|  1.93M|    value = this->setsign(value);
 1224|  1.93M|    return n;
 1225|  1.93M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   144k|{
 1221|   144k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   144k|                                  m_nan_payload_buffer, value);
 1223|   144k|    value = this->setsign(value);
 1224|   144k|    return n;
 1225|   144k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.95M|{
 1221|  1.95M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.95M|                                  m_nan_payload_buffer, value);
 1223|  1.95M|    value = this->setsign(value);
 1224|  1.95M|    return n;
 1225|  1.95M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   145k|{
 1221|   145k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   145k|                                  m_nan_payload_buffer, value);
 1223|   145k|    value = this->setsign(value);
 1224|   145k|    return n;
 1225|   145k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.29M|{
 2184|  1.29M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.29M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  1.36M|{
 2192|  1.36M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  1.36M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.29M, False: 70.4k]
  |  |  ------------------
  ------------------
 2194|  1.29M|        source.sync(*n);
 2195|  1.29M|    }
 2196|  70.4k|    else {
 2197|  70.4k|        source.sync_all();
 2198|  70.4k|    }
 2199|  1.36M|    return n;
 2200|  1.36M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   202k|{
 2208|   202k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   202k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   202k|{
 2216|   202k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   202k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   202k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 61.4k, False: 140k]
  |  |  ------------------
  ------------------
 2218|  61.4k|        source.sync(*n);
 2219|  61.4k|    }
 2220|   140k|    else {
 2221|   140k|        source.sync_all();
 2222|   140k|    }
 2223|   202k|    return n;
 2224|   202k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.61M|{
  194|  2.61M|    return find_classic_impl(
  195|  2.61M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.61M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.61M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  5.89M|{
  202|  5.89M|    return find_classic_impl(
  203|  5.89M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  5.89M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  5.89M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  1.29M|{
 2141|  1.29M|    return vscan_internal(source, format, args);
 2142|  1.29M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  1.36M|{
 2147|  1.36M|    auto n = vscan_internal(source, format, args);
 2148|  1.36M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.29M, False: 70.4k]
  |  |  ------------------
  ------------------
 2149|  1.29M|        source.sync(*n);
 2150|  1.29M|    }
 2151|  70.4k|    else {
 2152|  70.4k|        source.sync_all();
 2153|  70.4k|    }
 2154|  1.36M|    return n;
 2155|  1.36M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   202k|{
 2161|   202k|    return vscan_internal(source, format, args);
 2162|   202k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   202k|{
 2167|   202k|    auto n = vscan_internal(source, format, args);
 2168|   202k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   202k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 61.4k, False: 140k]
  |  |  ------------------
  ------------------
 2169|  61.4k|        source.sync(*n);
 2170|  61.4k|    }
 2171|   140k|    else {
 2172|   140k|        source.sync_all();
 2173|   140k|    }
 2174|   202k|    return n;
 2175|   202k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   288k|{
 2251|   288k|    return vscan_value_internal(source, arg);
 2252|   288k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   280k|{
 2256|   280k|    auto n = vscan_value_internal(source, arg);
 2257|   280k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   280k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 268k, False: 11.7k]
  |  |  ------------------
  ------------------
 2258|   268k|        source.sync(*n);
 2259|   268k|    }
 2260|  11.7k|    else {
 2261|  11.7k|        source.sync_all();
 2262|  11.7k|    }
 2263|   280k|    return n;
 2264|   280k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  35.6k|{
 2270|  35.6k|    return vscan_value_internal(source, arg);
 2271|  35.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  35.6k|{
 2276|  35.6k|    auto n = vscan_value_internal(source, arg);
 2277|  35.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  35.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.1k, False: 23.4k]
  |  |  ------------------
  ------------------
 2278|  12.1k|        source.sync(*n);
 2279|  12.1k|    }
 2280|  23.4k|    else {
 2281|  23.4k|        source.sync_all();
 2282|  23.4k|    }
 2283|  35.6k|    return n;
 2284|  35.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.61M|{
  118|  2.61M|    auto it = source.begin();
  119|       |
  120|  10.4M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 8.84M, False: 1.60M]
  ------------------
  121|  8.84M|        auto sv =
  122|  8.84M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  8.84M|                .substr(0, 8);
  124|       |
  125|  8.84M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 8.62M, False: 225k]
  ------------------
  126|  8.62M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  8.62M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  8.62M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 922k, False: 7.69M]
  ------------------
  129|   922k|                break;
  130|   922k|            }
  131|  7.69M|            continue;
  132|  8.62M|        }
  133|       |
  134|   788k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 654k, False: 134k]
  ------------------
  135|   654k|            auto tmp =
  136|   654k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   654k|            auto res = get_next_code_point(tmp);
  138|   654k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 90.8k, False: 563k]
  ------------------
  139|  90.8k|                return it;
  140|  90.8k|            }
  141|   563k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   563k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   563k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   563k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   563k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   563k|        }
  145|   225k|    }
  146|       |
  147|  2.52M|    return detail::make_string_view_iterator(source, it);
  148|  2.61M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  12.5M|{
  105|  12.5M|    static_assert(sizeof(*source.data()) == 1);
  106|  12.5M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  12.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  12.5M|    uint64_t word{};
  108|  12.5M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  12.5M|    return has_byte_greater(word, 127) != 0;
  111|  12.5M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  56.4M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   654k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  5.89M|{
  118|  5.89M|    auto it = source.begin();
  119|       |
  120|  6.42M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.73M, False: 2.69M]
  ------------------
  121|  3.73M|        auto sv =
  122|  3.73M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.73M|                .substr(0, 8);
  124|       |
  125|  3.73M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.49M, False: 243k]
  ------------------
  126|  3.49M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.49M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.49M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.97M, False: 519k]
  ------------------
  129|  2.97M|                break;
  130|  2.97M|            }
  131|   519k|            continue;
  132|  3.49M|        }
  133|       |
  134|   462k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 443k, False: 18.6k]
  ------------------
  135|   443k|            auto tmp =
  136|   443k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   443k|            auto res = get_next_code_point(tmp);
  138|   443k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 224k, False: 219k]
  ------------------
  139|   224k|                return it;
  140|   224k|            }
  141|   219k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   219k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   219k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   219k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   219k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   219k|        }
  145|   243k|    }
  146|       |
  147|  5.66M|    return detail::make_string_view_iterator(source, it);
  148|  5.89M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  5.59M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   443k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.78M|{
 1138|  1.78M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.1k, False: 1.77M]
  ------------------
 1139|  15.1k|        value = std::numeric_limits<T>::infinity();
 1140|  15.1k|        return 3;
 1141|  15.1k|    }
 1142|  1.77M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.2k, False: 1.76M]
  ------------------
 1143|  11.2k|        value = std::numeric_limits<T>::infinity();
 1144|  11.2k|        return 8;
 1145|  11.2k|    }
 1146|  1.76M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 64.2k, False: 1.69M]
  ------------------
 1147|  64.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  64.2k|        return 3;
 1149|  64.2k|    }
 1150|  1.69M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.69M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.69M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.69M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 383k, False: 1.31M]
  ------------------
 1185|   383k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 378k]
  |  |  ------------------
  ------------------
 1186|  4.54k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.54k|                                         "Invalid floating-point digit");
 1188|  4.54k|        }
 1189|   383k|    }
 1190|  1.69M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 1.68M]
  |  |  ------------------
  ------------------
 1191|  11.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.9k|                                     "Invalid floating-point digit");
 1193|  11.9k|    }
 1194|       |
 1195|  1.68M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.68M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.68M|            double tmp{};
 1200|  1.68M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.68M|            value = tmp;
 1202|  1.68M|            return ret;
 1203|  1.68M|        }
 1204|  1.68M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.68M|            return fast_float_fallback(data, value);
 1208|  1.68M|        }
 1209|  1.68M|    }
 1210|  1.68M|    else {
 1211|       |        // Default to fast_float
 1212|  1.68M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.68M|    }
 1214|  1.68M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.68M|    {
 1078|  1.68M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  6.25M|    {
  712|  6.25M|        return {kind, options};
  713|  6.25M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.68M|    {
 1082|  1.68M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 378k, False: 1.30M]
  ------------------
 1083|  1.68M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 62.3k, False: 1.23M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   440k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   440k|                                              value);
 1087|   440k|        }
 1088|       |
 1089|  1.23M|        const auto flags = get_flags();
 1090|  1.23M|        const auto view = get_view();
 1091|  1.23M|        const auto result = fast_float::from_chars(
 1092|  1.23M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.23M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.23M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.23M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 1.22M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  11.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  11.0k|                                              value);
 1102|  11.0k|        }
 1103|       |
 1104|  1.22M|        return result.ptr - view.data();
 1105|  1.23M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   452k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   452k|    {
 1048|   452k|#if !SCN_DISABLE_STRTOD
 1049|   452k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   452k|    }
 1056|   452k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   452k|    {
  894|   452k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   470k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   452k|    {
  898|   452k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   452k|                           generic_strtod);
  900|   452k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   452k|    {
  732|   452k|        CharT* end{};
  733|   452k|        errno = 0;
  734|   452k|        value = strtod_cb(src, &end);
  735|   452k|        const auto saved_errno = errno;
  736|   452k|        auto chars_read = end - src;
  737|       |
  738|   452k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   452k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.2k, False: 438k]
  |  |  ------------------
  ------------------
  740|  13.2k|            return unexpected(e);
  741|  13.2k|        }
  742|       |
  743|   438k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 376k, False: 61.8k]
  ------------------
  744|   438k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 376k, False: 0]
  ------------------
  745|   376k|            chars_read -= 2;
  746|   376k|        }
  747|       |
  748|   438k|        return chars_read;
  749|   452k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   470k|    {
  778|   470k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 126k, False: 343k]
  |  Branch (778:37): [True: 0, False: 126k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   470k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 62.5k, False: 407k]
  ------------------
  785|   470k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 62.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   470k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 15.2k, False: 455k]
  |  Branch (791:34): [True: 2.21k, False: 13.0k]
  ------------------
  792|  2.21k|            SCN_UNLIKELY_ATTR
  793|  2.21k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.21k|        }
  795|       |
  796|   468k|        SCN_GCC_COMPAT_PUSH
  797|   468k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   468k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 468k, False: 0]
  ------------------
  800|   468k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 468k, False: 0]
  ------------------
  801|   468k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 12.3k, False: 455k]
  ------------------
  802|  12.3k|            SCN_UNLIKELY_ATTR
  803|  12.3k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  12.3k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   455k|            return {};
  809|   468k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   485k|{
  687|   485k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 128k, False: 356k]
  |  Branch (687:25): [True: 0, False: 356k]
  ------------------
  688|   485k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   452k|    {
  755|   452k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 444k, False: 7.59k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   444k|            auto first_space = read_until_classic_space(input.view());
  758|   444k|            input.assign(
  759|   444k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   444k|        }
  761|       |
  762|   452k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 378k, False: 73.4k]
  ------------------
  763|   378k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   378k|                input.get_allocated_string().insert(0, "0x");
  765|   378k|            }
  766|   378k|            else {
  767|   378k|                input.get_allocated_string().insert(0, L"0x");
  768|   378k|            }
  769|   378k|        }
  770|       |
  771|   452k|        return input.get_allocated_string().c_str();
  772|   452k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   452k|    {
  905|   452k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   452k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   452k|        }
  908|   452k|        else {
  909|   452k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   452k|        }
  911|   452k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   452k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   452k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   452k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   452k|            return std::strtof(str, str_end);
  839|   452k|        }
  840|   452k|        else if constexpr (std::is_same_v<T, double>) {
  841|   452k|            return std::strtod(str, str_end);
  842|   452k|        }
  843|   452k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   452k|            return std::strtold(str, str_end);
  845|   452k|        }
  846|   452k|#endif
  847|   452k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.73M|    {
 1061|  2.73M|        unsigned format_flags{};
 1062|  2.73M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.71M, False: 23.3k]
  ------------------
 1063|  2.71M|            format_flags |= fast_float::fixed;
 1064|  2.71M|        }
 1065|  2.73M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 2.37M, False: 361k]
  ------------------
 1066|  2.37M|            format_flags |= fast_float::scientific;
 1067|  2.37M|        }
 1068|       |
 1069|  2.73M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.73M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  1.23M|    {
 1110|  1.23M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.23M|            return m_input.view();
 1112|  1.23M|        }
 1113|  1.23M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.23M|            return std::u16string_view{
 1115|  1.23M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.23M|                m_input.view().size()};
 1117|  1.23M|        }
 1118|  1.23M|        else {
 1119|  1.23M|            return std::u32string_view{
 1120|  1.23M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.23M|                m_input.view().size()};
 1122|  1.23M|        }
 1123|  1.23M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   144k|{
 1138|   144k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 144k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   144k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 144k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   144k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 144k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   144k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 144k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   144k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   144k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 32.2k, False: 112k]
  ------------------
 1185|  32.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.3k, False: 16.8k]
  |  |  ------------------
  ------------------
 1186|  15.3k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  15.3k|                                         "Invalid floating-point digit");
 1188|  15.3k|        }
 1189|  32.2k|    }
 1190|   128k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 90.5k]
  |  |  ------------------
  ------------------
 1191|  38.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  38.4k|                                     "Invalid floating-point digit");
 1193|  38.4k|    }
 1194|       |
 1195|  90.5k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  90.5k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  90.5k|            double tmp{};
 1200|  90.5k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  90.5k|            value = tmp;
 1202|  90.5k|            return ret;
 1203|  90.5k|        }
 1204|  90.5k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  90.5k|            return fast_float_fallback(data, value);
 1208|  90.5k|        }
 1209|  90.5k|    }
 1210|  90.5k|    else {
 1211|       |        // Default to fast_float
 1212|  90.5k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  90.5k|    }
 1214|  90.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  90.5k|    {
 1078|  90.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   308k|    {
  712|   308k|        return {kind, options};
  713|   308k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  90.5k|    {
 1082|  90.5k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 16.7k, False: 73.7k]
  ------------------
 1083|  90.5k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 231, False: 73.5k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  17.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  17.0k|                                              value);
 1087|  17.0k|        }
 1088|       |
 1089|  73.5k|        const auto flags = get_flags();
 1090|  73.5k|        const auto view = get_view();
 1091|  73.5k|        const auto result = fast_float::from_chars(
 1092|  73.5k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  73.5k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 73.5k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  73.5k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.30k, False: 72.1k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.30k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.30k|                                              value);
 1102|  1.30k|        }
 1103|       |
 1104|  72.1k|        return result.ptr - view.data();
 1105|  73.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  18.3k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  18.3k|    {
 1048|  18.3k|#if !SCN_DISABLE_STRTOD
 1049|  18.3k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  18.3k|    }
 1056|  18.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  18.3k|    {
  894|  18.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  18.3k|    {
  898|  18.3k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  18.3k|                           generic_strtod);
  900|  18.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  18.3k|    {
  732|  18.3k|        CharT* end{};
  733|  18.3k|        errno = 0;
  734|  18.3k|        value = strtod_cb(src, &end);
  735|  18.3k|        const auto saved_errno = errno;
  736|  18.3k|        auto chars_read = end - src;
  737|       |
  738|  18.3k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  18.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.33k, False: 16.9k]
  |  |  ------------------
  ------------------
  740|  1.33k|            return unexpected(e);
  741|  1.33k|        }
  742|       |
  743|  16.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 16.7k, False: 231]
  ------------------
  744|  16.9k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 16.7k, False: 0]
  ------------------
  745|  16.7k|            chars_read -= 2;
  746|  16.7k|        }
  747|       |
  748|  16.9k|        return chars_read;
  749|  18.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  18.3k|    {
  755|  18.3k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 17.4k, False: 902]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  17.4k|            auto first_space = read_until_classic_space(input.view());
  758|  17.4k|            input.assign(
  759|  17.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  17.4k|        }
  761|       |
  762|  18.3k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 16.7k, False: 1.53k]
  ------------------
  763|  16.7k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  16.7k|                input.get_allocated_string().insert(0, "0x");
  765|  16.7k|            }
  766|  16.7k|            else {
  767|  16.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  16.7k|            }
  769|  16.7k|        }
  770|       |
  771|  18.3k|        return input.get_allocated_string().c_str();
  772|  18.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  18.3k|    {
  905|  18.3k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  18.3k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  18.3k|        }
  908|  18.3k|        else {
  909|  18.3k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  18.3k|        }
  911|  18.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  18.3k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  18.3k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  18.3k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  18.3k|            return std::wcstof(str, str_end);
  877|  18.3k|        }
  878|  18.3k|        else if constexpr (std::is_same_v<T, double>) {
  879|  18.3k|            return std::wcstod(str, str_end);
  880|  18.3k|        }
  881|  18.3k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  18.3k|            return std::wcstold(str, str_end);
  883|  18.3k|        }
  884|  18.3k|#endif
  885|  18.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  73.5k|    {
 1110|  73.5k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  73.5k|            return m_input.view();
 1112|  73.5k|        }
 1113|  73.5k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  73.5k|            return std::u16string_view{
 1115|  73.5k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  73.5k|                m_input.view().size()};
 1117|  73.5k|        }
 1118|  73.5k|        else {
 1119|  73.5k|            return std::u32string_view{
 1120|  73.5k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  73.5k|                m_input.view().size()};
 1122|  73.5k|        }
 1123|  73.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.93M|{
 1138|  1.93M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 16.4k, False: 1.91M]
  ------------------
 1139|  16.4k|        value = std::numeric_limits<T>::infinity();
 1140|  16.4k|        return 3;
 1141|  16.4k|    }
 1142|  1.91M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 12.0k, False: 1.90M]
  ------------------
 1143|  12.0k|        value = std::numeric_limits<T>::infinity();
 1144|  12.0k|        return 8;
 1145|  12.0k|    }
 1146|  1.90M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 66.3k, False: 1.83M]
  ------------------
 1147|  66.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  66.3k|        return 3;
 1149|  66.3k|    }
 1150|  1.83M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.83M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.83M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.83M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 399k, False: 1.43M]
  ------------------
 1185|   399k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.87k, False: 394k]
  |  |  ------------------
  ------------------
 1186|  4.87k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.87k|                                         "Invalid floating-point digit");
 1188|  4.87k|        }
 1189|   399k|    }
 1190|  1.82M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 1.81M]
  |  |  ------------------
  ------------------
 1191|  13.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  13.4k|                                     "Invalid floating-point digit");
 1193|  13.4k|    }
 1194|       |
 1195|  1.81M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.81M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.81M|            double tmp{};
 1200|  1.81M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.81M|            value = tmp;
 1202|  1.81M|            return ret;
 1203|  1.81M|        }
 1204|  1.81M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.81M|            return fast_float_fallback(data, value);
 1208|  1.81M|        }
 1209|  1.81M|    }
 1210|  1.81M|    else {
 1211|       |        // Default to fast_float
 1212|  1.81M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.81M|    }
 1214|  1.81M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.81M|    {
 1078|  1.81M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.81M|    {
 1082|  1.81M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 394k, False: 1.42M]
  ------------------
 1083|  1.81M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 71.2k, False: 1.35M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   465k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   465k|                                              value);
 1087|   465k|        }
 1088|       |
 1089|  1.35M|        const auto flags = get_flags();
 1090|  1.35M|        const auto view = get_view();
 1091|  1.35M|        const auto result = fast_float::from_chars(
 1092|  1.35M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.35M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.35M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 1.34M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.75k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.75k|                                              value);
 1102|  4.75k|        }
 1103|       |
 1104|  1.34M|        return result.ptr - view.data();
 1105|  1.35M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   470k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   470k|    {
 1048|   470k|#if !SCN_DISABLE_STRTOD
 1049|   470k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   470k|    }
 1056|   470k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   470k|    {
  894|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   487k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   470k|    {
  898|   470k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   470k|                           generic_strtod);
  900|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   470k|    {
  732|   470k|        CharT* end{};
  733|   470k|        errno = 0;
  734|   470k|        value = strtod_cb(src, &end);
  735|   470k|        const auto saved_errno = errno;
  736|   470k|        auto chars_read = end - src;
  737|       |
  738|   470k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   470k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.46k, False: 464k]
  |  |  ------------------
  ------------------
  740|  5.46k|            return unexpected(e);
  741|  5.46k|        }
  742|       |
  743|   464k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 393k, False: 71.1k]
  ------------------
  744|   464k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 393k, False: 0]
  ------------------
  745|   393k|            chars_read -= 2;
  746|   393k|        }
  747|       |
  748|   464k|        return chars_read;
  749|   470k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   487k|    {
  778|   487k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 128k, False: 359k]
  |  Branch (778:37): [True: 0, False: 128k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   487k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 71.4k, False: 416k]
  ------------------
  785|   487k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 71.4k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   487k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 6.16k, False: 481k]
  |  Branch (791:34): [True: 592, False: 5.57k]
  ------------------
  792|    592|            SCN_UNLIKELY_ATTR
  793|    592|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    592|        }
  795|       |
  796|   487k|        SCN_GCC_COMPAT_PUSH
  797|   487k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   487k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 487k, False: 0]
  ------------------
  800|   487k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 487k, False: 0]
  ------------------
  801|   487k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.57k, False: 481k]
  ------------------
  802|  5.57k|            SCN_UNLIKELY_ATTR
  803|  5.57k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.57k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   481k|            return {};
  809|   487k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   493k|{
  691|   493k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 129k, False: 364k]
  |  Branch (691:24): [True: 0, False: 364k]
  ------------------
  692|   493k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   470k|    {
  755|   470k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 464k, False: 5.42k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   464k|            auto first_space = read_until_classic_space(input.view());
  758|   464k|            input.assign(
  759|   464k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   464k|        }
  761|       |
  762|   470k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 394k, False: 76.0k]
  ------------------
  763|   394k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   394k|                input.get_allocated_string().insert(0, "0x");
  765|   394k|            }
  766|   394k|            else {
  767|   394k|                input.get_allocated_string().insert(0, L"0x");
  768|   394k|            }
  769|   394k|        }
  770|       |
  771|   470k|        return input.get_allocated_string().c_str();
  772|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   470k|    {
  905|   470k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   470k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   470k|        }
  908|   470k|        else {
  909|   470k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   470k|        }
  911|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   470k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   470k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   470k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   470k|            return std::strtof(str, str_end);
  839|   470k|        }
  840|   470k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   470k|            return std::strtod(str, str_end);
  842|   470k|        }
  843|   470k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   470k|            return std::strtold(str, str_end);
  845|   470k|        }
  846|   470k|#endif
  847|   470k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.35M|    {
 1110|  1.35M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.35M|            return m_input.view();
 1112|  1.35M|        }
 1113|  1.35M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.35M|            return std::u16string_view{
 1115|  1.35M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.35M|                m_input.view().size()};
 1117|  1.35M|        }
 1118|  1.35M|        else {
 1119|  1.35M|            return std::u32string_view{
 1120|  1.35M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.35M|                m_input.view().size()};
 1122|  1.35M|        }
 1123|  1.35M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   144k|{
 1138|   144k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 144k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   144k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 144k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   144k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 144k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   144k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 144k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   144k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   144k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 32.2k, False: 112k]
  ------------------
 1185|  32.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.3k, False: 16.8k]
  |  |  ------------------
  ------------------
 1186|  15.3k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  15.3k|                                         "Invalid floating-point digit");
 1188|  15.3k|        }
 1189|  32.2k|    }
 1190|   129k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.6k, False: 90.6k]
  |  |  ------------------
  ------------------
 1191|  38.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  38.6k|                                     "Invalid floating-point digit");
 1193|  38.6k|    }
 1194|       |
 1195|  90.6k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  90.6k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  90.6k|            double tmp{};
 1200|  90.6k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  90.6k|            value = tmp;
 1202|  90.6k|            return ret;
 1203|  90.6k|        }
 1204|  90.6k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  90.6k|            return fast_float_fallback(data, value);
 1208|  90.6k|        }
 1209|  90.6k|    }
 1210|  90.6k|    else {
 1211|       |        // Default to fast_float
 1212|  90.6k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  90.6k|    }
 1214|  90.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  90.6k|    {
 1078|  90.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  90.6k|    {
 1082|  90.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 16.7k, False: 73.8k]
  ------------------
 1083|  90.6k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 231, False: 73.6k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  17.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  17.0k|                                              value);
 1087|  17.0k|        }
 1088|       |
 1089|  73.6k|        const auto flags = get_flags();
 1090|  73.6k|        const auto view = get_view();
 1091|  73.6k|        const auto result = fast_float::from_chars(
 1092|  73.6k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  73.6k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 73.6k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  73.6k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 664, False: 72.9k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    664|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    664|                                              value);
 1102|    664|        }
 1103|       |
 1104|  72.9k|        return result.ptr - view.data();
 1105|  73.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  17.6k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  17.6k|    {
 1048|  17.6k|#if !SCN_DISABLE_STRTOD
 1049|  17.6k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  17.6k|    }
 1056|  17.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  17.6k|    {
  894|  17.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  17.6k|    {
  898|  17.6k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  17.6k|                           generic_strtod);
  900|  17.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  17.6k|    {
  732|  17.6k|        CharT* end{};
  733|  17.6k|        errno = 0;
  734|  17.6k|        value = strtod_cb(src, &end);
  735|  17.6k|        const auto saved_errno = errno;
  736|  17.6k|        auto chars_read = end - src;
  737|       |
  738|  17.6k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  17.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 696, False: 16.9k]
  |  |  ------------------
  ------------------
  740|    696|            return unexpected(e);
  741|    696|        }
  742|       |
  743|  16.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 16.7k, False: 231]
  ------------------
  744|  16.9k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 16.7k, False: 0]
  ------------------
  745|  16.7k|            chars_read -= 2;
  746|  16.7k|        }
  747|       |
  748|  16.9k|        return chars_read;
  749|  17.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  17.6k|    {
  755|  17.6k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 17.0k, False: 583]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  17.0k|            auto first_space = read_until_classic_space(input.view());
  758|  17.0k|            input.assign(
  759|  17.0k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  17.0k|        }
  761|       |
  762|  17.6k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 16.7k, False: 895]
  ------------------
  763|  16.7k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  16.7k|                input.get_allocated_string().insert(0, "0x");
  765|  16.7k|            }
  766|  16.7k|            else {
  767|  16.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  16.7k|            }
  769|  16.7k|        }
  770|       |
  771|  17.6k|        return input.get_allocated_string().c_str();
  772|  17.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  17.6k|    {
  905|  17.6k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  17.6k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  17.6k|        }
  908|  17.6k|        else {
  909|  17.6k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  17.6k|        }
  911|  17.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  17.6k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  17.6k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  17.6k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  17.6k|            return std::wcstof(str, str_end);
  877|  17.6k|        }
  878|  17.6k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  17.6k|            return std::wcstod(str, str_end);
  880|  17.6k|        }
  881|  17.6k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  17.6k|            return std::wcstold(str, str_end);
  883|  17.6k|        }
  884|  17.6k|#endif
  885|  17.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  73.6k|    {
 1110|  73.6k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  73.6k|            return m_input.view();
 1112|  73.6k|        }
 1113|  73.6k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  73.6k|            return std::u16string_view{
 1115|  73.6k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  73.6k|                m_input.view().size()};
 1117|  73.6k|        }
 1118|  73.6k|        else {
 1119|  73.6k|            return std::u32string_view{
 1120|  73.6k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  73.6k|                m_input.view().size()};
 1122|  73.6k|        }
 1123|  73.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.95M|{
 1138|  1.95M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 16.9k, False: 1.93M]
  ------------------
 1139|  16.9k|        value = std::numeric_limits<T>::infinity();
 1140|  16.9k|        return 3;
 1141|  16.9k|    }
 1142|  1.93M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 12.2k, False: 1.92M]
  ------------------
 1143|  12.2k|        value = std::numeric_limits<T>::infinity();
 1144|  12.2k|        return 8;
 1145|  12.2k|    }
 1146|  1.92M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 66.8k, False: 1.85M]
  ------------------
 1147|  66.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  66.8k|        return 3;
 1149|  66.8k|    }
 1150|  1.85M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.85M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.85M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.85M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 400k, False: 1.45M]
  ------------------
 1185|   400k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   400k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.04k, False: 394k]
  |  |  ------------------
  ------------------
 1186|  5.04k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  5.04k|                                         "Invalid floating-point digit");
 1188|  5.04k|        }
 1189|   400k|    }
 1190|  1.84M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 1.83M]
  |  |  ------------------
  ------------------
 1191|  14.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  14.2k|                                     "Invalid floating-point digit");
 1193|  14.2k|    }
 1194|       |
 1195|  1.83M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.83M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.83M|            double tmp{};
 1200|  1.83M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.83M|            value = tmp;
 1202|  1.83M|            return ret;
 1203|  1.83M|        }
 1204|  1.83M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.83M|            return fast_float_fallback(data, value);
 1208|  1.83M|        }
 1209|  1.83M|    }
 1210|  1.83M|    else {
 1211|       |        // Default to fast_float
 1212|  1.83M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.83M|    }
 1214|  1.83M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.83M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.83M|    {
 1048|  1.83M|#if !SCN_DISABLE_STRTOD
 1049|  1.83M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.83M|    }
 1056|  1.83M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.83M|    {
  894|  1.83M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.92M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.83M|    {
  898|  1.83M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.83M|                           generic_strtod);
  900|  1.83M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.83M|    {
  732|  1.83M|        CharT* end{};
  733|  1.83M|        errno = 0;
  734|  1.83M|        value = strtod_cb(src, &end);
  735|  1.83M|        const auto saved_errno = errno;
  736|  1.83M|        auto chars_read = end - src;
  737|       |
  738|  1.83M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.83M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 1.83M]
  |  |  ------------------
  ------------------
  740|  1.47k|            return unexpected(e);
  741|  1.47k|        }
  742|       |
  743|  1.83M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 394k, False: 1.43M]
  ------------------
  744|  1.83M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 394k, False: 0]
  ------------------
  745|   394k|            chars_read -= 2;
  746|   394k|        }
  747|       |
  748|  1.83M|        return chars_read;
  749|  1.83M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.92M|    {
  778|  1.92M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 565k, False: 1.36M]
  |  Branch (778:37): [True: 0, False: 565k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.92M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 71.5k, False: 1.85M]
  ------------------
  785|  1.92M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 71.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.92M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.55k, False: 1.92M]
  |  Branch (791:34): [True: 142, False: 1.41k]
  ------------------
  792|    142|            SCN_UNLIKELY_ATTR
  793|    142|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    142|        }
  795|       |
  796|  1.92M|        SCN_GCC_COMPAT_PUSH
  797|  1.92M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.92M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.92M, False: 0]
  ------------------
  800|  1.92M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.92M, False: 0]
  ------------------
  801|  1.92M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.41k, False: 1.92M]
  ------------------
  802|  1.41k|            SCN_UNLIKELY_ATTR
  803|  1.41k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.41k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.92M|            return {};
  809|  1.92M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.92M|{
  695|  1.92M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 565k, False: 1.36M]
  |  Branch (695:26): [True: 0, False: 1.36M]
  ------------------
  696|  1.92M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.83M|    {
  755|  1.83M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.71M, False: 123k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.71M|            auto first_space = read_until_classic_space(input.view());
  758|  1.71M|            input.assign(
  759|  1.71M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.71M|        }
  761|       |
  762|  1.83M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 394k, False: 1.43M]
  ------------------
  763|   394k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   394k|                input.get_allocated_string().insert(0, "0x");
  765|   394k|            }
  766|   394k|            else {
  767|   394k|                input.get_allocated_string().insert(0, L"0x");
  768|   394k|            }
  769|   394k|        }
  770|       |
  771|  1.83M|        return input.get_allocated_string().c_str();
  772|  1.83M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.83M|    {
  905|  1.83M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.83M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.83M|        }
  908|  1.83M|        else {
  909|  1.83M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.83M|        }
  911|  1.83M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.83M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.83M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.83M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.83M|            return std::strtof(str, str_end);
  839|  1.83M|        }
  840|  1.83M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.83M|            return std::strtod(str, str_end);
  842|  1.83M|        }
  843|  1.83M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.83M|            return std::strtold(str, str_end);
  845|  1.83M|        }
  846|  1.83M|#endif
  847|  1.83M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   145k|{
 1138|   145k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 145k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   145k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 145k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   145k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 145k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   145k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 145k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   145k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   145k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 32.2k, False: 113k]
  ------------------
 1185|  32.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.4k, False: 16.8k]
  |  |  ------------------
  ------------------
 1186|  15.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  15.4k|                                         "Invalid floating-point digit");
 1188|  15.4k|        }
 1189|  32.2k|    }
 1190|   130k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.7k, False: 91.4k]
  |  |  ------------------
  ------------------
 1191|  38.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  38.7k|                                     "Invalid floating-point digit");
 1193|  38.7k|    }
 1194|       |
 1195|  91.4k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  91.4k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  91.4k|            double tmp{};
 1200|  91.4k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  91.4k|            value = tmp;
 1202|  91.4k|            return ret;
 1203|  91.4k|        }
 1204|  91.4k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  91.4k|            return fast_float_fallback(data, value);
 1208|  91.4k|        }
 1209|  91.4k|    }
 1210|  91.4k|    else {
 1211|       |        // Default to fast_float
 1212|  91.4k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  91.4k|    }
 1214|  91.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  91.4k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  91.4k|    {
 1048|  91.4k|#if !SCN_DISABLE_STRTOD
 1049|  91.4k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  91.4k|    }
 1056|  91.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  91.4k|    {
  894|  91.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  91.4k|    {
  898|  91.4k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  91.4k|                           generic_strtod);
  900|  91.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  91.4k|    {
  732|  91.4k|        CharT* end{};
  733|  91.4k|        errno = 0;
  734|  91.4k|        value = strtod_cb(src, &end);
  735|  91.4k|        const auto saved_errno = errno;
  736|  91.4k|        auto chars_read = end - src;
  737|       |
  738|  91.4k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  91.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  91.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 91.3k]
  |  |  ------------------
  ------------------
  740|     86|            return unexpected(e);
  741|     86|        }
  742|       |
  743|  91.3k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 16.7k, False: 74.6k]
  ------------------
  744|  91.3k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 16.7k, False: 0]
  ------------------
  745|  16.7k|            chars_read -= 2;
  746|  16.7k|        }
  747|       |
  748|  91.3k|        return chars_read;
  749|  91.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  91.4k|    {
  755|  91.4k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 89.5k, False: 1.89k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  89.5k|            auto first_space = read_until_classic_space(input.view());
  758|  89.5k|            input.assign(
  759|  89.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  89.5k|        }
  761|       |
  762|  91.4k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 16.7k, False: 74.6k]
  ------------------
  763|  16.7k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  16.7k|                input.get_allocated_string().insert(0, "0x");
  765|  16.7k|            }
  766|  16.7k|            else {
  767|  16.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  16.7k|            }
  769|  16.7k|        }
  770|       |
  771|  91.4k|        return input.get_allocated_string().c_str();
  772|  91.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  91.4k|    {
  905|  91.4k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  91.4k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  91.4k|        }
  908|  91.4k|        else {
  909|  91.4k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  91.4k|        }
  911|  91.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  91.4k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  91.4k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  91.4k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  91.4k|            return std::wcstof(str, str_end);
  877|  91.4k|        }
  878|  91.4k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  91.4k|            return std::wcstod(str, str_end);
  880|  91.4k|        }
  881|  91.4k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  91.4k|            return std::wcstold(str, str_end);
  883|  91.4k|        }
  884|  91.4k|#endif
  885|  91.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  2.73M|{
 2073|  2.73M|    const auto argcount = args.size();
 2074|  2.73M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 560k, False: 2.17M]
  |  Branch (2074:60): [True: 560k, False: 0]
  ------------------
 2075|   560k|        auto arg = args.get(0);
 2076|   560k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   560k|    static_cast<    \
  |  |  929|   560k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   560k|    }
 2078|       |
 2079|  2.17M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 2.17M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  2.17M|    SCN_UNLIKELY_ATTR
 2087|  2.17M|    {
 2088|  2.17M|        auto handler = format_handler<false, CharT>{
 2089|  2.17M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.17M|    static_cast<    \
  |  |  929|  2.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.17M|    static_cast<    \
  |  |  929|  2.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  2.17M|        return vscan_parse_format_string(format, handler);
 2091|  2.17M|    }
 2092|  2.17M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  5.33M|{
 1625|  5.33M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 4.19M, False: 1.13M]
  ------------------
 1626|  4.19M|        return false;
 1627|  4.19M|    }
 1628|  1.13M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 1.13M, False: 0]
  |  Branch (1628:39): [True: 1.13M, False: 0]
  ------------------
 1629|  5.33M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   840k|{
 1658|   840k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 840k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   840k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   840k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 840k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   840k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   840k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   840k|    static_cast<    \
  |  |  929|   840k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   840k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   840k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   840k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   840k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.2k, False: 805k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.2k|    }                                                  \
  |  |  |  | 3671|   840k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   805k|    return it.position();
 1675|   840k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  2.02M|    {
 1903|  2.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  4.86M|    {
 1722|  4.86M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.86M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.86M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  2.02M|    {
 1853|  2.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.02M|{
 2038|  2.02M|    const auto beg = handler.get_ctx().begin();
 2039|  2.02M|    detail::parse_format_string<false>(format, handler);
 2040|  2.02M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 1.90M]
  |  |  ------------------
  ------------------
 2041|   117k|        return unexpected(handler.error);
 2042|   117k|    }
 2043|  1.90M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.02M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  13.9M|    {
 2022|  13.9M|        return ctx.get();
 2023|  13.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  13.9M|    {
 1857|  13.9M|        return contiguous_ctx;
 1858|  13.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.92M|    {
 1907|  3.92M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.92M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.92M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  2.02M|{
 1681|  2.02M|    auto arg = ctx.arg(id);
 1682|  2.02M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.02M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.02M|    return arg;
 1686|  2.02M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.86M|    {
 1797|  4.86M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.86M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.86M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.86M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.86M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.86M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.86M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.86M|            visited_args_lower64 |= (1ull << id);
 1808|  4.86M|            return;
 1809|  4.86M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.86M|    {
 1782|  4.86M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.86M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.86M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.86M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.86M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.86M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.86M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.86M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   704k|    {
 1766|   704k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 704k, False: 0]
  |  |  ------------------
  ------------------
 1767|   704k|            error = err;
 1768|   704k|        }
 1769|   704k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  2.02M|    {
 1944|  2.02M|        return parse_ctx.next_arg_id();
 1945|  2.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  2.02M|    {
 1985|  2.02M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.02M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.02M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.02M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.02M|        auto specs = detail::format_specs{};
 1998|  2.02M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.02M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.02M|            arg.type()};
 2001|       |
 2002|  2.02M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.02M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.02M]
  |  Branch (2003:29): [True: 0, False: 2.02M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.02M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.02M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  2.02M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.02M|        on_visit_scan_arg(
 2014|  2.02M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.02M|                                           get_ctx().locale()},
 2016|  2.02M|            arg);
 2017|  2.02M|        return parse_ctx.begin();
 2018|  2.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  2.02M|    {
 1701|  2.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  2.02M|    {
 1956|  2.02M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.02M]
  |  Branch (1956:23): [True: 0, False: 2.02M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.02M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.02M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 1.90M]
  |  |  ------------------
  ------------------
 1963|   117k|            on_error(r.error());
 1964|   117k|        }
 1965|  1.90M|        else {
 1966|  1.90M|            get_ctx().advance_to(*r);
 1967|  1.90M|        }
 1968|  2.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.86M|    {
 1729|  4.86M|        {
 1730|  4.86M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.86M]
  ------------------
 1731|  4.86M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.86M]
  ------------------
 1732|  4.86M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.86M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.86M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.86M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.86M|        }
 1739|       |
 1740|  4.86M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.86M, False: 0]
  ------------------
 1741|  4.86M|            return;
 1742|  4.86M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.86M|    {
 1777|  4.86M|        return error;
 1778|  4.86M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  14.5M|    {
 1773|  14.5M|        return static_cast<bool>(error);
 1774|  14.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  2.17M|    {
 1903|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  2.17M|    {
 1830|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.17M|{
 2038|  2.17M|    const auto beg = handler.get_ctx().begin();
 2039|  2.17M|    detail::parse_format_string<false>(format, handler);
 2040|  2.17M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 2.05M]
  |  |  ------------------
  ------------------
 2041|   117k|        return unexpected(handler.error);
 2042|   117k|    }
 2043|  2.05M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.17M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  14.9M|    {
 2022|  14.9M|        return ctx.get();
 2023|  14.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  14.9M|    {
 1834|  14.9M|        return ctx;
 1835|  14.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  4.23M|    {
 1907|  4.23M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 4.23M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  4.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  2.17M|{
 1681|  2.17M|    auto arg = ctx.arg(id);
 1682|  2.17M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.17M|    return arg;
 1686|  2.17M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  2.17M|    {
 1944|  2.17M|        return parse_ctx.next_arg_id();
 1945|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  2.17M|    {
 1985|  2.17M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.17M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.17M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.17M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.17M|        auto specs = detail::format_specs{};
 1998|  2.17M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.17M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.17M|            arg.type()};
 2001|       |
 2002|  2.17M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.17M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.17M]
  |  Branch (2003:29): [True: 0, False: 2.17M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.17M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  2.17M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.17M|        on_visit_scan_arg(
 2014|  2.17M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.17M|                                           get_ctx().locale()},
 2016|  2.17M|            arg);
 2017|  2.17M|        return parse_ctx.begin();
 2018|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  2.17M|    {
 1701|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  2.17M|    {
 1956|  2.17M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.17M]
  |  Branch (1956:23): [True: 0, False: 2.17M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.17M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.17M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 2.05M]
  |  |  ------------------
  ------------------
 1963|   117k|            on_error(r.error());
 1964|   117k|        }
 1965|  2.05M|        else {
 1966|  2.05M|            get_ctx().advance_to(*r);
 1967|  2.05M|        }
 1968|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  2.59M|{
 2053|  2.59M|    const auto argcount = args.size();
 2054|  2.59M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 577k, False: 2.02M]
  |  Branch (2054:60): [True: 577k, False: 0]
  ------------------
 2055|   577k|        auto arg = args.get(0);
 2056|   577k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   577k|    static_cast<    \
  |  |  929|   577k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   577k|    }
 2058|       |
 2059|  2.02M|    auto handler = format_handler<true, CharT>{
 2060|  2.02M|        ranges::subrange<const CharT*>{source.data(),
 2061|  2.02M|                                       source.data() + source.size()},
 2062|  2.02M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.02M|    static_cast<    \
  |  |  929|  2.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.02M|    static_cast<    \
  |  |  929|  2.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  2.02M|    return vscan_parse_format_string(format, handler);
 2064|  2.59M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   866k|{
 1638|   866k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 866k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   866k|    auto reader =
 1644|   866k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   866k|            ranges::subrange<const CharT*>{source.data(),
 1646|   866k|                                           source.data() + source.size()},
 1647|   866k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   866k|    static_cast<    \
  |  |  929|   866k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   866k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   866k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   866k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   866k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.2k, False: 830k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.2k|    }                                                  \
  |  |  |  | 3671|   866k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   830k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   830k|    return ranges::distance(source.data(), it);
 1650|   866k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   405k|{
 2053|   405k|    const auto argcount = args.size();
 2054|   405k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 71.3k, False: 333k]
  |  Branch (2054:60): [True: 71.3k, False: 0]
  ------------------
 2055|  71.3k|        auto arg = args.get(0);
 2056|  71.3k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  71.3k|    static_cast<    \
  |  |  929|  71.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  71.3k|    }
 2058|       |
 2059|   333k|    auto handler = format_handler<true, CharT>{
 2060|   333k|        ranges::subrange<const CharT*>{source.data(),
 2061|   333k|                                       source.data() + source.size()},
 2062|   333k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   333k|    static_cast<    \
  |  |  929|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   333k|    static_cast<    \
  |  |  929|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   333k|    return vscan_parse_format_string(format, handler);
 2064|   405k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   810k|{
 1625|   810k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 667k, False: 142k]
  ------------------
 1626|   667k|        return false;
 1627|   667k|    }
 1628|   142k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 142k, False: 0]
  |  Branch (1628:39): [True: 142k, False: 0]
  ------------------
 1629|   810k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   107k|{
 1638|   107k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   107k|    auto reader =
 1644|   107k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   107k|            ranges::subrange<const CharT*>{source.data(),
 1646|   107k|                                           source.data() + source.size()},
 1647|   107k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   107k|    static_cast<    \
  |  |  929|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   107k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70.4k, False: 36.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  70.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  70.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  70.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  70.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  70.4k|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  36.6k|    return ranges::distance(source.data(), it);
 1650|   107k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   333k|    {
 1903|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   333k|    {
 1853|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   333k|{
 2038|   333k|    const auto beg = handler.get_ctx().begin();
 2039|   333k|    detail::parse_format_string<false>(format, handler);
 2040|   333k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234k, False: 98.8k]
  |  |  ------------------
  ------------------
 2041|   234k|        return unexpected(handler.error);
 2042|   234k|    }
 2043|  98.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   333k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.86M|    {
 2022|  1.86M|        return ctx.get();
 2023|  1.86M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.86M|    {
 1857|  1.86M|        return contiguous_ctx;
 1858|  1.86M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   432k|    {
 1907|   432k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 432k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   432k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   333k|{
 1681|   333k|    auto arg = ctx.arg(id);
 1682|   333k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   333k|    return arg;
 1686|   333k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   333k|    {
 1944|   333k|        return parse_ctx.next_arg_id();
 1945|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   333k|    {
 1985|   333k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   333k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   333k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 333k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   333k|        auto specs = detail::format_specs{};
 1998|   333k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   333k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   333k|            arg.type()};
 2001|       |
 2002|   333k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   333k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 333k]
  |  Branch (2003:29): [True: 0, False: 333k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   333k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   333k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   333k|        on_visit_scan_arg(
 2014|   333k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   333k|                                           get_ctx().locale()},
 2016|   333k|            arg);
 2017|   333k|        return parse_ctx.begin();
 2018|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   333k|    {
 1701|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   333k|    {
 1956|   333k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 333k]
  |  Branch (1956:23): [True: 0, False: 333k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   333k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   333k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234k, False: 98.8k]
  |  |  ------------------
  ------------------
 1963|   234k|            on_error(r.error());
 1964|   234k|        }
 1965|  98.8k|        else {
 1966|  98.8k|            get_ctx().advance_to(*r);
 1967|  98.8k|        }
 1968|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   404k|{
 2073|   404k|    const auto argcount = args.size();
 2074|   404k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 71.2k, False: 333k]
  |  Branch (2074:60): [True: 71.2k, False: 0]
  ------------------
 2075|  71.2k|        auto arg = args.get(0);
 2076|  71.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  71.2k|    static_cast<    \
  |  |  929|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  71.2k|    }
 2078|       |
 2079|   333k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 333k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   333k|    SCN_UNLIKELY_ATTR
 2087|   333k|    {
 2088|   333k|        auto handler = format_handler<false, CharT>{
 2089|   333k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   333k|    static_cast<    \
  |  |  929|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   333k|    static_cast<    \
  |  |  929|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   333k|        return vscan_parse_format_string(format, handler);
 2091|   333k|    }
 2092|   333k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   106k|{
 1658|   106k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   106k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   106k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   106k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   106k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   106k|    static_cast<    \
  |  |  929|   106k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   106k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70.4k, False: 36.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  70.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  70.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  70.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  70.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  70.4k|    }                                                  \
  |  |  |  | 3671|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  36.4k|    return it.position();
 1675|   106k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   333k|    {
 1903|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   333k|    {
 1830|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   333k|{
 2038|   333k|    const auto beg = handler.get_ctx().begin();
 2039|   333k|    detail::parse_format_string<false>(format, handler);
 2040|   333k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234k, False: 98.6k]
  |  |  ------------------
  ------------------
 2041|   234k|        return unexpected(handler.error);
 2042|   234k|    }
 2043|  98.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   333k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  1.86M|    {
 2022|  1.86M|        return ctx.get();
 2023|  1.86M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.86M|    {
 1834|  1.86M|        return ctx;
 1835|  1.86M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   432k|    {
 1907|   432k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 432k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   432k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   333k|{
 1681|   333k|    auto arg = ctx.arg(id);
 1682|   333k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   333k|    return arg;
 1686|   333k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   333k|    {
 1944|   333k|        return parse_ctx.next_arg_id();
 1945|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   333k|    {
 1985|   333k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   333k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   333k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 333k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   333k|        auto specs = detail::format_specs{};
 1998|   333k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   333k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   333k|            arg.type()};
 2001|       |
 2002|   333k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   333k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 333k]
  |  Branch (2003:29): [True: 0, False: 333k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   333k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   333k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   333k|        on_visit_scan_arg(
 2014|   333k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   333k|                                           get_ctx().locale()},
 2016|   333k|            arg);
 2017|   333k|        return parse_ctx.begin();
 2018|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   333k|    {
 1701|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   333k|    {
 1956|   333k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 333k]
  |  Branch (1956:23): [True: 0, False: 333k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   333k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   333k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234k, False: 98.6k]
  |  |  ------------------
  ------------------
 1963|   234k|            on_error(r.error());
 1964|   234k|        }
 1965|  98.6k|        else {
 1966|  98.6k|            get_ctx().advance_to(*r);
 1967|  98.6k|        }
 1968|   333k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   288k|{
 2099|   288k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   288k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   280k|{
 2099|   280k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   280k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  35.6k|{
 2099|  35.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  35.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  35.6k|{
 2099|  35.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  35.6k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.91k|{
 1363|  3.91k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.91k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  3.91k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  3.91k|            std::u32string tmp;
 1368|  3.91k|            transcode_to_string_impl_to32(src, tmp);
 1369|  3.91k|            return transcode_to_string_impl_32to16<false>(
 1370|  3.91k|                std::u32string_view{tmp}, dest);
 1371|  3.91k|        }
 1372|  3.91k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  3.91k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.91k|        }
 1375|  3.91k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.91k|{
 1256|  3.91k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.91k|    auto it = src.begin();
 1259|  1.44M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.44M, False: 3.91k]
  ------------------
 1260|  1.44M|        auto res = get_next_code_point(
 1261|  1.44M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.44M|                                                                 src.end()));
 1263|  1.44M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.82k, False: 1.43M]
  |  |  ------------------
  ------------------
 1264|  4.82k|            dest.push_back(DestCharT{0xfffd});
 1265|  4.82k|        }
 1266|  1.43M|        else {
 1267|  1.43M|            dest.push_back(res.value);
 1268|  1.43M|        }
 1269|  1.44M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.44M|    }
 1271|  3.91k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.54M|{
 1169|  2.54M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.54M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.54M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.5k, False: 2.49M]
  |  |  ------------------
  ------------------
 1173|  45.5k|        return {get_start_for_next_code_point(input),
 1174|  45.5k|                detail::invalid_code_point};
 1175|  45.5k|    }
 1176|  2.49M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.94k, False: 2.48M]
  |  |  ------------------
  ------------------
 1177|  6.94k|        return {input.end(), detail::invalid_code_point};
 1178|  6.94k|    }
 1179|       |
 1180|  2.48M|    return {input.begin() + len,
 1181|  2.48M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.49M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  45.5k|{
 1155|  45.5k|    auto it = input.begin();
 1156|   434k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 423k, False: 10.8k]
  ------------------
 1157|   423k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 34.7k, False: 389k]
  ------------------
 1158|  34.7k|            break;
 1159|  34.7k|        }
 1160|   423k|    }
 1161|  45.5k|    return it;
 1162|  45.5k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  52.0M|    {
  809|  52.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  52.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  52.0M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  19.4M|    {
  823|  19.4M|        return a.m_code == b.m_code;
  824|  19.4M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.88M|    {
 1728|  2.88M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.88M|        std::strcpy(m_locbuf, loc);
 1730|  2.88M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.88M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.88M|        std::setlocale(m_category, m_locbuf);
 1735|  2.88M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.88M|    {
 1757|  2.88M|        std::setlocale(cat, "C");
 1758|  2.88M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  4.86M|    {
 2936|  4.86M|        return m_msg == nullptr;
 2937|  4.86M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  4.81M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  62.0M|{
  458|  62.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  62.0M|        static_cast<unsigned char>(ch))];
  460|  62.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  49.4k|{
  469|  49.4k|    return static_cast<unsigned char>(ch) <= 127;
  470|  49.4k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  12.5M|{
  539|  12.5M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  12.5M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  22.7M|{
  784|  22.7M|    return e != eof_error::good;
  785|  22.7M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  63.9k|{
  798|  63.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  63.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  63.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  63.9k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   265k|{
  845|   265k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   265k|    return parse_error::eof;
  847|   265k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  6.99M|{
  854|  6.99M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 6.99M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  6.99M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 95.2k, False: 6.89M]
  ------------------
  859|  95.2k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  95.2k|    }
  861|       |
  862|  6.89M|    return scan_error{code, msg};
  863|  6.99M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  6.99M|{
  868|  6.99M|    return [code, msg](parse_error err) {
  869|  6.99M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.99M|    };
  871|  6.99M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  7.64M|{
 1200|       |    // Pattern_White_Space property
 1201|  7.64M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 7.29M, False: 346k]
  |  Branch (1201:27): [True: 2.43M, False: 4.85M]
  ------------------
 1202|  7.64M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 159k, False: 5.04M]
  ------------------
 1203|  7.64M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 211k, False: 4.83M]
  ------------------
 1204|  7.64M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 5.78k, False: 4.82M]
  ------------------
 1205|  7.64M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 24.1k, False: 4.80M]
  ------------------
 1206|  7.64M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 270k, False: 4.53M]
  ------------------
 1207|  7.64M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 4.53M]
  ------------------
 1208|  7.64M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  7.62M|{
 2220|  7.62M|    unsigned char running_diff{0};
 2221|  28.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 20.9M, False: 7.62M]
  ------------------
 2222|  20.9M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  20.9M|    }
 2224|  7.62M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 230k, False: 7.39M]
  |  Branch (2224:33): [True: 34.7k, False: 7.35M]
  ------------------
 2225|  7.62M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  49.0M|{
 3123|  49.0M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  49.0M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.52M|{
 3127|  1.52M|#if WCHAR_MIN < 0
 3128|  1.52M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.50M, False: 17.9k]
  |  Branch (3128:20): [True: 893k, False: 615k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   893k|        return char_to_int(static_cast<char>(ch));
 3133|   893k|    }
 3134|   633k|    return 255;
 3135|  1.52M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  4.15M|{
 6008|  4.15M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 4.15M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  4.15M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 4.15M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  4.15M|    return {};
 6023|  4.15M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  8.49M|    {
  304|  8.49M|        ranges::advance(x, n);
  305|  8.49M|        return x;
  306|  8.49M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  8.49M|    {
  268|  8.49M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.49M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  8.49M|    {
  151|  8.49M|        i += n;
  152|  8.49M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  10.1M|    {
  108|  10.1M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  10.1M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  10.1M|    {
   87|  10.1M|        return s - i;
   88|  10.1M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.20M|    {
  304|  1.20M|        ranges::advance(x, n);
  305|  1.20M|        return x;
  306|  1.20M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.20M|    {
  268|  1.20M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.20M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.20M|    {
  151|  1.20M|        i += n;
  152|  1.20M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   187k|    {
  108|   187k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   187k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   187k|    {
   87|   187k|        return s - i;
   88|   187k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  3.01M|{
  981|  3.01M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  3.01M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  3.01M|        return true;
  984|  3.01M|    }
  985|  3.01M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  3.01M|                           ranges::const_iterator_t<Range>,
  987|  3.01M|                           typename detail::basic_scan_buffer<
  988|  3.01M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  3.01M|        auto beg = r.begin();
  990|  3.01M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 3.01M, False: 0]
  ------------------
  991|  3.01M|            return false;
  992|  3.01M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  3.01M|    else {
 1006|  3.01M|        return false;
 1007|  3.01M|    }
 1008|  3.01M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  83.3M|    {
  763|  83.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  83.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  83.3M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  7.99M|{
 1857|  7.99M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  7.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  7.99M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  7.99M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  7.99M|        if (sz < count) {
 1862|  7.99M|            return unexpected(eof_error::eof);
 1863|  7.99M|        }
 1864|       |
 1865|  7.99M|        return ranges::next(range.begin(), count);
 1866|  7.99M|    }
 1867|  7.99M|    else {
 1868|  7.99M|        auto it = range.begin();
 1869|  7.99M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 4.94M, False: 3.05M]
  ------------------
 1870|  4.94M|            return ranges::next(it, count);
 1871|  4.94M|        }
 1872|       |
 1873|  12.2M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 9.20M, False: 2.99M]
  ------------------
 1874|  9.20M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 56.4k, False: 9.15M]
  ------------------
 1875|  56.4k|                return unexpected(eof_error::eof);
 1876|  56.4k|            }
 1877|  9.20M|        }
 1878|       |
 1879|  2.99M|        return it;
 1880|  3.05M|    }
 1881|  7.99M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  7.99M|{
 1095|  7.99M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  7.99M|        return r.size();
 1097|  7.99M|    }
 1098|  7.99M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  7.99M|                           ranges::const_iterator_t<Range>,
 1100|  7.99M|                           typename detail::basic_scan_buffer<
 1101|  7.99M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  7.99M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  7.99M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  7.99M|        }
 1105|  7.99M|        else {
 1106|  7.99M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 7.99M, False: 0]
  ------------------
 1107|  7.99M|                return static_cast<size_t>(
 1108|  7.99M|                    r.begin().parent()->chars_available() -
 1109|  7.99M|                    r.begin().position());
 1110|  7.99M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  7.99M|        }
 1113|  7.99M|    }
 1114|  7.99M|    else {
 1115|  7.99M|        return 0;
 1116|  7.99M|    }
 1117|  7.99M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  7.43M|    {
  754|  7.43M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  41.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.6M|              cvref<T> obj = *get<T>(fn);
  745|  41.6M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  41.6M|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.6M|              }
  748|  41.6M|              else {
  749|  41.6M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.6M|              }
  751|  41.6M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  41.6M|    {
  684|  41.6M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  41.6M|            return static_cast<T*>(s.m_cp);
  686|  41.6M|        }
  687|  41.6M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  41.6M|            return static_cast<T*>(s.m_p);
  689|  41.6M|        }
  690|  41.6M|        else {
  691|  41.6M|            return reinterpret_cast<T*>(s.m_fp);
  692|  41.6M|        }
  693|  41.6M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  7.43M|        {
  662|  7.43M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  12.8M|    {
  763|  12.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  12.8M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.55M|    {
  754|  3.55M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  6.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.28M|              cvref<T> obj = *get<T>(fn);
  745|  6.28M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.28M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.28M|              }
  748|  6.28M|              else {
  749|  6.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.28M|              }
  751|  6.28M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.28M|    {
  684|  6.28M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.28M|            return static_cast<T*>(s.m_cp);
  686|  6.28M|        }
  687|  6.28M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.28M|            return static_cast<T*>(s.m_p);
  689|  6.28M|        }
  690|  6.28M|        else {
  691|  6.28M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.28M|        }
  693|  6.28M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  3.55M|        {
  662|  3.55M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  2.17M|    {
 6037|  2.17M|        const bool need_skipped_width =
 6038|  2.17M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 2.17M]
  |  Branch (6038:33): [True: 0, False: 2.17M]
  ------------------
 6039|  2.17M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.17M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 2.17M]
  ------------------
 6043|  2.17M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.17M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  2.17M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.17M, False: 0]
  |  Branch (6047:56): [True: 2.17M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.17M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.17M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.32M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.17M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.17M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.17M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.6k, False: 2.15M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  23.6k|    }                                                  \
  |  |  |  | 3671|  2.17M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.32M|                            make_eof_scan_error));
 6058|       |
 6059|  4.32M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 2.15M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  2.15M|            return result_type{it, 0};
 6067|  4.32M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  2.17M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  5.87M|{
 1976|  5.87M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.87M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  5.87M|{
 1957|  5.87M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.87M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.87M|    }
 1960|  5.87M|    else {
 1961|  5.87M|        auto first = range.begin();
 1962|  32.6M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 32.5M, False: 41.9k]
  ------------------
 1963|  32.5M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 5.83M, False: 26.7M]
  ------------------
 1964|  5.83M|                return first;
 1965|  5.83M|            }
 1966|  32.5M|        }
 1967|  41.9k|        return first;
 1968|  5.87M|    }
 1969|  5.87M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  5.21M|    {
  108|  5.21M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.21M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  5.21M|    {
   94|  5.21M|        iter_difference_t<I> counter{0};
   95|  53.0M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 47.8M, False: 5.21M]
  ------------------
   96|  47.8M|            ++i;
   97|  47.8M|            ++counter;
   98|  47.8M|        }
   99|  5.21M|        return counter;
  100|  5.21M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  6.99M|    return [code, msg](parse_error err) {
  869|  6.99M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.99M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  1.18M|    {
 1780|  1.18M|        auto stdloc = loc.get<std::locale>();
 1781|  1.18M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  1.18M|        grouping = numpunct.grouping();
 1783|  1.18M|        thousands_sep =
 1784|  1.18M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 1.18M]
  ------------------
 1785|  1.18M|        decimal_point = numpunct.decimal_point();
 1786|  1.18M|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  1.18M|{
 1717|  1.18M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 1.18M, False: 0]
  ------------------
 1718|  1.18M|        return std::use_facet<Facet>(stdloc);
 1719|  1.18M|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  1.18M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  8.61M|{
 1846|  8.61M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.9k, False: 8.58M]
  |  |  ------------------
  ------------------
 1847|  31.9k|        return unexpected(e);
 1848|  31.9k|    }
 1849|       |
 1850|  8.58M|    return ranges::next(range.begin());
 1851|  8.61M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  12.4M|{
  950|  12.4M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  12.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.1k, False: 12.4M]
  |  |  ------------------
  ------------------
  951|  63.1k|        return eof_error::eof;
  952|  63.1k|    }
  953|  12.4M|    return eof_error::good;
  954|  12.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  17.6M|{
  944|  17.6M|    return is_range_eof(r.begin(), r.end());
  945|  17.6M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  17.6M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  17.6M|    {
  937|  17.6M|        return begin == end;
  938|  17.6M|    }
  939|  17.6M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  8.58M|    {
  296|  8.58M|        ++x;
  297|  8.58M|        return x;
  298|  8.58M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  3.26M|{
 3141|  3.26M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.26M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.42M, False: 840k]
  ------------------
 3143|  2.42M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.42M, False: 535]
  ------------------
 3144|  2.42M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.42M|        }
 3146|    535|        return unexpected(eof_error::eof);
 3147|  2.42M|    }
 3148|       |
 3149|   840k|    auto& it = *r;
 3150|   840k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 334k, False: 505k]
  ------------------
 3151|   334k|        return std::pair{it, sign_type::minus_sign};
 3152|   334k|    }
 3153|   505k|    return std::pair{it, sign_type::plus_sign};
 3154|   840k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  5.75M|{
 2272|  5.75M|    auto it = read_code_unit(range);
 2273|  5.75M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  5.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 5.74M]
  |  |  ------------------
  ------------------
 2274|  18.8k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  18.8k|    }
 2276|       |
 2277|  10.7M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 10.7M, False: 4.61M]
  ------------------
 2278|  10.7M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.12M, False: 9.65M]
  ------------------
 2279|  1.12M|            return *it;
 2280|  1.12M|        }
 2281|  10.7M|    }
 2282|       |
 2283|  4.61M|    return unexpected(parse_error::error);
 2284|  5.74M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  7.99M|{
 2231|  7.99M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  7.99M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  7.99M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  7.99M|        if (range.size() < str.size()) {
 2236|  7.99M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  7.99M|        }
 2238|  7.99M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  7.99M|            return unexpected(parse_error::error);
 2240|  7.99M|        }
 2241|  7.99M|        return ranges::next(range.begin(), str.size());
 2242|  7.99M|    }
 2243|  7.99M|    else {
 2244|  7.99M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.99M|            if (ch < 'A' || ch > 'Z') {
 2246|  7.99M|                return ch;
 2247|  7.99M|            }
 2248|  7.99M|            return static_cast<char_type>(ch +
 2249|  7.99M|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.99M|        };
 2251|       |
 2252|  7.99M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  7.99M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.99M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.99M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56.4k, False: 7.94M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  56.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  56.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  56.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  56.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  56.4k|    }                                                  \
  |  |  |  | 3671|  7.99M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  7.94M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  7.94M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  7.94M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  7.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.67M, False: 265k]
  |  |  ------------------
  ------------------
 2257|  7.94M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  7.94M|                    return ascii_tolower(a) ==
 2259|  7.94M|                           static_cast<detail::char_t<Range>>(b);
 2260|  7.94M|                }))) {
 2261|  7.67M|            return unexpected(parse_error::error);
 2262|  7.67M|        }
 2263|       |
 2264|   265k|        return it;
 2265|  7.94M|    }
 2266|  7.99M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  9.25M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  9.25M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 8.40M, False: 843k]
  |  Branch (2245:29): [True: 719k, False: 124k]
  ------------------
 2246|  9.12M|                return ch;
 2247|  9.12M|            }
 2248|   124k|            return static_cast<char_type>(ch +
 2249|   124k|                                          static_cast<char_type>('a' - 'A'));
 2250|  9.25M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.85M|{
 2146|  2.85M|    auto it = read_code_unit(range);
 2147|  2.85M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 2.84M]
  |  |  ------------------
  ------------------
 2148|  13.1k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  13.1k|    }
 2150|       |
 2151|  2.84M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.37M, False: 474k]
  |  |  ------------------
  ------------------
 2152|  2.84M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.37M|        return unexpected(parse_error::error);
 2154|  2.37M|    }
 2155|       |
 2156|   474k|    return *it;
 2157|  2.84M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  5.87M|{
 1996|  5.87M|    auto it = read_while_code_unit(range, pred);
 1997|  5.87M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.43M, False: 3.43M]
  ------------------
 1998|  2.43M|        return unexpected(parse_error::error);
 1999|  2.43M|    }
 2000|  3.43M|    return it;
 2001|  5.87M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.73M|    {
 1621|  2.73M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.73M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.73M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.73M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.73M|            m_storage.reset();
 1627|  2.73M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.73M|        }
 1629|  2.73M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.73M|                                          std::basic_string<CharT>>) {
 1631|  2.73M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.73M|            m_view = string_view_type{*m_storage};
 1633|  2.73M|        }
 1634|  2.73M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.73M|                                          typename detail::basic_scan_buffer<
 1636|  2.73M|                                              value_t>::forward_iterator> &&
 1637|  2.73M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.73M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.73M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.73M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 353k, False: 2.38M]
  |  |  ------------------
  ------------------
 1641|  2.73M|                             detail::to_address(end_seg.end()))) {
 1642|   353k|                auto& str = m_storage.emplace();
 1643|   353k|                str.reserve(range.end().position() - range.begin().position());
 1644|   353k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   353k|                m_view = string_view_type{str};
 1646|   353k|                return;
 1647|   353k|            }
 1648|       |
 1649|  2.38M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.38M|                                                            end_seg.data());
 1651|  2.38M|            m_storage.reset();
 1652|  2.38M|        }
 1653|  2.73M|        else {
 1654|  2.73M|            auto& str = m_storage.emplace();
 1655|  2.73M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.73M|                str.reserve(range.size());
 1657|  2.73M|            }
 1658|  2.73M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.73M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.73M|                          std::back_inserter(str));
 1661|  2.73M|            }
 1662|  2.73M|            else {
 1663|  2.73M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.73M|                     ++it) {
 1665|  2.73M|                    str.push_back(*it);
 1666|  2.73M|                }
 1667|  2.73M|            }
 1668|  2.73M|            m_view = string_view_type{str};
 1669|  2.73M|        }
 1670|  2.73M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  19.7M|    {
 1582|  19.7M|        return m_view;
 1583|  19.7M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  11.6M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  2.03M|    {
 6079|  2.03M|        const bool need_skipped_width =
 6080|  2.03M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.03M]
  |  Branch (6080:33): [True: 0, False: 2.03M]
  ------------------
 6081|  2.03M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.03M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.03M]
  ------------------
 6084|  2.03M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.03M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  2.03M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.03M, False: 0]
  ------------------
 6093|  2.03M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 2.03M]
  ------------------
 6094|  2.03M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  2.03M|        return result_type{rng.begin(), 0};
 6118|  2.03M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  4.24M|{
 1846|  4.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.24k, False: 4.23M]
  |  |  ------------------
  ------------------
 1847|  7.24k|        return unexpected(e);
 1848|  7.24k|    }
 1849|       |
 1850|  4.23M|    return ranges::next(range.begin());
 1851|  4.24M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  7.99M|{
  950|  7.99M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.3k, False: 7.95M]
  |  |  ------------------
  ------------------
  951|  34.3k|        return eof_error::eof;
  952|  34.3k|    }
  953|  7.95M|    return eof_error::good;
  954|  7.99M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  7.99M|{
  944|  7.99M|    return is_range_eof(r.begin(), r.end());
  945|  7.99M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  7.99M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.99M|    {
  937|  7.99M|        return begin == end;
  938|  7.99M|    }
  939|  7.99M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  4.23M|    {
  296|  4.23M|        ++x;
  297|  4.23M|        return x;
  298|  4.23M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.94M|{
 3141|  2.94M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.94M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.15M, False: 791k]
  ------------------
 3143|  2.15M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.15M, False: 168]
  ------------------
 3144|  2.15M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.15M|        }
 3146|    168|        return unexpected(eof_error::eof);
 3147|  2.15M|    }
 3148|       |
 3149|   791k|    auto& it = *r;
 3150|   791k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 316k, False: 474k]
  ------------------
 3151|   316k|        return std::pair{it, sign_type::minus_sign};
 3152|   316k|    }
 3153|   474k|    return std::pair{it, sign_type::plus_sign};
 3154|   791k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.42M|{
 2272|  3.42M|    auto it = read_code_unit(range);
 2273|  3.42M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.41k, False: 3.42M]
  |  |  ------------------
  ------------------
 2274|  3.41k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.41k|    }
 2276|       |
 2277|  6.30M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.30M, False: 2.54M]
  ------------------
 2278|  6.30M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 878k, False: 5.42M]
  ------------------
 2279|   878k|            return *it;
 2280|   878k|        }
 2281|  6.30M|    }
 2282|       |
 2283|  2.54M|    return unexpected(parse_error::error);
 2284|  3.42M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  7.68M|{
 2231|  7.68M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  7.68M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  7.68M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  7.68M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 59.5k, False: 7.62M]
  ------------------
 2236|  59.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  59.5k|        }
 2238|  7.62M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 7.35M, False: 265k]
  ------------------
 2239|  7.35M|            return unexpected(parse_error::error);
 2240|  7.35M|        }
 2241|   265k|        return ranges::next(range.begin(), str.size());
 2242|  7.62M|    }
 2243|  7.68M|    else {
 2244|  7.68M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.68M|            if (ch < 'A' || ch > 'Z') {
 2246|  7.68M|                return ch;
 2247|  7.68M|            }
 2248|  7.68M|            return static_cast<char_type>(ch +
 2249|  7.68M|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.68M|        };
 2251|       |
 2252|  7.68M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  7.68M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  7.68M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  7.68M|        if (SCN_UNLIKELY(!std::equal(
 2257|  7.68M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  7.68M|                    return ascii_tolower(a) ==
 2259|  7.68M|                           static_cast<detail::char_t<Range>>(b);
 2260|  7.68M|                }))) {
 2261|  7.68M|            return unexpected(parse_error::error);
 2262|  7.68M|        }
 2263|       |
 2264|  7.68M|        return it;
 2265|  7.68M|    }
 2266|  7.68M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   822k|{
 2146|   822k|    auto it = read_code_unit(range);
 2147|   822k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   822k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.83k, False: 818k]
  |  |  ------------------
  ------------------
 2148|  3.83k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.83k|    }
 2150|       |
 2151|   818k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 676k, False: 141k]
  |  |  ------------------
  ------------------
 2152|   818k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   676k|        return unexpected(parse_error::error);
 2154|   676k|    }
 2155|       |
 2156|   141k|    return *it;
 2157|   818k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  10.9M|    {
 1503|  10.9M|        return sv;
 1504|  10.9M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.56M|{
 1976|  1.56M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.56M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.56M|{
 1957|  1.56M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.56M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.56M|    }
 1960|  1.56M|    else {
 1961|  1.56M|        auto first = range.begin();
 1962|  1.56M|        for (; first != range.end(); ++first) {
 1963|  1.56M|            if (pred(*first)) {
 1964|  1.56M|                return first;
 1965|  1.56M|            }
 1966|  1.56M|        }
 1967|  1.56M|        return first;
 1968|  1.56M|    }
 1969|  1.56M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.88M|{
 2951|  2.88M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.88M, False: 0]
  ------------------
 2952|  2.88M|        auto it = read_while_classic_space(range);
 2953|  2.88M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.88M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 2.85M]
  |  |  ------------------
  ------------------
 2955|  20.7k|            return unexpected(e);
 2956|  20.7k|        }
 2957|       |
 2958|  2.85M|        return it;
 2959|  2.88M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.88M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.88M|{
 2117|  2.88M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.88M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.88M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.88M|        auto buf = make_contiguous_buffer(range);
 2121|  2.88M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.88M|        return ranges::next(range.begin(),
 2123|  2.88M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.88M|    }
 2125|  2.88M|    else {
 2126|  2.88M|        auto it = range.begin();
 2127|       |
 2128|  2.88M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.88M|            auto seg = get_contiguous_beginning(range);
 2130|  2.88M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.88M|                seg_it != seg.end()) {
 2132|  2.88M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.88M|            }
 2134|  2.88M|            ranges::advance(it, seg.size());
 2135|  2.88M|        }
 2136|       |
 2137|  2.88M|        return read_while_code_point(
 2138|  2.88M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.88M|    }
 2140|  2.88M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.88M|{
 1683|  2.88M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.88M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.88M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.88M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.88M|    }
 1688|  2.88M|    else {
 1689|  2.88M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.88M|    }
 1691|  2.88M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.88M|    {
 1490|  2.88M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  8.14M|    {
  304|  8.14M|        ranges::advance(x, n);
  305|  8.14M|        return x;
  306|  8.14M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  10.8M|    {
  268|  10.8M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  10.8M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  10.8M|    {
  181|  51.9M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 41.1M, False: 10.8M]
  ------------------
  182|  41.1M|            ++i;
  183|  41.1M|        }
  184|  10.8M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   689k|    {
 6193|   689k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   689k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   689k|            auto rd = make_reader<T, char_type>();
 6198|   689k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   689k|                return unexpected(e);
 6200|   689k|            }
 6201|       |
 6202|   689k|            return impl(rd, range, value);
 6203|   689k|        }
 6204|   689k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   689k|            auto rd = make_reader<T, char_type>();
 6206|   689k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   689k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 689k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   689k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   689k|                return impl(rd, range, value);
 6213|   689k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   689k|        else {
 6221|   689k|            SCN_EXPECT(false);
 6222|   689k|            SCN_UNREACHABLE;
 6223|   689k|        }
 6224|   689k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.19M|    {
 3040|  4.19M|        reader_error_handler eh{};
 3041|  4.19M|        get_derived().check_specs_impl(specs, eh);
 3042|  4.19M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.19M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  4.19M|        return {};
 3046|  4.19M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  4.19M|    {
 3051|  4.19M|        return static_cast<Derived&>(*this);
 3052|  4.19M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  4.19M|    {
 4145|  4.19M|        detail::check_float_type_specs(specs, eh);
 4146|  4.19M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   689k|    {
 6124|   689k|        const bool need_skipped_width =
 6125|   689k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 689k]
  |  Branch (6125:33): [True: 0, False: 689k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   689k|        auto it = rng.begin();
 6129|   689k|        std::ptrdiff_t prefix_width = 0;
 6130|   689k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 689k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   689k|        else {
 6138|   689k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   689k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   689k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   689k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.06k, False: 682k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.06k|    }                                                  \
  |  |  |  | 3671|   689k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   682k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   682k|            std::tie(it, prefix_width) = prefix_result;
 6140|   682k|        }
 6141|   682k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   682k|        std::ptrdiff_t value_width = 0;
 6145|   682k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 682k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   682k|        else {
 6161|   682k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   682k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   682k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   682k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 32.0k, False: 650k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  32.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  32.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  32.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  32.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  32.0k|    }                                                  \
  |  | 3671|   682k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   682k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   650k|                                             specs, value, loc));
 6163|       |
 6164|   650k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 650k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   650k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   650k|        std::ptrdiff_t postfix_width = 0;
 6173|   650k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 645k, False: 5.42k]
  ------------------
 6174|   645k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   645k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   645k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   645k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   645k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   645k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   645k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   645k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   645k|                                 value_width));
 6178|   645k|            std::tie(it, postfix_width) = postfix_result;
 6179|   645k|        }
 6180|       |
 6181|   650k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   650k|                                                 value_width, postfix_width);
 6183|   650k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 650k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   650k|        return it;
 6188|   650k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  9.82M|    {
 3035|  9.82M|        return true;
 3036|  9.82M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  4.15M|    {
 4217|  4.15M|        unsigned options{};
 4218|  4.15M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 1.18M, False: 2.96M]
  ------------------
 4219|  1.18M|            options |= float_reader_base::allow_thsep;
 4220|  1.18M|        }
 4221|       |
 4222|  4.15M|        SCN_GCC_COMPAT_PUSH
 4223|  4.15M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  4.15M|        switch (specs.type) {
 4226|   552k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 552k, False: 3.60M]
  ------------------
 4227|   552k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  81.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 81.0k, False: 4.07M]
  ------------------
 4230|  81.0k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.32M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.32M, False: 2.83M]
  ------------------
 4233|  1.32M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|  1.00M|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 1.00M, False: 3.14M]
  ------------------
 4236|  1.00M|                return options | float_reader_base::allow_scientific |
 4237|  1.00M|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  1.18M|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 1.18M, False: 2.96M]
  ------------------
 4240|  1.18M|                return options | float_reader_base::allow_scientific |
 4241|  1.18M|                       float_reader_base::allow_fixed |
 4242|  1.18M|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 4.15M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  4.15M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  4.15M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  4.15M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  4.15M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  5.84M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  11.6M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.78M|    {
 3691|  1.78M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.78M|        const std::ptrdiff_t sign_len =
 3694|  1.78M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 482k, False: 1.30M]
  ------------------
 3695|       |
 3696|  1.78M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.78M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.78M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.78M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.7k, False: 1.75M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.7k|    }                                                  \
  |  |  |  | 3671|  1.78M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.75M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.78M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  5.67M|    {
 4057|  5.67M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 5.67M, False: 0]
  ------------------
 4058|  5.67M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 5.67M, False: 0]
  ------------------
 4059|  5.67M|            return;
 4060|  5.67M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  6.67M|    {
 1587|  6.67M|        return m_storage.has_value();
 1588|  6.67M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.92M|    {
 1592|  3.92M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.92M|        return *m_storage;
 1594|  3.92M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   682k|    {
 4170|   682k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   682k|#if !SCN_DISABLE_LOCALE
 4173|   682k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 191k, False: 491k]
  ------------------
 4174|   191k|            return read_impl<Range>(
 4175|   191k|                range, rd,
 4176|   191k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   191k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   191k|                },
 4179|   191k|                value, loc);
 4180|   191k|        }
 4181|   491k|#endif
 4182|       |
 4183|   491k|        return read_impl<Range>(
 4184|   491k|            range, rd,
 4185|   491k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   491k|                return r.read_source(SCN_FWD(args)...);
 4187|   491k|            },
 4188|   491k|            value);
 4189|   682k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   942k|    {
 4206|   942k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   942k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   942k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.6k, False: 907k]
  |  |  ------------------
  ------------------
 4208|  34.6k|            return unexpected(r.error());
 4209|  34.6k|        }
 4210|       |
 4211|   907k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   907k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   907k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   907k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.96k, False: 900k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.96k|    }                                                  \
  |  |  |  | 3671|   907k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   900k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   900k|        return ranges::next(range.begin(), n);
 4213|   907k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.98M|    {
  763|  2.98M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.98M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   191k|    {
  754|   191k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   191k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   191k|              cvref<T> obj = *get<T>(fn);
  745|   191k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   191k|                  obj(static_cast<decltype(args)>(args)...);
  747|   191k|              }
  748|   191k|              else {
  749|   191k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   191k|              }
  751|   191k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   191k|    {
  684|   191k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   191k|            return static_cast<T*>(s.m_cp);
  686|   191k|        }
  687|   191k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   191k|            return static_cast<T*>(s.m_p);
  689|   191k|        }
  690|   191k|        else {
  691|   191k|            return reinterpret_cast<T*>(s.m_fp);
  692|   191k|        }
  693|   191k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   191k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   191k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   191k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   616k|    {
 3679|   616k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   616k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   616k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 616k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   616k|        return read_source_impl(range);
 3685|   616k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  2.98M|    {
 3705|  2.98M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  2.98M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.98M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.98M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.98M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.98M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.98M|        auto it = sign_result.first;
 3708|  2.98M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.98M|        auto digits_begin = it;
 3711|  2.98M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.98M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.98M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.98M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  2.98M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  2.98M|                SCN_TRY_ASSIGN(
 3717|  2.98M|                    it,
 3718|  2.98M|                    do_read_source_impl(
 3719|  2.98M|                        r,
 3720|  2.98M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  2.98M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  2.98M|            }
 3723|  2.98M|            else {
 3724|  2.98M|                auto cb = [&](const auto& rr)
 3725|  2.98M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.98M|                    auto res = read_all(rr);
 3727|  2.98M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.98M|                        return unexpected_scan_error(
 3729|  2.98M|                            scan_error::invalid_scanned_value,
 3730|  2.98M|                            "Invalid float value");
 3731|  2.98M|                    }
 3732|  2.98M|                    return res;
 3733|  2.98M|                };
 3734|  2.98M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  2.98M|            }
 3736|  2.98M|        }
 3737|  2.98M|        else {
 3738|  2.98M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  2.98M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.98M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 110k, False: 2.87M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   110k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   110k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   110k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   110k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   110k|    }                                                  \
  |  | 3671|  2.98M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  2.87M|                it,
 3740|  2.87M|                do_read_source_impl(
 3741|  2.87M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.87M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.87M|        }
 3744|       |
 3745|  2.87M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.87M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.84M, False: 24.5k]
  |  Branch (3747:48): [True: 2.83M, False: 17.8k]
  ------------------
 3748|  2.87M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.73M, False: 98.9k]
  ------------------
 3749|  2.87M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.73M, False: 2.66k]
  ------------------
 3750|  2.73M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.73M|        }
 3752|       |
 3753|  2.87M|        handle_separators();
 3754|       |
 3755|  2.87M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.87M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.87M|        return it;
 3768|  2.87M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  2.98M|    {
 4000|  2.98M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.98M|        const bool allowed_nonhex =
 4002|  2.98M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.98M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.98M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.94M, False: 42.4k]
  |  Branch (4005:45): [True: 0, False: 2.94M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.98M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 42.4k, False: 2.94M]
  ------------------
 4011|  42.4k|            return *r;
 4012|  42.4k|        }
 4013|       |
 4014|  2.94M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.84M, False: 101k]
  |  Branch (4014:45): [True: 1.25k, False: 2.83M]
  ------------------
 4015|  1.25k|            return unexpected(r.error());
 4016|  1.25k|        }
 4017|  2.94M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 101k, False: 2.83M]
  ------------------
 4018|   101k|            return *r;
 4019|   101k|        }
 4020|       |
 4021|  2.83M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 2.02M, False: 810k]
  |  Branch (4021:28): [True: 653k, False: 1.37M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   653k|            auto it = range.begin();
 4025|       |
 4026|   653k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 31.5k, False: 621k]
  ------------------
 4027|  31.5k|                m_kind = float_kind::hex_with_prefix;
 4028|  31.5k|                it = *r;
 4029|  31.5k|            }
 4030|   621k|            else {
 4031|   621k|                m_kind = float_kind::hex_without_prefix;
 4032|   621k|            }
 4033|       |
 4034|   653k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   653k|        }
 4036|  2.18M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 810k, False: 1.37M]
  |  Branch (4036:29): [True: 810k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   810k|            m_kind = float_kind::generic;
 4040|   810k|            return read_regular_float(range);
 4041|   810k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.37M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.8k, False: 1.30M]
  |  |  ------------------
  ------------------
 4047|  70.8k|            m_kind = float_kind::hex_with_prefix;
 4048|  70.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  70.8k|        }
 4050|       |
 4051|  1.30M|        m_kind = float_kind::generic;
 4052|  1.30M|        return read_regular(range);
 4053|  1.37M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  2.98M|    {
 3811|  2.98M|        auto it = range.begin();
 3812|  2.98M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.94M, False: 42.4k]
  ------------------
 3813|  2.94M|            return unexpected(r.error());
 3814|  2.94M|        }
 3815|  42.4k|        else {
 3816|  42.4k|            it = *r;
 3817|  42.4k|        }
 3818|       |
 3819|  42.4k|        if (auto r = read_matching_string_classic_nocase(
 3820|  42.4k|                ranges::subrange{it, range.end()}, "inity");
 3821|  42.4k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 24.5k, False: 17.8k]
  ------------------
 3822|  24.5k|            m_kind = float_kind::inf_short;
 3823|  24.5k|            return it;
 3824|  24.5k|        }
 3825|  17.8k|        else {
 3826|  17.8k|            m_kind = float_kind::inf_long;
 3827|  17.8k|            return *r;
 3828|  17.8k|        }
 3829|  42.4k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  2.94M|    {
 3834|  2.94M|        auto it = range.begin();
 3835|  2.94M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.83M, False: 102k]
  ------------------
 3836|  2.83M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.83M|                scan_error::invalid_scanned_value,
 3838|  2.83M|                "Invalid floating-point NaN value"));
 3839|  2.83M|        }
 3840|   102k|        else {
 3841|   102k|            it = *r;
 3842|   102k|        }
 3843|       |
 3844|   102k|        if (auto r =
 3845|   102k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|   102k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 98.9k, False: 3.92k]
  ------------------
 3847|  98.9k|            m_kind = float_kind::nan_simple;
 3848|  98.9k|            return it;
 3849|  98.9k|        }
 3850|  3.92k|        else {
 3851|  3.92k|            it = *r;
 3852|  3.92k|        }
 3853|       |
 3854|  3.92k|        auto payload_beg_it = it;
 3855|  3.92k|        it = read_while_code_unit(
 3856|  3.92k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.92k|                return is_ascii_char(ch) &&
 3858|  3.92k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.92k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.92k|            });
 3861|  3.92k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.92k|        m_kind = float_kind::nan_with_payload;
 3864|  3.92k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.25k]
  ------------------
 3865|  3.92k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.25k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.25k|                                     "Invalid floating-point NaN payload");
 3870|  3.92k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.92k|    {
  754|  3.92k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  25.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.2k|              cvref<T> obj = *get<T>(fn);
  745|  25.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.2k|              }
  748|  25.2k|              else {
  749|  25.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.2k|              }
  751|  25.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  25.2k|    {
  684|  25.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.2k|            return static_cast<T*>(s.m_cp);
  686|  25.2k|        }
  687|  25.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.2k|            return static_cast<T*>(s.m_p);
  689|  25.2k|        }
  690|  25.2k|        else {
  691|  25.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.2k|        }
  693|  25.2k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  25.2k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  25.2k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 24.9k, False: 277]
  ------------------
 3858|  25.2k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 22.2k, False: 2.77k]
  |  Branch (3858:39): [True: 14.1k, False: 8.05k]
  |  Branch (3858:54): [True: 2.59k, False: 8.23k]
  |  Branch (3858:67): [True: 2.51k, False: 83]
  ------------------
 3859|  24.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.53k, False: 2.77k]
  |  Branch (3859:39): [True: 2.54k, False: 2.99k]
  |  Branch (3859:53): [True: 2.88k, False: 2.88k]
  ------------------
 3860|  25.2k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.92k|        {
  662|  3.92k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  2.02M|    {
 3804|  2.02M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  2.02M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   724k|    {
 3904|   724k|        auto it = range.begin();
 3905|       |
 3906|   724k|        std::ptrdiff_t digits_count = 0;
 3907|   724k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   724k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.9k, False: 710k]
  |  |  ------------------
  ------------------
 3909|  13.9k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  13.9k|                scan_error::invalid_scanned_value,
 3911|  13.9k|                "Invalid hexadecimal floating-point value"));
 3912|  13.9k|        }
 3913|   710k|        else {
 3914|   710k|            digits_count += ranges::distance(it, *r);
 3915|   710k|            it = *r;
 3916|   710k|        }
 3917|       |
 3918|   710k|        m_integral_part_length = digits_count;
 3919|   710k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 99.8k, False: 610k]
  ------------------
 3920|   710k|                                             m_locale_options.decimal_point)) {
 3921|  99.8k|            it = *r;
 3922|  99.8k|        }
 3923|       |
 3924|   710k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 82.4k, False: 627k]
  ------------------
 3925|   710k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  82.4k|            digits_count += ranges::distance(it, *r);
 3927|  82.4k|            it = *r;
 3928|  82.4k|        }
 3929|       |
 3930|   710k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 710k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   710k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   710k|        return it;
 3938|   710k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.43M|    {
 3789|  1.43M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.43M]
  |  |  |  Branch (859:45): [True: 0, False: 1.43M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.43M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.43M|        return read_while1_code_unit(
 3798|  1.43M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.43M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.43M|    {
  754|  1.43M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  7.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.52M|              cvref<T> obj = *get<T>(fn);
  745|  7.52M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.52M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.52M|              }
  748|  7.52M|              else {
  749|  7.52M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.52M|              }
  751|  7.52M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  7.52M|    {
  684|  7.52M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.52M|            return static_cast<T*>(s.m_cp);
  686|  7.52M|        }
  687|  7.52M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.52M|            return static_cast<T*>(s.m_p);
  689|  7.52M|        }
  690|  7.52M|        else {
  691|  7.52M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.52M|        }
  693|  7.52M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  7.52M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.43M|        {
  662|  1.43M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  2.49M|    {
 3876|  2.49M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 281k, False: 2.21M]
  ------------------
 3877|   281k|            auto beg_exp_it = range.begin();
 3878|   281k|            auto it = *r;
 3879|       |
 3880|   281k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 281k, False: 535]
  ------------------
 3881|   281k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   281k|                it = r_sign->first;
 3883|   281k|            }
 3884|       |
 3885|   281k|            if (auto r_exp = read_while1_code_unit(
 3886|   281k|                    ranges::subrange{it, range.end()},
 3887|   281k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   281k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 278k]
  |  |  ------------------
  ------------------
 3889|  3.38k|                it = beg_exp_it;
 3890|  3.38k|            }
 3891|   278k|            else {
 3892|   278k|                it = *r_exp;
 3893|   278k|            }
 3894|       |
 3895|   281k|            return it;
 3896|   281k|        }
 3897|  2.21M|        return range.begin();
 3898|  2.49M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   281k|    {
  754|   281k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   909k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   909k|              cvref<T> obj = *get<T>(fn);
  745|   909k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   909k|                  obj(static_cast<decltype(args)>(args)...);
  747|   909k|              }
  748|   909k|              else {
  749|   909k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   909k|              }
  751|   909k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   909k|    {
  684|   909k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   909k|            return static_cast<T*>(s.m_cp);
  686|   909k|        }
  687|   909k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   909k|            return static_cast<T*>(s.m_p);
  689|   909k|        }
  690|   909k|        else {
  691|   909k|            return reinterpret_cast<T*>(s.m_fp);
  692|   909k|        }
  693|   909k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   909k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   281k|        {
  662|   281k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  2.11M|    {
 3944|  2.11M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  2.11M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.83M, False: 277k]
  |  Branch (3945:50): [True: 39.5k, False: 1.79M]
  ------------------
 3946|       |
 3947|  2.11M|        auto it = ranges::begin(range);
 3948|  2.11M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  2.11M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  2.11M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.9k, False: 2.04M]
  |  |  ------------------
  ------------------
 3952|  74.9k|            return r.transform_error(
 3953|  74.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  74.9k|                                              "Invalid floating-point value"));
 3955|  74.9k|        }
 3956|  2.04M|        else {
 3957|  2.04M|            digits_count += ranges::distance(it, *r);
 3958|  2.04M|            it = *r;
 3959|  2.04M|        }
 3960|       |
 3961|  2.04M|        m_integral_part_length = digits_count;
 3962|  2.04M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 367k, False: 1.67M]
  ------------------
 3963|  2.04M|                                             m_locale_options.decimal_point)) {
 3964|   367k|            it = *r;
 3965|   367k|        }
 3966|       |
 3967|  2.04M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 321k, False: 1.71M]
  ------------------
 3968|  2.04M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   321k|            digits_count += ranges::distance(it, *r);
 3970|   321k|            it = *r;
 3971|   321k|        }
 3972|       |
 3973|  2.04M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.04M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  2.04M|        auto beg_exp_it = it;
 3979|  2.04M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.78M, False: 257k]
  ------------------
 3980|  1.78M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.78M|        }
 3982|  2.04M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 38.3k, False: 2.00M]
  |  Branch (3982:29): [True: 20.4k, False: 17.8k]
  ------------------
 3983|  20.4k|            return unexpected_scan_error(
 3984|  20.4k|                scan_error::invalid_scanned_value,
 3985|  20.4k|                "No exponent given to scientific float");
 3986|  20.4k|        }
 3987|       |
 3988|  2.01M|        m_kind =
 3989|  2.01M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.74M, False: 277k]
  ------------------
 3990|       |
 3991|  2.01M|        return it;
 3992|  2.04M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  4.15M|    {
 3774|  4.15M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  4.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.15M]
  |  |  |  Branch (859:45): [True: 0, False: 4.15M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  4.15M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  4.15M|        return read_while1_code_unit(
 3783|  4.15M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  4.15M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  4.15M|    {
  754|  4.15M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  24.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.1M|              cvref<T> obj = *get<T>(fn);
  745|  24.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.1M|              }
  748|  24.1M|              else {
  749|  24.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.1M|              }
  751|  24.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  24.1M|    {
  684|  24.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.1M|            return static_cast<T*>(s.m_cp);
  686|  24.1M|        }
  687|  24.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.1M|            return static_cast<T*>(s.m_p);
  689|  24.1M|        }
  690|  24.1M|        else {
  691|  24.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.1M|        }
  693|  24.1M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  24.1M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  4.15M|        {
  662|  4.15M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.73M|    {
 1577|  2.73M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.73M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   191k|        {
  662|   191k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   491k|    {
  754|   491k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   491k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   491k|              cvref<T> obj = *get<T>(fn);
  745|   491k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   491k|                  obj(static_cast<decltype(args)>(args)...);
  747|   491k|              }
  748|   491k|              else {
  749|   491k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   491k|              }
  751|   491k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   491k|    {
  684|   491k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   491k|            return static_cast<T*>(s.m_cp);
  686|   491k|        }
  687|   491k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   491k|            return static_cast<T*>(s.m_p);
  689|   491k|        }
  690|   491k|        else {
  691|   491k|            return reinterpret_cast<T*>(s.m_fp);
  692|   491k|        }
  693|   491k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   491k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   491k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   491k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  2.36M|    {
 3665|  2.36M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.36M|        return read_source_impl(range);
 3671|  2.36M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   491k|        {
  662|   491k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   635k|    {
 4170|   635k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   635k|#if !SCN_DISABLE_LOCALE
 4173|   635k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 177k, False: 458k]
  ------------------
 4174|   177k|            return read_impl<Range>(
 4175|   177k|                range, rd,
 4176|   177k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   177k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   177k|                },
 4179|   177k|                value, loc);
 4180|   177k|        }
 4181|   458k|#endif
 4182|       |
 4183|   458k|        return read_impl<Range>(
 4184|   458k|            range, rd,
 4185|   458k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   458k|                return r.read_source(SCN_FWD(args)...);
 4187|   458k|            },
 4188|   458k|            value);
 4189|   635k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   901k|    {
 4206|   901k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   901k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   901k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 881k]
  |  |  ------------------
  ------------------
 4208|  19.9k|            return unexpected(r.error());
 4209|  19.9k|        }
 4210|       |
 4211|   881k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   881k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   881k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   881k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   881k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.7k, False: 859k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  22.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  22.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  22.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  22.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  22.7k|    }                                                  \
  |  |  |  | 3671|   881k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   859k|        return ranges::next(range.begin(), n);
 4213|   881k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.85M|    {
  763|  2.85M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.85M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   177k|    {
  684|   177k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   177k|            return static_cast<T*>(s.m_cp);
  686|   177k|        }
  687|   177k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   177k|            return static_cast<T*>(s.m_p);
  689|   177k|        }
  690|   177k|        else {
  691|   177k|            return reinterpret_cast<T*>(s.m_fp);
  692|   177k|        }
  693|   177k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   177k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   177k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   177k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   572k|    {
 3679|   572k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   572k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   572k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 572k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   572k|        return read_source_impl(range);
 3685|   572k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  2.85M|    {
 3705|  2.85M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  2.85M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.85M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.85M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.85M|        auto it = sign_result.first;
 3708|  2.85M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.85M|        auto digits_begin = it;
 3711|  2.85M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.85M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.85M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.85M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  5.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.85M]
  |  |  |  Branch (859:45): [True: 0, False: 2.85M]
  |  |  |  Branch (859:45): [True: 0, False: 2.85M]
  |  |  ------------------
  ------------------
 3715|  2.85M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  2.85M|            else {
 3724|  2.85M|                auto cb = [&](const auto& rr)
 3725|  2.85M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.85M|                    auto res = read_all(rr);
 3727|  2.85M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.85M|                        return unexpected_scan_error(
 3729|  2.85M|                            scan_error::invalid_scanned_value,
 3730|  2.85M|                            "Invalid float value");
 3731|  2.85M|                    }
 3732|  2.85M|                    return res;
 3733|  2.85M|                };
 3734|  2.85M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  2.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 62.1k, False: 2.79M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  62.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  62.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  62.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  62.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  62.1k|    }                                                  \
  |  | 3671|  2.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.79M|            }
 3736|  2.85M|        }
 3737|  2.79M|        else {
 3738|  2.79M|            SCN_TRY_ASSIGN(
 3739|  2.79M|                it,
 3740|  2.79M|                do_read_source_impl(
 3741|  2.79M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.79M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.79M|        }
 3744|       |
 3745|  2.79M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.79M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.77M, False: 23.9k]
  |  Branch (3747:48): [True: 2.75M, False: 17.6k]
  ------------------
 3748|  2.79M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.65M, False: 98.5k]
  ------------------
 3749|  2.79M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.65M, False: 2.65k]
  ------------------
 3750|  2.65M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.65M|        }
 3752|       |
 3753|  2.79M|        handle_separators();
 3754|       |
 3755|  2.79M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.79M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.79M|        return it;
 3768|  2.79M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  2.85M|    {
 3811|  2.85M|        auto it = range.begin();
 3812|  2.85M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.81M, False: 41.5k]
  ------------------
 3813|  2.81M|            return unexpected(r.error());
 3814|  2.81M|        }
 3815|  41.5k|        else {
 3816|  41.5k|            it = *r;
 3817|  41.5k|        }
 3818|       |
 3819|  41.5k|        if (auto r = read_matching_string_classic_nocase(
 3820|  41.5k|                ranges::subrange{it, range.end()}, "inity");
 3821|  41.5k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 23.9k, False: 17.6k]
  ------------------
 3822|  23.9k|            m_kind = float_kind::inf_short;
 3823|  23.9k|            return it;
 3824|  23.9k|        }
 3825|  17.6k|        else {
 3826|  17.6k|            m_kind = float_kind::inf_long;
 3827|  17.6k|            return *r;
 3828|  17.6k|        }
 3829|  41.5k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  2.81M|    {
 3834|  2.81M|        auto it = range.begin();
 3835|  2.81M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.71M, False: 102k]
  ------------------
 3836|  2.71M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.71M|                scan_error::invalid_scanned_value,
 3838|  2.71M|                "Invalid floating-point NaN value"));
 3839|  2.71M|        }
 3840|   102k|        else {
 3841|   102k|            it = *r;
 3842|   102k|        }
 3843|       |
 3844|   102k|        if (auto r =
 3845|   102k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|   102k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 98.5k, False: 3.83k]
  ------------------
 3847|  98.5k|            m_kind = float_kind::nan_simple;
 3848|  98.5k|            return it;
 3849|  98.5k|        }
 3850|  3.83k|        else {
 3851|  3.83k|            it = *r;
 3852|  3.83k|        }
 3853|       |
 3854|  3.83k|        auto payload_beg_it = it;
 3855|  3.83k|        it = read_while_code_unit(
 3856|  3.83k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.83k|                return is_ascii_char(ch) &&
 3858|  3.83k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.83k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.83k|            });
 3861|  3.83k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.83k|        m_kind = float_kind::nan_with_payload;
 3864|  3.83k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.17k]
  ------------------
 3865|  3.83k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.17k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.17k|                                     "Invalid floating-point NaN payload");
 3870|  3.83k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.83k|    {
  754|  3.83k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  24.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.1k|              cvref<T> obj = *get<T>(fn);
  745|  24.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.1k|              }
  748|  24.1k|              else {
  749|  24.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.1k|              }
  751|  24.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  24.1k|    {
  684|  24.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.1k|            return static_cast<T*>(s.m_cp);
  686|  24.1k|        }
  687|  24.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.1k|            return static_cast<T*>(s.m_p);
  689|  24.1k|        }
  690|  24.1k|        else {
  691|  24.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.1k|        }
  693|  24.1k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  24.1k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  24.1k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.9k, False: 197]
  ------------------
 3858|  24.1k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 21.2k, False: 2.76k]
  |  Branch (3858:39): [True: 13.2k, False: 7.97k]
  |  Branch (3858:54): [True: 2.52k, False: 8.21k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  23.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.53k, False: 2.76k]
  |  Branch (3859:39): [True: 2.54k, False: 2.99k]
  |  Branch (3859:53): [True: 2.88k, False: 2.87k]
  ------------------
 3860|  24.1k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.83k|        {
  662|  3.83k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.96M|    {
 3804|  1.96M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.96M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.55M|{
 1996|  1.55M|    auto it = read_while_code_unit(range, pred);
 1997|  1.55M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 638k, False: 919k]
  ------------------
 1998|   638k|        return unexpected(parse_error::error);
 1999|   638k|    }
 2000|   919k|    return it;
 2001|  1.55M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   477k|    {
 3876|   477k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 87.0k, False: 390k]
  ------------------
 3877|  87.0k|            auto beg_exp_it = range.begin();
 3878|  87.0k|            auto it = *r;
 3879|       |
 3880|  87.0k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 86.8k, False: 168]
  ------------------
 3881|  87.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  86.8k|                it = r_sign->first;
 3883|  86.8k|            }
 3884|       |
 3885|  87.0k|            if (auto r_exp = read_while1_code_unit(
 3886|  87.0k|                    ranges::subrange{it, range.end()},
 3887|  87.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  87.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.16k, False: 85.8k]
  |  |  ------------------
  ------------------
 3889|  1.16k|                it = beg_exp_it;
 3890|  1.16k|            }
 3891|  85.8k|            else {
 3892|  85.8k|                it = *r_exp;
 3893|  85.8k|            }
 3894|       |
 3895|  87.0k|            return it;
 3896|  87.0k|        }
 3897|   390k|        return range.begin();
 3898|   477k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  87.0k|    {
  754|  87.0k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   273k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   273k|              cvref<T> obj = *get<T>(fn);
  745|   273k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   273k|                  obj(static_cast<decltype(args)>(args)...);
  747|   273k|              }
  748|   273k|              else {
  749|   273k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   273k|              }
  751|   273k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   273k|    {
  684|   273k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   273k|            return static_cast<T*>(s.m_cp);
  686|   273k|        }
  687|   273k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   273k|            return static_cast<T*>(s.m_p);
  689|   273k|        }
  690|   273k|        else {
  691|   273k|            return reinterpret_cast<T*>(s.m_fp);
  692|   273k|        }
  693|   273k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   273k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  87.0k|        {
  662|  87.0k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   755k|    {
 3944|   755k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   755k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 496k, False: 258k]
  |  Branch (3945:50): [True: 38.2k, False: 458k]
  ------------------
 3946|       |
 3947|   755k|        auto it = ranges::begin(range);
 3948|   755k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   755k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   755k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 715k]
  |  |  ------------------
  ------------------
 3952|  39.2k|            return r.transform_error(
 3953|  39.2k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  39.2k|                                              "Invalid floating-point value"));
 3955|  39.2k|        }
 3956|   715k|        else {
 3957|   715k|            digits_count += ranges::distance(it, *r);
 3958|   715k|            it = *r;
 3959|   715k|        }
 3960|       |
 3961|   715k|        m_integral_part_length = digits_count;
 3962|   715k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 134k, False: 581k]
  ------------------
 3963|   715k|                                             m_locale_options.decimal_point)) {
 3964|   134k|            it = *r;
 3965|   134k|        }
 3966|       |
 3967|   715k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 118k, False: 597k]
  ------------------
 3968|   715k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   118k|            digits_count += ranges::distance(it, *r);
 3970|   118k|            it = *r;
 3971|   118k|        }
 3972|       |
 3973|   715k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   715k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 715k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   715k|        auto beg_exp_it = it;
 3979|   715k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 477k, False: 237k]
  ------------------
 3980|   477k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   477k|        }
 3982|   715k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 36.7k, False: 679k]
  |  Branch (3982:29): [True: 20.3k, False: 16.4k]
  ------------------
 3983|  20.3k|            return unexpected_scan_error(
 3984|  20.3k|                scan_error::invalid_scanned_value,
 3985|  20.3k|                "No exponent given to scientific float");
 3986|  20.3k|        }
 3987|       |
 3988|   695k|        m_kind =
 3989|   695k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 609k, False: 85.8k]
  ------------------
 3990|       |
 3991|   695k|        return it;
 3992|   715k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.47M|    {
 3774|  1.47M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.47M]
  |  |  |  Branch (859:45): [True: 0, False: 1.47M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.47M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.47M|        return read_while1_code_unit(
 3783|  1.47M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.47M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.47M|    {
  754|  1.47M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  8.81M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.81M|              cvref<T> obj = *get<T>(fn);
  745|  8.81M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.81M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.81M|              }
  748|  8.81M|              else {
  749|  8.81M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.81M|              }
  751|  8.81M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  8.81M|    {
  684|  8.81M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.81M|            return static_cast<T*>(s.m_cp);
  686|  8.81M|        }
  687|  8.81M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.81M|            return static_cast<T*>(s.m_p);
  689|  8.81M|        }
  690|  8.81M|        else {
  691|  8.81M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.81M|        }
  693|  8.81M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  8.81M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.47M|        {
  662|  1.47M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  2.85M|    {
 4000|  2.85M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.85M|        const bool allowed_nonhex =
 4002|  2.85M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.85M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.85M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.81M, False: 41.5k]
  |  Branch (4005:45): [True: 0, False: 2.81M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.85M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 41.5k, False: 2.81M]
  ------------------
 4011|  41.5k|            return *r;
 4012|  41.5k|        }
 4013|       |
 4014|  2.81M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.71M, False: 101k]
  |  Branch (4014:45): [True: 1.17k, False: 2.71M]
  ------------------
 4015|  1.17k|            return unexpected(r.error());
 4016|  1.17k|        }
 4017|  2.81M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 101k, False: 2.71M]
  ------------------
 4018|   101k|            return *r;
 4019|   101k|        }
 4020|       |
 4021|  2.71M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.96M, False: 755k]
  |  Branch (4021:28): [True: 603k, False: 1.35M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   603k|            auto it = range.begin();
 4025|       |
 4026|   603k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 30.0k, False: 573k]
  ------------------
 4027|  30.0k|                m_kind = float_kind::hex_with_prefix;
 4028|  30.0k|                it = *r;
 4029|  30.0k|            }
 4030|   573k|            else {
 4031|   573k|                m_kind = float_kind::hex_without_prefix;
 4032|   573k|            }
 4033|       |
 4034|   603k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   603k|        }
 4036|  2.11M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 755k, False: 1.35M]
  |  Branch (4036:29): [True: 755k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   755k|            m_kind = float_kind::generic;
 4040|   755k|            return read_regular_float(range);
 4041|   755k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.35M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.9k, False: 1.28M]
  |  |  ------------------
  ------------------
 4047|  73.9k|            m_kind = float_kind::hex_with_prefix;
 4048|  73.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  73.9k|        }
 4050|       |
 4051|  1.28M|        m_kind = float_kind::generic;
 4052|  1.28M|        return read_regular(range);
 4053|  1.35M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.96M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.96M|                    auto res = read_all(rr);
 3727|  1.96M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.34k, False: 1.95M]
  |  |  ------------------
  ------------------
 3728|  1.34k|                        return unexpected_scan_error(
 3729|  1.34k|                            scan_error::invalid_scanned_value,
 3730|  1.34k|                            "Invalid float value");
 3731|  1.34k|                    }
 3732|  1.95M|                    return res;
 3733|  1.96M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.96M|{
 1839|  1.96M|    return ranges::next(range.begin(), range.end());
 1840|  1.96M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.96M|    {
  313|  1.96M|        ranges::advance(x, bound);
  314|  1.96M|        return x;
  315|  1.96M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.96M|    {
  275|  1.96M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.96M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.96M|    {
  190|  1.96M|        i = std::move(bound);
  191|  1.96M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.65M|    {
 1577|  2.65M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.65M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.65M|    {
 1621|  2.65M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.65M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.65M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.65M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.65M|            m_storage.reset();
 1627|  2.65M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.65M|        }
 1629|  2.65M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.65M|                                          std::basic_string<CharT>>) {
 1631|  2.65M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.65M|            m_view = string_view_type{*m_storage};
 1633|  2.65M|        }
 1634|  2.65M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.65M|                                          typename detail::basic_scan_buffer<
 1636|  2.65M|                                              value_t>::forward_iterator> &&
 1637|  2.65M|                           ranges::common_range<Range>) {
 1638|  2.65M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.65M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.65M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.65M|                             detail::to_address(end_seg.end()))) {
 1642|  2.65M|                auto& str = m_storage.emplace();
 1643|  2.65M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.65M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.65M|                m_view = string_view_type{str};
 1646|  2.65M|                return;
 1647|  2.65M|            }
 1648|       |
 1649|  2.65M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.65M|                                                            end_seg.data());
 1651|  2.65M|            m_storage.reset();
 1652|  2.65M|        }
 1653|  2.65M|        else {
 1654|  2.65M|            auto& str = m_storage.emplace();
 1655|  2.65M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.65M|                str.reserve(range.size());
 1657|  2.65M|            }
 1658|  2.65M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.65M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.65M|                          std::back_inserter(str));
 1661|  2.65M|            }
 1662|  2.65M|            else {
 1663|  2.65M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.65M|                     ++it) {
 1665|  2.65M|                    str.push_back(*it);
 1666|  2.65M|                }
 1667|  2.65M|            }
 1668|  2.65M|            m_view = string_view_type{str};
 1669|  2.65M|        }
 1670|  2.65M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   458k|    {
  754|   458k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   458k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   458k|              cvref<T> obj = *get<T>(fn);
  745|   458k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   458k|                  obj(static_cast<decltype(args)>(args)...);
  747|   458k|              }
  748|   458k|              else {
  749|   458k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   458k|              }
  751|   458k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   458k|    {
  684|   458k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   458k|            return static_cast<T*>(s.m_cp);
  686|   458k|        }
  687|   458k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   458k|            return static_cast<T*>(s.m_p);
  689|   458k|        }
  690|   458k|        else {
  691|   458k|            return reinterpret_cast<T*>(s.m_fp);
  692|   458k|        }
  693|   458k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   458k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   458k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   458k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  2.28M|    {
 3665|  2.28M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.28M|        return read_source_impl(range);
 3671|  2.28M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   458k|        {
  662|   458k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   738k|    {
 6193|   738k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   738k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   738k|            auto rd = make_reader<T, char_type>();
 6198|   738k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   738k|                return unexpected(e);
 6200|   738k|            }
 6201|       |
 6202|   738k|            return impl(rd, range, value);
 6203|   738k|        }
 6204|   738k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   738k|            auto rd = make_reader<T, char_type>();
 6206|   738k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 738k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   738k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 738k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   738k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   738k|                return impl(rd, range, value);
 6213|   738k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   738k|        else {
 6221|   738k|            SCN_EXPECT(false);
 6222|   738k|            SCN_UNREACHABLE;
 6223|   738k|        }
 6224|   738k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   738k|    {
 6124|   738k|        const bool need_skipped_width =
 6125|   738k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 738k]
  |  Branch (6125:33): [True: 0, False: 738k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   738k|        auto it = rng.begin();
 6129|   738k|        std::ptrdiff_t prefix_width = 0;
 6130|   738k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 738k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   738k|        else {
 6138|   738k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   738k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   738k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   738k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.03k, False: 730k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.03k|    }                                                  \
  |  |  |  | 3671|   738k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   730k|            std::tie(it, prefix_width) = prefix_result;
 6140|   730k|        }
 6141|   730k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   730k|        std::ptrdiff_t value_width = 0;
 6145|   730k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 730k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   730k|        else {
 6161|   730k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   730k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   730k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 31.1k, False: 699k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  31.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  31.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  31.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  31.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  31.1k|    }                                                  \
  |  | 3671|   730k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   699k|                                             specs, value, loc));
 6163|       |
 6164|   699k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 699k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   699k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   699k|        std::ptrdiff_t postfix_width = 0;
 6173|   699k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 693k, False: 6.19k]
  ------------------
 6174|   693k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   693k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   693k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   693k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   693k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 693k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   693k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   693k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   693k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   693k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   693k|                                 value_width));
 6178|   693k|            std::tie(it, postfix_width) = postfix_result;
 6179|   693k|        }
 6180|       |
 6181|   699k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   699k|                                                 value_width, postfix_width);
 6183|   699k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 699k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   699k|        return it;
 6188|   699k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.93M|    {
 3691|  1.93M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.93M|        const std::ptrdiff_t sign_len =
 3694|  1.93M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 517k, False: 1.41M]
  ------------------
 3695|       |
 3696|  1.93M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.93M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.93M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.93M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.8k, False: 1.90M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  23.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  23.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  23.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  23.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  23.8k|    }                                                  \
  |  |  |  | 3671|  1.93M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.90M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.93M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   730k|    {
 4170|   730k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   730k|#if !SCN_DISABLE_LOCALE
 4173|   730k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 210k, False: 519k]
  ------------------
 4174|   210k|            return read_impl<Range>(
 4175|   210k|                range, rd,
 4176|   210k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   210k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   210k|                },
 4179|   210k|                value, loc);
 4180|   210k|        }
 4181|   519k|#endif
 4182|       |
 4183|   519k|        return read_impl<Range>(
 4184|   519k|            range, rd,
 4185|   519k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   519k|                return r.read_source(SCN_FWD(args)...);
 4187|   519k|            },
 4188|   519k|            value);
 4189|   730k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.01M|    {
 4206|  1.01M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.01M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 978k]
  |  |  ------------------
  ------------------
 4208|  37.3k|            return unexpected(r.error());
 4209|  37.3k|        }
 4210|       |
 4211|   978k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   978k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   978k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   978k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.95k, False: 975k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.95k|    }                                                  \
  |  |  |  | 3671|   978k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   975k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   975k|        return ranges::next(range.begin(), n);
 4213|   978k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   210k|    {
  754|   210k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   210k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   210k|              cvref<T> obj = *get<T>(fn);
  745|   210k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   210k|                  obj(static_cast<decltype(args)>(args)...);
  747|   210k|              }
  748|   210k|              else {
  749|   210k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   210k|              }
  751|   210k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   210k|    {
  684|   210k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   210k|            return static_cast<T*>(s.m_cp);
  686|   210k|        }
  687|   210k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   210k|            return static_cast<T*>(s.m_p);
  689|   210k|        }
  690|   210k|        else {
  691|   210k|            return reinterpret_cast<T*>(s.m_fp);
  692|   210k|        }
  693|   210k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   210k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   210k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   210k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   210k|        {
  662|   210k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   519k|    {
  754|   519k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   519k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   519k|              cvref<T> obj = *get<T>(fn);
  745|   519k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   519k|                  obj(static_cast<decltype(args)>(args)...);
  747|   519k|              }
  748|   519k|              else {
  749|   519k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   519k|              }
  751|   519k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   519k|    {
  684|   519k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   519k|            return static_cast<T*>(s.m_cp);
  686|   519k|        }
  687|   519k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   519k|            return static_cast<T*>(s.m_p);
  689|   519k|        }
  690|   519k|        else {
  691|   519k|            return reinterpret_cast<T*>(s.m_fp);
  692|   519k|        }
  693|   519k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   519k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   519k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   519k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   519k|        {
  662|   519k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   679k|    {
 4170|   679k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   679k|#if !SCN_DISABLE_LOCALE
 4173|   679k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 195k, False: 483k]
  ------------------
 4174|   195k|            return read_impl<Range>(
 4175|   195k|                range, rd,
 4176|   195k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   195k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   195k|                },
 4179|   195k|                value, loc);
 4180|   195k|        }
 4181|   483k|#endif
 4182|       |
 4183|   483k|        return read_impl<Range>(
 4184|   483k|            range, rd,
 4185|   483k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   483k|                return r.read_source(SCN_FWD(args)...);
 4187|   483k|            },
 4188|   483k|            value);
 4189|   679k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   973k|    {
 4206|   973k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   973k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   973k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.8k, False: 952k]
  |  |  ------------------
  ------------------
 4208|  20.8k|            return unexpected(r.error());
 4209|  20.8k|        }
 4210|       |
 4211|   952k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   952k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   952k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   952k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   952k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.8k, False: 931k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  20.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  20.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  20.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  20.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  20.8k|    }                                                  \
  |  |  |  | 3671|   952k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   931k|        return ranges::next(range.begin(), n);
 4213|   952k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   195k|    {
  754|   195k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|   195k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   195k|                  obj(static_cast<decltype(args)>(args)...);
  747|   195k|              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   195k|    {
  684|   195k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   195k|            return static_cast<T*>(s.m_cp);
  686|   195k|        }
  687|   195k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   195k|            return static_cast<T*>(s.m_p);
  689|   195k|        }
  690|   195k|        else {
  691|   195k|            return reinterpret_cast<T*>(s.m_fp);
  692|   195k|        }
  693|   195k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   195k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   195k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   195k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   195k|        {
  662|   195k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   483k|    {
  754|   483k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   483k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   483k|              cvref<T> obj = *get<T>(fn);
  745|   483k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   483k|                  obj(static_cast<decltype(args)>(args)...);
  747|   483k|              }
  748|   483k|              else {
  749|   483k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   483k|              }
  751|   483k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   483k|    {
  684|   483k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   483k|            return static_cast<T*>(s.m_cp);
  686|   483k|        }
  687|   483k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   483k|            return static_cast<T*>(s.m_p);
  689|   483k|        }
  690|   483k|        else {
  691|   483k|            return reinterpret_cast<T*>(s.m_fp);
  692|   483k|        }
  693|   483k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   483k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   483k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   483k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   483k|        {
  662|   483k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   746k|    {
 6193|   746k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   746k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   746k|            auto rd = make_reader<T, char_type>();
 6198|   746k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   746k|                return unexpected(e);
 6200|   746k|            }
 6201|       |
 6202|   746k|            return impl(rd, range, value);
 6203|   746k|        }
 6204|   746k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   746k|            auto rd = make_reader<T, char_type>();
 6206|   746k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   746k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 746k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   746k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   746k|                return impl(rd, range, value);
 6213|   746k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   746k|        else {
 6221|   746k|            SCN_EXPECT(false);
 6222|   746k|            SCN_UNREACHABLE;
 6223|   746k|        }
 6224|   746k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   746k|    {
 6124|   746k|        const bool need_skipped_width =
 6125|   746k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 746k]
  |  Branch (6125:33): [True: 0, False: 746k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   746k|        auto it = rng.begin();
 6129|   746k|        std::ptrdiff_t prefix_width = 0;
 6130|   746k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 746k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   746k|        else {
 6138|   746k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   746k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   746k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   746k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.51k, False: 737k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.51k|    }                                                  \
  |  |  |  | 3671|   746k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   737k|            std::tie(it, prefix_width) = prefix_result;
 6140|   737k|        }
 6141|   737k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   737k|        std::ptrdiff_t value_width = 0;
 6145|   737k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 737k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   737k|        else {
 6161|   737k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   737k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   737k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 30.6k, False: 707k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  30.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  30.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  30.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  30.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  30.6k|    }                                                  \
  |  | 3671|   737k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   707k|                                             specs, value, loc));
 6163|       |
 6164|   707k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 707k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   707k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   707k|        std::ptrdiff_t postfix_width = 0;
 6173|   707k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 700k, False: 6.60k]
  ------------------
 6174|   700k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   700k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   700k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   700k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   700k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 700k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   700k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   700k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   700k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   700k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   700k|                                 value_width));
 6178|   700k|            std::tie(it, postfix_width) = postfix_result;
 6179|   700k|        }
 6180|       |
 6181|   707k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   707k|                                                 value_width, postfix_width);
 6183|   707k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 707k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   707k|        return it;
 6188|   707k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.95M|    {
 3691|  1.95M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.95M|        const std::ptrdiff_t sign_len =
 3694|  1.95M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 530k, False: 1.42M]
  ------------------
 3695|       |
 3696|  1.95M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.95M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.95M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.95M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.7k, False: 1.93M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  20.7k|    }                                                  \
  |  |  |  | 3671|  1.95M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.93M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.95M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   737k|    {
 4170|   737k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   737k|#if !SCN_DISABLE_LOCALE
 4173|   737k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 214k, False: 523k]
  ------------------
 4174|   214k|            return read_impl<Range>(
 4175|   214k|                range, rd,
 4176|   214k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   214k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   214k|                },
 4179|   214k|                value, loc);
 4180|   214k|        }
 4181|   523k|#endif
 4182|       |
 4183|   523k|        return read_impl<Range>(
 4184|   523k|            range, rd,
 4185|   523k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   523k|                return r.read_source(SCN_FWD(args)...);
 4187|   523k|            },
 4188|   523k|            value);
 4189|   737k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.02M|    {
 4206|  1.02M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.02M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.7k, False: 987k]
  |  |  ------------------
  ------------------
 4208|  38.7k|            return unexpected(r.error());
 4209|  38.7k|        }
 4210|       |
 4211|   987k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   987k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   987k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   987k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   987k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 924, False: 986k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    924|    }                                                  \
  |  |  |  | 3671|   987k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   986k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   986k|        return ranges::next(range.begin(), n);
 4213|   987k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   214k|    {
  754|   214k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   214k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   214k|              cvref<T> obj = *get<T>(fn);
  745|   214k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   214k|                  obj(static_cast<decltype(args)>(args)...);
  747|   214k|              }
  748|   214k|              else {
  749|   214k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   214k|              }
  751|   214k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   214k|    {
  684|   214k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   214k|            return static_cast<T*>(s.m_cp);
  686|   214k|        }
  687|   214k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   214k|            return static_cast<T*>(s.m_p);
  689|   214k|        }
  690|   214k|        else {
  691|   214k|            return reinterpret_cast<T*>(s.m_fp);
  692|   214k|        }
  693|   214k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   214k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   214k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   214k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   214k|        {
  662|   214k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   523k|    {
  754|   523k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   523k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   523k|              cvref<T> obj = *get<T>(fn);
  745|   523k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   523k|                  obj(static_cast<decltype(args)>(args)...);
  747|   523k|              }
  748|   523k|              else {
  749|   523k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   523k|              }
  751|   523k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   523k|    {
  684|   523k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   523k|            return static_cast<T*>(s.m_cp);
  686|   523k|        }
  687|   523k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   523k|            return static_cast<T*>(s.m_p);
  689|   523k|        }
  690|   523k|        else {
  691|   523k|            return reinterpret_cast<T*>(s.m_fp);
  692|   523k|        }
  693|   523k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   523k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   523k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   523k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   523k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   523k|        {
  662|   523k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   686k|    {
 4170|   686k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   686k|#if !SCN_DISABLE_LOCALE
 4173|   686k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 198k, False: 487k]
  ------------------
 4174|   198k|            return read_impl<Range>(
 4175|   198k|                range, rd,
 4176|   198k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   198k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   198k|                },
 4179|   198k|                value, loc);
 4180|   198k|        }
 4181|   487k|#endif
 4182|       |
 4183|   487k|        return read_impl<Range>(
 4184|   487k|            range, rd,
 4185|   487k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   487k|                return r.read_source(SCN_FWD(args)...);
 4187|   487k|            },
 4188|   487k|            value);
 4189|   686k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   984k|    {
 4206|   984k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   984k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   984k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 963k]
  |  |  ------------------
  ------------------
 4208|  21.3k|            return unexpected(r.error());
 4209|  21.3k|        }
 4210|       |
 4211|   963k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   963k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   963k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   963k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 943k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.8k|    }                                                  \
  |  |  |  | 3671|   963k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   943k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   943k|        return ranges::next(range.begin(), n);
 4213|   963k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   198k|    {
  754|   198k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   198k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   198k|              cvref<T> obj = *get<T>(fn);
  745|   198k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   198k|                  obj(static_cast<decltype(args)>(args)...);
  747|   198k|              }
  748|   198k|              else {
  749|   198k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   198k|              }
  751|   198k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   198k|    {
  684|   198k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   198k|            return static_cast<T*>(s.m_cp);
  686|   198k|        }
  687|   198k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   198k|            return static_cast<T*>(s.m_p);
  689|   198k|        }
  690|   198k|        else {
  691|   198k|            return reinterpret_cast<T*>(s.m_fp);
  692|   198k|        }
  693|   198k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   198k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   198k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   198k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   198k|        {
  662|   198k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   487k|    {
  754|   487k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   487k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   487k|              cvref<T> obj = *get<T>(fn);
  745|   487k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   487k|                  obj(static_cast<decltype(args)>(args)...);
  747|   487k|              }
  748|   487k|              else {
  749|   487k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   487k|              }
  751|   487k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   487k|    {
  684|   487k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   487k|            return static_cast<T*>(s.m_cp);
  686|   487k|        }
  687|   487k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   487k|            return static_cast<T*>(s.m_p);
  689|   487k|        }
  690|   487k|        else {
  691|   487k|            return reinterpret_cast<T*>(s.m_fp);
  692|   487k|        }
  693|   487k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   487k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   487k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   487k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   487k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   487k|        {
  662|   487k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  3.00M|{
 1039|  3.00M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.00M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.00M|        return r;
 1042|  3.00M|    }
 1043|  3.00M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.00M|                           ranges::const_iterator_t<Range>,
 1045|  3.00M|                           typename detail::basic_scan_buffer<
 1046|  3.00M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.00M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  3.00M|            auto seg = r.begin().contiguous_segment();
 1049|  3.00M|            auto dist =
 1050|  3.00M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.00M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.00M|        }
 1053|  3.00M|        else {
 1054|  3.00M|            return r.begin().contiguous_segment();
 1055|  3.00M|        }
 1056|  3.00M|    }
 1057|  3.00M|    else {
 1058|  3.00M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.00M|    }
 1060|  3.00M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.67M|{
 2061|  2.67M|    auto it = range.begin();
 2062|  5.18M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 5.16M, False: 24.7k]
  ------------------
 2063|  5.16M|        const auto val =
 2064|  5.16M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  5.16M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  5.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.14M, False: 15.4k]
  |  |  ------------------
  ------------------
 2066|  5.14M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  5.14M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  5.14M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.64M, False: 2.49M]
  ------------------
 2069|  2.64M|                return it;
 2070|  2.64M|            }
 2071|  5.14M|        }
 2072|  2.51M|        it = val.iterator;
 2073|  2.51M|    }
 2074|       |
 2075|  24.7k|    return it;
 2076|  2.67M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  5.16M|{
 1899|  5.16M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  5.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  5.16M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  5.16M|    auto it = range.begin();
 1903|  5.16M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  5.16M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  5.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.4k, False: 5.14M]
  |  |  ------------------
  ------------------
 1906|  15.4k|        ++it;
 1907|  15.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  15.4k|        return {it, {}};
 1909|  15.4k|    }
 1910|       |
 1911|  5.14M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 5.07M, False: 71.7k]
  ------------------
 1912|  5.07M|        ++it;
 1913|  5.07M|        return {it, string_type(1, *range.begin())};
 1914|  5.07M|    }
 1915|       |
 1916|  71.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  71.7k|    return {it, string_type{range.begin(), it}};
 1918|  5.14M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  15.4k|{
 1155|  15.4k|    auto it = input.begin();
 1156|   197k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 195k, False: 1.82k]
  ------------------
 1157|   195k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 13.6k, False: 181k]
  ------------------
 1158|  13.6k|            break;
 1159|  13.6k|        }
 1160|   195k|    }
 1161|  15.4k|    return it;
 1162|  15.4k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  71.7k|    {
  283|  71.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  71.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  71.7k|    {
  252|  71.7k|        constexpr iter_difference_t<I> zero{0};
  253|  71.7k|        iter_difference_t<I> counter{0};
  254|       |
  255|   219k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 148k, False: 70.4k]
  |  Branch (255:30): [True: 147k, False: 1.33k]
  ------------------
  256|   147k|            ++i;
  257|   147k|            ++counter;
  258|   147k|        }
  259|       |
  260|  71.7k|        return counter;
  261|  71.7k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  5.16M|    {
 1890|  5.16M|        return !codepoint.empty();
 1891|  5.16M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.67M|{
 2082|  2.67M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.67M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  3.00M|{
 2951|  3.00M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.00M, False: 0]
  ------------------
 2952|  3.00M|        auto it = read_while_classic_space(range);
 2953|  3.00M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.00M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.7k, False: 2.98M]
  |  |  ------------------
  ------------------
 2955|  24.7k|            return unexpected(e);
 2956|  24.7k|        }
 2957|       |
 2958|  2.98M|        return it;
 2959|  3.00M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.00M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  3.00M|{
 2117|  3.00M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.00M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.00M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.00M|        auto buf = make_contiguous_buffer(range);
 2121|  3.00M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.00M|        return ranges::next(range.begin(),
 2123|  3.00M|                            ranges::distance(buf.view().begin(), it));
 2124|  3.00M|    }
 2125|  3.00M|    else {
 2126|  3.00M|        auto it = range.begin();
 2127|       |
 2128|  3.00M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.00M|            auto seg = get_contiguous_beginning(range);
 2130|  3.00M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.00M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 335k, False: 2.67M]
  ------------------
 2132|   335k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   335k|            }
 2134|  2.67M|            ranges::advance(it, seg.size());
 2135|  2.67M|        }
 2136|       |
 2137|  2.67M|        return read_while_code_point(
 2138|  2.67M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.00M|    }
 2140|  3.00M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.67M|    {
  754|  2.67M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  5.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.14M|              cvref<T> obj = *get<T>(fn);
  745|  5.14M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.14M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.14M|              }
  748|  5.14M|              else {
  749|  5.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.14M|              }
  751|  5.14M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  5.14M|    {
  684|  5.14M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.14M|            return static_cast<T*>(s.m_cp);
  686|  5.14M|        }
  687|  5.14M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.14M|            return static_cast<T*>(s.m_p);
  689|  5.14M|        }
  690|  5.14M|        else {
  691|  5.14M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.14M|        }
  693|  5.14M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  5.14M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.67M|        {
  662|  2.67M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   440k|{
  981|   440k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   440k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   440k|        return true;
  984|   440k|    }
  985|   440k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   440k|                           ranges::const_iterator_t<Range>,
  987|   440k|                           typename detail::basic_scan_buffer<
  988|   440k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   440k|        auto beg = r.begin();
  990|   440k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 440k, False: 0]
  ------------------
  991|   440k|            return false;
  992|   440k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   440k|    else {
 1006|   440k|        return false;
 1007|   440k|    }
 1008|   440k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  2.08M|    {
  763|  2.08M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.08M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.12M|{
 1857|  1.12M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.12M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.12M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.12M|        if (sz < count) {
 1862|  1.12M|            return unexpected(eof_error::eof);
 1863|  1.12M|        }
 1864|       |
 1865|  1.12M|        return ranges::next(range.begin(), count);
 1866|  1.12M|    }
 1867|  1.12M|    else {
 1868|  1.12M|        auto it = range.begin();
 1869|  1.12M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 655k, False: 468k]
  ------------------
 1870|   655k|            return ranges::next(it, count);
 1871|   655k|        }
 1872|       |
 1873|  1.78M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.37M, False: 414k]
  ------------------
 1874|  1.37M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 54.4k, False: 1.31M]
  ------------------
 1875|  54.4k|                return unexpected(eof_error::eof);
 1876|  54.4k|            }
 1877|  1.37M|        }
 1878|       |
 1879|   414k|        return it;
 1880|   468k|    }
 1881|  1.12M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.12M|{
 1095|  1.12M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.12M|        return r.size();
 1097|  1.12M|    }
 1098|  1.12M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.12M|                           ranges::const_iterator_t<Range>,
 1100|  1.12M|                           typename detail::basic_scan_buffer<
 1101|  1.12M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.12M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.12M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.12M|        }
 1105|  1.12M|        else {
 1106|  1.12M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.12M, False: 0]
  ------------------
 1107|  1.12M|                return static_cast<size_t>(
 1108|  1.12M|                    r.begin().parent()->chars_available() -
 1109|  1.12M|                    r.begin().position());
 1110|  1.12M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.12M|        }
 1113|  1.12M|    }
 1114|  1.12M|    else {
 1115|  1.12M|        return 0;
 1116|  1.12M|    }
 1117|  1.12M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   825k|    {
  754|   825k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04M|              cvref<T> obj = *get<T>(fn);
  745|  1.04M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.04M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.04M|              }
  748|  1.04M|              else {
  749|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04M|              }
  751|  1.04M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.04M|    {
  684|  1.04M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.04M|            return static_cast<T*>(s.m_cp);
  686|  1.04M|        }
  687|  1.04M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.04M|            return static_cast<T*>(s.m_p);
  689|  1.04M|        }
  690|  1.04M|        else {
  691|  1.04M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.04M|        }
  693|  1.04M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   825k|        {
  662|   825k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   333k|    {
 6037|   333k|        const bool need_skipped_width =
 6038|   333k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 333k]
  |  Branch (6038:33): [True: 0, False: 333k]
  ------------------
 6039|   333k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   333k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 333k]
  ------------------
 6043|   333k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 333k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   333k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 333k, False: 0]
  |  Branch (6047:56): [True: 333k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   333k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 333k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   665k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 331k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.07k|    }                                                  \
  |  |  |  | 3671|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   665k|                            make_eof_scan_error));
 6058|       |
 6059|   665k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 331k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   331k|            return result_type{it, 0};
 6067|   665k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   333k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   582k|{
 1976|   582k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   582k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   582k|{
 1957|   582k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   582k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   582k|    }
 1960|   582k|    else {
 1961|   582k|        auto first = range.begin();
 1962|   742k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 740k, False: 1.70k]
  ------------------
 1963|   740k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 580k, False: 160k]
  ------------------
 1964|   580k|                return first;
 1965|   580k|            }
 1966|   740k|        }
 1967|  1.70k|        return first;
 1968|   582k|    }
 1969|   582k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   237k|    {
  108|   237k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   237k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   237k|    {
   94|   237k|        iter_difference_t<I> counter{0};
   95|   593k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 355k, False: 237k]
  ------------------
   96|   355k|            ++i;
   97|   355k|            ++counter;
   98|   355k|        }
   99|   237k|        return counter;
  100|   237k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   141k|    {
 1780|   141k|        auto stdloc = loc.get<std::locale>();
 1781|   141k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   141k|        grouping = numpunct.grouping();
 1783|   141k|        thousands_sep =
 1784|   141k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 141k]
  ------------------
 1785|   141k|        decimal_point = numpunct.decimal_point();
 1786|   141k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   141k|{
 1717|   141k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 141k, False: 0]
  ------------------
 1718|   141k|        return std::use_facet<Facet>(stdloc);
 1719|   141k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   141k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   696k|{
 1846|   696k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.20k, False: 695k]
  |  |  ------------------
  ------------------
 1847|  1.20k|        return unexpected(e);
 1848|  1.20k|    }
 1849|       |
 1850|   695k|    return ranges::next(range.begin());
 1851|   696k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.24M|{
  950|  1.24M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.98k, False: 1.23M]
  |  |  ------------------
  ------------------
  951|  3.98k|        return eof_error::eof;
  952|  3.98k|    }
  953|  1.23M|    return eof_error::good;
  954|  1.24M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.81M|{
  944|  1.81M|    return is_range_eof(r.begin(), r.end());
  945|  1.81M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.81M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.81M|    {
  937|  1.81M|        return begin == end;
  938|  1.81M|    }
  939|  1.81M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   695k|    {
  296|   695k|        ++x;
  297|   695k|        return x;
  298|   695k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   443k|{
 3141|   443k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   443k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 441k, False: 1.19k]
  ------------------
 3143|   441k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 441k, False: 60]
  ------------------
 3144|   441k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   441k|        }
 3146|     60|        return unexpected(eof_error::eof);
 3147|   441k|    }
 3148|       |
 3149|  1.19k|    auto& it = *r;
 3150|  1.19k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 987, False: 207]
  ------------------
 3151|    987|        return std::pair{it, sign_type::minus_sign};
 3152|    987|    }
 3153|    207|    return std::pair{it, sign_type::plus_sign};
 3154|  1.19k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   557k|{
 2272|   557k|    auto it = read_code_unit(range);
 2273|   557k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 615, False: 557k]
  |  |  ------------------
  ------------------
 2274|    615|        return unexpected(make_eof_parse_error(it.error()));
 2275|    615|    }
 2276|       |
 2277|  1.11M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.11M, False: 550k]
  ------------------
 2278|  1.11M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 6.51k, False: 1.10M]
  ------------------
 2279|  6.51k|            return *it;
 2280|  6.51k|        }
 2281|  1.11M|    }
 2282|       |
 2283|   550k|    return unexpected(parse_error::error);
 2284|   557k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.12M|{
 2231|  1.12M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.12M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.12M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.12M|        if (range.size() < str.size()) {
 2236|  1.12M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.12M|        }
 2238|  1.12M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.12M|            return unexpected(parse_error::error);
 2240|  1.12M|        }
 2241|  1.12M|        return ranges::next(range.begin(), str.size());
 2242|  1.12M|    }
 2243|  1.12M|    else {
 2244|  1.12M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.12M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.12M|                return ch;
 2247|  1.12M|            }
 2248|  1.12M|            return static_cast<char_type>(ch +
 2249|  1.12M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.12M|        };
 2251|       |
 2252|  1.12M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.12M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.12M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.12M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.4k, False: 1.06M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.4k|    }                                                  \
  |  |  |  | 3671|  1.12M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.06M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.06M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.06M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.06M, False: 525]
  |  |  ------------------
  ------------------
 2257|  1.06M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.06M|                    return ascii_tolower(a) ==
 2259|  1.06M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.06M|                }))) {
 2261|  1.06M|            return unexpected(parse_error::error);
 2262|  1.06M|        }
 2263|       |
 2264|    525|        return it;
 2265|  1.06M|    }
 2266|  1.12M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.14M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.14M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 769k, False: 377k]
  |  Branch (2245:29): [True: 368k, False: 9.87k]
  ------------------
 2246|  1.13M|                return ch;
 2247|  1.13M|            }
 2248|  9.87k|            return static_cast<char_type>(ch +
 2249|  9.87k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.14M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   138k|{
 2146|   138k|    auto it = read_code_unit(range);
 2147|   138k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 588, False: 138k]
  |  |  ------------------
  ------------------
 2148|    588|        return unexpected(make_eof_parse_error(it.error()));
 2149|    588|    }
 2150|       |
 2151|   138k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138k, False: 309]
  |  |  ------------------
  ------------------
 2152|   138k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   138k|        return unexpected(parse_error::error);
 2154|   138k|    }
 2155|       |
 2156|    309|    return *it;
 2157|   138k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   582k|{
 1996|   582k|    auto it = read_while_code_unit(range, pred);
 1997|   582k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 439k, False: 142k]
  ------------------
 1998|   439k|        return unexpected(parse_error::error);
 1999|   439k|    }
 2000|   142k|    return it;
 2001|   582k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   136k|    {
 1621|   136k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   136k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   136k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   136k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   136k|            m_storage.reset();
 1627|   136k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   136k|        }
 1629|   136k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   136k|                                          std::basic_string<CharT>>) {
 1631|   136k|            m_storage.emplace(SCN_FWD(range));
 1632|   136k|            m_view = string_view_type{*m_storage};
 1633|   136k|        }
 1634|   136k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   136k|                                          typename detail::basic_scan_buffer<
 1636|   136k|                                              value_t>::forward_iterator> &&
 1637|   136k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   136k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   136k|            auto end_seg = range.end().contiguous_segment();
 1640|   136k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.65k, False: 130k]
  |  |  ------------------
  ------------------
 1641|   136k|                             detail::to_address(end_seg.end()))) {
 1642|  5.65k|                auto& str = m_storage.emplace();
 1643|  5.65k|                str.reserve(range.end().position() - range.begin().position());
 1644|  5.65k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  5.65k|                m_view = string_view_type{str};
 1646|  5.65k|                return;
 1647|  5.65k|            }
 1648|       |
 1649|   130k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   130k|                                                            end_seg.data());
 1651|   130k|            m_storage.reset();
 1652|   130k|        }
 1653|   136k|        else {
 1654|   136k|            auto& str = m_storage.emplace();
 1655|   136k|            if constexpr (ranges::sized_range<Range>) {
 1656|   136k|                str.reserve(range.size());
 1657|   136k|            }
 1658|   136k|            if constexpr (ranges::common_range<Range>) {
 1659|   136k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   136k|                          std::back_inserter(str));
 1661|   136k|            }
 1662|   136k|            else {
 1663|   136k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   136k|                     ++it) {
 1665|   136k|                    str.push_back(*it);
 1666|   136k|                }
 1667|   136k|            }
 1668|   136k|            m_view = string_view_type{str};
 1669|   136k|        }
 1670|   136k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.46M|    {
 1582|  1.46M|        return m_view;
 1583|  1.46M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.75M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  98.0k|    {
 6079|  98.0k|        const bool need_skipped_width =
 6080|  98.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 98.0k]
  |  Branch (6080:33): [True: 0, False: 98.0k]
  ------------------
 6081|  98.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  98.0k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 98.0k]
  ------------------
 6084|  98.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 98.0k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  98.0k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 98.0k, False: 0]
  ------------------
 6093|  98.0k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 98.0k]
  ------------------
 6094|  98.0k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  98.0k|        return result_type{rng.begin(), 0};
 6118|  98.0k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.12M|{
 1857|  1.12M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.12M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.12M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.12M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 54.4k, False: 1.07M]
  ------------------
 1862|  54.4k|            return unexpected(eof_error::eof);
 1863|  54.4k|        }
 1864|       |
 1865|  1.07M|        return ranges::next(range.begin(), count);
 1866|  1.12M|    }
 1867|  1.12M|    else {
 1868|  1.12M|        auto it = range.begin();
 1869|  1.12M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.12M|            return ranges::next(it, count);
 1871|  1.12M|        }
 1872|       |
 1873|  1.12M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.12M|            if (it == range.end()) {
 1875|  1.12M|                return unexpected(eof_error::eof);
 1876|  1.12M|            }
 1877|  1.12M|        }
 1878|       |
 1879|  1.12M|        return it;
 1880|  1.12M|    }
 1881|  1.12M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   829k|{
 1899|   829k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   829k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   829k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   829k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   829k|    auto it = range.begin();
 1903|   829k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   829k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 829k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   829k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 829k, False: 0]
  ------------------
 1912|   829k|        ++it;
 1913|   829k|        return {it, string_type(1, *range.begin())};
 1914|   829k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   829k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.89M|{
  944|  1.89M|    return is_range_eof(r.begin(), r.end());
  945|  1.89M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.89M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.89M|    {
  937|  1.89M|        return begin == end;
  938|  1.89M|    }
  939|  1.89M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   248k|    {
  190|   248k|        i = std::move(bound);
  191|   248k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   829k|    {
 1890|   829k|        return !codepoint.empty();
 1891|   829k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.06M|{
  950|  1.06M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.10k, False: 1.06M]
  |  |  ------------------
  ------------------
  951|  3.10k|        return eof_error::eof;
  952|  3.10k|    }
  953|  1.06M|    return eof_error::good;
  954|  1.06M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   520k|{
 1846|   520k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324, False: 519k]
  |  |  ------------------
  ------------------
 1847|    324|        return unexpected(e);
 1848|    324|    }
 1849|       |
 1850|   519k|    return ranges::next(range.begin());
 1851|   520k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   519k|    {
  296|   519k|        ++x;
  297|   519k|        return x;
  298|   519k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   440k|{
 3141|   440k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   440k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 439k, False: 714]
  ------------------
 3143|   439k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 439k, False: 18]
  ------------------
 3144|   439k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   439k|        }
 3146|     18|        return unexpected(eof_error::eof);
 3147|   439k|    }
 3148|       |
 3149|    714|    auto& it = *r;
 3150|    714|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 597, False: 117]
  ------------------
 3151|    597|        return std::pair{it, sign_type::minus_sign};
 3152|    597|    }
 3153|    117|    return std::pair{it, sign_type::plus_sign};
 3154|    714|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   468k|{
 2272|   468k|    auto it = read_code_unit(range);
 2273|   468k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 467k]
  |  |  ------------------
  ------------------
 2274|    144|        return unexpected(make_eof_parse_error(it.error()));
 2275|    144|    }
 2276|       |
 2277|   935k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 935k, False: 465k]
  ------------------
 2278|   935k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.75k, False: 932k]
  ------------------
 2279|  2.75k|            return *it;
 2280|  2.75k|        }
 2281|   935k|    }
 2282|       |
 2283|   465k|    return unexpected(parse_error::error);
 2284|   467k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.12M|{
 2231|  1.12M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.12M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.12M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.12M|        if (range.size() < str.size()) {
 2236|  1.12M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.12M|        }
 2238|  1.12M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.12M|            return unexpected(parse_error::error);
 2240|  1.12M|        }
 2241|  1.12M|        return ranges::next(range.begin(), str.size());
 2242|  1.12M|    }
 2243|  1.12M|    else {
 2244|  1.12M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.12M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.12M|                return ch;
 2247|  1.12M|            }
 2248|  1.12M|            return static_cast<char_type>(ch +
 2249|  1.12M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.12M|        };
 2251|       |
 2252|  1.12M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.12M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.12M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.12M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.4k, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.4k|    }                                                  \
  |  |  |  | 3671|  1.12M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.07M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.07M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.07M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07M, False: 525]
  |  |  ------------------
  ------------------
 2257|  1.07M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.07M|                    return ascii_tolower(a) ==
 2259|  1.07M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.07M|                }))) {
 2261|  1.07M|            return unexpected(parse_error::error);
 2262|  1.07M|        }
 2263|       |
 2264|    525|        return it;
 2265|  1.07M|    }
 2266|  1.12M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.14M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.14M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 769k, False: 378k]
  |  Branch (2245:29): [True: 369k, False: 9.87k]
  ------------------
 2246|  1.13M|                return ch;
 2247|  1.13M|            }
 2248|  9.87k|            return static_cast<char_type>(ch +
 2249|  9.87k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.14M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  52.2k|{
 2146|  52.2k|    auto it = read_code_unit(range);
 2147|  52.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 52.0k]
  |  |  ------------------
  ------------------
 2148|    180|        return unexpected(make_eof_parse_error(it.error()));
 2149|    180|    }
 2150|       |
 2151|  52.0k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.9k, False: 126]
  |  |  ------------------
  ------------------
 2152|  52.0k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  51.9k|        return unexpected(parse_error::error);
 2154|  51.9k|    }
 2155|       |
 2156|    126|    return *it;
 2157|  52.0k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   243k|{
 1976|   243k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   243k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   243k|{
 1957|   243k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   243k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   243k|    }
 1960|   243k|    else {
 1961|   243k|        auto first = range.begin();
 1962|   243k|        for (; first != range.end(); ++first) {
 1963|   243k|            if (pred(*first)) {
 1964|   243k|                return first;
 1965|   243k|            }
 1966|   243k|        }
 1967|   243k|        return first;
 1968|   243k|    }
 1969|   243k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   440k|{
 2951|   440k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 440k, False: 0]
  ------------------
 2952|   440k|        auto it = read_while_classic_space(range);
 2953|   440k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   440k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.57k, False: 438k]
  |  |  ------------------
  ------------------
 2955|  2.57k|            return unexpected(e);
 2956|  2.57k|        }
 2957|       |
 2958|   438k|        return it;
 2959|   440k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   440k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   440k|{
 2117|   440k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   440k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   440k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   440k|        auto buf = make_contiguous_buffer(range);
 2121|   440k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   440k|        return ranges::next(range.begin(),
 2123|   440k|                            ranges::distance(buf.view().begin(), it));
 2124|   440k|    }
 2125|   440k|    else {
 2126|   440k|        auto it = range.begin();
 2127|       |
 2128|   440k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   440k|            auto seg = get_contiguous_beginning(range);
 2130|   440k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   440k|                seg_it != seg.end()) {
 2132|   440k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   440k|            }
 2134|   440k|            ranges::advance(it, seg.size());
 2135|   440k|        }
 2136|       |
 2137|   440k|        return read_while_code_point(
 2138|   440k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   440k|    }
 2140|   440k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   440k|{
 2082|   440k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   440k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   564k|{
 2061|   564k|    auto it = range.begin();
 2062|   911k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 829k, False: 82.7k]
  ------------------
 2063|   829k|        const auto val =
 2064|   829k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   829k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   829k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 829k, False: 0]
  |  |  ------------------
  ------------------
 2066|   829k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   829k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   829k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 482k, False: 347k]
  ------------------
 2069|   482k|                return it;
 2070|   482k|            }
 2071|   829k|        }
 2072|   347k|        it = val.iterator;
 2073|   347k|    }
 2074|       |
 2075|  82.7k|    return it;
 2076|   564k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   440k|    {
  754|   440k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   567k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   567k|              cvref<T> obj = *get<T>(fn);
  745|   567k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   567k|                  obj(static_cast<decltype(args)>(args)...);
  747|   567k|              }
  748|   567k|              else {
  749|   567k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   567k|              }
  751|   567k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   567k|    {
  684|   567k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   567k|            return static_cast<T*>(s.m_cp);
  686|   567k|        }
  687|   567k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   567k|            return static_cast<T*>(s.m_p);
  689|   567k|        }
  690|   567k|        else {
  691|   567k|            return reinterpret_cast<T*>(s.m_fp);
  692|   567k|        }
  693|   567k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   567k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   440k|        {
  662|   440k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   790k|    {
  304|   790k|        ranges::advance(x, n);
  305|   790k|        return x;
  306|   790k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   790k|    {
  268|   790k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   790k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   790k|    {
  181|  2.67M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.88M, False: 790k]
  ------------------
  182|  1.88M|            ++i;
  183|  1.88M|        }
  184|   790k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   110k|    {
 6193|   110k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   110k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   110k|            auto rd = make_reader<T, char_type>();
 6198|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   110k|                return unexpected(e);
 6200|   110k|            }
 6201|       |
 6202|   110k|            return impl(rd, range, value);
 6203|   110k|        }
 6204|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   110k|            auto rd = make_reader<T, char_type>();
 6206|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   110k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 110k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   110k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   110k|                return impl(rd, range, value);
 6213|   110k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   110k|        else {
 6221|   110k|            SCN_EXPECT(false);
 6222|   110k|            SCN_UNREACHABLE;
 6223|   110k|        }
 6224|   110k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   667k|    {
 3040|   667k|        reader_error_handler eh{};
 3041|   667k|        get_derived().check_specs_impl(specs, eh);
 3042|   667k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 667k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   667k|        return {};
 3046|   667k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   667k|    {
 3051|   667k|        return static_cast<Derived&>(*this);
 3052|   667k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   667k|    {
 4145|   667k|        detail::check_float_type_specs(specs, eh);
 4146|   667k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   110k|    {
 6124|   110k|        const bool need_skipped_width =
 6125|   110k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 110k]
  |  Branch (6125:33): [True: 0, False: 110k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   110k|        auto it = rng.begin();
 6129|   110k|        std::ptrdiff_t prefix_width = 0;
 6130|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 110k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   110k|        else {
 6138|   110k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 662, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    662|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    662|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    662|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    662|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    662|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   110k|            std::tie(it, prefix_width) = prefix_result;
 6140|   110k|        }
 6141|   110k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   110k|        std::ptrdiff_t value_width = 0;
 6145|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 110k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   110k|        else {
 6161|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 77.6k, False: 32.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  77.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  77.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  77.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  77.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  77.6k|    }                                                  \
  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  32.5k|                                             specs, value, loc));
 6163|       |
 6164|  32.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 32.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  32.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  32.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  32.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 32.3k, False: 178]
  ------------------
 6174|  32.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  32.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  32.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  32.3k|                                 value_width));
 6178|  32.3k|            std::tie(it, postfix_width) = postfix_result;
 6179|  32.3k|        }
 6180|       |
 6181|  32.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  32.5k|                                                 value_width, postfix_width);
 6183|  32.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 32.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  32.5k|        return it;
 6188|  32.5k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.07M|    {
 3035|  1.07M|        return true;
 3036|  1.07M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   663k|    {
 4217|   663k|        unsigned options{};
 4218|   663k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 141k, False: 521k]
  ------------------
 4219|   141k|            options |= float_reader_base::allow_thsep;
 4220|   141k|        }
 4221|       |
 4222|   663k|        SCN_GCC_COMPAT_PUSH
 4223|   663k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   663k|        switch (specs.type) {
 4226|   142k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 142k, False: 521k]
  ------------------
 4227|   142k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  94.4k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 94.4k, False: 568k]
  ------------------
 4230|  94.4k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   143k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 143k, False: 520k]
  ------------------
 4233|   143k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   141k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 141k, False: 521k]
  ------------------
 4236|   141k|                return options | float_reader_base::allow_scientific |
 4237|   141k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   141k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 141k, False: 521k]
  ------------------
 4240|   141k|                return options | float_reader_base::allow_scientific |
 4241|   141k|                       float_reader_base::allow_fixed |
 4242|   141k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 663k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   663k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   663k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   663k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   663k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   875k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.75M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   144k|    {
 3691|   144k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   144k|        const std::ptrdiff_t sign_len =
 3694|   144k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 162, False: 144k]
  ------------------
 3695|       |
 3696|   144k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.1k, False: 89.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  55.1k|    }                                                  \
  |  |  |  | 3671|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  89.1k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   144k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   434k|    {
 4057|   434k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 434k, False: 0]
  ------------------
 4058|   434k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 434k, False: 0]
  ------------------
 4059|   434k|            return;
 4060|   434k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   305k|    {
 1587|   305k|        return m_storage.has_value();
 1588|   305k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   177k|    {
 1592|   177k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   177k|        return *m_storage;
 1594|   177k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   110k|    {
 4170|   110k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   110k|#if !SCN_DISABLE_LOCALE
 4173|   110k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.4k, False: 86.7k]
  ------------------
 4174|  23.4k|            return read_impl<Range>(
 4175|  23.4k|                range, rd,
 4176|  23.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.4k|                },
 4179|  23.4k|                value, loc);
 4180|  23.4k|        }
 4181|  86.7k|#endif
 4182|       |
 4183|  86.7k|        return read_impl<Range>(
 4184|  86.7k|            range, rd,
 4185|  86.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  86.7k|            },
 4188|  86.7k|            value);
 4189|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   145k|    {
 4206|   145k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   145k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 45.2k]
  |  |  ------------------
  ------------------
 4208|   100k|            return unexpected(r.error());
 4209|   100k|        }
 4210|       |
 4211|  45.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  45.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  45.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  45.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 701, False: 44.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    701|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    701|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    701|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    701|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    701|    }                                                  \
  |  |  |  | 3671|  45.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  44.5k|        return ranges::next(range.begin(), n);
 4213|  45.2k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   437k|    {
  763|   437k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   437k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  23.4k|    {
  754|  23.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  23.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.4k|              cvref<T> obj = *get<T>(fn);
  745|  23.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.4k|              }
  748|  23.4k|              else {
  749|  23.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.4k|              }
  751|  23.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.4k|    {
  684|  23.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.4k|            return static_cast<T*>(s.m_cp);
  686|  23.4k|        }
  687|  23.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.4k|            return static_cast<T*>(s.m_p);
  689|  23.4k|        }
  690|  23.4k|        else {
  691|  23.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.4k|        }
  693|  23.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  23.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.4k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  70.8k|    {
 3679|  70.8k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  70.8k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  70.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 70.8k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  70.8k|        return read_source_impl(range);
 3685|  70.8k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   437k|    {
 3705|   437k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   437k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   437k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   437k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 437k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   437k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   437k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   437k|        auto it = sign_result.first;
 3708|   437k|        m_sign = sign_result.second;
 3709|       |
 3710|   437k|        auto digits_begin = it;
 3711|   437k|        auto r = ranges::subrange{it, range.end()};
 3712|   437k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   437k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   437k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   437k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   437k|                SCN_TRY_ASSIGN(
 3717|   437k|                    it,
 3718|   437k|                    do_read_source_impl(
 3719|   437k|                        r,
 3720|   437k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   437k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   437k|            }
 3723|   437k|            else {
 3724|   437k|                auto cb = [&](const auto& rr)
 3725|   437k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   437k|                    auto res = read_all(rr);
 3727|   437k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   437k|                        return unexpected_scan_error(
 3729|   437k|                            scan_error::invalid_scanned_value,
 3730|   437k|                            "Invalid float value");
 3731|   437k|                    }
 3732|   437k|                    return res;
 3733|   437k|                };
 3734|   437k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   437k|            }
 3736|   437k|        }
 3737|   437k|        else {
 3738|   437k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   437k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   437k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 301k, False: 136k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   301k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   301k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   301k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   301k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   301k|    }                                                  \
  |  | 3671|   437k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   136k|                it,
 3740|   136k|                do_read_source_impl(
 3741|   136k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   136k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   136k|        }
 3744|       |
 3745|   136k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   136k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 136k, False: 0]
  |  Branch (3747:48): [True: 136k, False: 0]
  ------------------
 3748|   136k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 136k, False: 0]
  ------------------
 3749|   136k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 136k, False: 0]
  ------------------
 3750|   136k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   136k|        }
 3752|       |
 3753|   136k|        handle_separators();
 3754|       |
 3755|   136k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 136k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   136k|        return it;
 3768|   136k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   437k|    {
 4000|   437k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   437k|        const bool allowed_nonhex =
 4002|   437k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   437k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   437k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 437k, False: 0]
  |  Branch (4005:45): [True: 0, False: 437k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   437k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 437k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   437k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 437k, False: 0]
  |  Branch (4014:45): [True: 0, False: 437k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   437k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 437k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   437k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 248k, False: 189k]
  |  Branch (4021:28): [True: 71.5k, False: 177k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  71.5k|            auto it = range.begin();
 4025|       |
 4026|  71.5k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 150, False: 71.3k]
  ------------------
 4027|    150|                m_kind = float_kind::hex_with_prefix;
 4028|    150|                it = *r;
 4029|    150|            }
 4030|  71.3k|            else {
 4031|  71.3k|                m_kind = float_kind::hex_without_prefix;
 4032|  71.3k|            }
 4033|       |
 4034|  71.5k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  71.5k|        }
 4036|   366k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 189k, False: 177k]
  |  Branch (4036:29): [True: 189k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   189k|            m_kind = float_kind::generic;
 4040|   189k|            return read_regular_float(range);
 4041|   189k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   177k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 375, False: 176k]
  |  |  ------------------
  ------------------
 4047|    375|            m_kind = float_kind::hex_with_prefix;
 4048|    375|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    375|        }
 4050|       |
 4051|   176k|        m_kind = float_kind::generic;
 4052|   176k|        return read_regular(range);
 4053|   177k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   437k|    {
 3811|   437k|        auto it = range.begin();
 3812|   437k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 437k, False: 0]
  ------------------
 3813|   437k|            return unexpected(r.error());
 3814|   437k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   437k|    {
 3834|   437k|        auto it = range.begin();
 3835|   437k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 437k, False: 0]
  ------------------
 3836|   437k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   437k|                scan_error::invalid_scanned_value,
 3838|   437k|                "Invalid floating-point NaN value"));
 3839|   437k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   248k|    {
 3804|   248k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   248k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  71.8k|    {
 3904|  71.8k|        auto it = range.begin();
 3905|       |
 3906|  71.8k|        std::ptrdiff_t digits_count = 0;
 3907|  71.8k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  71.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  71.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.4k, False: 25.4k]
  |  |  ------------------
  ------------------
 3909|  46.4k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  46.4k|                scan_error::invalid_scanned_value,
 3911|  46.4k|                "Invalid hexadecimal floating-point value"));
 3912|  46.4k|        }
 3913|  25.4k|        else {
 3914|  25.4k|            digits_count += ranges::distance(it, *r);
 3915|  25.4k|            it = *r;
 3916|  25.4k|        }
 3917|       |
 3918|  25.4k|        m_integral_part_length = digits_count;
 3919|  25.4k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 78, False: 25.3k]
  ------------------
 3920|  25.4k|                                             m_locale_options.decimal_point)) {
 3921|     78|            it = *r;
 3922|     78|        }
 3923|       |
 3924|  25.4k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 25.4k]
  ------------------
 3925|  25.4k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|  25.4k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  25.4k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  25.4k|        return it;
 3938|  25.4k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  97.3k|    {
 3789|  97.3k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  |  Branch (859:45): [True: 0, False: 97.3k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  97.3k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  97.3k|        return read_while1_code_unit(
 3798|  97.3k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  97.3k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  97.3k|    {
  754|  97.3k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   127k|              cvref<T> obj = *get<T>(fn);
  745|   127k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   127k|                  obj(static_cast<decltype(args)>(args)...);
  747|   127k|              }
  748|   127k|              else {
  749|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   127k|              }
  751|   127k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   127k|    {
  684|   127k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   127k|            return static_cast<T*>(s.m_cp);
  686|   127k|        }
  687|   127k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   127k|            return static_cast<T*>(s.m_p);
  689|   127k|        }
  690|   127k|        else {
  691|   127k|            return reinterpret_cast<T*>(s.m_fp);
  692|   127k|        }
  693|   127k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   127k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  97.3k|        {
  662|  97.3k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   114k|    {
 3876|   114k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 5.31k, False: 109k]
  ------------------
 3877|  5.31k|            auto beg_exp_it = range.begin();
 3878|  5.31k|            auto it = *r;
 3879|       |
 3880|  5.31k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 5.25k, False: 60]
  ------------------
 3881|  5.31k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  5.25k|                it = r_sign->first;
 3883|  5.25k|            }
 3884|       |
 3885|  5.31k|            if (auto r_exp = read_while1_code_unit(
 3886|  5.31k|                    ranges::subrange{it, range.end()},
 3887|  5.31k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  5.31k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.61k, False: 3.69k]
  |  |  ------------------
  ------------------
 3889|  1.61k|                it = beg_exp_it;
 3890|  1.61k|            }
 3891|  3.69k|            else {
 3892|  3.69k|                it = *r_exp;
 3893|  3.69k|            }
 3894|       |
 3895|  5.31k|            return it;
 3896|  5.31k|        }
 3897|   109k|        return range.begin();
 3898|   114k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  5.31k|    {
  754|  5.31k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  13.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.2k|              cvref<T> obj = *get<T>(fn);
  745|  13.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.2k|              }
  748|  13.2k|              else {
  749|  13.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.2k|              }
  751|  13.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  13.2k|    {
  684|  13.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.2k|            return static_cast<T*>(s.m_cp);
  686|  13.2k|        }
  687|  13.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.2k|            return static_cast<T*>(s.m_p);
  689|  13.2k|        }
  690|  13.2k|        else {
  691|  13.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.2k|        }
  693|  13.2k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  13.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  5.31k|        {
  662|  5.31k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   365k|    {
 3944|   365k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   365k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 294k, False: 71.0k]
  |  Branch (3945:50): [True: 47.2k, False: 247k]
  ------------------
 3946|       |
 3947|   365k|        auto it = ranges::begin(range);
 3948|   365k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   365k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   365k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 252k, False: 113k]
  |  |  ------------------
  ------------------
 3952|   252k|            return r.transform_error(
 3953|   252k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   252k|                                              "Invalid floating-point value"));
 3955|   252k|        }
 3956|   113k|        else {
 3957|   113k|            digits_count += ranges::distance(it, *r);
 3958|   113k|            it = *r;
 3959|   113k|        }
 3960|       |
 3961|   113k|        m_integral_part_length = digits_count;
 3962|   113k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 231, False: 113k]
  ------------------
 3963|   113k|                                             m_locale_options.decimal_point)) {
 3964|    231|            it = *r;
 3965|    231|        }
 3966|       |
 3967|   113k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 113k]
  ------------------
 3968|   113k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|   113k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   113k|        auto beg_exp_it = it;
 3979|   113k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 89.1k, False: 24.3k]
  ------------------
 3980|  89.1k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  89.1k|        }
 3982|   113k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.19k, False: 110k]
  |  Branch (3982:29): [True: 2.71k, False: 486]
  ------------------
 3983|  2.71k|            return unexpected_scan_error(
 3984|  2.71k|                scan_error::invalid_scanned_value,
 3985|  2.71k|                "No exponent given to scientific float");
 3986|  2.71k|        }
 3987|       |
 3988|   110k|        m_kind =
 3989|   110k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 107k, False: 3.57k]
  ------------------
 3990|       |
 3991|   110k|        return it;
 3992|   113k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   479k|    {
 3774|   479k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   479k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   479k|        return read_while1_code_unit(
 3783|   479k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   479k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   479k|    {
  754|   479k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   599k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   599k|              cvref<T> obj = *get<T>(fn);
  745|   599k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   599k|                  obj(static_cast<decltype(args)>(args)...);
  747|   599k|              }
  748|   599k|              else {
  749|   599k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   599k|              }
  751|   599k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   599k|    {
  684|   599k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   599k|            return static_cast<T*>(s.m_cp);
  686|   599k|        }
  687|   599k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   599k|            return static_cast<T*>(s.m_p);
  689|   599k|        }
  690|   599k|        else {
  691|   599k|            return reinterpret_cast<T*>(s.m_fp);
  692|   599k|        }
  693|   599k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   599k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   479k|        {
  662|   479k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   136k|    {
 1577|   136k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   136k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  23.4k|        {
  662|  23.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  86.7k|    {
  754|  86.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  86.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.7k|              cvref<T> obj = *get<T>(fn);
  745|  86.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  86.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.7k|              }
  748|  86.7k|              else {
  749|  86.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.7k|              }
  751|  86.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  86.7k|    {
  684|  86.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  86.7k|            return static_cast<T*>(s.m_cp);
  686|  86.7k|        }
  687|  86.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  86.7k|            return static_cast<T*>(s.m_p);
  689|  86.7k|        }
  690|  86.7k|        else {
  691|  86.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  86.7k|        }
  693|  86.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  86.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  86.7k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   366k|    {
 3665|   366k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   366k|        return read_source_impl(range);
 3671|   366k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  86.7k|        {
  662|  86.7k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   110k|    {
 4170|   110k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   110k|#if !SCN_DISABLE_LOCALE
 4173|   110k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.5k, False: 86.7k]
  ------------------
 4174|  23.5k|            return read_impl<Range>(
 4175|  23.5k|                range, rd,
 4176|  23.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.5k|                },
 4179|  23.5k|                value, loc);
 4180|  23.5k|        }
 4181|  86.7k|#endif
 4182|       |
 4183|  86.7k|        return read_impl<Range>(
 4184|  86.7k|            range, rd,
 4185|  86.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  86.7k|            },
 4188|  86.7k|            value);
 4189|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   145k|    {
 4206|   145k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   145k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.4k, False: 99.1k]
  |  |  ------------------
  ------------------
 4208|  46.4k|            return unexpected(r.error());
 4209|  46.4k|        }
 4210|       |
 4211|  99.1k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  99.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.4k, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.4k|    }                                                  \
  |  |  |  | 3671|  99.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  44.6k|        return ranges::next(range.begin(), n);
 4213|  99.1k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   438k|    {
  763|   438k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   438k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  23.5k|    {
  754|  23.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  23.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.5k|              cvref<T> obj = *get<T>(fn);
  745|  23.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.5k|              }
  748|  23.5k|              else {
  749|  23.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.5k|              }
  751|  23.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.5k|    {
  684|  23.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.5k|            return static_cast<T*>(s.m_cp);
  686|  23.5k|        }
  687|  23.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.5k|            return static_cast<T*>(s.m_p);
  689|  23.5k|        }
  690|  23.5k|        else {
  691|  23.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.5k|        }
  693|  23.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  23.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.5k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  70.9k|    {
 3679|  70.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  70.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  70.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 70.9k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  70.9k|        return read_source_impl(range);
 3685|  70.9k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   438k|    {
 3705|   438k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   438k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   438k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   438k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 438k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   438k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   438k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   438k|        auto it = sign_result.first;
 3708|   438k|        m_sign = sign_result.second;
 3709|       |
 3710|   438k|        auto digits_begin = it;
 3711|   438k|        auto r = ranges::subrange{it, range.end()};
 3712|   438k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   438k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   438k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   876k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 438k]
  |  |  |  Branch (859:45): [True: 0, False: 438k]
  |  |  |  Branch (859:45): [True: 0, False: 438k]
  |  |  ------------------
  ------------------
 3715|   438k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   438k|            else {
 3724|   438k|                auto cb = [&](const auto& rr)
 3725|   438k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   438k|                    auto res = read_all(rr);
 3727|   438k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   438k|                        return unexpected_scan_error(
 3729|   438k|                            scan_error::invalid_scanned_value,
 3730|   438k|                            "Invalid float value");
 3731|   438k|                    }
 3732|   438k|                    return res;
 3733|   438k|                };
 3734|   438k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   438k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   438k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 139k, False: 298k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   139k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   139k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   139k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   139k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   139k|    }                                                  \
  |  | 3671|   438k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   298k|            }
 3736|   438k|        }
 3737|   298k|        else {
 3738|   298k|            SCN_TRY_ASSIGN(
 3739|   298k|                it,
 3740|   298k|                do_read_source_impl(
 3741|   298k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   298k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   298k|        }
 3744|       |
 3745|   298k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   298k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 298k, False: 0]
  |  Branch (3747:48): [True: 298k, False: 0]
  ------------------
 3748|   298k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 298k, False: 0]
  ------------------
 3749|   298k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 298k, False: 0]
  ------------------
 3750|   298k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   298k|        }
 3752|       |
 3753|   298k|        handle_separators();
 3754|       |
 3755|   298k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 298k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   298k|        return it;
 3768|   298k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   438k|    {
 3811|   438k|        auto it = range.begin();
 3812|   438k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 438k, False: 0]
  ------------------
 3813|   438k|            return unexpected(r.error());
 3814|   438k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   438k|    {
 3834|   438k|        auto it = range.begin();
 3835|   438k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 438k, False: 0]
  ------------------
 3836|   438k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   438k|                scan_error::invalid_scanned_value,
 3838|   438k|                "Invalid floating-point NaN value"));
 3839|   438k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   248k|    {
 3804|   248k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   248k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   243k|{
 1996|   243k|    auto it = read_while_code_unit(range, pred);
 1997|   243k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 189k, False: 53.6k]
  ------------------
 1998|   189k|        return unexpected(parse_error::error);
 1999|   189k|    }
 2000|  53.6k|    return it;
 2001|   243k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  27.8k|    {
 3876|  27.8k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.04k, False: 25.8k]
  ------------------
 3877|  2.04k|            auto beg_exp_it = range.begin();
 3878|  2.04k|            auto it = *r;
 3879|       |
 3880|  2.04k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.02k, False: 18]
  ------------------
 3881|  2.04k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.02k|                it = r_sign->first;
 3883|  2.02k|            }
 3884|       |
 3885|  2.04k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.04k|                    ranges::subrange{it, range.end()},
 3887|  2.04k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.04k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 674, False: 1.36k]
  |  |  ------------------
  ------------------
 3889|    674|                it = beg_exp_it;
 3890|    674|            }
 3891|  1.36k|            else {
 3892|  1.36k|                it = *r_exp;
 3893|  1.36k|            }
 3894|       |
 3895|  2.04k|            return it;
 3896|  2.04k|        }
 3897|  25.8k|        return range.begin();
 3898|  27.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.04k|    {
  754|  2.04k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  4.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.89k|              cvref<T> obj = *get<T>(fn);
  745|  4.89k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.89k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.89k|              }
  748|  4.89k|              else {
  749|  4.89k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.89k|              }
  751|  4.89k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  4.89k|    {
  684|  4.89k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.89k|            return static_cast<T*>(s.m_cp);
  686|  4.89k|        }
  687|  4.89k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.89k|            return static_cast<T*>(s.m_p);
  689|  4.89k|        }
  690|  4.89k|        else {
  691|  4.89k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.89k|        }
  693|  4.89k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  4.89k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.04k|        {
  662|  2.04k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   189k|    {
 3944|   189k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   189k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 118k, False: 71.0k]
  |  Branch (3945:50): [True: 47.2k, False: 70.9k]
  ------------------
 3946|       |
 3947|   189k|        auto it = ranges::begin(range);
 3948|   189k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   189k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   189k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136k, False: 52.2k]
  |  |  ------------------
  ------------------
 3952|   136k|            return r.transform_error(
 3953|   136k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   136k|                                              "Invalid floating-point value"));
 3955|   136k|        }
 3956|  52.2k|        else {
 3957|  52.2k|            digits_count += ranges::distance(it, *r);
 3958|  52.2k|            it = *r;
 3959|  52.2k|        }
 3960|       |
 3961|  52.2k|        m_integral_part_length = digits_count;
 3962|  52.2k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 126, False: 52.1k]
  ------------------
 3963|  52.2k|                                             m_locale_options.decimal_point)) {
 3964|    126|            it = *r;
 3965|    126|        }
 3966|       |
 3967|  52.2k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 52.2k]
  ------------------
 3968|  52.2k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  52.2k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.2k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  52.2k|        auto beg_exp_it = it;
 3979|  52.2k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 27.8k, False: 24.3k]
  ------------------
 3980|  27.8k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  27.8k|        }
 3982|  52.2k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.19k, False: 49.0k]
  |  Branch (3982:29): [True: 2.71k, False: 486]
  ------------------
 3983|  2.71k|            return unexpected_scan_error(
 3984|  2.71k|                scan_error::invalid_scanned_value,
 3985|  2.71k|                "No exponent given to scientific float");
 3986|  2.71k|        }
 3987|       |
 3988|  49.5k|        m_kind =
 3989|  49.5k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 48.1k, False: 1.36k]
  ------------------
 3990|       |
 3991|  49.5k|        return it;
 3992|  52.2k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   241k|    {
 3774|   241k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   241k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   241k|        return read_while1_code_unit(
 3783|   241k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   241k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   241k|    {
  754|   241k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   297k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   297k|              cvref<T> obj = *get<T>(fn);
  745|   297k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   297k|                  obj(static_cast<decltype(args)>(args)...);
  747|   297k|              }
  748|   297k|              else {
  749|   297k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   297k|              }
  751|   297k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   297k|    {
  684|   297k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   297k|            return static_cast<T*>(s.m_cp);
  686|   297k|        }
  687|   297k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   297k|            return static_cast<T*>(s.m_p);
  689|   297k|        }
  690|   297k|        else {
  691|   297k|            return reinterpret_cast<T*>(s.m_fp);
  692|   297k|        }
  693|   297k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   297k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   241k|        {
  662|   241k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   438k|    {
 4000|   438k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   438k|        const bool allowed_nonhex =
 4002|   438k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   438k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   438k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 438k, False: 0]
  |  Branch (4005:45): [True: 0, False: 438k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   438k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 438k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   438k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 438k, False: 0]
  |  Branch (4014:45): [True: 0, False: 438k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   438k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 438k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   438k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 248k, False: 189k]
  |  Branch (4021:28): [True: 71.6k, False: 177k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  71.6k|            auto it = range.begin();
 4025|       |
 4026|  71.6k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 150, False: 71.4k]
  ------------------
 4027|    150|                m_kind = float_kind::hex_with_prefix;
 4028|    150|                it = *r;
 4029|    150|            }
 4030|  71.4k|            else {
 4031|  71.4k|                m_kind = float_kind::hex_without_prefix;
 4032|  71.4k|            }
 4033|       |
 4034|  71.6k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  71.6k|        }
 4036|   366k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 189k, False: 177k]
  |  Branch (4036:29): [True: 189k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   189k|            m_kind = float_kind::generic;
 4040|   189k|            return read_regular_float(range);
 4041|   189k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   177k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 375, False: 176k]
  |  |  ------------------
  ------------------
 4047|    375|            m_kind = float_kind::hex_with_prefix;
 4048|    375|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    375|        }
 4050|       |
 4051|   176k|        m_kind = float_kind::generic;
 4052|   176k|        return read_regular(range);
 4053|   177k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   248k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   248k|                    auto res = read_all(rr);
 3727|   248k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 248k]
  |  |  ------------------
  ------------------
 3728|     63|                        return unexpected_scan_error(
 3729|     63|                            scan_error::invalid_scanned_value,
 3730|     63|                            "Invalid float value");
 3731|     63|                    }
 3732|   248k|                    return res;
 3733|   248k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   248k|{
 1839|   248k|    return ranges::next(range.begin(), range.end());
 1840|   248k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   248k|    {
  313|   248k|        ranges::advance(x, bound);
  314|   248k|        return x;
  315|   248k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   248k|    {
  275|   248k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   248k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   298k|    {
 1577|   298k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   298k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   298k|    {
 1621|   298k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   298k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   298k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   298k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   298k|            m_storage.reset();
 1627|   298k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   298k|        }
 1629|   298k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   298k|                                          std::basic_string<CharT>>) {
 1631|   298k|            m_storage.emplace(SCN_FWD(range));
 1632|   298k|            m_view = string_view_type{*m_storage};
 1633|   298k|        }
 1634|   298k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   298k|                                          typename detail::basic_scan_buffer<
 1636|   298k|                                              value_t>::forward_iterator> &&
 1637|   298k|                           ranges::common_range<Range>) {
 1638|   298k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   298k|            auto end_seg = range.end().contiguous_segment();
 1640|   298k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   298k|                             detail::to_address(end_seg.end()))) {
 1642|   298k|                auto& str = m_storage.emplace();
 1643|   298k|                str.reserve(range.end().position() - range.begin().position());
 1644|   298k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   298k|                m_view = string_view_type{str};
 1646|   298k|                return;
 1647|   298k|            }
 1648|       |
 1649|   298k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   298k|                                                            end_seg.data());
 1651|   298k|            m_storage.reset();
 1652|   298k|        }
 1653|   298k|        else {
 1654|   298k|            auto& str = m_storage.emplace();
 1655|   298k|            if constexpr (ranges::sized_range<Range>) {
 1656|   298k|                str.reserve(range.size());
 1657|   298k|            }
 1658|   298k|            if constexpr (ranges::common_range<Range>) {
 1659|   298k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   298k|                          std::back_inserter(str));
 1661|   298k|            }
 1662|   298k|            else {
 1663|   298k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   298k|                     ++it) {
 1665|   298k|                    str.push_back(*it);
 1666|   298k|                }
 1667|   298k|            }
 1668|   298k|            m_view = string_view_type{str};
 1669|   298k|        }
 1670|   298k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  23.5k|        {
  662|  23.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  86.7k|    {
  754|  86.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  86.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.7k|              cvref<T> obj = *get<T>(fn);
  745|  86.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  86.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.7k|              }
  748|  86.7k|              else {
  749|  86.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.7k|              }
  751|  86.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  86.7k|    {
  684|  86.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  86.7k|            return static_cast<T*>(s.m_cp);
  686|  86.7k|        }
  687|  86.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  86.7k|            return static_cast<T*>(s.m_p);
  689|  86.7k|        }
  690|  86.7k|        else {
  691|  86.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  86.7k|        }
  693|  86.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  86.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  86.7k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   367k|    {
 3665|   367k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   367k|        return read_source_impl(range);
 3671|   367k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  86.7k|        {
  662|  86.7k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   111k|    {
 6193|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   111k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   111k|            auto rd = make_reader<T, char_type>();
 6198|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   111k|                return unexpected(e);
 6200|   111k|            }
 6201|       |
 6202|   111k|            return impl(rd, range, value);
 6203|   111k|        }
 6204|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   111k|            auto rd = make_reader<T, char_type>();
 6206|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   111k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 111k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   111k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   111k|                return impl(rd, range, value);
 6213|   111k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   111k|        else {
 6221|   111k|            SCN_EXPECT(false);
 6222|   111k|            SCN_UNREACHABLE;
 6223|   111k|        }
 6224|   111k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   111k|    {
 6124|   111k|        const bool need_skipped_width =
 6125|   111k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 111k]
  |  Branch (6125:33): [True: 0, False: 111k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   111k|        auto it = rng.begin();
 6129|   111k|        std::ptrdiff_t prefix_width = 0;
 6130|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 111k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   111k|        else {
 6138|   111k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 700, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    700|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    700|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    700|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    700|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    700|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   110k|            std::tie(it, prefix_width) = prefix_result;
 6140|   110k|        }
 6141|   110k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   110k|        std::ptrdiff_t value_width = 0;
 6145|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 110k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   110k|        else {
 6161|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 77.6k, False: 32.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  77.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  77.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  77.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  77.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  77.6k|    }                                                  \
  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  32.8k|                                             specs, value, loc));
 6163|       |
 6164|  32.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 32.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  32.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  32.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  32.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 32.6k, False: 188]
  ------------------
 6174|  32.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  32.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  32.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  32.6k|                                 value_width));
 6178|  32.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  32.6k|        }
 6180|       |
 6181|  32.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  32.8k|                                                 value_width, postfix_width);
 6183|  32.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 32.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  32.8k|        return it;
 6188|  32.8k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   144k|    {
 3691|   144k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   144k|        const std::ptrdiff_t sign_len =
 3694|   144k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 162, False: 144k]
  ------------------
 3695|       |
 3696|   144k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.6k, False: 89.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.6k|    }                                                  \
  |  |  |  | 3671|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  89.9k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   144k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   110k|    {
 4170|   110k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   110k|#if !SCN_DISABLE_LOCALE
 4173|   110k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.5k, False: 86.8k]
  ------------------
 4174|  23.5k|            return read_impl<Range>(
 4175|  23.5k|                range, rd,
 4176|  23.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.5k|                },
 4179|  23.5k|                value, loc);
 4180|  23.5k|        }
 4181|  86.8k|#endif
 4182|       |
 4183|  86.8k|        return read_impl<Range>(
 4184|  86.8k|            range, rd,
 4185|  86.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.8k|                return r.read_source(SCN_FWD(args)...);
 4187|  86.8k|            },
 4188|  86.8k|            value);
 4189|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   145k|    {
 4206|   145k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   145k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 45.3k]
  |  |  ------------------
  ------------------
 4208|   100k|            return unexpected(r.error());
 4209|   100k|        }
 4210|       |
 4211|  45.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 380, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    380|    }                                                  \
  |  |  |  | 3671|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  44.9k|        return ranges::next(range.begin(), n);
 4213|  45.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  23.5k|    {
  754|  23.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  23.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.5k|              cvref<T> obj = *get<T>(fn);
  745|  23.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.5k|              }
  748|  23.5k|              else {
  749|  23.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.5k|              }
  751|  23.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.5k|    {
  684|  23.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.5k|            return static_cast<T*>(s.m_cp);
  686|  23.5k|        }
  687|  23.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.5k|            return static_cast<T*>(s.m_p);
  689|  23.5k|        }
  690|  23.5k|        else {
  691|  23.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.5k|        }
  693|  23.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  23.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  23.5k|        {
  662|  23.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  86.8k|    {
  754|  86.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  86.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.8k|              cvref<T> obj = *get<T>(fn);
  745|  86.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  86.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.8k|              }
  748|  86.8k|              else {
  749|  86.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.8k|              }
  751|  86.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  86.8k|    {
  684|  86.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  86.8k|            return static_cast<T*>(s.m_cp);
  686|  86.8k|        }
  687|  86.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  86.8k|            return static_cast<T*>(s.m_p);
  689|  86.8k|        }
  690|  86.8k|        else {
  691|  86.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  86.8k|        }
  693|  86.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  86.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  86.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  86.8k|        {
  662|  86.8k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   110k|    {
 4170|   110k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   110k|#if !SCN_DISABLE_LOCALE
 4173|   110k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.6k, False: 86.8k]
  ------------------
 4174|  23.6k|            return read_impl<Range>(
 4175|  23.6k|                range, rd,
 4176|  23.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.6k|                },
 4179|  23.6k|                value, loc);
 4180|  23.6k|        }
 4181|  86.8k|#endif
 4182|       |
 4183|  86.8k|        return read_impl<Range>(
 4184|  86.8k|            range, rd,
 4185|  86.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.8k|                return r.read_source(SCN_FWD(args)...);
 4187|  86.8k|            },
 4188|  86.8k|            value);
 4189|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   145k|    {
 4206|   145k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   145k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.5k, False: 99.3k]
  |  |  ------------------
  ------------------
 4208|  46.5k|            return unexpected(r.error());
 4209|  46.5k|        }
 4210|       |
 4211|  99.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  99.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.3k, False: 45.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.3k|    }                                                  \
  |  |  |  | 3671|  99.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  45.0k|        return ranges::next(range.begin(), n);
 4213|  99.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  23.6k|    {
  754|  23.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  23.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.6k|              cvref<T> obj = *get<T>(fn);
  745|  23.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.6k|              }
  748|  23.6k|              else {
  749|  23.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.6k|              }
  751|  23.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.6k|    {
  684|  23.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.6k|            return static_cast<T*>(s.m_cp);
  686|  23.6k|        }
  687|  23.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.6k|            return static_cast<T*>(s.m_p);
  689|  23.6k|        }
  690|  23.6k|        else {
  691|  23.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.6k|        }
  693|  23.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  23.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  23.6k|        {
  662|  23.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  86.8k|    {
  754|  86.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  86.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.8k|              cvref<T> obj = *get<T>(fn);
  745|  86.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  86.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.8k|              }
  748|  86.8k|              else {
  749|  86.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.8k|              }
  751|  86.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  86.8k|    {
  684|  86.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  86.8k|            return static_cast<T*>(s.m_cp);
  686|  86.8k|        }
  687|  86.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  86.8k|            return static_cast<T*>(s.m_p);
  689|  86.8k|        }
  690|  86.8k|        else {
  691|  86.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  86.8k|        }
  693|  86.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  86.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  86.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  86.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  86.8k|        {
  662|  86.8k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   111k|    {
 6193|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   111k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   111k|            auto rd = make_reader<T, char_type>();
 6198|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   111k|                return unexpected(e);
 6200|   111k|            }
 6201|       |
 6202|   111k|            return impl(rd, range, value);
 6203|   111k|        }
 6204|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   111k|            auto rd = make_reader<T, char_type>();
 6206|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   111k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 111k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   111k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   111k|                return impl(rd, range, value);
 6213|   111k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   111k|        else {
 6221|   111k|            SCN_EXPECT(false);
 6222|   111k|            SCN_UNREACHABLE;
 6223|   111k|        }
 6224|   111k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   111k|    {
 6124|   111k|        const bool need_skipped_width =
 6125|   111k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 111k]
  |  Branch (6125:33): [True: 0, False: 111k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   111k|        auto it = rng.begin();
 6129|   111k|        std::ptrdiff_t prefix_width = 0;
 6130|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 111k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   111k|        else {
 6138|   111k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    716|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   110k|            std::tie(it, prefix_width) = prefix_result;
 6140|   110k|        }
 6141|   110k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   110k|        std::ptrdiff_t value_width = 0;
 6145|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 110k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   110k|        else {
 6161|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 77.6k, False: 33.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  77.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  77.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  77.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  77.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  77.6k|    }                                                  \
  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  33.2k|                                             specs, value, loc));
 6163|       |
 6164|  33.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 33.2k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  33.2k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  33.2k|        std::ptrdiff_t postfix_width = 0;
 6173|  33.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 33.0k, False: 198]
  ------------------
 6174|  33.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  33.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  33.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  33.0k|                                 value_width));
 6178|  33.0k|            std::tie(it, postfix_width) = postfix_result;
 6179|  33.0k|        }
 6180|       |
 6181|  33.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  33.2k|                                                 value_width, postfix_width);
 6183|  33.2k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 33.2k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  33.2k|        return it;
 6188|  33.2k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   145k|    {
 3691|   145k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   145k|        const std::ptrdiff_t sign_len =
 3694|   145k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 162, False: 145k]
  ------------------
 3695|       |
 3696|   145k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.2k, False: 91.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.2k|    }                                                  \
  |  |  |  | 3671|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  91.3k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   145k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   110k|    {
 4170|   110k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   110k|#if !SCN_DISABLE_LOCALE
 4173|   110k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.7k, False: 87.0k]
  ------------------
 4174|  23.7k|            return read_impl<Range>(
 4175|  23.7k|                range, rd,
 4176|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.7k|                },
 4179|  23.7k|                value, loc);
 4180|  23.7k|        }
 4181|  87.0k|#endif
 4182|       |
 4183|  87.0k|        return read_impl<Range>(
 4184|  87.0k|            range, rd,
 4185|  87.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  87.0k|            },
 4188|  87.0k|            value);
 4189|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   146k|    {
 4206|   146k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   146k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100k, False: 45.7k]
  |  |  ------------------
  ------------------
 4208|   100k|            return unexpected(r.error());
 4209|   100k|        }
 4210|       |
 4211|  45.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  45.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 75, False: 45.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     75|    }                                                  \
  |  |  |  | 3671|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  45.6k|        return ranges::next(range.begin(), n);
 4213|  45.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  23.7k|    {
  754|  23.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.7k|              cvref<T> obj = *get<T>(fn);
  745|  23.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.7k|              }
  748|  23.7k|              else {
  749|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.7k|              }
  751|  23.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.7k|    {
  684|  23.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.7k|            return static_cast<T*>(s.m_cp);
  686|  23.7k|        }
  687|  23.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.7k|            return static_cast<T*>(s.m_p);
  689|  23.7k|        }
  690|  23.7k|        else {
  691|  23.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.7k|        }
  693|  23.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  23.7k|        {
  662|  23.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  87.0k|    {
  754|  87.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  87.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.0k|              cvref<T> obj = *get<T>(fn);
  745|  87.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  87.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.0k|              }
  748|  87.0k|              else {
  749|  87.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.0k|              }
  751|  87.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  87.0k|    {
  684|  87.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  87.0k|            return static_cast<T*>(s.m_cp);
  686|  87.0k|        }
  687|  87.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  87.0k|            return static_cast<T*>(s.m_p);
  689|  87.0k|        }
  690|  87.0k|        else {
  691|  87.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  87.0k|        }
  693|  87.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  87.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  87.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  87.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  87.0k|        {
  662|  87.0k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   110k|    {
 4170|   110k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   110k|#if !SCN_DISABLE_LOCALE
 4173|   110k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.7k, False: 87.1k]
  ------------------
 4174|  23.7k|            return read_impl<Range>(
 4175|  23.7k|                range, rd,
 4176|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.7k|                },
 4179|  23.7k|                value, loc);
 4180|  23.7k|        }
 4181|  87.1k|#endif
 4182|       |
 4183|  87.1k|        return read_impl<Range>(
 4184|  87.1k|            range, rd,
 4185|  87.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  87.1k|            },
 4188|  87.1k|            value);
 4189|   110k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   146k|    {
 4206|   146k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   146k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.6k, False: 99.9k]
  |  |  ------------------
  ------------------
 4208|  46.6k|            return unexpected(r.error());
 4209|  46.6k|        }
 4210|       |
 4211|  99.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  99.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.1k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.1k|    }                                                  \
  |  |  |  | 3671|  99.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  45.7k|        return ranges::next(range.begin(), n);
 4213|  99.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  23.7k|    {
  754|  23.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.7k|              cvref<T> obj = *get<T>(fn);
  745|  23.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.7k|              }
  748|  23.7k|              else {
  749|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.7k|              }
  751|  23.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.7k|    {
  684|  23.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.7k|            return static_cast<T*>(s.m_cp);
  686|  23.7k|        }
  687|  23.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.7k|            return static_cast<T*>(s.m_p);
  689|  23.7k|        }
  690|  23.7k|        else {
  691|  23.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.7k|        }
  693|  23.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  23.7k|        {
  662|  23.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  87.1k|    {
  754|  87.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  87.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.1k|              cvref<T> obj = *get<T>(fn);
  745|  87.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  87.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.1k|              }
  748|  87.1k|              else {
  749|  87.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.1k|              }
  751|  87.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  87.1k|    {
  684|  87.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  87.1k|            return static_cast<T*>(s.m_cp);
  686|  87.1k|        }
  687|  87.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  87.1k|            return static_cast<T*>(s.m_p);
  689|  87.1k|        }
  690|  87.1k|        else {
  691|  87.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  87.1k|        }
  693|  87.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  87.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  87.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  87.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  87.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  87.1k|        {
  662|  87.1k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   440k|{
 2061|   440k|    auto it = range.begin();
 2062|   569k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 567k, False: 2.57k]
  ------------------
 2063|   567k|        const auto val =
 2064|   567k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   567k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   567k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 567k, False: 0]
  |  |  ------------------
  ------------------
 2066|   567k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   567k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   567k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 437k, False: 129k]
  ------------------
 2069|   437k|                return it;
 2070|   437k|            }
 2071|   567k|        }
 2072|   129k|        it = val.iterator;
 2073|   129k|    }
 2074|       |
 2075|  2.57k|    return it;
 2076|   440k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   567k|{
 1899|   567k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   567k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   567k|    auto it = range.begin();
 1903|   567k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   567k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 567k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   567k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 567k, False: 0]
  ------------------
 1912|   567k|        ++it;
 1913|   567k|        return {it, string_type(1, *range.begin())};
 1914|   567k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   567k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   567k|    {
 1890|   567k|        return !codepoint.empty();
 1891|   567k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   440k|{
 2082|   440k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   440k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   440k|{
 2951|   440k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 440k, False: 0]
  ------------------
 2952|   440k|        auto it = read_while_classic_space(range);
 2953|   440k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   440k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.57k, False: 437k]
  |  |  ------------------
  ------------------
 2955|  2.57k|            return unexpected(e);
 2956|  2.57k|        }
 2957|       |
 2958|   437k|        return it;
 2959|   440k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   440k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   440k|{
 2117|   440k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   440k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   440k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   440k|        auto buf = make_contiguous_buffer(range);
 2121|   440k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   440k|        return ranges::next(range.begin(),
 2123|   440k|                            ranges::distance(buf.view().begin(), it));
 2124|   440k|    }
 2125|   440k|    else {
 2126|   440k|        auto it = range.begin();
 2127|       |
 2128|   440k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   440k|            auto seg = get_contiguous_beginning(range);
 2130|   440k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   440k|                seg_it != seg.end()) {
 2132|   440k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   440k|            }
 2134|   440k|            ranges::advance(it, seg.size());
 2135|   440k|        }
 2136|       |
 2137|   440k|        return read_while_code_point(
 2138|   440k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   440k|    }
 2140|   440k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   440k|    {
  754|   440k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   567k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   567k|              cvref<T> obj = *get<T>(fn);
  745|   567k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   567k|                  obj(static_cast<decltype(args)>(args)...);
  747|   567k|              }
  748|   567k|              else {
  749|   567k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   567k|              }
  751|   567k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   567k|    {
  684|   567k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   567k|            return static_cast<T*>(s.m_cp);
  686|   567k|        }
  687|   567k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   567k|            return static_cast<T*>(s.m_p);
  689|   567k|        }
  690|   567k|        else {
  691|   567k|            return reinterpret_cast<T*>(s.m_fp);
  692|   567k|        }
  693|   567k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   567k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   440k|        {
  662|   440k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.61M|{
 2088|  2.61M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.61M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.61M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.61M|        auto buf = make_contiguous_buffer(range);
 2092|  2.61M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.61M|        return ranges::next(range.begin(),
 2094|  2.61M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.61M|    }
 2096|  2.61M|    else {
 2097|  2.61M|        auto it = range.begin();
 2098|       |
 2099|  2.61M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.61M|            auto seg = get_contiguous_beginning(range);
 2101|  2.61M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.61M|                seg_it != seg.end()) {
 2103|  2.61M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.61M|            }
 2105|  2.61M|            ranges::advance(it, seg.size());
 2106|  2.61M|        }
 2107|       |
 2108|  2.61M|        return read_until_code_point(
 2109|  2.61M|            ranges::subrange{it, range.end()},
 2110|  2.61M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.61M|    }
 2112|  2.61M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.61M|{
 1683|  2.61M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.61M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.61M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.61M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.61M|    }
 1688|  2.61M|    else {
 1689|  2.61M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.61M|    }
 1691|  2.61M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.61M|    {
 1490|  2.61M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.61M|    {
 1577|  2.61M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.61M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.61M|    {
 1621|  2.61M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.61M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.61M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.61M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.61M|            m_storage.reset();
 1627|  2.61M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.61M|        }
 1629|  2.61M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.61M|                                          std::basic_string<CharT>>) {
 1631|  2.61M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.61M|            m_view = string_view_type{*m_storage};
 1633|  2.61M|        }
 1634|  2.61M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.61M|                                          typename detail::basic_scan_buffer<
 1636|  2.61M|                                              value_t>::forward_iterator> &&
 1637|  2.61M|                           ranges::common_range<Range>) {
 1638|  2.61M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.61M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.61M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.61M|                             detail::to_address(end_seg.end()))) {
 1642|  2.61M|                auto& str = m_storage.emplace();
 1643|  2.61M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.61M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.61M|                m_view = string_view_type{str};
 1646|  2.61M|                return;
 1647|  2.61M|            }
 1648|       |
 1649|  2.61M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.61M|                                                            end_seg.data());
 1651|  2.61M|            m_storage.reset();
 1652|  2.61M|        }
 1653|  2.61M|        else {
 1654|  2.61M|            auto& str = m_storage.emplace();
 1655|  2.61M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.61M|                str.reserve(range.size());
 1657|  2.61M|            }
 1658|  2.61M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.61M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.61M|                          std::back_inserter(str));
 1661|  2.61M|            }
 1662|  2.61M|            else {
 1663|  2.61M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.61M|                     ++it) {
 1665|  2.61M|                    str.push_back(*it);
 1666|  2.61M|                }
 1667|  2.61M|            }
 1668|  2.61M|            m_view = string_view_type{str};
 1669|  2.61M|        }
 1670|  2.61M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.78M|    {
 4100|  1.78M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 194k, False: 1.59M]
  ------------------
 4101|   194k|            return std::copysign(value, T{-1.0});
 4102|   194k|        }
 4103|  1.59M|        return std::copysign(value, T{1.0});
 4104|  1.78M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   124k|{
 2088|   124k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   124k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   124k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   124k|        auto buf = make_contiguous_buffer(range);
 2092|   124k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   124k|        return ranges::next(range.begin(),
 2094|   124k|                            ranges::distance(buf.view().begin(), it));
 2095|   124k|    }
 2096|   124k|    else {
 2097|   124k|        auto it = range.begin();
 2098|       |
 2099|   124k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   124k|            auto seg = get_contiguous_beginning(range);
 2101|   124k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   124k|                seg_it != seg.end()) {
 2103|   124k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   124k|            }
 2105|   124k|            ranges::advance(it, seg.size());
 2106|   124k|        }
 2107|       |
 2108|   124k|        return read_until_code_point(
 2109|   124k|            ranges::subrange{it, range.end()},
 2110|   124k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   124k|    }
 2112|   124k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   124k|    {
  754|   124k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   261k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   261k|              cvref<T> obj = *get<T>(fn);
  745|   261k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   261k|                  obj(static_cast<decltype(args)>(args)...);
  747|   261k|              }
  748|   261k|              else {
  749|   261k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   261k|              }
  751|   261k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   261k|    {
  684|   261k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   261k|            return static_cast<T*>(s.m_cp);
  686|   261k|        }
  687|   261k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   261k|            return static_cast<T*>(s.m_p);
  689|   261k|        }
  690|   261k|        else {
  691|   261k|            return reinterpret_cast<T*>(s.m_fp);
  692|   261k|        }
  693|   261k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   261k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   124k|        {
  662|   124k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   124k|    {
 1577|   124k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   124k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   124k|    {
 1621|   124k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   124k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   124k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   124k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   124k|            m_storage.reset();
 1627|   124k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   124k|        }
 1629|   124k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   124k|                                          std::basic_string<CharT>>) {
 1631|   124k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   124k|            m_view = string_view_type{*m_storage};
 1633|   124k|        }
 1634|   124k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   124k|                                          typename detail::basic_scan_buffer<
 1636|   124k|                                              value_t>::forward_iterator> &&
 1637|   124k|                           ranges::common_range<Range>) {
 1638|   124k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   124k|            auto end_seg = range.end().contiguous_segment();
 1640|   124k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   124k|                             detail::to_address(end_seg.end()))) {
 1642|   124k|                auto& str = m_storage.emplace();
 1643|   124k|                str.reserve(range.end().position() - range.begin().position());
 1644|   124k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   124k|                m_view = string_view_type{str};
 1646|   124k|                return;
 1647|   124k|            }
 1648|       |
 1649|   124k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   124k|                                                            end_seg.data());
 1651|   124k|            m_storage.reset();
 1652|   124k|        }
 1653|   124k|        else {
 1654|   124k|            auto& str = m_storage.emplace();
 1655|   124k|            if constexpr (ranges::sized_range<Range>) {
 1656|   124k|                str.reserve(range.size());
 1657|   124k|            }
 1658|   124k|            if constexpr (ranges::common_range<Range>) {
 1659|   124k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   124k|                          std::back_inserter(str));
 1661|   124k|            }
 1662|   124k|            else {
 1663|   124k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   124k|                     ++it) {
 1665|   124k|                    str.push_back(*it);
 1666|   124k|                }
 1667|   124k|            }
 1668|   124k|            m_view = string_view_type{str};
 1669|   124k|        }
 1670|   124k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   144k|    {
 4100|   144k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 138, False: 144k]
  ------------------
 4101|    138|            return std::copysign(value, T{-1.0});
 4102|    138|        }
 4103|   144k|        return std::copysign(value, T{1.0});
 4104|   144k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.93M|    {
 4100|  1.93M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 207k, False: 1.72M]
  ------------------
 4101|   207k|            return std::copysign(value, T{-1.0});
 4102|   207k|        }
 4103|  1.72M|        return std::copysign(value, T{1.0});
 4104|  1.93M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   144k|    {
 4100|   144k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 138, False: 144k]
  ------------------
 4101|    138|            return std::copysign(value, T{-1.0});
 4102|    138|        }
 4103|   144k|        return std::copysign(value, T{1.0});
 4104|   144k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.95M|    {
 4100|  1.95M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 213k, False: 1.73M]
  ------------------
 4101|   213k|            return std::copysign(value, T{-1.0});
 4102|   213k|        }
 4103|  1.73M|        return std::copysign(value, T{1.0});
 4104|  1.95M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   145k|    {
 4100|   145k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 138, False: 145k]
  ------------------
 4101|    138|            return std::copysign(value, T{-1.0});
 4102|    138|        }
 4103|   145k|        return std::copysign(value, T{1.0});
 4104|   145k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   866k|{
 5795|   866k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.42k, False: 859k]
  |  |  ------------------
  ------------------
 5796|  6.42k|        return unexpected(e);
 5797|  6.42k|    }
 5798|       |
 5799|   859k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 859k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   859k|    return skip_classic_whitespace(range);
 5804|   859k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   268k|    {
 5871|   268k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   268k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   268k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   268k|            auto rd = make_reader<T, char_type>();
 5876|   268k|            return impl(rd, range, value);
 5877|   268k|        }
 5878|   268k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   268k|            auto rd = make_reader<T, char_type>();
 5880|   268k|            if (!is_segment_contiguous(range)) {
 5881|   268k|                return impl(rd, range, value);
 5882|   268k|            }
 5883|   268k|            auto crange = get_as_contiguous(range);
 5884|   268k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   268k|            return ranges::next(range.begin(),
 5886|   268k|                                ranges::distance(crange.begin(), it));
 5887|   268k|        }
 5888|   268k|        else {
 5889|   268k|            SCN_EXPECT(false);
 5890|   268k|            SCN_UNREACHABLE;
 5891|   268k|        }
 5892|   268k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   268k|    {
 5863|   268k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   268k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.27k, False: 266k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.27k|    }                                                  \
  |  |  |  | 3671|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   266k|                        .transform_error(make_eof_scan_error));
 5865|   266k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   268k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   266k|    {
 4152|   266k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   266k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   266k|        float_reader<CharT> rd{};
 4155|   266k|        return read_impl<Range>(
 4156|   266k|            range, rd,
 4157|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   266k|                return r.read_source(SCN_FWD(args)...);
 4159|   266k|            },
 4160|   266k|            value);
 4161|   266k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.69M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.90M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   266k|    {
  754|   266k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   266k|              cvref<T> obj = *get<T>(fn);
  745|   266k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   266k|                  obj(static_cast<decltype(args)>(args)...);
  747|   266k|              }
  748|   266k|              else {
  749|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   266k|              }
  751|   266k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   266k|    {
  684|   266k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   266k|            return static_cast<T*>(s.m_cp);
  686|   266k|        }
  687|   266k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   266k|            return static_cast<T*>(s.m_p);
  689|   266k|        }
  690|   266k|        else {
  691|   266k|            return reinterpret_cast<T*>(s.m_fp);
  692|   266k|        }
  693|   266k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   266k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   266k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   266k|        {
  662|   266k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   296k|    {
 5871|   296k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   296k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   296k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   296k|            auto rd = make_reader<T, char_type>();
 5876|   296k|            return impl(rd, range, value);
 5877|   296k|        }
 5878|   296k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   296k|            auto rd = make_reader<T, char_type>();
 5880|   296k|            if (!is_segment_contiguous(range)) {
 5881|   296k|                return impl(rd, range, value);
 5882|   296k|            }
 5883|   296k|            auto crange = get_as_contiguous(range);
 5884|   296k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   296k|            return ranges::next(range.begin(),
 5886|   296k|                                ranges::distance(crange.begin(), it));
 5887|   296k|        }
 5888|   296k|        else {
 5889|   296k|            SCN_EXPECT(false);
 5890|   296k|            SCN_UNREACHABLE;
 5891|   296k|        }
 5892|   296k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   296k|    {
 5863|   296k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   293k|                        .transform_error(make_eof_scan_error));
 5865|   293k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   296k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   293k|    {
 4152|   293k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   293k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   293k|        float_reader<CharT> rd{};
 4155|   293k|        return read_impl<Range>(
 4156|   293k|            range, rd,
 4157|   293k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   293k|                return r.read_source(SCN_FWD(args)...);
 4159|   293k|            },
 4160|   293k|            value);
 4161|   293k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   293k|    {
  754|   293k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   293k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   293k|              cvref<T> obj = *get<T>(fn);
  745|   293k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   293k|                  obj(static_cast<decltype(args)>(args)...);
  747|   293k|              }
  748|   293k|              else {
  749|   293k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   293k|              }
  751|   293k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   293k|    {
  684|   293k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   293k|            return static_cast<T*>(s.m_cp);
  686|   293k|        }
  687|   293k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   293k|            return static_cast<T*>(s.m_p);
  689|   293k|        }
  690|   293k|        else {
  691|   293k|            return reinterpret_cast<T*>(s.m_fp);
  692|   293k|        }
  693|   293k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   293k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   293k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   293k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   293k|        {
  662|   293k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   301k|    {
 5871|   301k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   301k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   301k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   301k|            auto rd = make_reader<T, char_type>();
 5876|   301k|            return impl(rd, range, value);
 5877|   301k|        }
 5878|   301k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   301k|            auto rd = make_reader<T, char_type>();
 5880|   301k|            if (!is_segment_contiguous(range)) {
 5881|   301k|                return impl(rd, range, value);
 5882|   301k|            }
 5883|   301k|            auto crange = get_as_contiguous(range);
 5884|   301k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   301k|            return ranges::next(range.begin(),
 5886|   301k|                                ranges::distance(crange.begin(), it));
 5887|   301k|        }
 5888|   301k|        else {
 5889|   301k|            SCN_EXPECT(false);
 5890|   301k|            SCN_UNREACHABLE;
 5891|   301k|        }
 5892|   301k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   301k|    {
 5863|   301k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.78k, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.78k|    }                                                  \
  |  |  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   298k|                        .transform_error(make_eof_scan_error));
 5865|   298k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   301k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   298k|    {
 4152|   298k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   298k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   298k|        float_reader<CharT> rd{};
 4155|   298k|        return read_impl<Range>(
 4156|   298k|            range, rd,
 4157|   298k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   298k|                return r.read_source(SCN_FWD(args)...);
 4159|   298k|            },
 4160|   298k|            value);
 4161|   298k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   298k|    {
  754|   298k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   298k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   298k|              cvref<T> obj = *get<T>(fn);
  745|   298k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   298k|                  obj(static_cast<decltype(args)>(args)...);
  747|   298k|              }
  748|   298k|              else {
  749|   298k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   298k|              }
  751|   298k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   298k|    {
  684|   298k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   298k|            return static_cast<T*>(s.m_cp);
  686|   298k|        }
  687|   298k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   298k|            return static_cast<T*>(s.m_p);
  689|   298k|        }
  690|   298k|        else {
  691|   298k|            return reinterpret_cast<T*>(s.m_fp);
  692|   298k|        }
  693|   298k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   298k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   298k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   298k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   298k|        {
  662|   298k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   840k|{
 5795|   840k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.48k, False: 834k]
  |  |  ------------------
  ------------------
 5796|  6.48k|        return unexpected(e);
 5797|  6.48k|    }
 5798|       |
 5799|   834k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 834k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   834k|    return skip_classic_whitespace(range);
 5804|   834k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   261k|    {
 5871|   261k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   261k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   261k|            auto rd = make_reader<T, char_type>();
 5876|   261k|            return impl(rd, range, value);
 5877|   261k|        }
 5878|   261k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   261k|            auto rd = make_reader<T, char_type>();
 5880|   261k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 261k, False: 0]
  ------------------
 5881|   261k|                return impl(rd, range, value);
 5882|   261k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   261k|        else {
 5889|   261k|            SCN_EXPECT(false);
 5890|   261k|            SCN_UNREACHABLE;
 5891|   261k|        }
 5892|   261k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   261k|    {
 5863|   261k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.27k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.27k|    }                                                  \
  |  |  |  | 3671|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   259k|                        .transform_error(make_eof_scan_error));
 5865|   259k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   261k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   259k|    {
 4152|   259k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   259k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   259k|        float_reader<CharT> rd{};
 4155|   259k|        return read_impl<Range>(
 4156|   259k|            range, rd,
 4157|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   259k|                return r.read_source(SCN_FWD(args)...);
 4159|   259k|            },
 4160|   259k|            value);
 4161|   259k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   259k|    {
  754|   259k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   259k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   259k|              cvref<T> obj = *get<T>(fn);
  745|   259k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   259k|                  obj(static_cast<decltype(args)>(args)...);
  747|   259k|              }
  748|   259k|              else {
  749|   259k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   259k|              }
  751|   259k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   259k|    {
  684|   259k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   259k|            return static_cast<T*>(s.m_cp);
  686|   259k|        }
  687|   259k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   259k|            return static_cast<T*>(s.m_p);
  689|   259k|        }
  690|   259k|        else {
  691|   259k|            return reinterpret_cast<T*>(s.m_fp);
  692|   259k|        }
  693|   259k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   259k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   259k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   259k|        {
  662|   259k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   288k|    {
 5871|   288k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   288k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   288k|            auto rd = make_reader<T, char_type>();
 5876|   288k|            return impl(rd, range, value);
 5877|   288k|        }
 5878|   288k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   288k|            auto rd = make_reader<T, char_type>();
 5880|   288k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 288k, False: 0]
  ------------------
 5881|   288k|                return impl(rd, range, value);
 5882|   288k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   288k|        else {
 5889|   288k|            SCN_EXPECT(false);
 5890|   288k|            SCN_UNREACHABLE;
 5891|   288k|        }
 5892|   288k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   288k|    {
 5863|   288k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.60k, False: 285k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.60k|    }                                                  \
  |  |  |  | 3671|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   285k|                        .transform_error(make_eof_scan_error));
 5865|   285k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   288k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   285k|    {
 4152|   285k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   285k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   285k|        float_reader<CharT> rd{};
 4155|   285k|        return read_impl<Range>(
 4156|   285k|            range, rd,
 4157|   285k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   285k|                return r.read_source(SCN_FWD(args)...);
 4159|   285k|            },
 4160|   285k|            value);
 4161|   285k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   285k|    {
  754|   285k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   285k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   285k|              cvref<T> obj = *get<T>(fn);
  745|   285k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   285k|                  obj(static_cast<decltype(args)>(args)...);
  747|   285k|              }
  748|   285k|              else {
  749|   285k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   285k|              }
  751|   285k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   285k|    {
  684|   285k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   285k|            return static_cast<T*>(s.m_cp);
  686|   285k|        }
  687|   285k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   285k|            return static_cast<T*>(s.m_p);
  689|   285k|        }
  690|   285k|        else {
  691|   285k|            return reinterpret_cast<T*>(s.m_fp);
  692|   285k|        }
  693|   285k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   285k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   285k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   285k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   285k|        {
  662|   285k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   291k|    {
 5871|   291k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   291k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   291k|            auto rd = make_reader<T, char_type>();
 5876|   291k|            return impl(rd, range, value);
 5877|   291k|        }
 5878|   291k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   291k|            auto rd = make_reader<T, char_type>();
 5880|   291k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 291k, False: 0]
  ------------------
 5881|   291k|                return impl(rd, range, value);
 5882|   291k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   291k|        else {
 5889|   291k|            SCN_EXPECT(false);
 5890|   291k|            SCN_UNREACHABLE;
 5891|   291k|        }
 5892|   291k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   291k|    {
 5863|   291k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.76k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.76k|    }                                                  \
  |  |  |  | 3671|   291k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   288k|                        .transform_error(make_eof_scan_error));
 5865|   288k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   291k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   288k|    {
 4152|   288k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   288k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   288k|        float_reader<CharT> rd{};
 4155|   288k|        return read_impl<Range>(
 4156|   288k|            range, rd,
 4157|   288k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   288k|                return r.read_source(SCN_FWD(args)...);
 4159|   288k|            },
 4160|   288k|            value);
 4161|   288k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   288k|    {
  754|   288k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   288k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   288k|              cvref<T> obj = *get<T>(fn);
  745|   288k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   288k|                  obj(static_cast<decltype(args)>(args)...);
  747|   288k|              }
  748|   288k|              else {
  749|   288k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   288k|              }
  751|   288k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   288k|    {
  684|   288k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   288k|            return static_cast<T*>(s.m_cp);
  686|   288k|        }
  687|   288k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   288k|            return static_cast<T*>(s.m_p);
  689|   288k|        }
  690|   288k|        else {
  691|   288k|            return reinterpret_cast<T*>(s.m_fp);
  692|   288k|        }
  693|   288k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   288k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   288k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   288k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   288k|        {
  662|   288k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  2.02M|    {
 2879|  2.02M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  5.94M|    {
 2883|  5.94M|        return m_current;
 2884|  5.94M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.92M|    {
 2888|  3.92M|        return m_range.end();
 2889|  3.92M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.90M|    {
 2903|  1.90M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.90M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.90M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.90M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.90M|        }
 2909|  1.90M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.90M|    static_cast<    \
  |  |  929|  1.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.90M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  2.02M|    {
 2893|  2.02M|        return ranges::subrange{begin(), end()};
 2894|  2.02M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  2.02M|    {
 6037|  2.02M|        const bool need_skipped_width =
 6038|  2.02M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 2.02M]
  |  Branch (6038:33): [True: 0, False: 2.02M]
  ------------------
 6039|  2.02M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.02M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 2.02M]
  ------------------
 6043|  2.02M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.02M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  2.02M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.02M, False: 0]
  |  Branch (6047:56): [True: 2.02M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.02M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.02M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.02M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.4k, False: 2.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.4k|    }                                                  \
  |  |  |  | 3671|  2.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.02M|                            make_eof_scan_error));
 6058|       |
 6059|  4.02M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 2.00M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  2.00M|            return result_type{it, 0};
 6067|  4.02M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  2.02M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.88M|    {
 6079|  1.88M|        const bool need_skipped_width =
 6080|  1.88M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.88M]
  |  Branch (6080:33): [True: 0, False: 1.88M]
  ------------------
 6081|  1.88M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.88M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.88M]
  ------------------
 6084|  1.88M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.88M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.88M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.88M, False: 0]
  ------------------
 6093|  1.88M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.88M]
  ------------------
 6094|  1.88M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.88M|        return result_type{rng.begin(), 0};
 6118|  1.88M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   641k|    {
 6193|   641k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   641k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   641k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   641k|            auto rd = make_reader<T, char_type>();
 6198|   641k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 641k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   641k|            return impl(rd, range, value);
 6203|   641k|        }
 6204|   641k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   641k|            auto rd = make_reader<T, char_type>();
 6206|   641k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   641k|                return unexpected(e);
 6208|   641k|            }
 6209|       |
 6210|   641k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   641k|                specs.width != 0) {
 6212|   641k|                return impl(rd, range, value);
 6213|   641k|            }
 6214|       |
 6215|   641k|            auto crange = get_as_contiguous(range);
 6216|   641k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   641k|            return ranges::next(range.begin(),
 6218|   641k|                                ranges::distance(crange.begin(), it));
 6219|   641k|        }
 6220|   641k|        else {
 6221|   641k|            SCN_EXPECT(false);
 6222|   641k|            SCN_UNREACHABLE;
 6223|   641k|        }
 6224|   641k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   641k|    {
 6124|   641k|        const bool need_skipped_width =
 6125|   641k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 641k]
  |  Branch (6125:33): [True: 0, False: 641k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   641k|        auto it = rng.begin();
 6129|   641k|        std::ptrdiff_t prefix_width = 0;
 6130|   641k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 641k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   641k|        else {
 6138|   641k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   641k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   641k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   641k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.90k, False: 635k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.90k|    }                                                  \
  |  |  |  | 3671|   641k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   635k|            std::tie(it, prefix_width) = prefix_result;
 6140|   635k|        }
 6141|   635k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   635k|        std::ptrdiff_t value_width = 0;
 6145|   635k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 635k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   635k|        else {
 6161|   635k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   635k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   635k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   635k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 33.2k, False: 602k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  33.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  33.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  33.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  33.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  33.2k|    }                                                  \
  |  | 3671|   635k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   602k|                                             specs, value, loc));
 6163|       |
 6164|   602k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 602k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   602k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   602k|        std::ptrdiff_t postfix_width = 0;
 6173|   602k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 597k, False: 4.90k]
  ------------------
 6174|   597k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   597k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   597k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   597k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 597k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   597k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   597k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   597k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   597k|                                 value_width));
 6178|   597k|            std::tie(it, postfix_width) = postfix_result;
 6179|   597k|        }
 6180|       |
 6181|   602k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   602k|                                                 value_width, postfix_width);
 6183|   602k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 602k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   602k|        return it;
 6188|   602k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   686k|    {
 6193|   686k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   686k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   686k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   686k|            auto rd = make_reader<T, char_type>();
 6198|   686k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   686k|            return impl(rd, range, value);
 6203|   686k|        }
 6204|   686k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   686k|            auto rd = make_reader<T, char_type>();
 6206|   686k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   686k|                return unexpected(e);
 6208|   686k|            }
 6209|       |
 6210|   686k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   686k|                specs.width != 0) {
 6212|   686k|                return impl(rd, range, value);
 6213|   686k|            }
 6214|       |
 6215|   686k|            auto crange = get_as_contiguous(range);
 6216|   686k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   686k|            return ranges::next(range.begin(),
 6218|   686k|                                ranges::distance(crange.begin(), it));
 6219|   686k|        }
 6220|   686k|        else {
 6221|   686k|            SCN_EXPECT(false);
 6222|   686k|            SCN_UNREACHABLE;
 6223|   686k|        }
 6224|   686k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   686k|    {
 6124|   686k|        const bool need_skipped_width =
 6125|   686k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 686k]
  |  Branch (6125:33): [True: 0, False: 686k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   686k|        auto it = rng.begin();
 6129|   686k|        std::ptrdiff_t prefix_width = 0;
 6130|   686k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 686k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   686k|        else {
 6138|   686k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   686k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   686k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   686k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 679k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.59k|    }                                                  \
  |  |  |  | 3671|   686k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   679k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   679k|            std::tie(it, prefix_width) = prefix_result;
 6140|   679k|        }
 6141|   679k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   679k|        std::ptrdiff_t value_width = 0;
 6145|   679k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 679k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   679k|        else {
 6161|   679k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   679k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   679k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 32.5k, False: 646k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  32.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  32.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  32.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  32.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  32.5k|    }                                                  \
  |  | 3671|   679k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   679k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   646k|                                             specs, value, loc));
 6163|       |
 6164|   646k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 646k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   646k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   646k|        std::ptrdiff_t postfix_width = 0;
 6173|   646k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 641k, False: 5.48k]
  ------------------
 6174|   641k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   641k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   641k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   641k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 641k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   641k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   641k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   641k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   641k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   641k|                                 value_width));
 6178|   641k|            std::tie(it, postfix_width) = postfix_result;
 6179|   641k|        }
 6180|       |
 6181|   646k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   646k|                                                 value_width, postfix_width);
 6183|   646k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 646k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   646k|        return it;
 6188|   646k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   693k|    {
 6193|   693k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   693k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   693k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   693k|            auto rd = make_reader<T, char_type>();
 6198|   693k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   693k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 693k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   693k|            return impl(rd, range, value);
 6203|   693k|        }
 6204|   693k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   693k|            auto rd = make_reader<T, char_type>();
 6206|   693k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   693k|                return unexpected(e);
 6208|   693k|            }
 6209|       |
 6210|   693k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   693k|                specs.width != 0) {
 6212|   693k|                return impl(rd, range, value);
 6213|   693k|            }
 6214|       |
 6215|   693k|            auto crange = get_as_contiguous(range);
 6216|   693k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   693k|            return ranges::next(range.begin(),
 6218|   693k|                                ranges::distance(crange.begin(), it));
 6219|   693k|        }
 6220|   693k|        else {
 6221|   693k|            SCN_EXPECT(false);
 6222|   693k|            SCN_UNREACHABLE;
 6223|   693k|        }
 6224|   693k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   693k|    {
 6124|   693k|        const bool need_skipped_width =
 6125|   693k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 693k]
  |  Branch (6125:33): [True: 0, False: 693k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   693k|        auto it = rng.begin();
 6129|   693k|        std::ptrdiff_t prefix_width = 0;
 6130|   693k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 693k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   693k|        else {
 6138|   693k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   693k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   693k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   693k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   693k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.96k, False: 686k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.96k|    }                                                  \
  |  |  |  | 3671|   693k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   686k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   686k|            std::tie(it, prefix_width) = prefix_result;
 6140|   686k|        }
 6141|   686k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   686k|        std::ptrdiff_t value_width = 0;
 6145|   686k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 686k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   686k|        else {
 6161|   686k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   686k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   686k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 32.1k, False: 653k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  32.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  32.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  32.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  32.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  32.1k|    }                                                  \
  |  | 3671|   686k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   686k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   653k|                                             specs, value, loc));
 6163|       |
 6164|   653k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 653k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   653k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   653k|        std::ptrdiff_t postfix_width = 0;
 6173|   653k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 648k, False: 5.81k]
  ------------------
 6174|   648k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   648k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   648k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   648k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   648k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   648k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   648k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   648k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   648k|                                 value_width));
 6178|   648k|            std::tie(it, postfix_width) = postfix_result;
 6179|   648k|        }
 6180|       |
 6181|   653k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   653k|                                                 value_width, postfix_width);
 6183|   653k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 653k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   653k|        return it;
 6188|   653k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   107k|{
 5795|   107k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 207, False: 106k]
  |  |  ------------------
  ------------------
 5796|    207|        return unexpected(e);
 5797|    207|    }
 5798|       |
 5799|   106k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 106k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   106k|    return skip_classic_whitespace(range);
 5804|   106k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  35.5k|    {
 5871|  35.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  35.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  35.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  35.5k|            auto rd = make_reader<T, char_type>();
 5876|  35.5k|            return impl(rd, range, value);
 5877|  35.5k|        }
 5878|  35.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  35.5k|            auto rd = make_reader<T, char_type>();
 5880|  35.5k|            if (!is_segment_contiguous(range)) {
 5881|  35.5k|                return impl(rd, range, value);
 5882|  35.5k|            }
 5883|  35.5k|            auto crange = get_as_contiguous(range);
 5884|  35.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  35.5k|            return ranges::next(range.begin(),
 5886|  35.5k|                                ranges::distance(crange.begin(), it));
 5887|  35.5k|        }
 5888|  35.5k|        else {
 5889|  35.5k|            SCN_EXPECT(false);
 5890|  35.5k|            SCN_UNREACHABLE;
 5891|  35.5k|        }
 5892|  35.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  35.5k|    {
 5863|  35.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  35.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 35.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    216|    }                                                  \
  |  |  |  | 3671|  35.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  35.2k|                        .transform_error(make_eof_scan_error));
 5865|  35.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  35.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  35.2k|    {
 4152|  35.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  35.2k|        float_reader<CharT> rd{};
 4155|  35.2k|        return read_impl<Range>(
 4156|  35.2k|            range, rd,
 4157|  35.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  35.2k|            },
 4160|  35.2k|            value);
 4161|  35.2k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   212k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  35.2k|    {
  754|  35.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  35.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.2k|              cvref<T> obj = *get<T>(fn);
  745|  35.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.2k|              }
  748|  35.2k|              else {
  749|  35.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.2k|              }
  751|  35.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.2k|    {
  684|  35.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.2k|            return static_cast<T*>(s.m_cp);
  686|  35.2k|        }
  687|  35.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.2k|            return static_cast<T*>(s.m_p);
  689|  35.2k|        }
  690|  35.2k|        else {
  691|  35.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.2k|        }
  693|  35.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  35.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  35.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  35.2k|        {
  662|  35.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  35.6k|    {
 5871|  35.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  35.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  35.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  35.6k|            auto rd = make_reader<T, char_type>();
 5876|  35.6k|            return impl(rd, range, value);
 5877|  35.6k|        }
 5878|  35.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  35.6k|            auto rd = make_reader<T, char_type>();
 5880|  35.6k|            if (!is_segment_contiguous(range)) {
 5881|  35.6k|                return impl(rd, range, value);
 5882|  35.6k|            }
 5883|  35.6k|            auto crange = get_as_contiguous(range);
 5884|  35.6k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  35.6k|            return ranges::next(range.begin(),
 5886|  35.6k|                                ranges::distance(crange.begin(), it));
 5887|  35.6k|        }
 5888|  35.6k|        else {
 5889|  35.6k|            SCN_EXPECT(false);
 5890|  35.6k|            SCN_UNREACHABLE;
 5891|  35.6k|        }
 5892|  35.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  35.6k|    {
 5863|  35.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  35.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 237, False: 35.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    237|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    237|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    237|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    237|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    237|    }                                                  \
  |  |  |  | 3671|  35.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  35.4k|                        .transform_error(make_eof_scan_error));
 5865|  35.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  35.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  35.4k|    {
 4152|  35.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  35.4k|        float_reader<CharT> rd{};
 4155|  35.4k|        return read_impl<Range>(
 4156|  35.4k|            range, rd,
 4157|  35.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  35.4k|            },
 4160|  35.4k|            value);
 4161|  35.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  35.4k|    {
  754|  35.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  35.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.4k|              cvref<T> obj = *get<T>(fn);
  745|  35.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.4k|              }
  748|  35.4k|              else {
  749|  35.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.4k|              }
  751|  35.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.4k|    {
  684|  35.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.4k|            return static_cast<T*>(s.m_cp);
  686|  35.4k|        }
  687|  35.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.4k|            return static_cast<T*>(s.m_p);
  689|  35.4k|        }
  690|  35.4k|        else {
  691|  35.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.4k|        }
  693|  35.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  35.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  35.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  35.4k|        {
  662|  35.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  35.9k|    {
 5871|  35.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  35.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  35.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  35.9k|            auto rd = make_reader<T, char_type>();
 5876|  35.9k|            return impl(rd, range, value);
 5877|  35.9k|        }
 5878|  35.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  35.9k|            auto rd = make_reader<T, char_type>();
 5880|  35.9k|            if (!is_segment_contiguous(range)) {
 5881|  35.9k|                return impl(rd, range, value);
 5882|  35.9k|            }
 5883|  35.9k|            auto crange = get_as_contiguous(range);
 5884|  35.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  35.9k|            return ranges::next(range.begin(),
 5886|  35.9k|                                ranges::distance(crange.begin(), it));
 5887|  35.9k|        }
 5888|  35.9k|        else {
 5889|  35.9k|            SCN_EXPECT(false);
 5890|  35.9k|            SCN_UNREACHABLE;
 5891|  35.9k|        }
 5892|  35.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  35.9k|    {
 5863|  35.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  35.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    246|    }                                                  \
  |  |  |  | 3671|  35.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  35.6k|                        .transform_error(make_eof_scan_error));
 5865|  35.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  35.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  35.6k|    {
 4152|  35.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  35.6k|        float_reader<CharT> rd{};
 4155|  35.6k|        return read_impl<Range>(
 4156|  35.6k|            range, rd,
 4157|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  35.6k|            },
 4160|  35.6k|            value);
 4161|  35.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  35.6k|    {
  754|  35.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  35.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.6k|              cvref<T> obj = *get<T>(fn);
  745|  35.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.6k|              }
  748|  35.6k|              else {
  749|  35.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.6k|              }
  751|  35.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.6k|    {
  684|  35.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.6k|            return static_cast<T*>(s.m_cp);
  686|  35.6k|        }
  687|  35.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.6k|            return static_cast<T*>(s.m_p);
  689|  35.6k|        }
  690|  35.6k|        else {
  691|  35.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.6k|        }
  693|  35.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  35.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  35.6k|        {
  662|  35.6k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   333k|    {
 2879|   333k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   766k|    {
 2883|   766k|        return m_current;
 2884|   766k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   432k|    {
 2888|   432k|        return m_range.end();
 2889|   432k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  98.8k|    {
 2903|  98.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  98.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  98.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  98.8k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 98.8k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  98.8k|        }
 2909|  98.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  98.8k|    static_cast<    \
  |  |  929|  98.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  98.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   333k|    {
 2893|   333k|        return ranges::subrange{begin(), end()};
 2894|   333k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   333k|    {
 6037|   333k|        const bool need_skipped_width =
 6038|   333k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 333k]
  |  Branch (6038:33): [True: 0, False: 333k]
  ------------------
 6039|   333k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   333k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 333k]
  ------------------
 6043|   333k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 333k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   333k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 333k, False: 0]
  |  Branch (6047:56): [True: 333k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   333k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 333k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   665k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 331k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.07k|    }                                                  \
  |  |  |  | 3671|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   665k|                            make_eof_scan_error));
 6058|       |
 6059|   665k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 331k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   331k|            return result_type{it, 0};
 6067|   665k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   333k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  98.2k|    {
 6079|  98.2k|        const bool need_skipped_width =
 6080|  98.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 98.2k]
  |  Branch (6080:33): [True: 0, False: 98.2k]
  ------------------
 6081|  98.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  98.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 98.2k]
  ------------------
 6084|  98.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 98.2k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  98.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 98.2k, False: 0]
  ------------------
 6093|  98.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 98.2k]
  ------------------
 6094|  98.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  98.2k|        return result_type{rng.begin(), 0};
 6118|  98.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   110k|    {
 6193|   110k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   110k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   110k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   110k|            auto rd = make_reader<T, char_type>();
 6198|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   110k|            return impl(rd, range, value);
 6203|   110k|        }
 6204|   110k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   110k|            auto rd = make_reader<T, char_type>();
 6206|   110k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   110k|                return unexpected(e);
 6208|   110k|            }
 6209|       |
 6210|   110k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   110k|                specs.width != 0) {
 6212|   110k|                return impl(rd, range, value);
 6213|   110k|            }
 6214|       |
 6215|   110k|            auto crange = get_as_contiguous(range);
 6216|   110k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   110k|            return ranges::next(range.begin(),
 6218|   110k|                                ranges::distance(crange.begin(), it));
 6219|   110k|        }
 6220|   110k|        else {
 6221|   110k|            SCN_EXPECT(false);
 6222|   110k|            SCN_UNREACHABLE;
 6223|   110k|        }
 6224|   110k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   110k|    {
 6124|   110k|        const bool need_skipped_width =
 6125|   110k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 110k]
  |  Branch (6125:33): [True: 0, False: 110k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   110k|        auto it = rng.begin();
 6129|   110k|        std::ptrdiff_t prefix_width = 0;
 6130|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 110k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   110k|        else {
 6138|   110k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 662, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    662|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    662|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    662|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    662|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    662|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   110k|            std::tie(it, prefix_width) = prefix_result;
 6140|   110k|        }
 6141|   110k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   110k|        std::ptrdiff_t value_width = 0;
 6145|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 110k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   110k|        else {
 6161|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 77.6k, False: 32.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  77.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  77.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  77.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  77.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  77.6k|    }                                                  \
  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  32.6k|                                             specs, value, loc));
 6163|       |
 6164|  32.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 32.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  32.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  32.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  32.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 32.4k, False: 178]
  ------------------
 6174|  32.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  32.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  32.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  32.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  32.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  32.4k|                                 value_width));
 6178|  32.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  32.4k|        }
 6180|       |
 6181|  32.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  32.6k|                                                 value_width, postfix_width);
 6183|  32.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 32.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  32.6k|        return it;
 6188|  32.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   111k|    {
 6193|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   111k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   111k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   111k|            auto rd = make_reader<T, char_type>();
 6198|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   111k|            return impl(rd, range, value);
 6203|   111k|        }
 6204|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   111k|            auto rd = make_reader<T, char_type>();
 6206|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   111k|                return unexpected(e);
 6208|   111k|            }
 6209|       |
 6210|   111k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   111k|                specs.width != 0) {
 6212|   111k|                return impl(rd, range, value);
 6213|   111k|            }
 6214|       |
 6215|   111k|            auto crange = get_as_contiguous(range);
 6216|   111k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   111k|            return ranges::next(range.begin(),
 6218|   111k|                                ranges::distance(crange.begin(), it));
 6219|   111k|        }
 6220|   111k|        else {
 6221|   111k|            SCN_EXPECT(false);
 6222|   111k|            SCN_UNREACHABLE;
 6223|   111k|        }
 6224|   111k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   111k|    {
 6124|   111k|        const bool need_skipped_width =
 6125|   111k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 111k]
  |  Branch (6125:33): [True: 0, False: 111k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   111k|        auto it = rng.begin();
 6129|   111k|        std::ptrdiff_t prefix_width = 0;
 6130|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 111k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   111k|        else {
 6138|   111k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 700, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    700|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    700|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    700|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    700|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    700|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   110k|            std::tie(it, prefix_width) = prefix_result;
 6140|   110k|        }
 6141|   110k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   110k|        std::ptrdiff_t value_width = 0;
 6145|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 110k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   110k|        else {
 6161|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 77.6k, False: 32.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  77.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  77.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  77.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  77.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  77.6k|    }                                                  \
  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  32.8k|                                             specs, value, loc));
 6163|       |
 6164|  32.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 32.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  32.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  32.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  32.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 32.6k, False: 188]
  ------------------
 6174|  32.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  32.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  32.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  32.6k|                                 value_width));
 6178|  32.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  32.6k|        }
 6180|       |
 6181|  32.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  32.8k|                                                 value_width, postfix_width);
 6183|  32.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 32.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  32.8k|        return it;
 6188|  32.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   111k|    {
 6193|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   111k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   111k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   111k|            auto rd = make_reader<T, char_type>();
 6198|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   111k|            return impl(rd, range, value);
 6203|   111k|        }
 6204|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   111k|            auto rd = make_reader<T, char_type>();
 6206|   111k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   111k|                return unexpected(e);
 6208|   111k|            }
 6209|       |
 6210|   111k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   111k|                specs.width != 0) {
 6212|   111k|                return impl(rd, range, value);
 6213|   111k|            }
 6214|       |
 6215|   111k|            auto crange = get_as_contiguous(range);
 6216|   111k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   111k|            return ranges::next(range.begin(),
 6218|   111k|                                ranges::distance(crange.begin(), it));
 6219|   111k|        }
 6220|   111k|        else {
 6221|   111k|            SCN_EXPECT(false);
 6222|   111k|            SCN_UNREACHABLE;
 6223|   111k|        }
 6224|   111k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   111k|    {
 6124|   111k|        const bool need_skipped_width =
 6125|   111k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 111k]
  |  Branch (6125:33): [True: 0, False: 111k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   111k|        auto it = rng.begin();
 6129|   111k|        std::ptrdiff_t prefix_width = 0;
 6130|   111k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 111k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   111k|        else {
 6138|   111k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    716|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   110k|            std::tie(it, prefix_width) = prefix_result;
 6140|   110k|        }
 6141|   110k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   110k|        std::ptrdiff_t value_width = 0;
 6145|   110k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 110k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   110k|        else {
 6161|   110k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 77.6k, False: 33.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  77.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  77.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  77.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  77.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  77.6k|    }                                                  \
  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  33.3k|                                             specs, value, loc));
 6163|       |
 6164|  33.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 33.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  33.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  33.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  33.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 33.1k, False: 198]
  ------------------
 6174|  33.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  33.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  33.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  33.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  33.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  33.1k|                                 value_width));
 6178|  33.1k|            std::tie(it, postfix_width) = postfix_result;
 6179|  33.1k|        }
 6180|       |
 6181|  33.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  33.3k|                                                 value_width, postfix_width);
 6183|  33.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 33.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  33.3k|        return it;
 6188|  33.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   106k|{
 5795|   106k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 207, False: 106k]
  |  |  ------------------
  ------------------
 5796|    207|        return unexpected(e);
 5797|    207|    }
 5798|       |
 5799|   106k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 106k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   106k|    return skip_classic_whitespace(range);
 5804|   106k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  35.4k|    {
 5871|  35.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  35.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  35.4k|            auto rd = make_reader<T, char_type>();
 5876|  35.4k|            return impl(rd, range, value);
 5877|  35.4k|        }
 5878|  35.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  35.4k|            auto rd = make_reader<T, char_type>();
 5880|  35.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 35.4k, False: 0]
  ------------------
 5881|  35.4k|                return impl(rd, range, value);
 5882|  35.4k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  35.4k|        else {
 5889|  35.4k|            SCN_EXPECT(false);
 5890|  35.4k|            SCN_UNREACHABLE;
 5891|  35.4k|        }
 5892|  35.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  35.4k|    {
 5863|  35.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  35.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 35.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    216|    }                                                  \
  |  |  |  | 3671|  35.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  35.2k|                        .transform_error(make_eof_scan_error));
 5865|  35.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  35.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  35.2k|    {
 4152|  35.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  35.2k|        float_reader<CharT> rd{};
 4155|  35.2k|        return read_impl<Range>(
 4156|  35.2k|            range, rd,
 4157|  35.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  35.2k|            },
 4160|  35.2k|            value);
 4161|  35.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  35.2k|    {
  754|  35.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  35.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.2k|              cvref<T> obj = *get<T>(fn);
  745|  35.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.2k|              }
  748|  35.2k|              else {
  749|  35.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.2k|              }
  751|  35.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.2k|    {
  684|  35.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.2k|            return static_cast<T*>(s.m_cp);
  686|  35.2k|        }
  687|  35.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.2k|            return static_cast<T*>(s.m_p);
  689|  35.2k|        }
  690|  35.2k|        else {
  691|  35.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.2k|        }
  693|  35.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  35.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  35.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  35.2k|        {
  662|  35.2k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  35.6k|    {
 5871|  35.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  35.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  35.6k|            auto rd = make_reader<T, char_type>();
 5876|  35.6k|            return impl(rd, range, value);
 5877|  35.6k|        }
 5878|  35.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  35.6k|            auto rd = make_reader<T, char_type>();
 5880|  35.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 35.6k, False: 0]
  ------------------
 5881|  35.6k|                return impl(rd, range, value);
 5882|  35.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  35.6k|        else {
 5889|  35.6k|            SCN_EXPECT(false);
 5890|  35.6k|            SCN_UNREACHABLE;
 5891|  35.6k|        }
 5892|  35.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  35.6k|    {
 5863|  35.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  35.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 237, False: 35.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    237|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    237|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    237|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    237|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    237|    }                                                  \
  |  |  |  | 3671|  35.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  35.3k|                        .transform_error(make_eof_scan_error));
 5865|  35.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  35.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  35.3k|    {
 4152|  35.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  35.3k|        float_reader<CharT> rd{};
 4155|  35.3k|        return read_impl<Range>(
 4156|  35.3k|            range, rd,
 4157|  35.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  35.3k|            },
 4160|  35.3k|            value);
 4161|  35.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  35.3k|    {
  754|  35.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  35.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.3k|              cvref<T> obj = *get<T>(fn);
  745|  35.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.3k|              }
  748|  35.3k|              else {
  749|  35.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.3k|              }
  751|  35.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.3k|    {
  684|  35.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.3k|            return static_cast<T*>(s.m_cp);
  686|  35.3k|        }
  687|  35.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.3k|            return static_cast<T*>(s.m_p);
  689|  35.3k|        }
  690|  35.3k|        else {
  691|  35.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.3k|        }
  693|  35.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  35.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  35.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  35.3k|        {
  662|  35.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  35.8k|    {
 5871|  35.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  35.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  35.8k|            auto rd = make_reader<T, char_type>();
 5876|  35.8k|            return impl(rd, range, value);
 5877|  35.8k|        }
 5878|  35.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  35.8k|            auto rd = make_reader<T, char_type>();
 5880|  35.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 35.8k, False: 0]
  ------------------
 5881|  35.8k|                return impl(rd, range, value);
 5882|  35.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  35.8k|        else {
 5889|  35.8k|            SCN_EXPECT(false);
 5890|  35.8k|            SCN_UNREACHABLE;
 5891|  35.8k|        }
 5892|  35.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  35.8k|    {
 5863|  35.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  35.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    246|    }                                                  \
  |  |  |  | 3671|  35.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  35.6k|                        .transform_error(make_eof_scan_error));
 5865|  35.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  35.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  35.6k|    {
 4152|  35.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  35.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  35.6k|        float_reader<CharT> rd{};
 4155|  35.6k|        return read_impl<Range>(
 4156|  35.6k|            range, rd,
 4157|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  35.6k|            },
 4160|  35.6k|            value);
 4161|  35.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  35.6k|    {
  754|  35.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  35.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.6k|              cvref<T> obj = *get<T>(fn);
  745|  35.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.6k|              }
  748|  35.6k|              else {
  749|  35.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.6k|              }
  751|  35.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.6k|    {
  684|  35.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.6k|            return static_cast<T*>(s.m_cp);
  686|  35.6k|        }
  687|  35.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.6k|            return static_cast<T*>(s.m_p);
  689|  35.6k|        }
  690|  35.6k|        else {
  691|  35.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.6k|        }
  693|  35.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  35.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  35.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  35.6k|        {
  662|  35.6k|        }

LLVMFuzzerTestOneInput:
   54|  3.91k|{
   55|  3.91k|    scn::fuzz::run(data, size);
   56|  3.91k|    return 0;
   57|  3.91k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.91k|{
   33|  3.91k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.91k]
  |  Branch (33:35): [True: 0, False: 3.91k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.91k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.91k|    const auto& f =
   40|  3.91k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.91k|    do_basic_run(sv, f);
   42|       |
   43|  3.91k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.91k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.91k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.91k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.91k, False: 0]
  ------------------
   47|  3.91k|        do_basic_run(wsv_transcode, wf);
   48|  3.91k|    }
   49|  3.91k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.91k|{
   25|  3.91k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.91k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.91k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.91k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.91k|{
   25|  3.91k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.91k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.91k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.91k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  7.83k|{
   25|  7.83k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  7.83k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  7.83k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  7.83k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  7.83k|{
   25|  7.83k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  7.83k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  7.83k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  7.83k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.91k|{
   52|  3.91k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.91k|    string_buffer.resize(size);
   56|  3.91k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.91k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.91k|    const auto wsv_reinterpret_size =
   61|  3.91k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 75, False: 3.84k]
  ------------------
   62|  3.91k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.91k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.91k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.91k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.91k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.91k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.91k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.91k|{
  122|  3.91k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.91k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.91k|    buf.resize(sizeof...(Args));
  125|  3.91k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.91k|    return buf;
  127|  3.91k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.91k|{
  108|  3.91k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.91k|        return format_string_view_buffer;
  110|  3.91k|    }
  111|  3.91k|    else {
  112|  3.91k|        return wformat_string_view_buffer;
  113|  3.91k|    }
  114|  3.91k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.91k|{
  185|  3.91k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.91k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.91k|                                   format_strings);
  188|  3.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.91k|{
  133|       |    // Regular scan
  134|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 23.4k, False: 3.91k]
  ------------------
  135|  23.4k|        auto it = scn::ranges::begin(source);
  136|   410k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   410k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   410k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   410k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   410k|            auto result = scn::scan<T>(
  139|   410k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   410k|                scn::runtime_format(f));
  141|   410k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 23.4k, False: 386k]
  ------------------
  142|  23.4k|                break;
  143|  23.4k|            }
  144|   386k|            it = result->begin();
  145|   386k|        }
  146|  23.4k|    }
  147|       |
  148|       |    // scan localized
  149|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 23.4k, False: 3.91k]
  ------------------
  150|  23.4k|        auto it = scn::ranges::begin(source);
  151|   410k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   410k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   410k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   410k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   410k|            auto result = scn::scan<T>(
  154|   410k|                global_locale,
  155|   410k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   410k|                scn::runtime_format(f));
  157|   410k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 23.4k, False: 386k]
  ------------------
  158|  23.4k|                break;
  159|  23.4k|            }
  160|   386k|            it = result->begin();
  161|   386k|        }
  162|  23.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.91k|    {
  166|  3.91k|        auto it = scn::ranges::begin(source);
  167|  89.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  89.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  89.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  89.4k|            auto result = scn::scan_value<T>(
  170|  89.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  89.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.91k, False: 85.5k]
  ------------------
  172|  3.91k|                break;
  173|  3.91k|            }
  174|  85.5k|            it = result->begin();
  175|  85.5k|        }
  176|  3.91k|    }
  177|  3.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.91k|{
  133|       |    // Regular scan
  134|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 23.4k, False: 3.91k]
  ------------------
  135|  23.4k|        auto it = scn::ranges::begin(source);
  136|   441k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   441k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   441k|            auto result = scn::scan<T>(
  139|   441k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   441k|                scn::runtime_format(f));
  141|   441k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 23.4k, False: 418k]
  ------------------
  142|  23.4k|                break;
  143|  23.4k|            }
  144|   418k|            it = result->begin();
  145|   418k|        }
  146|  23.4k|    }
  147|       |
  148|       |    // scan localized
  149|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 23.4k, False: 3.91k]
  ------------------
  150|  23.4k|        auto it = scn::ranges::begin(source);
  151|   441k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   441k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   441k|            auto result = scn::scan<T>(
  154|   441k|                global_locale,
  155|   441k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   441k|                scn::runtime_format(f));
  157|   441k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 23.4k, False: 418k]
  ------------------
  158|  23.4k|                break;
  159|  23.4k|            }
  160|   418k|            it = result->begin();
  161|   418k|        }
  162|  23.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.91k|    {
  166|  3.91k|        auto it = scn::ranges::begin(source);
  167|  98.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  98.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  98.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  98.7k|            auto result = scn::scan_value<T>(
  170|  98.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  98.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.91k, False: 94.8k]
  ------------------
  172|  3.91k|                break;
  173|  3.91k|            }
  174|  94.8k|            it = result->begin();
  175|  94.8k|        }
  176|  3.91k|    }
  177|  3.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.91k|{
  133|       |    // Regular scan
  134|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 23.4k, False: 3.91k]
  ------------------
  135|  23.4k|        auto it = scn::ranges::begin(source);
  136|   446k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   446k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   446k|            auto result = scn::scan<T>(
  139|   446k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   446k|                scn::runtime_format(f));
  141|   446k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 23.4k, False: 423k]
  ------------------
  142|  23.4k|                break;
  143|  23.4k|            }
  144|   423k|            it = result->begin();
  145|   423k|        }
  146|  23.4k|    }
  147|       |
  148|       |    // scan localized
  149|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 23.4k, False: 3.91k]
  ------------------
  150|  23.4k|        auto it = scn::ranges::begin(source);
  151|   446k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   446k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   446k|            auto result = scn::scan<T>(
  154|   446k|                global_locale,
  155|   446k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   446k|                scn::runtime_format(f));
  157|   446k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 23.4k, False: 423k]
  ------------------
  158|  23.4k|                break;
  159|  23.4k|            }
  160|   423k|            it = result->begin();
  161|   423k|        }
  162|  23.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.91k|    {
  166|  3.91k|        auto it = scn::ranges::begin(source);
  167|   100k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   100k|            auto result = scn::scan_value<T>(
  170|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   100k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.91k, False: 96.5k]
  ------------------
  172|  3.91k|                break;
  173|  3.91k|            }
  174|  96.5k|            it = result->begin();
  175|  96.5k|        }
  176|  3.91k|    }
  177|  3.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.91k|{
  133|       |    // Regular scan
  134|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 23.4k, False: 3.91k]
  ------------------
  135|  23.4k|        auto it = scn::ranges::begin(source);
  136|   432k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   432k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   432k|            auto result = scn::scan<T>(
  139|   432k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   432k|                scn::runtime_format(f));
  141|   432k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 23.4k, False: 408k]
  ------------------
  142|  23.4k|                break;
  143|  23.4k|            }
  144|   408k|            it = result->begin();
  145|   408k|        }
  146|  23.4k|    }
  147|       |
  148|       |    // scan localized
  149|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 23.4k, False: 3.91k]
  ------------------
  150|  23.4k|        auto it = scn::ranges::begin(source);
  151|   432k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   432k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   432k|            auto result = scn::scan<T>(
  154|   432k|                global_locale,
  155|   432k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   432k|                scn::runtime_format(f));
  157|   432k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 23.4k, False: 408k]
  ------------------
  158|  23.4k|                break;
  159|  23.4k|            }
  160|   408k|            it = result->begin();
  161|   408k|        }
  162|  23.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.91k|    {
  166|  3.91k|        auto it = scn::ranges::begin(source);
  167|  87.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  87.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  87.2k|            auto result = scn::scan_value<T>(
  170|  87.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  87.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.91k, False: 83.2k]
  ------------------
  172|  3.91k|                break;
  173|  3.91k|            }
  174|  83.2k|            it = result->begin();
  175|  83.2k|        }
  176|  3.91k|    }
  177|  3.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.91k|{
  133|       |    // Regular scan
  134|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 23.4k, False: 3.91k]
  ------------------
  135|  23.4k|        auto it = scn::ranges::begin(source);
  136|   465k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   465k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   465k|            auto result = scn::scan<T>(
  139|   465k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   465k|                scn::runtime_format(f));
  141|   465k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 23.4k, False: 441k]
  ------------------
  142|  23.4k|                break;
  143|  23.4k|            }
  144|   441k|            it = result->begin();
  145|   441k|        }
  146|  23.4k|    }
  147|       |
  148|       |    // scan localized
  149|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 23.4k, False: 3.91k]
  ------------------
  150|  23.4k|        auto it = scn::ranges::begin(source);
  151|   465k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   465k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   465k|            auto result = scn::scan<T>(
  154|   465k|                global_locale,
  155|   465k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   465k|                scn::runtime_format(f));
  157|   465k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 23.4k, False: 441k]
  ------------------
  158|  23.4k|                break;
  159|  23.4k|            }
  160|   441k|            it = result->begin();
  161|   441k|        }
  162|  23.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.91k|    {
  166|  3.91k|        auto it = scn::ranges::begin(source);
  167|  96.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  96.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  96.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  96.0k|            auto result = scn::scan_value<T>(
  170|  96.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  96.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.91k, False: 92.1k]
  ------------------
  172|  3.91k|                break;
  173|  3.91k|            }
  174|  92.1k|            it = result->begin();
  175|  92.1k|        }
  176|  3.91k|    }
  177|  3.91k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.91k|{
  133|       |    // Regular scan
  134|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 23.4k, False: 3.91k]
  ------------------
  135|  23.4k|        auto it = scn::ranges::begin(source);
  136|   470k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   470k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   470k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   470k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   470k|            auto result = scn::scan<T>(
  139|   470k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   470k|                scn::runtime_format(f));
  141|   470k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 23.4k, False: 446k]
  ------------------
  142|  23.4k|                break;
  143|  23.4k|            }
  144|   446k|            it = result->begin();
  145|   446k|        }
  146|  23.4k|    }
  147|       |
  148|       |    // scan localized
  149|  23.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 23.4k, False: 3.91k]
  ------------------
  150|  23.4k|        auto it = scn::ranges::begin(source);
  151|   470k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   470k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   470k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   470k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   470k|            auto result = scn::scan<T>(
  154|   470k|                global_locale,
  155|   470k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   470k|                scn::runtime_format(f));
  157|   470k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 23.4k, False: 446k]
  ------------------
  158|  23.4k|                break;
  159|  23.4k|            }
  160|   446k|            it = result->begin();
  161|   446k|        }
  162|  23.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.91k|    {
  166|  3.91k|        auto it = scn::ranges::begin(source);
  167|  97.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  97.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  97.0k|            auto result = scn::scan_value<T>(
  170|  97.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  97.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.91k, False: 93.1k]
  ------------------
  172|  3.91k|                break;
  173|  3.91k|            }
  174|  93.1k|            it = result->begin();
  175|  93.1k|        }
  176|  3.91k|    }
  177|  3.91k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.91k|{
   90|  3.91k|    using char_type = ranges::range_value_t<Source>;
   91|  3.91k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.91k|    deque.clear();
   93|  3.91k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.91k|              std::back_inserter(deque));
   95|  3.91k|    return deque;
   96|  3.91k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.91k|{
   79|  3.91k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.91k|        return noncontiguous_buffer;
   81|  3.91k|    }
   82|  3.91k|    else {
   83|  3.91k|        return wnoncontiguous_buffer;
   84|  3.91k|    }
   85|  3.91k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.91k|{
  122|  3.91k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.91k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.91k|    buf.resize(sizeof...(Args));
  125|  3.91k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.91k|    return buf;
  127|  3.91k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.91k|{
  108|  3.91k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.91k|        return format_string_view_buffer;
  110|  3.91k|    }
  111|  3.91k|    else {
  112|  3.91k|        return wformat_string_view_buffer;
  113|  3.91k|    }
  114|  3.91k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  7.83k|{
  185|  7.83k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  7.83k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  7.83k|                                   format_strings);
  188|  7.83k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  7.83k|{
  133|       |    // Regular scan
  134|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 46.9k, False: 7.83k]
  ------------------
  135|  46.9k|        auto it = scn::ranges::begin(source);
  136|  67.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  67.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  67.3k|            auto result = scn::scan<T>(
  139|  67.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  67.3k|                scn::runtime_format(f));
  141|  67.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 46.9k, False: 20.3k]
  ------------------
  142|  46.9k|                break;
  143|  46.9k|            }
  144|  20.3k|            it = result->begin();
  145|  20.3k|        }
  146|  46.9k|    }
  147|       |
  148|       |    // scan localized
  149|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 46.9k, False: 7.83k]
  ------------------
  150|  46.9k|        auto it = scn::ranges::begin(source);
  151|  67.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  67.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  67.3k|            auto result = scn::scan<T>(
  154|  67.3k|                global_locale,
  155|  67.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  67.3k|                scn::runtime_format(f));
  157|  67.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 46.9k, False: 20.3k]
  ------------------
  158|  46.9k|                break;
  159|  46.9k|            }
  160|  20.3k|            it = result->begin();
  161|  20.3k|        }
  162|  46.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.83k|    {
  166|  7.83k|        auto it = scn::ranges::begin(source);
  167|  11.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.8k|            auto result = scn::scan_value<T>(
  170|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.83k, False: 4.00k]
  ------------------
  172|  7.83k|                break;
  173|  7.83k|            }
  174|  4.00k|            it = result->begin();
  175|  4.00k|        }
  176|  7.83k|    }
  177|  7.83k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  7.83k|{
  133|       |    // Regular scan
  134|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 46.9k, False: 7.83k]
  ------------------
  135|  46.9k|        auto it = scn::ranges::begin(source);
  136|  67.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  67.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  67.4k|            auto result = scn::scan<T>(
  139|  67.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  67.4k|                scn::runtime_format(f));
  141|  67.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 46.9k, False: 20.4k]
  ------------------
  142|  46.9k|                break;
  143|  46.9k|            }
  144|  20.4k|            it = result->begin();
  145|  20.4k|        }
  146|  46.9k|    }
  147|       |
  148|       |    // scan localized
  149|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 46.9k, False: 7.83k]
  ------------------
  150|  46.9k|        auto it = scn::ranges::begin(source);
  151|  67.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  67.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  67.4k|            auto result = scn::scan<T>(
  154|  67.4k|                global_locale,
  155|  67.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  67.4k|                scn::runtime_format(f));
  157|  67.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 46.9k, False: 20.4k]
  ------------------
  158|  46.9k|                break;
  159|  46.9k|            }
  160|  20.4k|            it = result->begin();
  161|  20.4k|        }
  162|  46.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.83k|    {
  166|  7.83k|        auto it = scn::ranges::begin(source);
  167|  11.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.8k|            auto result = scn::scan_value<T>(
  170|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.83k, False: 4.05k]
  ------------------
  172|  7.83k|                break;
  173|  7.83k|            }
  174|  4.05k|            it = result->begin();
  175|  4.05k|        }
  176|  7.83k|    }
  177|  7.83k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  7.83k|{
  133|       |    // Regular scan
  134|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 46.9k, False: 7.83k]
  ------------------
  135|  46.9k|        auto it = scn::ranges::begin(source);
  136|  67.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  67.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  67.7k|            auto result = scn::scan<T>(
  139|  67.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  67.7k|                scn::runtime_format(f));
  141|  67.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 46.9k, False: 20.8k]
  ------------------
  142|  46.9k|                break;
  143|  46.9k|            }
  144|  20.8k|            it = result->begin();
  145|  20.8k|        }
  146|  46.9k|    }
  147|       |
  148|       |    // scan localized
  149|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 46.9k, False: 7.83k]
  ------------------
  150|  46.9k|        auto it = scn::ranges::begin(source);
  151|  67.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  67.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  67.7k|            auto result = scn::scan<T>(
  154|  67.7k|                global_locale,
  155|  67.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  67.7k|                scn::runtime_format(f));
  157|  67.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 46.9k, False: 20.8k]
  ------------------
  158|  46.9k|                break;
  159|  46.9k|            }
  160|  20.8k|            it = result->begin();
  161|  20.8k|        }
  162|  46.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.83k|    {
  166|  7.83k|        auto it = scn::ranges::begin(source);
  167|  11.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.9k|            auto result = scn::scan_value<T>(
  170|  11.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.83k, False: 4.14k]
  ------------------
  172|  7.83k|                break;
  173|  7.83k|            }
  174|  4.14k|            it = result->begin();
  175|  4.14k|        }
  176|  7.83k|    }
  177|  7.83k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  7.83k|{
  133|       |    // Regular scan
  134|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 46.9k, False: 7.83k]
  ------------------
  135|  46.9k|        auto it = scn::ranges::begin(source);
  136|  67.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  67.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  67.2k|            auto result = scn::scan<T>(
  139|  67.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  67.2k|                scn::runtime_format(f));
  141|  67.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 46.9k, False: 20.2k]
  ------------------
  142|  46.9k|                break;
  143|  46.9k|            }
  144|  20.2k|            it = result->begin();
  145|  20.2k|        }
  146|  46.9k|    }
  147|       |
  148|       |    // scan localized
  149|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 46.9k, False: 7.83k]
  ------------------
  150|  46.9k|        auto it = scn::ranges::begin(source);
  151|  67.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  67.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  67.2k|            auto result = scn::scan<T>(
  154|  67.2k|                global_locale,
  155|  67.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  67.2k|                scn::runtime_format(f));
  157|  67.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 46.9k, False: 20.2k]
  ------------------
  158|  46.9k|                break;
  159|  46.9k|            }
  160|  20.2k|            it = result->begin();
  161|  20.2k|        }
  162|  46.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.83k|    {
  166|  7.83k|        auto it = scn::ranges::begin(source);
  167|  11.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.8k|            auto result = scn::scan_value<T>(
  170|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.83k, False: 3.98k]
  ------------------
  172|  7.83k|                break;
  173|  7.83k|            }
  174|  3.98k|            it = result->begin();
  175|  3.98k|        }
  176|  7.83k|    }
  177|  7.83k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  7.83k|{
  133|       |    // Regular scan
  134|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 46.9k, False: 7.83k]
  ------------------
  135|  46.9k|        auto it = scn::ranges::begin(source);
  136|  67.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  67.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  67.4k|            auto result = scn::scan<T>(
  139|  67.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  67.4k|                scn::runtime_format(f));
  141|  67.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 46.9k, False: 20.4k]
  ------------------
  142|  46.9k|                break;
  143|  46.9k|            }
  144|  20.4k|            it = result->begin();
  145|  20.4k|        }
  146|  46.9k|    }
  147|       |
  148|       |    // scan localized
  149|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 46.9k, False: 7.83k]
  ------------------
  150|  46.9k|        auto it = scn::ranges::begin(source);
  151|  67.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  67.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  67.4k|            auto result = scn::scan<T>(
  154|  67.4k|                global_locale,
  155|  67.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  67.4k|                scn::runtime_format(f));
  157|  67.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 46.9k, False: 20.4k]
  ------------------
  158|  46.9k|                break;
  159|  46.9k|            }
  160|  20.4k|            it = result->begin();
  161|  20.4k|        }
  162|  46.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.83k|    {
  166|  7.83k|        auto it = scn::ranges::begin(source);
  167|  11.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.8k|            auto result = scn::scan_value<T>(
  170|  11.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.83k, False: 4.03k]
  ------------------
  172|  7.83k|                break;
  173|  7.83k|            }
  174|  4.03k|            it = result->begin();
  175|  4.03k|        }
  176|  7.83k|    }
  177|  7.83k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  7.83k|{
  133|       |    // Regular scan
  134|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 46.9k, False: 7.83k]
  ------------------
  135|  46.9k|        auto it = scn::ranges::begin(source);
  136|  67.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  67.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  67.7k|            auto result = scn::scan<T>(
  139|  67.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  67.7k|                scn::runtime_format(f));
  141|  67.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 46.9k, False: 20.7k]
  ------------------
  142|  46.9k|                break;
  143|  46.9k|            }
  144|  20.7k|            it = result->begin();
  145|  20.7k|        }
  146|  46.9k|    }
  147|       |
  148|       |    // scan localized
  149|  46.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 46.9k, False: 7.83k]
  ------------------
  150|  46.9k|        auto it = scn::ranges::begin(source);
  151|  67.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  67.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  67.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  67.7k|            auto result = scn::scan<T>(
  154|  67.7k|                global_locale,
  155|  67.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  67.7k|                scn::runtime_format(f));
  157|  67.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 46.9k, False: 20.7k]
  ------------------
  158|  46.9k|                break;
  159|  46.9k|            }
  160|  20.7k|            it = result->begin();
  161|  20.7k|        }
  162|  46.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.83k|    {
  166|  7.83k|        auto it = scn::ranges::begin(source);
  167|  11.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.9k|            auto result = scn::scan_value<T>(
  170|  11.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.83k, False: 4.13k]
  ------------------
  172|  7.83k|                break;
  173|  7.83k|            }
  174|  4.13k|            it = result->begin();
  175|  4.13k|        }
  176|  7.83k|    }
  177|  7.83k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  7.83k|{
   90|  7.83k|    using char_type = ranges::range_value_t<Source>;
   91|  7.83k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  7.83k|    deque.clear();
   93|  7.83k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  7.83k|              std::back_inserter(deque));
   95|  7.83k|    return deque;
   96|  7.83k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  7.83k|{
   79|  7.83k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  7.83k|        return noncontiguous_buffer;
   81|  7.83k|    }
   82|  7.83k|    else {
   83|  7.83k|        return wnoncontiguous_buffer;
   84|  7.83k|    }
   85|  7.83k|}

