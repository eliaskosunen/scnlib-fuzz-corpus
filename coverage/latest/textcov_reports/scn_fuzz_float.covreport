_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.42M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.42M|  chars_format const fmt = options.format;
  277|  1.42M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.42M|  parsed_number_string_t<UC> answer;
  280|  1.42M|  answer.valid = false;
  281|  1.42M|  answer.too_many_digits = false;
  282|  1.42M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.42M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.42M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.42M|  UC const * const start_digits = p;
  303|       |
  304|  1.42M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  8.10M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 7.37M, False: 723k]
  |  Branch (306:25): [True: 6.67M, False: 702k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  6.67M|    i = 10 * i +
  310|  6.67M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  6.67M|    ++p;
  312|  6.67M|  }
  313|  1.42M|  UC const * const end_of_integer_part = p;
  314|  1.42M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.42M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.42M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.42M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.42M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.42M|  int64_t exponent = 0;
  324|  1.42M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 702k, False: 723k]
  |  Branch (324:49): [True: 269k, False: 432k]
  ------------------
  325|  1.42M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 269k, False: 1.15M]
  ------------------
  326|   269k|    ++p;
  327|   269k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   269k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.10M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 933k, False: 171k]
  |  Branch (332:27): [True: 835k, False: 98.5k]
  ------------------
  333|   835k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   835k|      ++p;
  335|   835k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   835k|    }
  337|   269k|    exponent = before - p;
  338|   269k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   269k|    digit_count -= exponent;
  340|   269k|  }
  341|  1.42M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.42M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.42M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.42M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.42M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.42M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.42M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.22M, False: 203k]
  ------------------
  352|  1.42M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 531k, False: 691k]
  ------------------
  353|  1.42M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 106k, False: 424k]
  |  Branch (353:29): [True: 66.2k, False: 358k]
  ------------------
  354|  1.42M|       ||
  355|  1.42M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.25M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.25M]
  ------------------
  356|  1.25M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.25M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   172k|    UC const * location_of_e = p;
  359|   172k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 106k, False: 66.2k]
  |  Branch (359:28): [True: 66.2k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   172k|      ++p;
  361|   172k|    }
  362|   172k|    bool neg_exp = false;
  363|   172k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 172k, False: 125]
  |  Branch (363:24): [True: 11.7k, False: 161k]
  ------------------
  364|  11.7k|      neg_exp = true;
  365|  11.7k|      ++p;
  366|   161k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 161k, False: 125]
  |  Branch (366:31): [True: 41.3k, False: 119k]
  ------------------
  367|  41.3k|      ++p;
  368|  41.3k|    }
  369|   172k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 172k]
  |  Branch (369:24): [True: 680, False: 172k]
  ------------------
  370|    855|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 855]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    855|      p = location_of_e;
  376|   172k|    } else {
  377|   547k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 420k, False: 127k]
  |  Branch (377:29): [True: 375k, False: 45.0k]
  ------------------
  378|   375k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   375k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 344k, False: 31.3k]
  ------------------
  380|   344k|          exp_number = 10 * exp_number + digit;
  381|   344k|        }
  382|   375k|        ++p;
  383|   375k|      }
  384|   172k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 11.7k, False: 160k]
  ------------------
  385|   172k|      exponent += exp_number;
  386|   172k|    }
  387|  1.25M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.25M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.05M, False: 203k]
  |  Branch (389:44): [True: 0, False: 1.05M]
  ------------------
  390|  1.25M|  }
  391|  1.42M|  answer.lastmatch = p;
  392|  1.42M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.42M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 254k, False: 1.17M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   254k|    UC const * start = start_digits;
  405|  1.05M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.05M, False: 2.23k]
  |  Branch (405:32): [True: 789k, False: 262k]
  |  Branch (405:53): [True: 10.2k, False: 252k]
  ------------------
  406|   799k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 789k, False: 10.2k]
  ------------------
  407|   799k|      start++;
  408|   799k|    }
  409|       |
  410|   254k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 240k, False: 14.4k]
  ------------------
  411|   240k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   240k|      i = 0;
  416|   240k|      p = answer.integer.ptr;
  417|   240k|      UC const* int_end = p + answer.integer.len();
  418|   240k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.72M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.64M, False: 75.6k]
  |  Branch (419:54): [True: 2.48M, False: 164k]
  ------------------
  420|  2.48M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.48M|        ++p;
  422|  2.48M|      }
  423|   240k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 75.6k, False: 164k]
  ------------------
  424|  75.6k|        exponent = end_of_integer_part - p + exp_number;
  425|  75.6k|      }
  426|   164k|      else { // We have a value with a fractional component.
  427|   164k|        p = answer.fraction.ptr;
  428|   164k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.80M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.64M, False: 164k]
  |  Branch (429:56): [True: 2.64M, False: 0]
  ------------------
  430|  2.64M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.64M|          ++p;
  432|  2.64M|        }
  433|   164k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   164k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   240k|    }
  437|   254k|  }
  438|  1.42M|  answer.exponent = exponent;
  439|  1.42M|  answer.mantissa = i;
  440|  1.42M|  return answer;
  441|  1.42M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  8.90M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  8.90M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 198k, False: 8.70M]
  |  Branch (36:27): [True: 647k, False: 8.05M]
  ------------------
   37|  8.90M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   269k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   948k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 759k, False: 189k]
  |  Branch (249:43): [True: 678k, False: 80.4k]
  ------------------
  250|   678k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   678k|    p += 8;
  252|   678k|  }
  253|   269k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   759k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   759k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   759k|     0x8080808080808080));
  172|   759k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.72M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.72M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.72M|  uint64_t val;
   63|  1.72M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.72M|  return val;
   69|  1.72M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   962k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   962k|  const uint64_t mask = 0x000000FF000000FF;
  148|   962k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   962k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   962k|  val -= 0x3030303030303030;
  151|   962k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   962k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   962k|  return uint32_t(val);
  154|   962k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   283k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   283k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   283k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   283k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   283k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   587k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   587k|  chars_format const fmt = options.format;
  277|   587k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   587k|  parsed_number_string_t<UC> answer;
  280|   587k|  answer.valid = false;
  281|   587k|  answer.too_many_digits = false;
  282|   587k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   587k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 587k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   587k|  UC const * const start_digits = p;
  303|       |
  304|   587k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  1.25M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 862k, False: 397k]
  |  Branch (306:25): [True: 672k, False: 189k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   672k|    i = 10 * i +
  310|   672k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   672k|    ++p;
  312|   672k|  }
  313|   587k|  UC const * const end_of_integer_part = p;
  314|   587k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   587k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   587k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   587k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 587k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   587k|  int64_t exponent = 0;
  324|   587k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 189k, False: 397k]
  |  Branch (324:49): [True: 2.73k, False: 187k]
  ------------------
  325|   587k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 2.73k, False: 585k]
  ------------------
  326|  2.73k|    ++p;
  327|  2.73k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  2.73k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  18.1k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 16.3k, False: 1.80k]
  |  Branch (332:27): [True: 15.4k, False: 932]
  ------------------
  333|  15.4k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  15.4k|      ++p;
  335|  15.4k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  15.4k|    }
  337|  2.73k|    exponent = before - p;
  338|  2.73k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  2.73k|    digit_count -= exponent;
  340|  2.73k|  }
  341|   587k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   587k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 587k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   587k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 587k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   587k|  int64_t exp_number = 0;            // explicit exponential part
  351|   587k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 480k, False: 106k]
  ------------------
  352|   587k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 188k, False: 292k]
  ------------------
  353|   587k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 379, False: 187k]
  |  Branch (353:29): [True: 19.5k, False: 168k]
  ------------------
  354|   587k|       ||
  355|   587k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   567k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 567k]
  ------------------
  356|   567k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   567k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  19.9k|    UC const * location_of_e = p;
  359|  19.9k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 379, False: 19.5k]
  |  Branch (359:28): [True: 19.5k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  19.9k|      ++p;
  361|  19.9k|    }
  362|  19.9k|    bool neg_exp = false;
  363|  19.9k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 19.9k, False: 30]
  |  Branch (363:24): [True: 5.42k, False: 14.4k]
  ------------------
  364|  5.42k|      neg_exp = true;
  365|  5.42k|      ++p;
  366|  14.5k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 14.4k, False: 30]
  |  Branch (366:31): [True: 331, False: 14.1k]
  ------------------
  367|    331|      ++p;
  368|    331|    }
  369|  19.9k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 40, False: 19.9k]
  |  Branch (369:24): [True: 530, False: 19.3k]
  ------------------
  370|    570|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 570]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    570|      p = location_of_e;
  376|  19.3k|    } else {
  377|  71.5k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 58.2k, False: 13.2k]
  |  Branch (377:29): [True: 52.1k, False: 6.08k]
  ------------------
  378|  52.1k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  52.1k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 49.0k, False: 3.08k]
  ------------------
  380|  49.0k|          exp_number = 10 * exp_number + digit;
  381|  49.0k|        }
  382|  52.1k|        ++p;
  383|  52.1k|      }
  384|  19.3k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 5.38k, False: 13.9k]
  ------------------
  385|  19.3k|      exponent += exp_number;
  386|  19.3k|    }
  387|   567k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   567k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 461k, False: 106k]
  |  Branch (389:44): [True: 0, False: 461k]
  ------------------
  390|   567k|  }
  391|   587k|  answer.lastmatch = p;
  392|   587k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   587k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 1.42k, False: 586k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  1.42k|    UC const * start = start_digits;
  405|  1.92k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.92k, False: 0]
  |  Branch (405:32): [True: 500, False: 1.42k]
  |  Branch (405:53): [True: 0, False: 1.42k]
  ------------------
  406|    500|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 500, False: 0]
  ------------------
  407|    500|      start++;
  408|    500|    }
  409|       |
  410|  1.42k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 1.15k, False: 272]
  ------------------
  411|  1.15k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  1.15k|      i = 0;
  416|  1.15k|      p = answer.integer.ptr;
  417|  1.15k|      UC const* int_end = p + answer.integer.len();
  418|  1.15k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  17.4k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 16.7k, False: 652]
  |  Branch (419:54): [True: 16.2k, False: 504]
  ------------------
  420|  16.2k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  16.2k|        ++p;
  422|  16.2k|      }
  423|  1.15k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 652, False: 504]
  ------------------
  424|    652|        exponent = end_of_integer_part - p + exp_number;
  425|    652|      }
  426|    504|      else { // We have a value with a fractional component.
  427|    504|        p = answer.fraction.ptr;
  428|    504|        UC const* frac_end = p + answer.fraction.len();
  429|  6.30k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 5.79k, False: 504]
  |  Branch (429:56): [True: 5.79k, False: 0]
  ------------------
  430|  5.79k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  5.79k|          ++p;
  432|  5.79k|        }
  433|    504|        exponent = answer.fraction.ptr - p + exp_number;
  434|    504|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  1.15k|    }
  437|  1.42k|  }
  438|   587k|  answer.exponent = exponent;
  439|   587k|  answer.mantissa = i;
  440|   587k|  return answer;
  441|   587k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   956k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   956k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 193k, False: 763k]
  |  Branch (36:27): [True: 4.04k, False: 759k]
  ------------------
   37|   956k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  2.73k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  2.73k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  2.73k|    return;
  240|  2.73k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|    108|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|    108|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|    108|uint64_t read8_to_u64(const UC *chars) {
   54|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|    108|    uint64_t val = 0;
   56|    972|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 864, False: 108]
  ------------------
   57|    864|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|    864|      ++chars;
   59|    864|    }
   60|    108|    return val;
   61|    108|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|    108|}

_ZN10fast_float6bigintC2Ev:
  412|  77.1k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   162k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   254k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   254k|    return small_mul(vec, y);
  565|   254k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   372k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   372k|  limb carry = 0;
  284|  1.38M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.01M, False: 372k]
  ------------------
  285|  1.01M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.01M|  }
  287|   372k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 212k, False: 160k]
  ------------------
  288|   212k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   212k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 212k]
  |  |  ------------------
  ------------------
  289|   212k|  }
  290|   372k|  return true;
  291|   372k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.75M|  constexpr size_t len() const noexcept {
   77|  2.75M|    return length;
   78|  2.75M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.01M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.01M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.01M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.01M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.01M|  carry = limb(z >> limb_bits);
  235|  1.01M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.01M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.82M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.82M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.82M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.82M|    return data[index];
   60|  2.82M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   307k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   307k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 307k, False: 0]
  ------------------
   93|   307k|      push_unchecked(value);
   94|   307k|      return true;
   95|   307k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   307k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   349k|  constexpr size_t capacity() const noexcept {
   83|   349k|    return size;
   84|   349k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   377k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   377k|    data[length] = value;
   88|   377k|    length++;
   89|   377k|  }
_ZN10fast_float6bigint3addEm:
  567|   254k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   254k|    return small_add(vec, y);
  569|   254k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   254k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   254k|  return small_add_from(vec, y, 0);
  277|   254k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   254k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   254k|  size_t index = start;
  259|   254k|  limb carry = y;
  260|   254k|  bool overflow;
  261|   389k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 211k, False: 177k]
  |  Branch (261:24): [True: 134k, False: 77.1k]
  ------------------
  262|   134k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   134k|    carry = limb(overflow);
  264|   134k|    index += 1;
  265|   134k|  }
  266|   254k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 77.1k, False: 177k]
  ------------------
  267|  77.1k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  77.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 77.1k]
  |  |  ------------------
  ------------------
  268|  77.1k|  }
  269|   254k|  return true;
  270|   254k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   285k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   285k|  limb z;
  211|       |// gcc and clang
  212|   285k|#if defined(__has_builtin)
  213|   285k|  #if __has_builtin(__builtin_add_overflow)
  214|   285k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   285k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   285k|      return z;
  217|   285k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   285k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  6.69k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  6.69k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  6.69k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.69k]
  |  |  ------------------
  ------------------
  611|  6.69k|    return pow2(exp);
  612|  6.69k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  77.1k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  77.1k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  77.1k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  80.9k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.72k, False: 77.1k]
  ------------------
  582|  3.72k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.72k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.72k]
  |  |  ------------------
  ------------------
  583|  3.72k|      exp -= large_step;
  584|  3.72k|    }
  585|  77.1k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  77.1k|    uint32_t small_step = 27;
  587|  77.1k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   110k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 33.3k, False: 77.1k]
  ------------------
  593|  33.3k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  33.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 33.3k]
  |  |  ------------------
  ------------------
  594|  33.3k|      exp -= small_step;
  595|  33.3k|    }
  596|  77.1k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 66.1k, False: 11.0k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  66.1k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  66.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 66.1k]
  |  |  ------------------
  ------------------
  601|  66.1k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  66.1k|      );
  603|  66.1k|    }
  604|       |
  605|  77.1k|    return true;
  606|  77.1k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.72k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.72k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.72k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.72k|  } else {
  368|  3.72k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.72k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.72k]
  |  |  ------------------
  ------------------
  369|  3.72k|  }
  370|  3.72k|  return true;
  371|  3.72k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.72k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.72k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.72k|  stackvec<size> z(xs);
  338|  3.72k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.72k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.72k, False: 0]
  ------------------
  341|  3.72k|    limb y0 = y[0];
  342|  3.72k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.72k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.72k]
  |  |  ------------------
  ------------------
  343|  18.6k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 14.9k, False: 3.72k]
  ------------------
  344|  14.9k|      limb yi = y[index];
  345|  14.9k|      stackvec<size> zi;
  346|  14.9k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 14.9k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  14.9k|        zi.set_len(0);
  349|  14.9k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  14.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
  350|  14.9k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  14.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
  351|  14.9k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  14.9k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  14.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
  353|  14.9k|      }
  354|  14.9k|    }
  355|  3.72k|  }
  356|       |
  357|  3.72k|  x.normalize();
  358|  3.72k|  return true;
  359|  3.72k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.72k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.72k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.72k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.72k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  56.8k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  56.8k|    length = uint16_t(len);
   75|  56.8k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  18.6k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  18.6k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 18.6k, False: 0]
  ------------------
  108|  18.6k|      extend_unchecked(s);
  109|  18.6k|      return true;
  110|  18.6k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  18.6k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  18.6k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  18.6k|    limb* ptr = data + length;
  102|  18.6k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  18.6k|    set_len(len() + s.len());
  104|  18.6k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  14.9k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  14.9k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 14.9k]
  |  Branch (300:26): [True: 14.6k, False: 229]
  ------------------
  301|  14.6k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  14.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.6k]
  |  |  ------------------
  ------------------
  302|  14.6k|  }
  303|       |
  304|  14.9k|  bool carry = false;
  305|   124k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 109k, False: 14.9k]
  ------------------
  306|   109k|    limb xi = x[index + start];
  307|   109k|    limb yi = y[index];
  308|   109k|    bool c1 = false;
  309|   109k|    bool c2 = false;
  310|   109k|    xi = scalar_add(xi, yi, c1);
  311|   109k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 41.1k, False: 68.2k]
  ------------------
  312|  41.1k|      xi = scalar_add(xi, 1, c2);
  313|  41.1k|    }
  314|   109k|    x[index + start] = xi;
  315|   109k|    carry = c1 | c2;
  316|   109k|  }
  317|       |
  318|       |  // handle overflow
  319|  14.9k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 14.9k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  14.9k|  return true;
  323|  14.9k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  14.6k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  14.6k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 14.6k]
  ------------------
  132|      0|      return false;
  133|  14.6k|    } else {
  134|  14.6k|      resize_unchecked(new_len, value);
  135|  14.6k|      return true;
  136|  14.6k|    }
  137|  14.6k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  14.6k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  14.6k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 14.6k, False: 0]
  ------------------
  120|  14.6k|      size_t count = new_len - len();
  121|  14.6k|      limb* first = data + len();
  122|  14.6k|      limb* last = first + count;
  123|  14.6k|      ::std::fill(first, last, value);
  124|  14.6k|      set_len(new_len);
  125|  14.6k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  14.6k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  74.2k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  74.2k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 74.2k, False: 0]
  |  Branch (152:25): [True: 0, False: 74.2k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  74.2k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  93.6k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  93.6k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  93.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  93.6k|    size_t rindex = length - index - 1;
   69|  93.6k|    return data[rindex];
   70|  93.6k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  77.0k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  77.0k|    return shl(exp);
  574|  77.0k|  }
_ZN10fast_float6bigint3shlEm:
  530|  77.0k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  77.0k|    size_t rem = n % limb_bits;
  532|  77.0k|    size_t div = n / limb_bits;
  533|  77.0k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 70.5k, False: 6.51k]
  ------------------
  534|  70.5k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  70.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 70.5k]
  |  |  ------------------
  ------------------
  535|  70.5k|    }
  536|  77.0k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 8.56k, False: 68.5k]
  ------------------
  537|  8.56k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  8.56k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.56k]
  |  |  ------------------
  ------------------
  538|  8.56k|    }
  539|  77.0k|    return true;
  540|  77.0k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  70.5k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  70.5k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  70.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  70.5k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  70.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  70.5k|    size_t shl = n;
  493|  70.5k|    size_t shr = limb_bits - shl;
  494|  70.5k|    limb prev = 0;
  495|   227k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 157k, False: 70.5k]
  ------------------
  496|   157k|      limb xi = vec[index];
  497|   157k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   157k|      prev = xi;
  499|   157k|    }
  500|       |
  501|  70.5k|    limb carry = prev >> shr;
  502|  70.5k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 17.8k, False: 52.7k]
  ------------------
  503|  17.8k|      return vec.try_push(carry);
  504|  17.8k|    }
  505|  52.7k|    return true;
  506|  70.5k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  8.56k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  8.56k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  8.56k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  8.56k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 8.56k]
  ------------------
  512|      0|      return false;
  513|  8.56k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 8.56k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  8.56k|      limb* dst = vec.data + n;
  516|  8.56k|      const limb* src = vec.data;
  517|  8.56k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  8.56k|      limb* first = vec.data;
  520|  8.56k|      limb* last = first + n;
  521|  8.56k|      ::std::fill(first, last, 0);
  522|  8.56k|      vec.set_len(n + vec.len());
  523|  8.56k|      return true;
  524|  8.56k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  8.56k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  15.2k|  constexpr bool is_empty() const noexcept {
   80|  15.2k|    return length == 0;
   81|  15.2k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  6.69k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  6.69k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  6.69k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 6.69k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  6.69k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.15k, False: 5.54k]
  ------------------
  435|  1.15k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  5.54k|    } else {
  437|  5.54k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  5.54k|      truncated |= vec.nonzero(2);
  439|  5.54k|      return result;
  440|  5.54k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  6.69k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.15k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.15k|  truncated = false;
  167|  1.15k|  int shl = leading_zeroes(r0);
  168|  1.15k|  return r0 << shl;
  169|  1.15k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  5.54k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  5.54k|  int shl = leading_zeroes(r0);
  174|  5.54k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 5.50k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  5.50k|  } else {
  178|  5.50k|    int shr = 64 - shl;
  179|  5.50k|    truncated = (r1 << shl) != 0;
  180|  5.50k|    return (r0 << shl) | (r1 >> shr);
  181|  5.50k|  }
  182|  5.54k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  5.54k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  5.58k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 518, False: 5.06k]
  ------------------
  143|    518|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 478, False: 40]
  ------------------
  144|    478|        return true;
  145|    478|      }
  146|     40|      index++;
  147|     40|    }
  148|  5.06k|    return false;
  149|  5.54k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  6.69k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  6.69k|    int lz = ctlz();
  560|  6.69k|    return int(limb_bits * vec.len()) - lz;
  561|  6.69k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  6.69k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  6.69k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 6.69k]
  ------------------
  545|      0|      return 0;
  546|  6.69k|    } else {
  547|  6.69k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  6.69k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  6.69k|    }
  555|  6.69k|  }
_ZN10fast_float6bigintC2Em:
  418|  70.5k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  70.5k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  70.5k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  70.5k|    vec.normalize();
  426|  70.5k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  70.5k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  70.5k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 70.5k]
  ------------------
  464|      0|      return 1;
  465|  70.5k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 70.5k]
  ------------------
  466|      0|      return -1;
  467|  70.5k|    } else {
  468|   137k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 133k, False: 4.41k]
  ------------------
  469|   133k|        limb xi = vec[index - 1];
  470|   133k|        limb yi = other.vec[index - 1];
  471|   133k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 15.1k, False: 118k]
  ------------------
  472|  15.1k|          return 1;
  473|   118k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 50.9k, False: 67.3k]
  ------------------
  474|  50.9k|          return -1;
  475|  50.9k|        }
  476|   133k|      }
  477|  4.41k|      return 0;
  478|  70.5k|    }
  479|  70.5k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   266k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   266k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   266k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   266k|    return data[index];
   64|   266k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   331k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   331k|  adjusted_mantissa answer;
   96|   331k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.09k, False: 326k]
  |  Branch (96:19): [True: 1.69k, False: 324k]
  ------------------
   97|  6.79k|    answer.power2 = 0;
   98|  6.79k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  6.79k|    return answer;
  101|  6.79k|  }
  102|   324k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 9.57k, False: 314k]
  ------------------
  103|       |    // we want to get infinity:
  104|  9.57k|    answer.power2 = binary::infinite_power();
  105|  9.57k|    answer.mantissa = 0;
  106|  9.57k|    return answer;
  107|  9.57k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   314k|  int lz = leading_zeroes(w);
  112|   314k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   314k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   314k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   314k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   314k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   314k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.46k, False: 313k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.46k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 1.37k]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.37k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.37k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.37k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.37k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.37k, False: 0]
  ------------------
  156|  1.37k|    return answer;
  157|  1.46k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   313k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 117k, False: 196k]
  |  Branch (162:30): [True: 114k, False: 2.71k]
  |  Branch (162:77): [True: 106k, False: 8.05k]
  ------------------
  163|   313k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 11.4k, False: 94.8k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  11.4k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.67k, False: 6.74k]
  ------------------
  168|  4.67k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.67k|    }
  170|  11.4k|  }
  171|       |
  172|   313k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   313k|  answer.mantissa >>= 1;
  174|   313k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 25.9k, False: 287k]
  ------------------
  175|  25.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  25.9k|    answer.power2++; // undo previous addition
  177|  25.9k|  }
  178|       |
  179|   313k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   313k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.26k, False: 312k]
  ------------------
  181|  1.26k|    answer.power2 = binary::infinite_power();
  182|  1.26k|    answer.mantissa = 0;
  183|  1.26k|  }
  184|   313k|  return answer;
  185|   314k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   349k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   349k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   349k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   349k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   349k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   349k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   349k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 65.5k, False: 283k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  65.5k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  65.5k|    firstproduct.low += secondproduct.high;
   35|  65.5k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 47.3k, False: 18.2k]
  ------------------
   36|  47.3k|      firstproduct.high++;
   37|  47.3k|    }
   38|  65.5k|  }
   39|   349k|  return firstproduct;
   40|   349k|}
_ZN10fast_float6detail5powerEi:
   58|   681k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   681k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   681k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  34.5k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  34.5k|  int lz = leading_zeroes(w);
   82|  34.5k|  w <<= lz;
   83|  34.5k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  34.5k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  34.5k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  34.5k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  34.5k|  int hilz = int(w >> 63) ^ 1;
   69|  34.5k|  adjusted_mantissa answer;
   70|  34.5k|  answer.mantissa = w << hilz;
   71|  34.5k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  34.5k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  34.5k|  return answer;
   74|  34.5k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   299k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   299k|  adjusted_mantissa answer;
   96|   299k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.80k, False: 294k]
  |  Branch (96:19): [True: 485, False: 294k]
  ------------------
   97|  5.29k|    answer.power2 = 0;
   98|  5.29k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.29k|    return answer;
  101|  5.29k|  }
  102|   294k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.77k, False: 289k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.77k|    answer.power2 = binary::infinite_power();
  105|  4.77k|    answer.mantissa = 0;
  106|  4.77k|    return answer;
  107|  4.77k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   289k|  int lz = leading_zeroes(w);
  112|   289k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   289k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   289k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   289k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   289k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   289k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 5.85k, False: 283k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  5.85k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 104, False: 5.74k]
  ------------------
  137|    104|      answer.power2 = 0;
  138|    104|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    104|      return answer;
  141|    104|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  5.74k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  5.74k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  5.74k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  5.74k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 5.74k, False: 0]
  ------------------
  156|  5.74k|    return answer;
  157|  5.85k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   283k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 92.9k, False: 190k]
  |  Branch (162:30): [True: 53.9k, False: 38.9k]
  |  Branch (162:77): [True: 47.4k, False: 6.53k]
  ------------------
  163|   283k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 8.84k, False: 38.5k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  8.84k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 7.12k, False: 1.72k]
  ------------------
  168|  7.12k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  7.12k|    }
  170|  8.84k|  }
  171|       |
  172|   283k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   283k|  answer.mantissa >>= 1;
  174|   283k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 25.3k, False: 258k]
  ------------------
  175|  25.3k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  25.3k|    answer.power2++; // undo previous addition
  177|  25.3k|  }
  178|       |
  179|   283k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   283k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 352, False: 283k]
  ------------------
  181|    352|    answer.power2 = binary::infinite_power();
  182|    352|    answer.mantissa = 0;
  183|    352|  }
  184|   283k|  return answer;
  185|   289k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   331k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   331k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   331k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   331k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   331k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   331k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   331k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 119k, False: 212k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   119k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   119k|    firstproduct.low += secondproduct.high;
   35|   119k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 42.2k, False: 77.1k]
  ------------------
   36|  42.2k|      firstproduct.high++;
   37|  42.2k|    }
   38|   119k|  }
   39|   331k|  return firstproduct;
   40|   331k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  42.6k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  42.6k|  int lz = leading_zeroes(w);
   82|  42.6k|  w <<= lz;
   83|  42.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  42.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  42.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  42.6k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  42.6k|  int hilz = int(w >> 63) ^ 1;
   69|  42.6k|  adjusted_mantissa answer;
   70|  42.6k|  answer.mantissa = w << hilz;
   71|  42.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  42.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  42.6k|  return answer;
   74|  42.6k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  34.5k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  34.5k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  34.5k|  int32_t sci_exp = scientific_exponent(num);
  411|  34.5k|  size_t max_digits = binary_format<T>::max_digits();
  412|  34.5k|  size_t digits = 0;
  413|  34.5k|  bigint bigmant;
  414|  34.5k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  34.5k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  34.5k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 558, False: 34.0k]
  ------------------
  418|    558|    return positive_digit_comp<T>(bigmant, exponent);
  419|  34.0k|  } else {
  420|  34.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  34.0k|  }
  422|  34.5k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  77.1k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  77.1k|  uint64_t mantissa = num.mantissa;
   30|  77.1k|  int32_t exponent = int32_t(num.exponent);
   31|   385k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 308k, False: 77.1k]
  ------------------
   32|   308k|    mantissa /= 10000;
   33|   308k|    exponent += 4;
   34|   308k|  }
   35|   154k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 77.1k, False: 77.1k]
  ------------------
   36|  77.1k|    mantissa /= 100;
   37|  77.1k|    exponent += 2;
   38|  77.1k|  }
   39|  77.1k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 77.1k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  77.1k|  return exponent;
   44|  77.1k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  77.1k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  77.1k|  size_t counter = 0;
  245|  77.1k|  digits = 0;
  246|  77.1k|  limb value = 0;
  247|  77.1k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  77.1k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  77.1k|  UC const * p = num.integer.ptr;
  255|  77.1k|  UC const * pend = p + num.integer.len();
  256|  77.1k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   170k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 93.5k, False: 76.8k]
  ------------------
  259|   157k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 80.8k, False: 76.4k]
  |  Branch (259:45): [True: 63.9k, False: 16.8k]
  |  Branch (259:70): [True: 63.6k, False: 305]
  ------------------
  260|  63.6k|      parse_eight_digits(p, value, counter, digits);
  261|  63.6k|    }
  262|   296k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 276k, False: 19.6k]
  |  Branch (262:30): [True: 203k, False: 73.5k]
  |  Branch (262:43): [True: 203k, False: 305]
  ------------------
  263|   203k|      parse_one_digit(p, value, counter, digits);
  264|   203k|    }
  265|  93.5k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 305, False: 93.2k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    305|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    305|      bool truncated = is_truncated(p, pend);
  269|    305|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 269, False: 36]
  ------------------
  270|    269|        truncated |= is_truncated(num.fraction);
  271|    269|      }
  272|    305|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 197, False: 108]
  ------------------
  273|    197|        round_up_bigint(result, digits);
  274|    197|      }
  275|    305|      return;
  276|  93.2k|    } else {
  277|  93.2k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  93.2k|      counter = 0;
  279|  93.2k|      value = 0;
  280|  93.2k|    }
  281|  93.5k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  76.8k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 70.6k, False: 6.13k]
  ------------------
  285|  70.6k|    p = num.fraction.ptr;
  286|  70.6k|    pend = p + num.fraction.len();
  287|  70.6k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 3.28k, False: 67.4k]
  ------------------
  288|  3.28k|      skip_zeros(p, pend);
  289|  3.28k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   223k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 157k, False: 66.3k]
  ------------------
  292|   377k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 293k, False: 83.4k]
  |  Branch (292:47): [True: 221k, False: 72.1k]
  |  Branch (292:72): [True: 219k, False: 2.02k]
  ------------------
  293|   219k|        parse_eight_digits(p, value, counter, digits);
  294|   219k|      }
  295|   657k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 567k, False: 89.5k]
  |  Branch (295:32): [True: 502k, False: 64.6k]
  |  Branch (295:45): [True: 499k, False: 3.42k]
  ------------------
  296|   499k|        parse_one_digit(p, value, counter, digits);
  297|   499k|      }
  298|   157k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 4.33k, False: 153k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  4.33k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  4.33k|        bool truncated = is_truncated(p, pend);
  302|  4.33k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.19k, False: 1.14k]
  ------------------
  303|  3.19k|          round_up_bigint(result, digits);
  304|  3.19k|        }
  305|  4.33k|        return;
  306|   153k|      } else {
  307|   153k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   153k|        counter = 0;
  309|   153k|        value = 0;
  310|   153k|      }
  311|   157k|    }
  312|  70.6k|  }
  313|       |
  314|  72.4k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72.4k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  72.4k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  80.4k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  80.4k|  uint64_t val;
  161|  98.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 50.7k, False: 47.3k]
  ------------------
  162|  50.7k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  50.7k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 33.0k, False: 17.7k]
  ------------------
  164|  33.0k|      break;
  165|  33.0k|    }
  166|  17.7k|    first += int_cmp_len<UC>();
  167|  17.7k|  }
  168|   166k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 162k, False: 3.28k]
  ------------------
  169|   162k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 77.1k, False: 85.6k]
  ------------------
  170|  77.1k|      break;
  171|  77.1k|    }
  172|  85.6k|    first++;
  173|  85.6k|  }
  174|  80.4k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   283k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   283k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   283k|  p += 8;
  210|   283k|  counter += 8;
  211|   283k|  count += 8;
  212|   283k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   702k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   702k|  value = value * 10 + limb(*p - UC('0'));
  218|   702k|  p++;
  219|   702k|  counter++;
  220|   702k|  count++;
  221|   702k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   254k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   254k|  big.mul(power);
  226|   254k|  big.add(value);
  227|   254k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  4.91k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  4.91k|  uint64_t val;
  183|  9.60k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 6.30k, False: 3.29k]
  ------------------
  184|  6.30k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  6.30k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.61k, False: 4.69k]
  ------------------
  186|  1.61k|      return true;
  187|  1.61k|    }
  188|  4.69k|    first += int_cmp_len<UC>();
  189|  4.69k|  }
  190|  4.94k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 3.51k, False: 1.42k]
  ------------------
  191|  3.51k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.87k, False: 1.64k]
  ------------------
  192|  1.87k|      return true;
  193|  1.87k|    }
  194|  1.64k|    ++first;
  195|  1.64k|  }
  196|  1.42k|  return false;
  197|  3.29k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    269|bool is_truncated(span<const UC> s) noexcept {
  201|    269|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    269|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.39k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.39k|  add_native(big, 10, 1);
  234|  3.39k|  count++;
  235|  3.39k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    558|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    558|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    558|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    558|  adjusted_mantissa answer;
  324|    558|  bool truncated;
  325|    558|  answer.mantissa = bigmant.hi64(truncated);
  326|    558|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    558|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
  334|       |
  335|    558|  return answer;
  336|    558|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    558|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    558|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    558|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 558]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    558|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    558|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 558]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    558|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    558|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 558]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    558|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    558|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    558|  const uint64_t mask
  125|    558|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 558]
  ------------------
  126|    558|    ? UINT64_MAX
  127|    558|    : (uint64_t(1) << shift) - 1;
  128|    558|  const uint64_t halfway
  129|    558|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 558]
  ------------------
  130|    558|    ? 0
  131|    558|    : uint64_t(1) << (shift - 1);
  132|    558|  uint64_t truncated_bits = am.mantissa & mask;
  133|    558|  bool is_above = truncated_bits > halfway;
  134|    558|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    558|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 558]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    558|  } else {
  140|    558|    am.mantissa >>= shift;
  141|    558|  }
  142|    558|  am.power2 += shift;
  143|       |
  144|    558|  bool is_odd = (am.mantissa & 1) == 1;
  145|    558|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    558|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 484]
  |  Branch (331:27): [True: 352, False: 132]
  |  Branch (331:41): [True: 58, False: 294]
  |  Branch (331:56): [True: 60, False: 366]
  |  Branch (331:66): [True: 32, False: 28]
  ------------------
  332|    558|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  34.0k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  34.0k|  bigint& real_digits = bigmant;
  347|  34.0k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  34.0k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  34.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  34.0k|  T b;
  354|  34.0k|  to_float(false, am_b, b);
  355|  34.0k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  34.0k|  bigint theor_digits(theor.mantissa);
  357|  34.0k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  34.0k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  34.0k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  34.0k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 34.0k, False: 0]
  ------------------
  363|  34.0k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  34.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  34.0k|  }
  365|  34.0k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 34.0k, False: 0]
  ------------------
  366|  34.0k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  34.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  34.0k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  34.0k|  int ord = real_digits.compare(theor_digits);
  373|  34.0k|  adjusted_mantissa answer = am;
  374|  34.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  34.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  34.0k|      (void)_;  // not needed, since we've done our comparison
  377|  34.0k|      (void)__; // not needed, since we've done our comparison
  378|  34.0k|      if (ord > 0) {
  379|  34.0k|        return true;
  380|  34.0k|      } else if (ord < 0) {
  381|  34.0k|        return false;
  382|  34.0k|      } else {
  383|  34.0k|        return is_odd;
  384|  34.0k|      }
  385|  34.0k|    });
  386|  34.0k|  });
  387|       |
  388|  34.0k|  return answer;
  389|  34.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  34.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  34.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  34.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 34.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  34.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  34.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 34.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  34.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  34.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 34.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  34.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  34.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  70.5k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  70.5k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 70.5k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  70.5k|  } else {
  153|  70.5k|    am.mantissa >>= shift;
  154|  70.5k|  }
  155|  70.5k|  am.power2 += shift;
  156|  70.5k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  34.0k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  34.0k|  adjusted_mantissa am = to_extended(value);
   84|  34.0k|  am.mantissa <<= 1;
   85|  34.0k|  am.mantissa += 1;
   86|  34.0k|  am.power2 -= 1;
   87|  34.0k|  return am;
   88|  34.0k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  34.0k|adjusted_mantissa to_extended(T value) noexcept {
   50|  34.0k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  34.0k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  34.0k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  34.0k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  34.0k|  adjusted_mantissa am;
   56|  34.0k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  34.0k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  34.0k|  ::memcpy(&bits, &value, sizeof(T));
   62|  34.0k|#endif
   63|  34.0k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 34.0k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  34.0k|  } else {
   68|       |    // normal
   69|  34.0k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  34.0k|    am.power2 -= bias;
   71|  34.0k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  34.0k|  }
   73|       |
   74|  34.0k|  return am;
   75|  34.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  34.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  34.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  34.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 34.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  34.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  34.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 34.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  34.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  34.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 34.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  34.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  34.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  34.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  34.0k|      (void)_;  // not needed, since we've done our comparison
  377|  34.0k|      (void)__; // not needed, since we've done our comparison
  378|  34.0k|      if (ord > 0) {
  379|  34.0k|        return true;
  380|  34.0k|      } else if (ord < 0) {
  381|  34.0k|        return false;
  382|  34.0k|      } else {
  383|  34.0k|        return is_odd;
  384|  34.0k|      }
  385|  34.0k|    });
  386|  34.0k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  34.0k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  34.0k|  const uint64_t mask
  125|  34.0k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 34.0k]
  ------------------
  126|  34.0k|    ? UINT64_MAX
  127|  34.0k|    : (uint64_t(1) << shift) - 1;
  128|  34.0k|  const uint64_t halfway
  129|  34.0k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 34.0k]
  ------------------
  130|  34.0k|    ? 0
  131|  34.0k|    : uint64_t(1) << (shift - 1);
  132|  34.0k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  34.0k|  bool is_above = truncated_bits > halfway;
  134|  34.0k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  34.0k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 34.0k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  34.0k|  } else {
  140|  34.0k|    am.mantissa >>= shift;
  141|  34.0k|  }
  142|  34.0k|  am.power2 += shift;
  143|       |
  144|  34.0k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  34.0k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  34.0k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  34.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  34.0k|      (void)_;  // not needed, since we've done our comparison
  377|  34.0k|      (void)__; // not needed, since we've done our comparison
  378|  34.0k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 33.8k]
  ------------------
  379|    210|        return true;
  380|  33.8k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 29.9k, False: 3.90k]
  ------------------
  381|  29.9k|        return false;
  382|  29.9k|      } else {
  383|  3.90k|        return is_odd;
  384|  3.90k|      }
  385|  34.0k|    });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|     72|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|     72|  uint64_t mantissa = num.mantissa;
   30|     72|  int32_t exponent = int32_t(num.exponent);
   31|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 288, False: 72]
  ------------------
   32|    288|    mantissa /= 10000;
   33|    288|    exponent += 4;
   34|    288|  }
   35|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 72, False: 72]
  ------------------
   36|     72|    mantissa /= 100;
   37|     72|    exponent += 2;
   38|     72|  }
   39|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 72]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|     72|  return exponent;
   44|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|     72|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|     72|  size_t counter = 0;
  245|     72|  digits = 0;
  246|     72|  limb value = 0;
  247|     72|#ifdef FASTFLOAT_64BIT_LIMB
  248|     72|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|     72|  UC const * p = num.integer.ptr;
  255|     72|  UC const * pend = p + num.integer.len();
  256|     72|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|    144|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 72, False: 72]
  ------------------
  259|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 0, False: 72]
  |  Branch (259:45): [True: 0, False: 0]
  |  Branch (259:70): [True: 0, False: 0]
  ------------------
  260|      0|      parse_eight_digits(p, value, counter, digits);
  261|      0|    }
  262|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 576, False: 0]
  |  Branch (262:30): [True: 504, False: 72]
  |  Branch (262:43): [True: 504, False: 0]
  ------------------
  263|    504|      parse_one_digit(p, value, counter, digits);
  264|    504|    }
  265|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 72]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|     72|    } else {
  277|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|     72|      counter = 0;
  279|     72|      value = 0;
  280|     72|    }
  281|     72|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72, False: 0]
  ------------------
  285|     72|    p = num.fraction.ptr;
  286|     72|    pend = p + num.fraction.len();
  287|     72|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 72]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|    162|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 90, False: 72]
  ------------------
  292|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 108, False: 90]
  |  Branch (292:47): [True: 108, False: 0]
  |  Branch (292:72): [True: 108, False: 0]
  ------------------
  293|    108|        parse_eight_digits(p, value, counter, digits);
  294|    108|      }
  295|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 414, False: 18]
  |  Branch (295:32): [True: 342, False: 72]
  |  Branch (295:45): [True: 342, False: 0]
  ------------------
  296|    342|        parse_one_digit(p, value, counter, digits);
  297|    342|      }
  298|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 0, False: 90]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|      0|        bool truncated = is_truncated(p, pend);
  302|      0|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 0, False: 0]
  ------------------
  303|      0|          round_up_bigint(result, digits);
  304|      0|        }
  305|      0|        return;
  306|     90|      } else {
  307|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|     90|        counter = 0;
  309|     90|        value = 0;
  310|     90|      }
  311|     90|    }
  312|     72|  }
  313|       |
  314|     72|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|     72|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|     72|  uint64_t val;
  161|     72|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 72, False: 0]
  ------------------
  162|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  163|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72, False: 0]
  ------------------
  164|     72|      break;
  165|     72|    }
  166|      0|    first += int_cmp_len<UC>();
  167|      0|  }
  168|     72|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 72, False: 0]
  ------------------
  169|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 72, False: 0]
  ------------------
  170|     72|      break;
  171|     72|    }
  172|      0|    first++;
  173|      0|  }
  174|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|    108|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|    108|  p += 8;
  210|    108|  counter += 8;
  211|    108|  count += 8;
  212|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|    846|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|    846|  value = value * 10 + limb(*p - UC('0'));
  218|    846|  p++;
  219|    846|  counter++;
  220|    846|  count++;
  221|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  42.5k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  42.5k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  42.5k|  int32_t sci_exp = scientific_exponent(num);
  411|  42.5k|  size_t max_digits = binary_format<T>::max_digits();
  412|  42.5k|  size_t digits = 0;
  413|  42.5k|  bigint bigmant;
  414|  42.5k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  42.5k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  42.5k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 6.13k, False: 36.4k]
  ------------------
  418|  6.13k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  36.4k|  } else {
  420|  36.4k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  36.4k|  }
  422|  42.5k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  6.13k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  6.13k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  6.13k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  6.13k|  adjusted_mantissa answer;
  324|  6.13k|  bool truncated;
  325|  6.13k|  answer.mantissa = bigmant.hi64(truncated);
  326|  6.13k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  6.13k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  6.13k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.13k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.13k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.13k|    });
  333|  6.13k|  });
  334|       |
  335|  6.13k|  return answer;
  336|  6.13k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  6.13k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  6.13k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  6.13k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 6.13k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  6.13k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  6.13k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 588, False: 5.54k]
  ------------------
  109|    588|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    588|    am.power2++;
  111|    588|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  6.13k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  6.13k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 6.13k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  6.13k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  6.13k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.13k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.13k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.13k|    });
  333|  6.13k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  6.13k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  6.13k|  const uint64_t mask
  125|  6.13k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 6.13k]
  ------------------
  126|  6.13k|    ? UINT64_MAX
  127|  6.13k|    : (uint64_t(1) << shift) - 1;
  128|  6.13k|  const uint64_t halfway
  129|  6.13k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 6.13k]
  ------------------
  130|  6.13k|    ? 0
  131|  6.13k|    : uint64_t(1) << (shift - 1);
  132|  6.13k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  6.13k|  bool is_above = truncated_bits > halfway;
  134|  6.13k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  6.13k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 6.13k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  6.13k|  } else {
  140|  6.13k|    am.mantissa >>= shift;
  141|  6.13k|  }
  142|  6.13k|  am.power2 += shift;
  143|       |
  144|  6.13k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  6.13k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  6.13k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  6.13k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.13k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 696, False: 5.43k]
  |  Branch (331:27): [True: 4.62k, False: 810]
  |  Branch (331:41): [True: 1.01k, False: 3.61k]
  |  Branch (331:56): [True: 469, False: 3.95k]
  |  Branch (331:66): [True: 60, False: 409]
  ------------------
  332|  6.13k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  36.4k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  36.4k|  bigint& real_digits = bigmant;
  347|  36.4k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  36.4k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  36.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  36.4k|  T b;
  354|  36.4k|  to_float(false, am_b, b);
  355|  36.4k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  36.4k|  bigint theor_digits(theor.mantissa);
  357|  36.4k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  36.4k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  36.4k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  36.4k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 36.4k, False: 0]
  ------------------
  363|  36.4k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  36.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  36.4k|  }
  365|  36.4k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.94k, False: 33.5k]
  ------------------
  366|  2.94k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.94k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  33.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 33.4k, False: 102]
  ------------------
  368|  33.4k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  33.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  33.4k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  36.4k|  int ord = real_digits.compare(theor_digits);
  373|  36.4k|  adjusted_mantissa answer = am;
  374|  36.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.4k|      (void)_;  // not needed, since we've done our comparison
  377|  36.4k|      (void)__; // not needed, since we've done our comparison
  378|  36.4k|      if (ord > 0) {
  379|  36.4k|        return true;
  380|  36.4k|      } else if (ord < 0) {
  381|  36.4k|        return false;
  382|  36.4k|      } else {
  383|  36.4k|        return is_odd;
  384|  36.4k|      }
  385|  36.4k|    });
  386|  36.4k|  });
  387|       |
  388|  36.4k|  return answer;
  389|  36.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  36.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 36.3k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 36.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  36.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  36.4k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  36.4k|  adjusted_mantissa am = to_extended(value);
   84|  36.4k|  am.mantissa <<= 1;
   85|  36.4k|  am.mantissa += 1;
   86|  36.4k|  am.power2 -= 1;
   87|  36.4k|  return am;
   88|  36.4k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  36.4k|adjusted_mantissa to_extended(T value) noexcept {
   50|  36.4k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  36.4k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  36.4k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  36.4k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  36.4k|  adjusted_mantissa am;
   56|  36.4k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  36.4k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  36.4k|  ::memcpy(&bits, &value, sizeof(T));
   62|  36.4k|#endif
   63|  36.4k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 118, False: 36.3k]
  ------------------
   64|       |    // denormal
   65|    118|    am.power2 = 1 - bias;
   66|    118|    am.mantissa = bits & mantissa_mask;
   67|  36.3k|  } else {
   68|       |    // normal
   69|  36.3k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  36.3k|    am.power2 -= bias;
   71|  36.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  36.3k|  }
   73|       |
   74|  36.4k|  return am;
   75|  36.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  36.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 36.3k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 36.2k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  36.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.4k|      (void)_;  // not needed, since we've done our comparison
  377|  36.4k|      (void)__; // not needed, since we've done our comparison
  378|  36.4k|      if (ord > 0) {
  379|  36.4k|        return true;
  380|  36.4k|      } else if (ord < 0) {
  381|  36.4k|        return false;
  382|  36.4k|      } else {
  383|  36.4k|        return is_odd;
  384|  36.4k|      }
  385|  36.4k|    });
  386|  36.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  36.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  36.4k|  const uint64_t mask
  125|  36.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 36.4k]
  ------------------
  126|  36.4k|    ? UINT64_MAX
  127|  36.4k|    : (uint64_t(1) << shift) - 1;
  128|  36.4k|  const uint64_t halfway
  129|  36.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 36.4k]
  ------------------
  130|  36.4k|    ? 0
  131|  36.4k|    : uint64_t(1) << (shift - 1);
  132|  36.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  36.4k|  bool is_above = truncated_bits > halfway;
  134|  36.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  36.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 36.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  36.4k|  } else {
  140|  36.4k|    am.mantissa >>= shift;
  141|  36.4k|  }
  142|  36.4k|  am.power2 += shift;
  143|       |
  144|  36.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  36.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  36.4k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  36.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.4k|      (void)_;  // not needed, since we've done our comparison
  377|  36.4k|      (void)__; // not needed, since we've done our comparison
  378|  36.4k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 14.9k, False: 21.4k]
  ------------------
  379|  14.9k|        return true;
  380|  21.4k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 20.9k, False: 518]
  ------------------
  381|  20.9k|        return false;
  382|  20.9k|      } else {
  383|    518|        return is_odd;
  384|    518|      }
  385|  36.4k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|     72|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|     72|  am.power2 -= invalid_am_bias;
  409|       |
  410|     72|  int32_t sci_exp = scientific_exponent(num);
  411|     72|  size_t max_digits = binary_format<T>::max_digits();
  412|     72|  size_t digits = 0;
  413|     72|  bigint bigmant;
  414|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 72]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|     72|  } else {
  420|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|     72|  }
  422|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.85M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.69M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   553k|  constexpr size_t len() const noexcept {
  238|   553k|    return length;
  239|   553k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   965k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   965k|  return -10;
  469|   965k|#endif
  470|   965k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   910k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   910k|  return 10;
  517|   910k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   799k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   799k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   799k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.33M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.33M|  return 23;
  477|  2.33M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   753k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   753k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   753k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   785k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   326k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   326k|  return -65;
  568|   326k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   324k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   324k|  return 38;
  559|   324k|}
_ZN10fast_float14leading_zeroesEm:
  268|   694k|int leading_zeroes(uint64_t input_num) {
  269|   694k|  assert(input_num > 0);
  270|   694k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   694k|  return __builtin_clzll(input_num);
  285|   694k|#endif
  286|   694k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   866k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   866k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   866k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   866k|  answer.low = uint64_t(r);
  337|   866k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   866k|  return answer;
  342|   866k|}
_ZN10fast_float8value128C2Ev:
  251|   866k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   384k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   384k|  return -127;
  500|   384k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   117k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   117k|  return -17;
  493|   117k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   114k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   114k|  return 10;
  485|   114k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   241k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   241k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 77.1k, False: 164k]
  |  Branch (352:38): [True: 0, False: 164k]
  ------------------
  353|   241k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  34.5k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  34.5k|  return 114;
  575|  34.5k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   130k|{
  650|   130k|    return sizeof(uint64_t) / sizeof(UC);
  651|   130k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  57.0k|{
  644|  57.0k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  57.0k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  57.0k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  99.5k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   235k|  constexpr size_t len() const noexcept {
  238|   235k|    return length;
  239|   235k|  }
_ZNK10fast_float4spanImEixEm:
  241|   128k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   128k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   128k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   128k|    return ptr[index];
  244|   128k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   246k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   246k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   246k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   246k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   246k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   246k|  ::memcpy(&value, &word, sizeof(T));
  615|   246k|#endif
  616|   246k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   246k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   602k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   602k|  return 0xFF;
  507|   602k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.42M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  1.17M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   590k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  1.80k|  constexpr size_t len() const noexcept {
  238|  1.80k|    return length;
  239|  1.80k|  }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|     72|{
  650|     72|    return sizeof(uint64_t) / sizeof(UC);
  651|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|     72|{
  644|     72|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|     72|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   587k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.04M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.04M|  return -22;
  461|  1.04M|#endif
  462|  1.04M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.03M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.03M|  return 22;
  514|  1.03M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   882k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   882k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   882k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.35M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.35M|  return 52;
  474|  2.35M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   871k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   871k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   871k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   294k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   294k|  return -342;
  564|   294k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   294k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   294k|  return 308;
  555|   294k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   374k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   374k|  return -1023;
  497|   374k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  92.9k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  92.9k|  return -4;
  489|  92.9k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  53.9k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  53.9k|  return 23;
  481|  53.9k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  42.6k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  42.6k|  return 769;
  572|  42.6k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   213k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   213k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   213k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   213k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   213k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   213k|  ::memcpy(&value, &word, sizeof(T));
  615|   213k|#endif
  616|   213k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   213k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   543k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   543k|  return 0x7FF;
  504|   543k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   698k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   698k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   698k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   698k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   698k|    return from_chars_advanced(first, last, value, options);
  143|   698k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   698k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   698k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   698k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   698k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   698k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 698k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   698k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   698k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 698k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   698k|  answer.ec = std::errc(); // be optimistic
  221|   698k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   698k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 645k, False: 52.8k]
  |  Branch (227:69): [True: 611k, False: 33.9k]
  |  Branch (227:131): [True: 539k, False: 72.3k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   539k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 539k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   539k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 493k, False: 45.7k]
  ------------------
  239|   493k|        value = T(pns.mantissa);
  240|   493k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 11.9k, False: 481k]
  ------------------
  241|   481k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   493k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 493k]
  ------------------
  243|   493k|        return answer;
  244|   493k|      }
  245|   539k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   539k|  }
  262|   204k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   204k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 118k, False: 86.6k]
  |  Branch (263:29): [True: 118k, False: 0]
  ------------------
  264|   118k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 34.5k, False: 83.6k]
  ------------------
  265|  34.5k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  34.5k|    }
  267|   118k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   204k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 34.5k, False: 170k]
  ------------------
  271|   204k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   204k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 200k, False: 4.45k]
  |  Branch (273:29): [True: 23.8k, False: 176k]
  |  Branch (273:49): [True: 1.11k, False: 22.7k]
  |  Branch (273:68): [True: 5.10k, False: 198k]
  ------------------
  274|  6.21k|    answer.ec = std::errc::result_out_of_range;
  275|  6.21k|  }
  276|   204k|  return answer;
  277|   698k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.68M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.68M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.68M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.68M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.68M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.68M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   267k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   267k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   267k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   267k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   267k|    return from_chars_advanced(first, last, value, options);
  143|   267k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   267k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   267k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   267k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   267k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   267k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 267k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   267k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   267k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 267k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   267k|  answer.ec = std::errc(); // be optimistic
  221|   267k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   267k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 265k, False: 2.16k]
  |  Branch (227:69): [True: 260k, False: 4.53k]
  |  Branch (227:131): [True: 260k, False: 258]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   260k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 260k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   260k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 259k, False: 630]
  ------------------
  239|   259k|        value = T(pns.mantissa);
  240|   259k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 606, False: 259k]
  ------------------
  241|   259k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   259k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 259k]
  ------------------
  243|   259k|        return answer;
  244|   259k|      }
  245|   260k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   260k|  }
  262|  7.59k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  7.59k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 564, False: 7.02k]
  |  Branch (263:29): [True: 564, False: 0]
  ------------------
  264|    564|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 564]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    564|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  7.59k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 7.59k]
  ------------------
  271|  7.59k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  7.59k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 6.94k, False: 644]
  |  Branch (273:29): [True: 5.10k, False: 1.84k]
  |  Branch (273:49): [True: 1.43k, False: 3.67k]
  |  Branch (273:68): [True: 3.67k, False: 2.48k]
  ------------------
  274|  5.10k|    answer.ec = std::errc::result_out_of_range;
  275|  5.10k|  }
  276|  7.59k|  return answer;
  277|   267k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   727k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   727k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   727k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   727k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   727k|    return from_chars_advanced(first, last, value, options);
  143|   727k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   727k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   727k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   727k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   727k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   727k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 727k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   727k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   727k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 727k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   727k|  answer.ec = std::errc(); // be optimistic
  221|   727k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   727k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 717k, False: 10.1k]
  |  Branch (227:69): [True: 685k, False: 32.3k]
  |  Branch (227:131): [True: 570k, False: 114k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   570k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 570k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   570k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 560k, False: 10.2k]
  ------------------
  239|   560k|        value = T(pns.mantissa);
  240|   560k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 34.6k, False: 525k]
  ------------------
  241|   525k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   560k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 560k]
  ------------------
  243|   560k|        return answer;
  244|   560k|      }
  245|   570k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   570k|  }
  262|   167k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   167k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 122k, False: 45.1k]
  |  Branch (263:29): [True: 122k, False: 0]
  ------------------
  264|   122k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 42.5k, False: 79.6k]
  ------------------
  265|  42.5k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  42.5k|    }
  267|   122k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   167k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 42.5k, False: 124k]
  ------------------
  271|   167k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   167k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 163k, False: 4.05k]
  |  Branch (273:29): [True: 16.0k, False: 147k]
  |  Branch (273:49): [True: 247, False: 15.7k]
  |  Branch (273:68): [True: 2.65k, False: 164k]
  ------------------
  274|  2.89k|    answer.ec = std::errc::result_out_of_range;
  275|  2.89k|  }
  276|   167k|  return answer;
  277|   727k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   320k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   320k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   320k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   320k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   320k|    return from_chars_advanced(first, last, value, options);
  143|   320k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   320k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   320k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   320k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   320k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   320k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 320k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   320k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   320k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 320k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   320k|  answer.ec = std::errc(); // be optimistic
  221|   320k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   320k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 317k, False: 3.06k]
  |  Branch (227:69): [True: 311k, False: 5.42k]
  |  Branch (227:131): [True: 311k, False: 574]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   311k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 311k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   311k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 311k, False: 240]
  ------------------
  239|   311k|        value = T(pns.mantissa);
  240|   311k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 920, False: 310k]
  ------------------
  241|   310k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   311k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 311k]
  ------------------
  243|   311k|        return answer;
  244|   311k|      }
  245|   311k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   311k|  }
  262|  9.30k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  9.30k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 592, False: 8.71k]
  |  Branch (263:29): [True: 592, False: 0]
  ------------------
  264|    592|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 72, False: 520]
  ------------------
  265|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|     72|    }
  267|    592|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  9.30k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 72, False: 9.23k]
  ------------------
  271|  9.30k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  9.30k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 8.54k, False: 756]
  |  Branch (273:29): [True: 2.26k, False: 6.27k]
  |  Branch (273:49): [True: 296, False: 1.97k]
  |  Branch (273:68): [True: 1.97k, False: 7.03k]
  ------------------
  274|  2.26k|    answer.ec = std::errc::result_out_of_range;
  275|  2.26k|  }
  276|  9.30k|  return answer;
  277|   320k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  5.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  4.88M|{
 3807|  4.88M|    if constexpr (sizeof(U) == 1) {
 3808|  4.88M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|       |    else {
 3814|       |        // utf-32
 3815|       |        static_assert(sizeof(U) == 4);
 3816|       |        SCN_UNUSED(ch);
 3817|       |        return 1;
 3818|       |    }
 3819|  4.88M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  4.88M|{
 3771|  4.88M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  4.88M|    SCN_GCC_COMPAT_PUSH
 3774|  4.88M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  4.88M|    constexpr char lengths[] =
 3776|  4.88M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  4.88M|        "\1\1\1\1\1\1\1\1"
 3778|  4.88M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  4.88M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  4.88M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  4.88M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  4.88M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  4.88M|    SCN_GCC_COMPAT_POP
 3785|  4.88M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  4.32M|{
 4013|  4.32M|    if constexpr (sizeof(CharT) == 1) {
 4014|  4.32M|        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|       |    else {
 4020|       |        SCN_EXPECT(input.size() == 1);
 4021|       |        auto cp = static_cast<char32_t>(input.front());
 4022|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|       |            return invalid_code_point;
 4024|       |        }
 4025|       |        return cp;
 4026|       |    }
 4027|  4.32M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  4.32M|{
 3826|  4.32M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  4.32M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  4.32M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  4.32M|    };
 3831|       |
 3832|  4.32M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 4.24M, False: 84.5k]
  ------------------
 3833|  4.24M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 740, False: 4.24M]
  ------------------
 3834|    740|            SCN_UNLIKELY_ATTR
 3835|    740|            return invalid_code_point;
 3836|    740|        }
 3837|  4.24M|        return static_cast<char32_t>(input[0]);
 3838|  4.24M|    }
 3839|       |
 3840|  84.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 77.9k, False: 6.69k]
  ------------------
 3841|  77.9k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 152, False: 77.7k]
  ------------------
 3842|    152|            SCN_UNLIKELY_ATTR
 3843|    152|            return invalid_code_point;
 3844|    152|        }
 3845|  77.7k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 8.23k, False: 69.5k]
  ------------------
 3846|  8.23k|            SCN_UNLIKELY_ATTR
 3847|  8.23k|            return invalid_code_point;
 3848|  8.23k|        }
 3849|       |
 3850|  69.5k|        char32_t cp{};
 3851|  69.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  69.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  69.5k|        return cp;
 3854|  77.7k|    }
 3855|       |
 3856|  6.69k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.89k, False: 2.79k]
  ------------------
 3857|  3.89k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 113, False: 3.77k]
  ------------------
 3858|    113|            SCN_UNLIKELY_ATTR
 3859|    113|            return invalid_code_point;
 3860|    113|        }
 3861|  3.77k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.72k, False: 2.05k]
  ------------------
 3862|  3.77k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 618, False: 1.44k]
  ------------------
 3863|  2.33k|            SCN_UNLIKELY_ATTR
 3864|  2.33k|            return invalid_code_point;
 3865|  2.33k|        }
 3866|       |
 3867|  1.44k|        char32_t cp{};
 3868|  1.44k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.44k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.44k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.44k|        return cp;
 3872|  3.77k|    }
 3873|       |
 3874|  2.79k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.79k, False: 0]
  ------------------
 3875|  2.79k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.79k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.79k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 574, False: 2.22k]
  ------------------
 3880|    574|            SCN_UNLIKELY_ATTR
 3881|    574|            return invalid_code_point;
 3882|    574|        }
 3883|  2.22k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 782, False: 1.44k]
  ------------------
 3884|  2.22k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 580, False: 863]
  ------------------
 3885|  2.22k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 544, False: 319]
  ------------------
 3886|  1.90k|            SCN_UNLIKELY_ATTR
 3887|  1.90k|            return invalid_code_point;
 3888|  1.90k|        }
 3889|       |
 3890|    319|        char32_t cp{};
 3891|    319|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    319|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    319|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    319|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    319|        return cp;
 3896|  2.22k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  88.1k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  88.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  88.1k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  7.00M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  7.00M|    else {
 3705|  7.00M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  7.00M|                                       to_address(first), to_address(last)))};
 3707|  7.00M|    }
 3708|  7.00M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  21.2M|{
  326|  21.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  21.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  21.2M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  24.4M|{
  304|  24.4M|    return p;
  305|  24.4M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  11.1M|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  11.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  11.1M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  11.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  11.1M|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  11.1M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   123k|    {
 2724|   123k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   123k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   123k|    {
 2705|   123k|        return decay_copy(t.begin());
 2706|   123k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  16.0M|{
 1949|  16.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  16.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  16.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.02M|    {
 2781|  3.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.02M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.02M|    {
 2763|  3.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.02M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   221k|{
 8867|   221k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   221k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   221k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   221k|    static_cast<    \
  |  |  929|   221k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   221k|    static_cast<    \
  |  |  929|   221k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   221k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   955k|{
 5396|   955k|    detail::check_scan_arg_types<Args...>();
 5397|   955k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   955k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.56M|{
 5135|  1.56M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.56M|                  "Scan argument types must be default constructible");
 5137|  1.56M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.56M|                  "Scan argument types must be Destructible");
 5139|  1.56M|    static_assert(
 5140|  1.56M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.56M|        "Scan argument types must not be references");
 5142|  1.56M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5347|   955k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   955k|    {
 5349|   955k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   955k|    {
 5360|   955k|        return {detail::make_arg<
 5361|   955k|            kind, Context,
 5362|   955k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   955k|                                 typename Context::char_type>::value>(args)...};
 5364|   955k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   955k|{
 5170|   955k|    return make_value<Context>(value).ref_value;
 5171|   955k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|  1.05M|{
 5120|  1.05M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  1.05M|                                  needs_context_tag>) {
 5124|  1.05M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  1.05M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|  1.05M|    {                                                                        \
 4959|  1.05M|        return val;                                                          \
 4960|  1.05M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.56M|{
 5089|  1.56M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.56M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.56M|    constexpr bool scannable_char =
 5093|  1.56M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.56M|    static_assert(scannable_char,
 5095|  1.56M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.56M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.56M|    constexpr bool scannable_const =
 5099|  1.56M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.56M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.56M|    constexpr bool scannable_disabled =
 5103|  1.56M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.56M|    static_assert(scannable_disabled,
 5105|  1.56M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.56M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.56M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.56M|    static_assert(
 5110|  1.56M|        scannable,
 5111|  1.56M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.56M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.56M|    return arg_value{arg};
 5115|  1.56M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4900|  1.56M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.56M|    {
 4902|  1.56M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   681k|{
 8654|   681k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   681k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   681k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   681k|{
 8591|   681k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   681k|    auto result = vscan_impl(buffer, format, args);
 8594|   681k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.6k, False: 625k]
  |  |  ------------------
  ------------------
 8595|  55.6k|        return unexpected(result.error());
 8596|  55.6k|    }
 8597|   625k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   681k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.51M|{
 4720|  1.51M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.51M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.51M|                  "\n"
 4724|  1.51M|                  "Unsupported range type given as input to a scanning "
 4725|  1.51M|                  "function.\n"
 4726|  1.51M|                  "A range needs to have a character type (value type) "
 4727|  1.51M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.51M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.51M|                  "to be included.\n"
 4730|  1.51M|                  "See the scnlib documentation for more details.");
 4731|  1.51M|    static_assert(
 4732|  1.51M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.51M|        "\n"
 4734|  1.51M|        "Unsupported range type given as input to a scanning "
 4735|  1.51M|        "function.\n"
 4736|  1.51M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.51M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.51M|        "not supported.");
 4739|  1.51M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.51M|                  "\n"
 4741|  1.51M|                  "Unsupported range type given as input to a scanning "
 4742|  1.51M|                  "function.\n"
 4743|  1.51M|                  "file_marker_found cannot be used as an "
 4744|  1.51M|                  "source range type to scn::scan.\n"
 4745|  1.51M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.51M|                  "and do not provide an explicit source range, "
 4747|  1.51M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.51M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.51M|                  "\n"
 4750|  1.51M|                  "Unsupported range type given as input to a scanning "
 4751|  1.51M|                  "function.\n"
 4752|  1.51M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.51M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.51M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.51M|                  "\n"
 4756|  1.51M|                  "Unsupported range type given as input to a scanning "
 4757|  1.51M|                  "function.\n"
 4758|  1.51M|                  "A range needs to model forward_range and have a valid "
 4759|  1.51M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.51M|                  "Examples of scannable ranges are std::string, "
 4761|  1.51M|                  "std::string_view, "
 4762|  1.51M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.51M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.51M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.51M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|  1.51M|{
 4659|  1.51M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|  1.51M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|  1.51M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.51M|    {
 2855|  1.51M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.51M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.51M|    {
 2836|  1.51M|        return t.data();
 2837|  1.51M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.51M|    {
 3231|  1.51M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 15.9k, False: 1.49M]
  ------------------
 3232|  1.51M|                   ? nullptr
 3233|  1.51M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.51M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.51M|    {
 3005|  1.51M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.51M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.51M|    {
 2978|  1.51M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.51M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  8.31M|    {
 3339|  8.31M|        return m_iterator == m_sentinel;
 3340|  8.31M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  3.00M|    {
 3185|  3.00M|        return static_cast<const D&>(*this);
 3186|  3.00M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.88M|    {
 2724|  2.88M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.88M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.88M|    {
 2705|  2.88M|        return decay_copy(t.begin());
 2706|  2.88M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  36.5M|    {
 3330|  36.5M|        return m_iterator;
 3331|  36.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.51M|    {
 2930|  1.51M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.51M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.51M|    {
 2896|  1.51M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.51M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  6.51M|{
 1949|  6.51M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.51M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  8.35M|    {
 3346|  8.35M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  8.35M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  16.2M|    {
 1598|  16.2M|        return has_value();
 1599|  16.2M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  32.0M|    {
  485|  32.0M|        return m_has_value;
  486|  32.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.10M|    {
 1604|  1.10M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.10M|        return this->get_unexpected().error();
 1606|  1.10M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.10M|    {
  468|  1.10M|        return m_unexpected;
  469|  1.10M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  8.48M|    {
  361|  8.48M|        return m_unexpected;
  362|  8.48M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  4.14M|        : m_unexpected(std::forward<Err>(e))
  346|  4.14M|    {
  347|  4.14M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.14M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.14M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   120k|        : base(unexpect, std::move(e.error())),
 1474|   120k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   120k|    {
 1476|   120k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   120k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   120k|          m_has_value(false)
  446|   120k|    {
  447|   120k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  9.53M|        : m_unexpected(std::forward<Args>(args)...)
  355|  9.53M|    {
  356|  9.53M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  9.53M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  9.53M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.51M|    {
 1177|  1.51M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.38M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.38M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.38M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.38M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  8.60M|    {
 2724|  8.60M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  8.60M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  8.60M|    {
 2705|  8.60M|        return decay_copy(t.begin());
 2706|  8.60M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  1.38M|{
 5910|  1.38M|    return ranges::end(source);
 5911|  1.38M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.38M|    {
 2781|  1.38M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.38M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.38M|    {
 2763|  1.38M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.38M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  17.8M|    {
 3334|  17.8M|        return m_sentinel;
 3335|  17.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  6.39M|    {
 1653|  6.39M|        return value();
 1654|  6.39M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  14.7M|    {
 1627|  14.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  14.7M|        return this->get_value();
 1629|  14.7M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  14.7M|    {
  451|  14.7M|        return m_value;
  452|  14.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.38M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.38M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.38M|    {
 1430|  1.38M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.38M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.38M|    {
  437|  1.38M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   442k|    {
 7975|   442k|        return m_str;
 7976|   442k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   955k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   955k|    {
 5426|   955k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   955k|    {
 5379|   955k|        return m_argptrs;
 5380|   955k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5476|  2.95M|        : m_desc(desc), m_builtin_values(data)
 5477|  2.95M|    {
 5478|  2.95M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   442k|{
 8820|   442k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.0k, False: 405k]
  |  |  ------------------
  ------------------
 8821|  37.0k|        return unexpected(result.error());
 8822|  37.0k|    }
 8823|   405k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   442k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.51M|    {
 1598|  1.51M|        return has_value();
 1599|  1.51M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.02M|    {
  485|  3.02M|        return m_has_value;
  486|  3.02M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   120k|    {
 1604|   120k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   120k|        return this->get_unexpected().error();
 1606|   120k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   120k|    {
  468|   120k|        return m_unexpected;
  469|   120k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  40.1k|        : base(unexpect, std::move(e.error())),
 1474|  40.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  40.1k|    {
 1476|  40.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  40.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  40.1k|          m_has_value(false)
  446|  40.1k|    {
  447|  40.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   489k|    {
 1177|   489k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.25M|    {
 1653|  1.25M|        return value();
 1654|  1.25M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.38M|    {
 1627|  1.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.38M|        return this->get_value();
 1629|  1.38M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.38M|    {
  451|  1.38M|        return m_value;
  452|  1.38M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   449k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   449k|    static_cast<    \
  |  |  929|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   449k|    static_cast<    \
  |  |  929|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   449k|    {
 5830|   449k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5679|  1.38M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.38M|    static_cast<    \
  |  |  929|  1.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.38M|    {
 5681|  1.38M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5614|  1.31M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.31M|    static_cast<    \
  |  |  929|  1.31M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.31M|    {
 5616|  1.31M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   449k|        : base(std::in_place, std::forward<U>(val)),
 1428|   449k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   449k|    {
 1430|   449k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   449k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   449k|    {
  437|   449k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   955k|    {
 5374|   955k|        return m_args;
 5375|   955k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  14.2M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  14.2M|    static_cast<    \
  |  |  929|  14.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  14.2M|    static_cast<    \
  |  |  929|  14.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  14.2M|    {
 3316|  14.2M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  2.95M|{
 7691|  2.95M|    return s;
 7692|  2.95M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  2.95M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   442k|        : m_str(r.str)
 7970|   442k|    {
 7971|   442k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   489k|    {
 1598|   489k|        return has_value();
 1599|   489k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   939k|    {
  485|   939k|        return m_has_value;
  486|   939k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   449k|    {
 1673|   449k|        return &value();
 1674|   449k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   449k|    {
 1627|   449k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   449k|        return this->get_value();
 1629|   449k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   449k|    {
  451|   449k|        return m_value;
  452|   449k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  1.38M|    {
 5698|  1.38M|        return ranges::begin(m_range);
 5699|  1.38M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   221k|{
 8934|   221k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   221k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   221k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   221k|    static_cast<    \
  |  |  929|   221k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   221k|    static_cast<    \
  |  |  929|   221k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   221k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   681k|{
 8672|   681k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   681k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   681k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   681k|{
 8607|   681k|#if !SCN_DISABLE_LOCALE
 8608|   681k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   681k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   681k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   681k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   681k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.6k, False: 625k]
  |  |  ------------------
  ------------------
 8615|  55.6k|        return unexpected(result.error());
 8616|  55.6k|    }
 8617|   625k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   681k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  47.6k|{
 8973|  47.6k|    T value;
 8974|  47.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  47.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 44.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.08k|    }                                                  \
  |  |  |  | 3671|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  44.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  44.5k|    static_cast<    \
  |  |  929|  44.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  44.5k|    static_cast<    \
  |  |  929|  44.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  47.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  99.7k|{
 5155|  99.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  99.7k|    basic_scan_arg<Context> arg;
 5158|  99.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  99.7k|    arg.m_value = make_value<Context>(value);
 5160|  99.7k|    return arg;
 5161|  99.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  3.26M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  4.90M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   147k|{
 8685|   147k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   147k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   147k|{
 8631|   147k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   147k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   147k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.26k, False: 138k]
  |  |  ------------------
  ------------------
 8635|  9.26k|        return unexpected(result.error());
 8636|  9.26k|    }
 8637|   138k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   147k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   138k|    {
 1663|   138k|        return std::move(value());
 1664|   138k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   228k|{
 8867|   228k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   228k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   228k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   228k|    static_cast<    \
  |  |  929|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   228k|    static_cast<    \
  |  |  929|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   228k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   993k|{
 5396|   993k|    detail::check_scan_arg_types<Args...>();
 5397|   993k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   993k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.65M|{
 5135|  1.65M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.65M|                  "Scan argument types must be default constructible");
 5137|  1.65M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.65M|                  "Scan argument types must be Destructible");
 5139|  1.65M|    static_assert(
 5140|  1.65M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.65M|        "Scan argument types must not be references");
 5142|  1.65M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5347|   993k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   993k|    {
 5349|   993k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   993k|    {
 5360|   993k|        return {detail::make_arg<
 5361|   993k|            kind, Context,
 5362|   993k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   993k|                                 typename Context::char_type>::value>(args)...};
 5364|   993k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   993k|{
 5170|   993k|    return make_value<Context>(value).ref_value;
 5171|   993k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  1.09M|{
 5120|  1.09M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  1.09M|                                  needs_context_tag>) {
 5124|  1.09M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  1.09M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  1.09M|    {                                                                        \
 4959|  1.09M|        return val;                                                          \
 4960|  1.09M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.65M|{
 5089|  1.65M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.65M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.65M|    constexpr bool scannable_char =
 5093|  1.65M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.65M|    static_assert(scannable_char,
 5095|  1.65M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.65M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.65M|    constexpr bool scannable_const =
 5099|  1.65M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.65M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.65M|    constexpr bool scannable_disabled =
 5103|  1.65M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.65M|    static_assert(scannable_disabled,
 5105|  1.65M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.65M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.65M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.65M|    static_assert(
 5110|  1.65M|        scannable,
 5111|  1.65M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.65M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.65M|    return arg_value{arg};
 5115|  1.65M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4900|  1.65M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.65M|    {
 4902|  1.65M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   457k|    {
 7975|   457k|        return m_str;
 7976|   457k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   993k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   993k|    {
 5426|   993k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   993k|    {
 5379|   993k|        return m_argptrs;
 5380|   993k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   457k|{
 8820|   457k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.0k, False: 420k]
  |  |  ------------------
  ------------------
 8821|  37.0k|        return unexpected(result.error());
 8822|  37.0k|    }
 8823|   420k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   420k|    static_cast<    \
  |  |  929|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   420k|    static_cast<    \
  |  |  929|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   457k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  40.1k|        : base(unexpect, std::move(e.error())),
 1474|  40.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  40.1k|    {
 1476|  40.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  40.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  40.1k|          m_has_value(false)
  446|  40.1k|    {
  447|  40.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   506k|    {
 1177|   506k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   466k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   466k|    static_cast<    \
  |  |  929|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   466k|    static_cast<    \
  |  |  929|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   466k|    {
 5830|   466k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5614|  1.41M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.41M|    static_cast<    \
  |  |  929|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.41M|    {
 5616|  1.41M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   466k|        : base(std::in_place, std::forward<U>(val)),
 1428|   466k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   466k|    {
 1430|   466k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   466k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   466k|    {
  437|   466k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   993k|    {
 5374|   993k|        return m_args;
 5375|   993k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   457k|        : m_str(r.str)
 7970|   457k|    {
 7971|   457k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   506k|    {
 1598|   506k|        return has_value();
 1599|   506k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   973k|    {
  485|   973k|        return m_has_value;
  486|   973k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   466k|    {
 1673|   466k|        return &value();
 1674|   466k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   466k|    {
 1627|   466k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   466k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   466k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   466k|        return this->get_value();
 1629|   466k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   466k|    {
  451|   466k|        return m_value;
  452|   466k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   228k|{
 8934|   228k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   228k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   228k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   228k|    static_cast<    \
  |  |  929|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   228k|    static_cast<    \
  |  |  929|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   228k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  49.6k|{
 8973|  49.6k|    T value;
 8974|  49.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  49.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  49.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  49.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  49.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 46.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.08k|    }                                                  \
  |  |  |  | 3671|  49.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  46.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.5k|    static_cast<    \
  |  |  929|  46.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.5k|    static_cast<    \
  |  |  929|  46.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  49.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|   104k|{
 5155|   104k|    check_scan_arg_types<T>();
 5156|       |
 5157|   104k|    basic_scan_arg<Context> arg;
 5158|   104k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   104k|    arg.m_value = make_value<Context>(value);
 5160|   104k|    return arg;
 5161|   104k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   231k|{
 8867|   231k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   231k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   231k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   231k|    static_cast<    \
  |  |  929|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   231k|    static_cast<    \
  |  |  929|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   231k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|  1.00M|{
 5396|  1.00M|    detail::check_scan_arg_types<Args...>();
 5397|  1.00M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.00M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.68M|{
 5135|  1.68M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.68M|                  "Scan argument types must be default constructible");
 5137|  1.68M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.68M|                  "Scan argument types must be Destructible");
 5139|  1.68M|    static_assert(
 5140|  1.68M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.68M|        "Scan argument types must not be references");
 5142|  1.68M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5347|  1.00M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  1.00M|    {
 5349|  1.00M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.00M|    {
 5360|  1.00M|        return {detail::make_arg<
 5361|  1.00M|            kind, Context,
 5362|  1.00M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.00M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.00M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|  1.00M|{
 5170|  1.00M|    return make_value<Context>(value).ref_value;
 5171|  1.00M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|  1.11M|{
 5120|  1.11M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  1.11M|                                  needs_context_tag>) {
 5124|  1.11M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  1.11M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|  1.11M|    {                                                                        \
 4959|  1.11M|        return val;                                                          \
 4960|  1.11M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.68M|{
 5089|  1.68M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.68M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.68M|    constexpr bool scannable_char =
 5093|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.68M|    static_assert(scannable_char,
 5095|  1.68M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.68M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.68M|    constexpr bool scannable_const =
 5099|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.68M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.68M|    constexpr bool scannable_disabled =
 5103|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.68M|    static_assert(scannable_disabled,
 5105|  1.68M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.68M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.68M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.68M|    static_assert(
 5110|  1.68M|        scannable,
 5111|  1.68M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.68M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.68M|    return arg_value{arg};
 5115|  1.68M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4900|  1.68M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.68M|    {
 4902|  1.68M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   462k|    {
 7975|   462k|        return m_str;
 7976|   462k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  1.00M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  1.00M|    {
 5426|  1.00M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|  1.00M|    {
 5379|  1.00M|        return m_argptrs;
 5380|  1.00M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   462k|{
 8820|   462k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   462k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.0k, False: 425k]
  |  |  ------------------
  ------------------
 8821|  37.0k|        return unexpected(result.error());
 8822|  37.0k|    }
 8823|   425k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   425k|    static_cast<    \
  |  |  929|   425k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   425k|    static_cast<    \
  |  |  929|   425k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   462k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  40.1k|        : base(unexpect, std::move(e.error())),
 1474|  40.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  40.1k|    {
 1476|  40.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  40.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  40.1k|          m_has_value(false)
  446|  40.1k|    {
  447|  40.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   513k|    {
 1177|   513k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   473k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   473k|    static_cast<    \
  |  |  929|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   473k|    static_cast<    \
  |  |  929|   473k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   473k|    {
 5830|   473k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5614|  1.44M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.44M|    static_cast<    \
  |  |  929|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.44M|    {
 5616|  1.44M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   473k|        : base(std::in_place, std::forward<U>(val)),
 1428|   473k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   473k|    {
 1430|   473k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   473k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   473k|    {
  437|   473k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|  1.00M|    {
 5374|  1.00M|        return m_args;
 5375|  1.00M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   462k|        : m_str(r.str)
 7970|   462k|    {
 7971|   462k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   513k|    {
 1598|   513k|        return has_value();
 1599|   513k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   986k|    {
  485|   986k|        return m_has_value;
  486|   986k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   473k|    {
 1673|   473k|        return &value();
 1674|   473k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   473k|    {
 1627|   473k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   473k|        return this->get_value();
 1629|   473k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   473k|    {
  451|   473k|        return m_value;
  452|   473k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   231k|{
 8934|   231k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   231k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   231k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   231k|    static_cast<    \
  |  |  929|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   231k|    static_cast<    \
  |  |  929|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   231k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  50.5k|{
 8973|  50.5k|    T value;
 8974|  50.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  50.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 47.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.08k|    }                                                  \
  |  |  |  | 3671|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  47.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  47.4k|    static_cast<    \
  |  |  929|  47.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  47.4k|    static_cast<    \
  |  |  929|  47.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  50.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|   105k|{
 5155|   105k|    check_scan_arg_types<T>();
 5156|       |
 5157|   105k|    basic_scan_arg<Context> arg;
 5158|   105k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   105k|    arg.m_value = make_value<Context>(value);
 5160|   105k|    return arg;
 5161|   105k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   120k|    {
 2724|   120k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   120k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   120k|    {
 2705|   120k|        return decay_copy(t.begin());
 2706|   120k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  76.6M|{
 1949|  76.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  76.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  76.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.50M|    {
 2781|  3.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.50M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.50M|    {
 2763|  3.50M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.50M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   256k|{
 8867|   256k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   256k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   256k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   256k|    static_cast<    \
  |  |  929|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   256k|    static_cast<    \
  |  |  929|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   256k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   795k|{
 8654|   795k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   795k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   795k|{
 8591|   795k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   795k|    auto result = vscan_impl(buffer, format, args);
 8594|   795k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.6k, False: 739k]
  |  |  ------------------
  ------------------
 8595|  55.6k|        return unexpected(result.error());
 8596|  55.6k|    }
 8597|   739k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   795k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.75M|{
 4720|  1.75M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.75M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.75M|                  "\n"
 4724|  1.75M|                  "Unsupported range type given as input to a scanning "
 4725|  1.75M|                  "function.\n"
 4726|  1.75M|                  "A range needs to have a character type (value type) "
 4727|  1.75M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.75M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.75M|                  "to be included.\n"
 4730|  1.75M|                  "See the scnlib documentation for more details.");
 4731|  1.75M|    static_assert(
 4732|  1.75M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.75M|        "\n"
 4734|  1.75M|        "Unsupported range type given as input to a scanning "
 4735|  1.75M|        "function.\n"
 4736|  1.75M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.75M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.75M|        "not supported.");
 4739|  1.75M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.75M|                  "\n"
 4741|  1.75M|                  "Unsupported range type given as input to a scanning "
 4742|  1.75M|                  "function.\n"
 4743|  1.75M|                  "file_marker_found cannot be used as an "
 4744|  1.75M|                  "source range type to scn::scan.\n"
 4745|  1.75M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.75M|                  "and do not provide an explicit source range, "
 4747|  1.75M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.75M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.75M|                  "\n"
 4750|  1.75M|                  "Unsupported range type given as input to a scanning "
 4751|  1.75M|                  "function.\n"
 4752|  1.75M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.75M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.75M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.75M|                  "\n"
 4756|  1.75M|                  "Unsupported range type given as input to a scanning "
 4757|  1.75M|                  "function.\n"
 4758|  1.75M|                  "A range needs to model forward_range and have a valid "
 4759|  1.75M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.75M|                  "Examples of scannable ranges are std::string, "
 4761|  1.75M|                  "std::string_view, "
 4762|  1.75M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.75M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.75M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.75M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.75M|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|  1.75M|    else {
 4705|  1.75M|        return make_forward_scan_buffer(r);
 4706|  1.75M|    }
 4707|  1.75M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.75M|{
 4524|  1.75M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.75M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|  1.75M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|  1.75M|          m_cursor(ranges::begin(*m_range))
 4410|  1.75M|    {
 4411|  1.75M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4380|  1.75M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|  1.75M|    {
 4382|  1.75M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4149|  1.75M|        : m_current_view(sv), m_is_contiguous(false)
 4150|  1.75M|    {
 4151|  1.75M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.75M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.38M|    {
 2724|  3.38M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.38M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.38M|    {
 2705|  3.38M|        return decay_copy(t.begin());
 2706|  3.38M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  5.01M|    {
 3330|  5.01M|        return m_iterator;
 3331|  5.01M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  22.3M|    {
 4415|  22.3M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 324k, False: 22.0M]
  ------------------
 4416|   324k|            return false;
 4417|   324k|        }
 4418|  22.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  22.0M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  22.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  22.0M|        }
 4421|  22.0M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 20.2M, False: 1.73M]
  ------------------
 4422|  20.2M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  20.2M|                                          this->m_current_view.begin(),
 4424|  20.2M|                                          this->m_current_view.end());
 4425|  20.2M|        }
 4426|  22.0M|        m_latest = *m_cursor;
 4427|  22.0M|        ++m_cursor;
 4428|  22.0M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  22.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  22.0M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  22.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  22.0M|        }
 4432|  22.0M|        return true;
 4433|  22.3M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  66.3M|    {
 2781|  66.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  66.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  66.3M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  66.3M|    {
 2763|  66.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  66.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  66.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  67.9M|    {
 3334|  67.9M|        return m_sentinel;
 3335|  67.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.75M|    {
 4071|  1.75M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.75M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.75M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   120k|        : base(unexpect, std::move(e.error())),
 1474|   120k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   120k|    {
 1476|   120k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   120k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   120k|          m_has_value(false)
  446|   120k|    {
  447|   120k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.75M|    {
 1177|  1.75M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.63M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.63M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.63M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.63M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.63M|    {
 2724|  1.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.63M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.63M|    {
 2705|  1.63M|        return decay_copy(t.begin());
 2706|  1.63M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.63M|{
 5910|  1.63M|    return ranges::end(source);
 5911|  1.63M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.63M|    {
 2781|  1.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.63M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.63M|    {
 2763|  1.63M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.63M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.63M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.63M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.63M|    {
 1430|  1.63M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.63M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.63M|    {
  437|  1.63M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   512k|    {
 7975|   512k|        return m_str;
 7976|   512k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   512k|{
 8820|   512k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.0k, False: 475k]
  |  |  ------------------
  ------------------
 8821|  37.0k|        return unexpected(result.error());
 8822|  37.0k|    }
 8823|   475k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   475k|    static_cast<    \
  |  |  929|   475k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   475k|    static_cast<    \
  |  |  929|   475k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   512k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.75M|    {
 1598|  1.75M|        return has_value();
 1599|  1.75M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.50M|    {
  485|  3.50M|        return m_has_value;
  486|  3.50M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   120k|    {
 1604|   120k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   120k|        return this->get_unexpected().error();
 1606|   120k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   120k|    {
  468|   120k|        return m_unexpected;
  469|   120k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  40.1k|        : base(unexpect, std::move(e.error())),
 1474|  40.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  40.1k|    {
 1476|  40.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  40.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  40.1k|          m_has_value(false)
  446|  40.1k|    {
  447|  40.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   564k|    {
 1177|   564k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.47M|    {
 1653|  1.47M|        return value();
 1654|  1.47M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.63M|    {
 1627|  1.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.63M|        return this->get_value();
 1629|  1.63M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.63M|    {
  451|  1.63M|        return m_value;
  452|  1.63M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   524k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   524k|    static_cast<    \
  |  |  929|   524k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   524k|    static_cast<    \
  |  |  929|   524k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   524k|    {
 5830|   524k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5679|  1.63M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.63M|    static_cast<    \
  |  |  929|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.63M|    {
 5681|  1.63M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   524k|        : base(std::in_place, std::forward<U>(val)),
 1428|   524k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   524k|    {
 1430|   524k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   524k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   524k|    {
  437|   524k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  3.38M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.38M|    static_cast<    \
  |  |  929|  3.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.38M|    static_cast<    \
  |  |  929|  3.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  3.38M|    {
 3316|  3.38M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   512k|        : m_str(r.str)
 7970|   512k|    {
 7971|   512k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   564k|    {
 1598|   564k|        return has_value();
 1599|   564k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.08M|    {
  485|  1.08M|        return m_has_value;
  486|  1.08M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   524k|    {
 1673|   524k|        return &value();
 1674|   524k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   524k|    {
 1627|   524k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   524k|        return this->get_value();
 1629|   524k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   524k|    {
  451|   524k|        return m_value;
  452|   524k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.63M|    {
 5698|  1.63M|        return ranges::begin(m_range);
 5699|  1.63M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   256k|{
 8934|   256k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   256k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   256k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   256k|    static_cast<    \
  |  |  929|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   256k|    static_cast<    \
  |  |  929|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   256k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   795k|{
 8672|   795k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   795k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   795k|{
 8607|   795k|#if !SCN_DISABLE_LOCALE
 8608|   795k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   795k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   795k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   795k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   795k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.6k, False: 739k]
  |  |  ------------------
  ------------------
 8615|  55.6k|        return unexpected(result.error());
 8616|  55.6k|    }
 8617|   739k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   795k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  52.1k|{
 8973|  52.1k|    T value;
 8974|  52.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  52.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 49.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.08k|    }                                                  \
  |  |  |  | 3671|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  49.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  49.0k|    static_cast<    \
  |  |  929|  49.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  49.0k|    static_cast<    \
  |  |  929|  49.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  52.1k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   162k|{
 8685|   162k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   162k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   162k|{
 8631|   162k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   162k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   162k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.26k, False: 153k]
  |  |  ------------------
  ------------------
 8635|  9.26k|        return unexpected(result.error());
 8636|  9.26k|    }
 8637|   153k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   162k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   153k|    {
 1663|   153k|        return std::move(value());
 1664|   153k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   268k|{
 8867|   268k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   268k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   268k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   268k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   536k|    {
 7975|   536k|        return m_str;
 7976|   536k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   536k|{
 8820|   536k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.0k, False: 499k]
  |  |  ------------------
  ------------------
 8821|  37.0k|        return unexpected(result.error());
 8822|  37.0k|    }
 8823|   499k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   499k|    static_cast<    \
  |  |  929|   499k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   499k|    static_cast<    \
  |  |  929|   499k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   536k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  40.1k|        : base(unexpect, std::move(e.error())),
 1474|  40.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  40.1k|    {
 1476|  40.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  40.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  40.1k|          m_has_value(false)
  446|  40.1k|    {
  447|  40.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   591k|    {
 1177|   591k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   551k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   551k|    static_cast<    \
  |  |  929|   551k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   551k|    static_cast<    \
  |  |  929|   551k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   551k|    {
 5830|   551k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   551k|        : base(std::in_place, std::forward<U>(val)),
 1428|   551k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   551k|    {
 1430|   551k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   551k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   551k|    {
  437|   551k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   536k|        : m_str(r.str)
 7970|   536k|    {
 7971|   536k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   591k|    {
 1598|   591k|        return has_value();
 1599|   591k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.14M|    {
  485|  1.14M|        return m_has_value;
  486|  1.14M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   551k|    {
 1673|   551k|        return &value();
 1674|   551k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   551k|    {
 1627|   551k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   551k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   551k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   551k|        return this->get_value();
 1629|   551k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   551k|    {
  451|   551k|        return m_value;
  452|   551k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   268k|{
 8934|   268k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   268k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   268k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   268k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  54.7k|{
 8973|  54.7k|    T value;
 8974|  54.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  54.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  54.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  54.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  54.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.08k|    }                                                  \
  |  |  |  | 3671|  54.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  51.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  51.7k|    static_cast<    \
  |  |  929|  51.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  51.7k|    static_cast<    \
  |  |  929|  51.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  54.7k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   270k|{
 8867|   270k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   270k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   270k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   270k|    static_cast<    \
  |  |  929|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   270k|    static_cast<    \
  |  |  929|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   270k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   541k|    {
 7975|   541k|        return m_str;
 7976|   541k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   541k|{
 8820|   541k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.0k, False: 504k]
  |  |  ------------------
  ------------------
 8821|  37.0k|        return unexpected(result.error());
 8822|  37.0k|    }
 8823|   504k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   504k|    static_cast<    \
  |  |  929|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   504k|    static_cast<    \
  |  |  929|   504k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   541k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  40.1k|        : base(unexpect, std::move(e.error())),
 1474|  40.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  40.1k|    {
 1476|  40.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  40.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  40.1k|          m_has_value(false)
  446|  40.1k|    {
  447|  40.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   597k|    {
 1177|   597k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   557k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   557k|    static_cast<    \
  |  |  929|   557k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   557k|    static_cast<    \
  |  |  929|   557k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   557k|    {
 5830|   557k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   557k|        : base(std::in_place, std::forward<U>(val)),
 1428|   557k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   557k|    {
 1430|   557k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   557k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   557k|    {
  437|   557k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   541k|        : m_str(r.str)
 7970|   541k|    {
 7971|   541k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   597k|    {
 1598|   597k|        return has_value();
 1599|   597k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.15M|    {
  485|  1.15M|        return m_has_value;
  486|  1.15M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   557k|    {
 1673|   557k|        return &value();
 1674|   557k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   557k|    {
 1627|   557k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   557k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   557k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   557k|        return this->get_value();
 1629|   557k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   557k|    {
  451|   557k|        return m_value;
  452|   557k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   270k|{
 8934|   270k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   270k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   270k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   270k|    static_cast<    \
  |  |  929|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   270k|    static_cast<    \
  |  |  929|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   270k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  55.3k|{
 8973|  55.3k|    T value;
 8974|  55.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  55.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  55.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  55.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  55.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.08k|    }                                                  \
  |  |  |  | 3671|  55.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  52.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.2k|    static_cast<    \
  |  |  929|  52.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.2k|    static_cast<    \
  |  |  929|  52.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  55.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   247k|    {
 2724|   247k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   247k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   247k|    {
 2705|   247k|        return decay_copy(t.begin());
 2706|   247k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  5.45M|{
 1949|  5.45M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.45M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.64M|    {
 2781|  1.64M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.64M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.64M|    {
 2763|  1.64M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.64M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   462k|{
 5396|   462k|    detail::check_scan_arg_types<Args...>();
 5397|   462k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   462k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5347|   462k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   462k|    {
 5349|   462k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   462k|    {
 5360|   462k|        return {detail::make_arg<
 5361|   462k|            kind, Context,
 5362|   462k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   462k|                                 typename Context::char_type>::value>(args)...};
 5364|   462k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   462k|{
 5170|   462k|    return make_value<Context>(value).ref_value;
 5171|   462k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   505k|{
 5120|   505k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   505k|                                  needs_context_tag>) {
 5124|   505k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   505k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   505k|    {                                                                        \
 4959|   505k|        return val;                                                          \
 4960|   505k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   373k|{
 8591|   373k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   373k|    auto result = vscan_impl(buffer, format, args);
 8594|   373k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 111k, False: 262k]
  |  |  ------------------
  ------------------
 8595|   111k|        return unexpected(result.error());
 8596|   111k|    }
 8597|   262k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   373k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   820k|{
 4720|   820k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   820k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   820k|                  "\n"
 4724|   820k|                  "Unsupported range type given as input to a scanning "
 4725|   820k|                  "function.\n"
 4726|   820k|                  "A range needs to have a character type (value type) "
 4727|   820k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   820k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   820k|                  "to be included.\n"
 4730|   820k|                  "See the scnlib documentation for more details.");
 4731|   820k|    static_assert(
 4732|   820k|        !std::is_same_v<T, custom_char_traits>,
 4733|   820k|        "\n"
 4734|   820k|        "Unsupported range type given as input to a scanning "
 4735|   820k|        "function.\n"
 4736|   820k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   820k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   820k|        "not supported.");
 4739|   820k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   820k|                  "\n"
 4741|   820k|                  "Unsupported range type given as input to a scanning "
 4742|   820k|                  "function.\n"
 4743|   820k|                  "file_marker_found cannot be used as an "
 4744|   820k|                  "source range type to scn::scan.\n"
 4745|   820k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   820k|                  "and do not provide an explicit source range, "
 4747|   820k|                  "or use scn::scan with a FILE* directly.");
 4748|   820k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   820k|                  "\n"
 4750|   820k|                  "Unsupported range type given as input to a scanning "
 4751|   820k|                  "function.\n"
 4752|   820k|                  "In order to be scannable, a range needs to satisfy "
 4753|   820k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   820k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   820k|                  "\n"
 4756|   820k|                  "Unsupported range type given as input to a scanning "
 4757|   820k|                  "function.\n"
 4758|   820k|                  "A range needs to model forward_range and have a valid "
 4759|   820k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   820k|                  "Examples of scannable ranges are std::string, "
 4761|   820k|                  "std::string_view, "
 4762|   820k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   820k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   820k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   820k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|   820k|{
 4659|   820k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|   820k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|   820k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   820k|    {
 2855|   820k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   820k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   820k|    {
 2836|   820k|        return t.data();
 2837|   820k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   820k|    {
 3231|   820k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.74k, False: 818k]
  ------------------
 3232|   820k|                   ? nullptr
 3233|   820k|                   : std::addressof(*ranges::begin(derived()));
 3234|   820k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   820k|    {
 3005|   820k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   820k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   820k|    {
 2978|   820k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   820k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  1.52M|    {
 3339|  1.52M|        return m_iterator == m_sentinel;
 3340|  1.52M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.63M|    {
 3185|  1.63M|        return static_cast<const D&>(*this);
 3186|  1.63M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.39M|    {
 2724|  1.39M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.39M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.39M|    {
 2705|  1.39M|        return decay_copy(t.begin());
 2706|  1.39M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  29.1M|    {
 3330|  29.1M|        return m_iterator;
 3331|  29.1M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   820k|    {
 2930|   820k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   820k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   820k|    {
 2896|   820k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   820k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  3.68M|    {
 3346|  3.68M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  3.68M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   240k|        : base(unexpect, std::move(e.error())),
 1474|   240k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   240k|    {
 1476|   240k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   240k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   240k|          m_has_value(false)
  446|   240k|    {
  447|   240k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   820k|    {
 1177|   820k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   579k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   579k|                      ranges::iterator_t<SourceRange>>) {
 5925|   579k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   579k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.57M|    {
 2724|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.57M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.57M|    {
 2705|  1.57M|        return decay_copy(t.begin());
 2706|  1.57M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   579k|{
 5910|   579k|    return ranges::end(source);
 5911|   579k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   579k|    {
 2781|   579k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   579k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   579k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   579k|    {
 2763|   579k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   579k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   579k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  16.8M|    {
 3334|  16.8M|        return m_sentinel;
 3335|  16.8M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   579k|        : base(std::in_place, std::forward<U>(val)),
 1428|   579k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   579k|    {
 1430|   579k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   579k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   579k|    {
  437|   579k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   231k|    {
 7975|   231k|        return m_str;
 7976|   231k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   462k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   462k|    {
 5426|   462k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   462k|    {
 5379|   462k|        return m_argptrs;
 5380|   462k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5476|  1.49M|        : m_desc(desc), m_builtin_values(data)
 5477|  1.49M|    {
 5478|  1.49M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   231k|{
 8820|   231k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.1k, False: 157k]
  |  |  ------------------
  ------------------
 8821|  74.1k|        return unexpected(result.error());
 8822|  74.1k|    }
 8823|   157k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   231k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   820k|    {
 1598|   820k|        return has_value();
 1599|   820k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.64M|    {
  485|  1.64M|        return m_has_value;
  486|  1.64M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   240k|    {
 1604|   240k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   240k|        return this->get_unexpected().error();
 1606|   240k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   240k|    {
  468|   240k|        return m_unexpected;
  469|   240k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  80.3k|        : base(unexpect, std::move(e.error())),
 1474|  80.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.3k|    {
 1476|  80.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  80.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  80.3k|          m_has_value(false)
  446|  80.3k|    {
  447|  80.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   252k|    {
 1177|   252k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   524k|    {
 1653|   524k|        return value();
 1654|   524k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   579k|    {
 1627|   579k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   579k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   579k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   579k|        return this->get_value();
 1629|   579k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   579k|    {
  451|   579k|        return m_value;
  452|   579k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   172k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   172k|    {
 5830|   172k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5679|   579k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   579k|    static_cast<    \
  |  |  929|   579k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   579k|    {
 5681|   579k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   172k|        : base(std::in_place, std::forward<U>(val)),
 1428|   172k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   172k|    {
 1430|   172k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   172k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   172k|    {
  437|   172k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   462k|    {
 5374|   462k|        return m_args;
 5375|   462k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  10.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  10.4M|    static_cast<    \
  |  |  929|  10.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  10.4M|    static_cast<    \
  |  |  929|  10.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  10.4M|    {
 3316|  10.4M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  1.49M|{
 7696|  1.49M|    return s;
 7697|  1.49M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  1.49M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   231k|        : m_str(r.str)
 7970|   231k|    {
 7971|   231k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   252k|    {
 1598|   252k|        return has_value();
 1599|   252k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   425k|    {
  485|   425k|        return m_has_value;
  486|   425k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   172k|    {
 1673|   172k|        return &value();
 1674|   172k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   172k|    {
 1627|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   172k|        return this->get_value();
 1629|   172k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   172k|    {
  451|   172k|        return m_value;
  452|   172k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   579k|    {
 5698|   579k|        return ranges::begin(m_range);
 5699|   579k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   373k|{
 8607|   373k|#if !SCN_DISABLE_LOCALE
 8608|   373k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   373k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   373k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   373k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   373k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 111k, False: 262k]
  |  |  ------------------
  ------------------
 8615|   111k|        return unexpected(result.error());
 8616|   111k|    }
 8617|   262k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   373k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  43.0k|{
 5155|  43.0k|    check_scan_arg_types<T>();
 5156|       |
 5157|  43.0k|    basic_scan_arg<Context> arg;
 5158|  43.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  43.0k|    arg.m_value = make_value<Context>(value);
 5160|  43.0k|    return arg;
 5161|  43.0k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.64M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  73.4k|{
 8631|  73.4k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  73.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  73.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  73.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5k, False: 54.8k]
  |  |  ------------------
  ------------------
 8635|  18.5k|        return unexpected(result.error());
 8636|  18.5k|    }
 8637|  54.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  54.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  73.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  54.8k|    {
 1663|  54.8k|        return std::move(value());
 1664|  54.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   510k|{
 5396|   510k|    detail::check_scan_arg_types<Args...>();
 5397|   510k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   510k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5347|   510k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   510k|    {
 5349|   510k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   510k|    {
 5360|   510k|        return {detail::make_arg<
 5361|   510k|            kind, Context,
 5362|   510k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   510k|                                 typename Context::char_type>::value>(args)...};
 5364|   510k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   510k|{
 5170|   510k|    return make_value<Context>(value).ref_value;
 5171|   510k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   561k|{
 5120|   561k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   561k|                                  needs_context_tag>) {
 5124|   561k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   561k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   561k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   561k|    {                                                                        \
 4959|   561k|        return val;                                                          \
 4960|   561k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   255k|    {
 7975|   255k|        return m_str;
 7976|   255k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   510k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   510k|    {
 5426|   510k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   510k|    {
 5379|   510k|        return m_argptrs;
 5380|   510k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   255k|{
 8820|   255k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.1k, False: 181k]
  |  |  ------------------
  ------------------
 8821|  74.1k|        return unexpected(result.error());
 8822|  74.1k|    }
 8823|   181k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   255k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  80.3k|        : base(unexpect, std::move(e.error())),
 1474|  80.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.3k|    {
 1476|  80.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  80.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  80.3k|          m_has_value(false)
  446|  80.3k|    {
  447|  80.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   280k|    {
 1177|   280k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   200k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   200k|    {
 5830|   200k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   200k|        : base(std::in_place, std::forward<U>(val)),
 1428|   200k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   200k|    {
 1430|   200k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   200k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   200k|    {
  437|   200k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   510k|    {
 5374|   510k|        return m_args;
 5375|   510k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   255k|        : m_str(r.str)
 7970|   255k|    {
 7971|   255k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   280k|    {
 1598|   280k|        return has_value();
 1599|   280k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   481k|    {
  485|   481k|        return m_has_value;
  486|   481k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   200k|    {
 1673|   200k|        return &value();
 1674|   200k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   200k|    {
 1627|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   200k|        return this->get_value();
 1629|   200k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   200k|    {
  451|   200k|        return m_value;
  452|   200k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  51.0k|{
 5155|  51.0k|    check_scan_arg_types<T>();
 5156|       |
 5157|  51.0k|    basic_scan_arg<Context> arg;
 5158|  51.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  51.0k|    arg.m_value = make_value<Context>(value);
 5160|  51.0k|    return arg;
 5161|  51.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   520k|{
 5396|   520k|    detail::check_scan_arg_types<Args...>();
 5397|   520k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   520k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5347|   520k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   520k|    {
 5349|   520k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   520k|    {
 5360|   520k|        return {detail::make_arg<
 5361|   520k|            kind, Context,
 5362|   520k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   520k|                                 typename Context::char_type>::value>(args)...};
 5364|   520k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   520k|{
 5170|   520k|    return make_value<Context>(value).ref_value;
 5171|   520k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   573k|{
 5120|   573k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   573k|                                  needs_context_tag>) {
 5124|   573k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   573k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   573k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   573k|    {                                                                        \
 4959|   573k|        return val;                                                          \
 4960|   573k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   260k|    {
 7975|   260k|        return m_str;
 7976|   260k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   520k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   520k|    {
 5426|   520k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   520k|    {
 5379|   520k|        return m_argptrs;
 5380|   520k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   260k|{
 8820|   260k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.1k, False: 186k]
  |  |  ------------------
  ------------------
 8821|  74.1k|        return unexpected(result.error());
 8822|  74.1k|    }
 8823|   186k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   260k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  80.3k|        : base(unexpect, std::move(e.error())),
 1474|  80.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.3k|    {
 1476|  80.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  80.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  80.3k|          m_has_value(false)
  446|  80.3k|    {
  447|  80.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   286k|    {
 1177|   286k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   206k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   206k|    {
 5830|   206k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   206k|        : base(std::in_place, std::forward<U>(val)),
 1428|   206k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   206k|    {
 1430|   206k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   206k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   206k|    {
  437|   206k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   520k|    {
 5374|   520k|        return m_args;
 5375|   520k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   260k|        : m_str(r.str)
 7970|   260k|    {
 7971|   260k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   286k|    {
 1598|   286k|        return has_value();
 1599|   286k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   493k|    {
  485|   493k|        return m_has_value;
  486|   493k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   206k|    {
 1673|   206k|        return &value();
 1674|   206k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   206k|    {
 1627|   206k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   206k|        return this->get_value();
 1629|   206k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   206k|    {
  451|   206k|        return m_value;
  452|   206k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  52.6k|{
 5155|  52.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  52.6k|    basic_scan_arg<Context> arg;
 5158|  52.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  52.6k|    arg.m_value = make_value<Context>(value);
 5160|  52.6k|    return arg;
 5161|  52.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   240k|    {
 2724|   240k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   240k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   240k|    {
 2705|   240k|        return decay_copy(t.begin());
 2706|   240k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  16.3M|{
 1949|  16.3M|    return SCN_FWD(t);
  ------------------
  |  |  930|  16.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  16.3M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.63M|    {
 2781|  1.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.63M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.63M|    {
 2763|  1.63M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.63M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   373k|{
 8591|   373k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   373k|    auto result = vscan_impl(buffer, format, args);
 8594|   373k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 111k, False: 262k]
  |  |  ------------------
  ------------------
 8595|   111k|        return unexpected(result.error());
 8596|   111k|    }
 8597|   262k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   373k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   819k|{
 4720|   819k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   819k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   819k|                  "\n"
 4724|   819k|                  "Unsupported range type given as input to a scanning "
 4725|   819k|                  "function.\n"
 4726|   819k|                  "A range needs to have a character type (value type) "
 4727|   819k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   819k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   819k|                  "to be included.\n"
 4730|   819k|                  "See the scnlib documentation for more details.");
 4731|   819k|    static_assert(
 4732|   819k|        !std::is_same_v<T, custom_char_traits>,
 4733|   819k|        "\n"
 4734|   819k|        "Unsupported range type given as input to a scanning "
 4735|   819k|        "function.\n"
 4736|   819k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   819k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   819k|        "not supported.");
 4739|   819k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   819k|                  "\n"
 4741|   819k|                  "Unsupported range type given as input to a scanning "
 4742|   819k|                  "function.\n"
 4743|   819k|                  "file_marker_found cannot be used as an "
 4744|   819k|                  "source range type to scn::scan.\n"
 4745|   819k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   819k|                  "and do not provide an explicit source range, "
 4747|   819k|                  "or use scn::scan with a FILE* directly.");
 4748|   819k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   819k|                  "\n"
 4750|   819k|                  "Unsupported range type given as input to a scanning "
 4751|   819k|                  "function.\n"
 4752|   819k|                  "In order to be scannable, a range needs to satisfy "
 4753|   819k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   819k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   819k|                  "\n"
 4756|   819k|                  "Unsupported range type given as input to a scanning "
 4757|   819k|                  "function.\n"
 4758|   819k|                  "A range needs to model forward_range and have a valid "
 4759|   819k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   819k|                  "Examples of scannable ranges are std::string, "
 4761|   819k|                  "std::string_view, "
 4762|   819k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   819k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   819k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   819k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   819k|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|   819k|    else {
 4705|   819k|        return make_forward_scan_buffer(r);
 4706|   819k|    }
 4707|   819k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   819k|{
 4524|   819k|    return basic_scan_forward_buffer_impl(range);
 4525|   819k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|   819k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|   819k|          m_cursor(ranges::begin(*m_range))
 4410|   819k|    {
 4411|   819k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4380|   819k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|   819k|    {
 4382|   819k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4149|   819k|        : m_current_view(sv), m_is_contiguous(false)
 4150|   819k|    {
 4151|   819k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   819k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.39M|    {
 2724|  1.39M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.39M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.39M|    {
 2705|  1.39M|        return decay_copy(t.begin());
 2706|  1.39M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  1.97M|    {
 3330|  1.97M|        return m_iterator;
 3331|  1.97M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  4.08M|    {
 4415|  4.08M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 194k, False: 3.89M]
  ------------------
 4416|   194k|            return false;
 4417|   194k|        }
 4418|  3.89M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  3.89M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  3.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  3.89M|        }
 4421|  3.89M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 3.07M, False: 818k]
  ------------------
 4422|  3.07M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  3.07M|                                          this->m_current_view.begin(),
 4424|  3.07M|                                          this->m_current_view.end());
 4425|  3.07M|        }
 4426|  3.89M|        m_latest = *m_cursor;
 4427|  3.89M|        ++m_cursor;
 4428|  3.89M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  3.89M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  3.89M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  3.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  3.89M|        }
 4432|  3.89M|        return true;
 4433|  4.08M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  11.8M|    {
 2781|  11.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  11.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  11.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  11.8M|    {
 2763|  11.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  11.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  11.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  12.4M|    {
 3334|  12.4M|        return m_sentinel;
 3335|  12.4M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   819k|    {
 4071|   819k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   819k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   819k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   240k|        : base(unexpect, std::move(e.error())),
 1474|   240k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   240k|    {
 1476|   240k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   240k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   240k|          m_has_value(false)
  446|   240k|    {
  447|   240k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   819k|    {
 1177|   819k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   579k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   579k|                      ranges::iterator_t<SourceRange>>) {
 5925|   579k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   579k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   579k|    {
 2724|   579k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   579k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   579k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   579k|    {
 2705|   579k|        return decay_copy(t.begin());
 2706|   579k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   579k|{
 5910|   579k|    return ranges::end(source);
 5911|   579k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   579k|    {
 2781|   579k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   579k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   579k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   579k|    {
 2763|   579k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   579k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   579k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   579k|        : base(std::in_place, std::forward<U>(val)),
 1428|   579k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   579k|    {
 1430|   579k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   579k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   579k|    {
  437|   579k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   231k|    {
 7975|   231k|        return m_str;
 7976|   231k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   231k|{
 8820|   231k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.1k, False: 157k]
  |  |  ------------------
  ------------------
 8821|  74.1k|        return unexpected(result.error());
 8822|  74.1k|    }
 8823|   157k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   231k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   819k|    {
 1598|   819k|        return has_value();
 1599|   819k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.63M|    {
  485|  1.63M|        return m_has_value;
  486|  1.63M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   240k|    {
 1604|   240k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   240k|        return this->get_unexpected().error();
 1606|   240k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   240k|    {
  468|   240k|        return m_unexpected;
  469|   240k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  80.3k|        : base(unexpect, std::move(e.error())),
 1474|  80.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.3k|    {
 1476|  80.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  80.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  80.3k|          m_has_value(false)
  446|  80.3k|    {
  447|  80.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   252k|    {
 1177|   252k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   524k|    {
 1653|   524k|        return value();
 1654|   524k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   579k|    {
 1627|   579k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   579k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   579k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   579k|        return this->get_value();
 1629|   579k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   579k|    {
  451|   579k|        return m_value;
  452|   579k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   172k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   172k|    {
 5830|   172k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5679|   579k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   579k|    static_cast<    \
  |  |  929|   579k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   579k|    {
 5681|   579k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   172k|        : base(std::in_place, std::forward<U>(val)),
 1428|   172k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   172k|    {
 1430|   172k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   172k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   172k|    {
  437|   172k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  1.39M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.39M|    static_cast<    \
  |  |  929|  1.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.39M|    static_cast<    \
  |  |  929|  1.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.39M|    {
 3316|  1.39M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   231k|        : m_str(r.str)
 7970|   231k|    {
 7971|   231k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   252k|    {
 1598|   252k|        return has_value();
 1599|   252k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   425k|    {
  485|   425k|        return m_has_value;
  486|   425k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   172k|    {
 1673|   172k|        return &value();
 1674|   172k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   172k|    {
 1627|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   172k|        return this->get_value();
 1629|   172k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   172k|    {
  451|   172k|        return m_value;
  452|   172k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   579k|    {
 5698|   579k|        return ranges::begin(m_range);
 5699|   579k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   373k|{
 8607|   373k|#if !SCN_DISABLE_LOCALE
 8608|   373k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   373k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   373k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   373k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   373k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 111k, False: 262k]
  |  |  ------------------
  ------------------
 8615|   111k|        return unexpected(result.error());
 8616|   111k|    }
 8617|   262k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   373k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  73.3k|{
 8631|  73.3k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  73.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  73.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5k, False: 54.7k]
  |  |  ------------------
  ------------------
 8635|  18.5k|        return unexpected(result.error());
 8636|  18.5k|    }
 8637|  54.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  54.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  73.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  54.7k|    {
 1663|  54.7k|        return std::move(value());
 1664|  54.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   255k|    {
 7975|   255k|        return m_str;
 7976|   255k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   255k|{
 8820|   255k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.1k, False: 181k]
  |  |  ------------------
  ------------------
 8821|  74.1k|        return unexpected(result.error());
 8822|  74.1k|    }
 8823|   181k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   255k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  80.3k|        : base(unexpect, std::move(e.error())),
 1474|  80.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.3k|    {
 1476|  80.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  80.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  80.3k|          m_has_value(false)
  446|  80.3k|    {
  447|  80.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   280k|    {
 1177|   280k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   200k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   200k|    {
 5830|   200k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   200k|        : base(std::in_place, std::forward<U>(val)),
 1428|   200k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   200k|    {
 1430|   200k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   200k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   200k|    {
  437|   200k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   255k|        : m_str(r.str)
 7970|   255k|    {
 7971|   255k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   280k|    {
 1598|   280k|        return has_value();
 1599|   280k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   481k|    {
  485|   481k|        return m_has_value;
  486|   481k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   200k|    {
 1673|   200k|        return &value();
 1674|   200k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   200k|    {
 1627|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   200k|        return this->get_value();
 1629|   200k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   200k|    {
  451|   200k|        return m_value;
  452|   200k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   260k|    {
 7975|   260k|        return m_str;
 7976|   260k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   260k|{
 8820|   260k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.1k, False: 186k]
  |  |  ------------------
  ------------------
 8821|  74.1k|        return unexpected(result.error());
 8822|  74.1k|    }
 8823|   186k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   260k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  80.3k|        : base(unexpect, std::move(e.error())),
 1474|  80.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.3k|    {
 1476|  80.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  80.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  80.3k|          m_has_value(false)
  446|  80.3k|    {
  447|  80.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   286k|    {
 1177|   286k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   206k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   206k|    {
 5830|   206k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   206k|        : base(std::in_place, std::forward<U>(val)),
 1428|   206k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   206k|    {
 1430|   206k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   206k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   206k|    {
  437|   206k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   260k|        : m_str(r.str)
 7970|   260k|    {
 7971|   260k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   286k|    {
 1598|   286k|        return has_value();
 1599|   286k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   492k|    {
  485|   492k|        return m_has_value;
  486|   492k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   206k|    {
 1673|   206k|        return &value();
 1674|   206k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   206k|    {
 1627|   206k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   206k|        return this->get_value();
 1629|   206k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   206k|    {
  451|   206k|        return m_value;
  452|   206k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3566|  5.41M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3567|  5.41M|    {
 3568|  5.41M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.41M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  5.41M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  22.6M|    {
 3574|  22.6M|        return m_code == good;
 3575|  22.6M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   556k|    {
 3585|   556k|        return m_code;
 3586|   556k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  79.6M|    {
 3330|  79.6M|        return m_iterator;
 3331|  79.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  34.5M|    {
 3330|  34.5M|        return m_iterator;
 3331|  34.5M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  3.53M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   946k|    {
 6272|   946k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6273|   946k|            m_specs.localized = true;
 6274|       |        }
 6275|       |        else {
 6276|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|       |        }
 6278|   946k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  2.58M|    {
 6303|  2.58M|        m_specs.type = type;
 6304|  2.58M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  3.53M|    {
 6376|  3.53M|        return static_cast<bool>(m_error);
 6377|  3.53M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   556k|{
 3609|   556k|    return a.code() == b;
 3610|   556k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   556k|{
 3613|   556k|    return !(a == b);
 3614|   556k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   946k|{
 7063|   946k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 946k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 946k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 946k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 946k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 946k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 946k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 946k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 946k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 946k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 946k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 946k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 946k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 946k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 946k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 946k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 946k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   295k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 295k, False: 651k]
  ------------------
 7091|   617k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 322k, False: 624k]
  ------------------
 7092|   946k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 329k, False: 617k]
  ------------------
 7093|   946k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 946k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 946k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 946k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 946k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 946k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 946k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   946k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   946k|            SCN_CLANG_POP
 7110|   946k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   946k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  4.18M|    {
 2896|  4.18M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  4.18M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  4.18M|    {
 2930|  4.18M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  4.18M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  4.18M|    {
 2953|  4.18M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  4.18M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  4.18M|    {
 2962|  4.18M|        return fn::impl(std::forward<T>(t));
 2963|  4.18M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.03k|{
 3654|  1.03k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.03k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  3.05k|{
 3654|  3.05k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  3.05k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  41.8k|{
 3654|  41.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  41.8k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  3.53M|{
 7193|  3.53M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 2.58M, False: 946k]
  ------------------
 7194|  3.53M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 2.58M]
  ------------------
 7195|  2.58M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 2.58M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  3.53M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   505M|    {
 4195|   505M|        return m_end == nullptr;
 4196|   505M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  1.35M|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|  1.35M|    else {
 3720|  1.35M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  1.35M|    }
 3722|  1.35M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  6.62M|    {
 4211|  6.62M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 6.62M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  6.62M|        return parent()->get_segment_starting_at(position());
 4217|  6.62M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   281M|    {
 4205|   281M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   281M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   281M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   281M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  6.62M|    {
 4101|  6.62M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.90M, False: 3.71M]
  |  |  ------------------
  ------------------
 4102|  6.62M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.90M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.90M|        }
 4105|  3.71M|        const auto start = pos - m_putback_buffer.size();
 4106|  3.71M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  3.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  3.71M|        return m_current_view.substr(start);
 4108|  3.71M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  4.62M|    {
 4200|  4.62M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  4.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  4.62M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  4.62M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  12.1M|    {
 4190|  12.1M|        return m_position;
 4191|  12.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  5.25M|    {
 4123|  5.25M|        return m_is_contiguous;
 4124|  5.25M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|   111M|    {
 4195|   111M|        return m_end == nullptr;
 4196|   111M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   563k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|   563k|    else {
 3720|   563k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   563k|    }
 3722|   563k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  1.98M|    {
 4211|  1.98M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.98M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.98M|        return parent()->get_segment_starting_at(position());
 4217|  1.98M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  59.4M|    {
 4205|  59.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  59.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  59.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  59.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  1.98M|    {
 4101|  1.98M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.14M, False: 840k]
  |  |  ------------------
  ------------------
 4102|  1.98M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  1.14M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  1.14M|        }
 4105|   840k|        const auto start = pos - m_putback_buffer.size();
 4106|   840k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   840k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   840k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   840k|        return m_current_view.substr(start);
 4108|   840k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  2.15M|    {
 4200|  2.15M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  2.15M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  2.15M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  4.34M|    {
 4190|  4.34M|        return m_position;
 4191|  4.34M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  2.45M|    {
 4123|  2.45M|        return m_is_contiguous;
 4124|  2.45M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  13.5M|    {
 3180|  13.5M|        return static_cast<D&>(*this);
 3181|  13.5M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  6.80M|    {
 2978|  6.80M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  6.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  6.80M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  6.80M|    {
 3005|  6.80M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  6.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  6.80M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  6.80M|    {
 3221|  6.80M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 12.5k, False: 6.79M]
  ------------------
 3222|  6.80M|                   ? nullptr
 3223|  6.80M|                   : std::addressof(*ranges::begin(derived()));
 3224|  6.80M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.41M|    {
 3180|  1.41M|        return static_cast<D&>(*this);
 3181|  1.41M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   707k|    {
 2978|   707k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   707k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   707k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   707k|    {
 3005|   707k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   707k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   707k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   707k|    {
 3221|   707k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 707k]
  ------------------
 3222|   707k|                   ? nullptr
 3223|   707k|                   : std::addressof(*ranges::begin(derived()));
 3224|   707k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  1.26M|    {
 8169|  1.26M|        return ranges::subrange{begin(), end()};
 8170|  1.26M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  3.70M|    {
 8153|  3.70M|        return m_current;
 8154|  3.70M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  1.26M|    {
 8161|  1.26M|        return ranges::default_sentinel;
 8162|  1.26M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  19.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  19.4M|    static_cast<    \
  |  |  929|  19.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  19.4M|    static_cast<    \
  |  |  929|  19.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  19.4M|    {
 3316|  19.4M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  7.51M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.75M|    {
 1837|  1.75M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.75M|                                            std::forward<F>(f));
 1839|  1.75M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.75M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.75M|    else {
 1333|  1.75M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.75M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.73M, False: 22.0k]
  |  |  ------------------
  ------------------
 1335|  1.75M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.75M|                   : result(unexpect,
 1337|  22.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  22.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.75M|    }
 1340|  1.75M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  18.6M|    {
  485|  18.6M|        return m_has_value;
  486|  18.6M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  6.31M|    {
 1663|  6.31M|        return std::move(value());
 1664|  6.31M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  7.20M|    {
 1627|  7.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.20M|        return this->get_value();
 1629|  7.20M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  7.20M|    {
  451|  7.20M|        return m_value;
  452|  7.20M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  7.79M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.79M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.79M|    {
 1430|  7.79M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.79M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.79M|    {
  437|  7.79M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.93M|    {
 1177|  9.93M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  47.6k|{
 1211|  47.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  47.6k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  61.0k|    {
 1614|  61.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  61.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  61.0k|        return std::move(this->get_unexpected().error());
 1616|  61.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  83.7k|    {
  468|  83.7k|        return m_unexpected;
  469|  83.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   470k|    {
  361|   470k|        return m_unexpected;
  362|   470k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.74M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.74M|    {
 1486|  1.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  2.05M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.05M|          m_has_value(false)
  446|  2.05M|    {
  447|  2.05M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   599k|    {
 8169|   599k|        return ranges::subrange{begin(), end()};
 8170|   599k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  1.61M|    {
 8153|  1.61M|        return m_current;
 8154|  1.61M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   599k|    {
 8161|   599k|        return ranges::default_sentinel;
 8162|   599k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  8.39M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.39M|    static_cast<    \
  |  |  929|  8.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.39M|    static_cast<    \
  |  |  929|  8.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  8.39M|    {
 3316|  8.39M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   819k|    {
 1837|   819k|        return detail::transform_error_impl(std::move(*this),
 1838|   819k|                                            std::forward<F>(f));
 1839|   819k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   819k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   819k|    else {
 1333|   819k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   819k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   819k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 816k, False: 3.85k]
  |  |  ------------------
  ------------------
 1335|   819k|                   ? result(*std::forward<Exp>(exp))
 1336|   819k|                   : result(unexpect,
 1337|  3.85k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.85k|                                           std::forward<Exp>(exp).error()));
 1339|   819k|    }
 1340|   819k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  7.91M|    {
  485|  7.91M|        return m_has_value;
  486|  7.91M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.91M|    {
 1663|  2.91M|        return std::move(value());
 1664|  2.91M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.94M|    {
  451|  2.94M|        return m_value;
  452|  2.94M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.97M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.97M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.97M|    {
 1430|  2.97M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.97M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.97M|    {
  437|  2.97M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.68M|    {
 1177|  4.68M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  62.4k|    {
 1614|  62.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  62.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  62.4k|        return std::move(this->get_unexpected().error());
 1616|  62.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  64.5k|    {
  468|  64.5k|        return m_unexpected;
  469|  64.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.04M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.04M|    {
 1486|  1.04M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.70M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.70M|          m_has_value(false)
  446|  1.70M|    {
  447|  1.70M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   217k|        : m_unexpected(std::forward<Err>(e))
  346|   217k|    {
  347|   217k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   217k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   217k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   270k|        : base(unexpect, std::move(e.error())),
 1474|   270k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   270k|    {
 1476|   270k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.73M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.73M|          m_has_value(false)
  446|  1.73M|    {
  447|  1.73M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.53M|    {
 1177|  8.53M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  6.71M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.71M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.71M|    {
 1430|  6.71M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  6.71M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.71M|    {
  437|  6.71M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  10.0M|    {
 1598|  10.0M|        return has_value();
 1599|  10.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  15.6M|    {
  485|  15.6M|        return m_has_value;
  486|  15.6M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   320k|    {
 1604|   320k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   320k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   320k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   320k|        return this->get_unexpected().error();
 1606|   320k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   320k|    {
  468|   320k|        return m_unexpected;
  469|   320k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  4.32M|    {
 1663|  4.32M|        return std::move(value());
 1664|  4.32M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  5.35M|    {
 1627|  5.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.35M|        return this->get_value();
 1629|  5.35M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.35M|    {
  451|  5.35M|        return m_value;
  452|  5.35M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   537k|        : base(unexpect, std::move(e.error())),
 1474|   537k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   537k|    {
 1476|   537k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.46M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.46M|          m_has_value(false)
  446|  1.46M|    {
  447|  1.46M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.68M|    {
 1177|  4.68M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  3.22M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.22M|    {
 1430|  3.22M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.22M|    {
  437|  3.22M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  5.50M|    {
 1598|  5.50M|        return has_value();
 1599|  5.50M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  8.67M|    {
  485|  8.67M|        return m_has_value;
  486|  8.67M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   645k|    {
 1604|   645k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   645k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   645k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   645k|        return this->get_unexpected().error();
 1606|   645k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   645k|    {
  468|   645k|        return m_unexpected;
  469|   645k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.10M|    {
 1663|  2.10M|        return std::move(value());
 1664|  2.10M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.51M|    {
 1627|  2.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.51M|        return this->get_value();
 1629|  2.51M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.51M|    {
  451|  2.51M|        return m_value;
  452|  2.51M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.51M|    {
 1837|  1.51M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.51M|                                            std::forward<F>(f));
 1839|  1.51M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.51M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.51M|    else {
 1333|  1.51M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.51M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.51M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.49M, False: 17.8k]
  |  |  ------------------
  ------------------
 1335|  1.51M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.51M|                   : result(unexpect,
 1337|  17.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  17.8k|                                           std::forward<Exp>(exp).error()));
 1339|  1.51M|    }
 1340|  1.51M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.72M|    {
  485|  5.72M|        return m_has_value;
  486|  5.72M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.49M|    {
 1663|  1.49M|        return std::move(value());
 1664|  1.49M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.95M|    {
 1627|  1.95M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.95M|        return this->get_value();
 1629|  1.95M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.95M|    {
  451|  1.95M|        return m_value;
  452|  1.95M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  17.8k|    {
 1614|  17.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  17.8k|        return std::move(this->get_unexpected().error());
 1616|  17.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  23.2k|    {
  468|  23.2k|        return m_unexpected;
  469|  23.2k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.46M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.46M|    {
 1486|  1.46M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  15.5M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   307k|        : base(unexpect, std::move(e.error())),
 1474|   307k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   307k|    {
 1476|   307k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  15.4M|    {
 4280|  15.4M|        return x.is_at_end();
 4281|  15.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  38.3M|    {
 4324|  38.3M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 38.3M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  38.3M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 38.3M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  38.3M|        return !read_at_position();
 4331|  38.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   165M|    {
 4304|   165M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   165M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   165M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   165M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 165M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   165M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   165M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 142M, False: 22.3M]
  |  |  ------------------
  ------------------
 4311|   142M|            return true;
 4312|   142M|        }
 4313|       |
 4314|  44.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 22.3M, False: 22.0M]
  ------------------
 4315|  22.3M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 324k, False: 22.0M]
  ------------------
 4316|   324k|                return false;
 4317|   324k|            }
 4318|  22.3M|        }
 4319|  22.0M|        return true;
 4320|  22.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   214M|    {
 4081|   214M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   214M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  42.6M|    {
 4239|  42.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  42.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  42.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 42.6M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  42.6M|        auto res = read_at_position();
 4248|  42.6M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  42.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  42.6M|        return parent()->get_character_at(m_position);
 4250|  42.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  42.6M|    {
 4112|  42.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  42.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6M, False: 16.0M]
  |  |  ------------------
  ------------------
 4113|  42.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  26.6M|            return m_putback_buffer[pos];
 4115|  26.6M|        }
 4116|  16.0M|        const auto start = pos - m_putback_buffer.size();
 4117|  16.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  16.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  16.0M|        return m_current_view[start];
 4119|  16.0M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  11.2M|        : base(std::in_place, std::forward<U>(val)),
 1428|  11.2M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  11.2M|    {
 1430|  11.2M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  11.2M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  11.2M|    {
  437|  11.2M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.3M|    {
 1177|  11.3M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   156k|        : m_unexpected(std::forward<Err>(e))
  346|   156k|    {
  347|   156k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   156k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  83.7k|        : base(unexpect, std::move(e.error())),
 1474|  83.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  83.7k|    {
 1476|  83.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  83.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  83.7k|          m_has_value(false)
  446|  83.7k|    {
  447|  83.7k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   235k|        : m_unexpected(std::forward<Args>(args)...)
  355|   235k|    {
  356|   235k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   235k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   235k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  4.94M|    {
 1598|  4.94M|        return has_value();
 1599|  4.94M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   893k|    {
 1653|   893k|        return value();
 1654|   893k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  40.3M|    {
 4274|  40.3M|        return !(lhs == rhs);
 4275|  40.3M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  44.8M|    {
 4269|  44.8M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 44.8M, False: 0]
  |  Branch (4269:46): [True: 5.82M, False: 39.0M]
  ------------------
 4270|  44.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  84.2M|    {
 4225|  84.2M|        ++m_position;
 4226|  84.2M|        (void)read_at_position();
 4227|  84.2M|        return *this;
 4228|  84.2M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  78.4k|        : m_unexpected(std::forward<Err>(e))
  346|  78.4k|    {
  347|  78.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  78.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  78.4k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  16.7k|        : base(unexpect, std::move(e.error())),
 1474|  16.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.7k|    {
 1476|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  16.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.7k|          m_has_value(false)
  446|  16.7k|    {
  447|  16.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.42M|    {
 1177|  2.42M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.40M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.40M|    {
 1430|  2.40M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.40M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.40M|    {
  437|  2.40M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.42M|    {
 1598|  2.42M|        return has_value();
 1599|  2.42M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.85M|    {
  485|  4.85M|        return m_has_value;
  486|  4.85M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  16.7k|    {
 1604|  16.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  16.7k|        return this->get_unexpected().error();
 1606|  16.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  16.7k|    {
  468|  16.7k|        return m_unexpected;
  469|  16.7k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.40M|    {
 1663|  2.40M|        return std::move(value());
 1664|  2.40M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.40M|    {
 1627|  2.40M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.40M|        return this->get_value();
 1629|  2.40M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.40M|    {
  451|  2.40M|        return m_value;
  452|  2.40M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  54.7M|    {
 3334|  54.7M|        return m_sentinel;
 3335|  54.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  68.8k|        : m_unexpected(std::forward<Err>(e))
  346|  68.8k|    {
  347|  68.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  68.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  68.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  19.4M|    {
  361|  19.4M|        return m_unexpected;
  362|  19.4M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  5.20M|        : m_unexpected(std::forward<Args>(args)...)
  355|  5.20M|    {
  356|  5.20M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  5.20M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  24.0M|        : m_unexpected(std::forward<Err>(e))
  346|  24.0M|    {
  347|  24.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  24.0M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  24.0M|    {
  361|  24.0M|        return m_unexpected;
  362|  24.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  24.0M|        : m_unexpected(std::forward<Args>(args)...)
  355|  24.0M|    {
  356|  24.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  24.0M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   156k|{
 1211|   156k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   156k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  4.97M|        : m_unexpected(std::forward<Err>(e))
  346|  4.97M|    {
  347|  4.97M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.97M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  22.7k|    {
 1604|  22.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  22.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  22.7k|        return this->get_unexpected().error();
 1606|  22.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.77M|        : base(unexpect, std::move(e.error())),
 1474|  1.77M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.77M|    {
 1476|  1.77M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.81M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.81M|          m_has_value(false)
  446|  1.81M|    {
  447|  1.81M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.3M|    {
 1177|  19.3M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   903k|        : base(std::in_place, std::forward<U>(val)),
 1428|   903k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   903k|    {
 1430|   903k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   903k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   903k|    {
  437|   903k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  9.84M|        : base(unexpect, std::move(e.error())),
 1474|  9.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.84M|    {
 1476|  9.84M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  9.84M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  9.84M|          m_has_value(false)
  446|  9.84M|    {
  447|  9.84M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  21.0M|    {
 1598|  21.0M|        return has_value();
 1599|  21.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  37.1M|    {
  485|  37.1M|        return m_has_value;
  486|  37.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  4.93M|    {
 1604|  4.93M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.93M|        return this->get_unexpected().error();
 1606|  4.93M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.93M|    {
  468|  4.93M|        return m_unexpected;
  469|  4.93M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.89M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.89M|    {
 1430|  1.89M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.89M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.89M|    {
  437|  1.89M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.89M|    {
 1177|  1.89M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    309|        : base(unexpect, std::move(e.error())),
 1474|    309|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    309|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    309|          m_has_value(false)
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  4.90M|    {
 1653|  4.90M|        return value();
 1654|  4.90M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  9.49M|    {
 1627|  9.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.49M|        return this->get_value();
 1629|  9.49M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  9.49M|    {
  451|  9.49M|        return m_value;
  452|  9.49M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   159k|    {
 1598|   159k|        return has_value();
 1599|   159k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  3.78M|    {
  485|  3.78M|        return m_has_value;
  486|  3.78M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.73M|    {
 1663|  1.73M|        return std::move(value());
 1664|  1.73M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.89M|    {
 1627|  1.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.89M|        return this->get_value();
 1629|  1.89M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.89M|    {
  451|  1.89M|        return m_value;
  452|  1.89M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  4.62M|    {
 1837|  4.62M|        return detail::transform_error_impl(std::move(*this),
 1838|  4.62M|                                            std::forward<F>(f));
 1839|  4.62M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  4.62M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  4.62M|    else {
 1333|  4.62M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.62M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.58M, False: 38.9k]
  |  |  ------------------
  ------------------
 1335|  4.62M|                   ? result(*std::forward<Exp>(exp))
 1336|  4.62M|                   : result(unexpect,
 1337|  38.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  38.9k|                                           std::forward<Exp>(exp).error()));
 1339|  4.62M|    }
 1340|  4.62M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  6.74M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.74M|    {
 1430|  6.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  6.74M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.74M|    {
  437|  6.74M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  38.9k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  38.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  38.9k|    {
 1486|  38.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.58M|    {
 1663|  4.58M|        return std::move(value());
 1664|  4.58M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.98M|    {
 3330|  1.98M|        return m_iterator;
 3331|  1.98M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.98M|    {
 3334|  1.98M|        return m_sentinel;
 3335|  1.98M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  11.6M|    {
 1598|  11.6M|        return has_value();
 1599|  11.6M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  18.2M|    {
  485|  18.2M|        return m_has_value;
  486|  18.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   403k|    {
 1604|   403k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   403k|        return this->get_unexpected().error();
 1606|   403k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   403k|    {
  468|   403k|        return m_unexpected;
  469|   403k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  5.00M|    {
 1663|  5.00M|        return std::move(value());
 1664|  5.00M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  6.24M|    {
 1627|  6.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.24M|        return this->get_value();
 1629|  6.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.24M|    {
  451|  6.24M|        return m_value;
  452|  6.24M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  3.12M|{
  326|  3.12M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  3.12M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|  1.56M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.56M|    static_cast<    \
  |  |  929|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.56M|    static_cast<    \
  |  |  929|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.56M|    {
 3316|  1.56M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  22.9M|    {
 4291|  22.9M|        return !x.is_at_end();
 4292|  22.9M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  23.2k|        : base(unexpect, std::move(e.error())),
 1474|  23.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.2k|    {
 1476|  23.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.2k|          m_has_value(false)
  446|  23.2k|    {
  447|  23.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.74M|    {
 1177|  3.74M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.71M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.71M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.71M|    {
 1430|  3.71M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.71M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.71M|    {
  437|  3.71M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  2.23M|    {
 1598|  2.23M|        return has_value();
 1599|  2.23M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   461k|    {
 1653|   461k|        return value();
 1654|   461k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  12.8k|        : base(unexpect, std::move(e.error())),
 1474|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.8k|    {
 1476|  12.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  12.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.8k|          m_has_value(false)
  446|  12.8k|    {
  447|  12.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.02M|    {
 1177|  2.02M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.01M|    {
 1430|  2.01M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  2.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.01M|    {
  437|  2.01M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  2.02M|    {
 1598|  2.02M|        return has_value();
 1599|  2.02M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.05M|    {
  485|  4.05M|        return m_has_value;
  486|  4.05M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  12.8k|    {
 1604|  12.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  12.8k|        return this->get_unexpected().error();
 1606|  12.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  12.8k|    {
  468|  12.8k|        return m_unexpected;
  469|  12.8k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.01M|    {
 1663|  2.01M|        return std::move(value());
 1664|  2.01M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.01M|    {
 1627|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.01M|        return this->get_value();
 1629|  2.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.01M|    {
  451|  2.01M|        return m_value;
  452|  2.01M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  5.40k|    {
 1604|  5.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.40k|        return this->get_unexpected().error();
 1606|  5.40k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.51M|        : base(unexpect, std::move(e.error())),
 1474|  1.51M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.51M|    {
 1476|  1.51M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.51M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.51M|          m_has_value(false)
  446|  1.51M|    {
  447|  1.51M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.54M|    {
 1177|  8.54M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   470k|        : base(std::in_place, std::forward<U>(val)),
 1428|   470k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   470k|    {
 1430|   470k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   470k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   470k|    {
  437|   470k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  5.91M|        : base(unexpect, std::move(e.error())),
 1474|  5.91M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.91M|    {
 1476|  5.91M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  5.91M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.91M|          m_has_value(false)
  446|  5.91M|    {
  447|  5.91M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  10.0M|    {
 1598|  10.0M|        return has_value();
 1599|  10.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  17.1M|    {
  485|  17.1M|        return m_has_value;
  486|  17.1M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  4.09M|    {
 1604|  4.09M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.09M|        return this->get_unexpected().error();
 1606|  4.09M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.09M|    {
  468|  4.09M|        return m_unexpected;
  469|  4.09M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.52M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.52M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.52M|    {
 1430|  1.52M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.52M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.52M|    {
  437|  1.52M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.52M|    {
 1177|  1.52M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    102|        : base(unexpect, std::move(e.error())),
 1474|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|    102|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    102|          m_has_value(false)
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.56M|    {
 1653|  1.56M|        return value();
 1654|  1.56M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.56M|    {
 1627|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.56M|        return this->get_value();
 1629|  1.56M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.56M|    {
  451|  1.56M|        return m_value;
  452|  1.56M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  36.0k|    {
 1598|  36.0k|        return has_value();
 1599|  36.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  3.05M|    {
  485|  3.05M|        return m_has_value;
  486|  3.05M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.49M|    {
 1663|  1.49M|        return std::move(value());
 1664|  1.49M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.52M|    {
 1627|  1.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.52M|        return this->get_value();
 1629|  1.52M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.52M|    {
  451|  1.52M|        return m_value;
  452|  1.52M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   639k|        : base(std::in_place, std::forward<U>(val)),
 1428|   639k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   639k|    {
 1430|   639k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   639k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   639k|    {
  437|   639k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.87M|    {
 2855|  2.87M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.87M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.87M|    {
 2836|  2.87M|        return t.data();
 2837|  2.87M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|  1.10M|        : base(unexpect, std::move(e.error())),
 1474|  1.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.10M|    {
 1476|  1.10M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|  1.10M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.10M|          m_has_value(false)
  446|  1.10M|    {
  447|  1.10M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.6M|    {
 1177|  13.6M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  12.3M|        : base(std::in_place, std::forward<U>(val)),
 1428|  12.3M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  12.3M|    {
 1430|  12.3M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  12.3M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  12.3M|    {
  437|  12.3M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  8.36M|    {
 1663|  8.36M|        return std::move(value());
 1664|  8.36M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  5.12M|{
 1211|  5.12M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  5.12M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.73M|    {
 1837|  1.73M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.73M|                                            std::forward<F>(f));
 1839|  1.73M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.73M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.73M|    else {
 1333|  1.73M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.73M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.73M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.73M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.73M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.73M|    }
 1340|  1.73M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.73M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.73M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.73M|    {
 1430|  1.73M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.73M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.73M|    {
  437|  1.73M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.73M|    {
 1177|  1.73M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.73M|    {
 1598|  1.73M|        return has_value();
 1599|  1.73M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.46M|    {
  485|  3.46M|        return m_has_value;
  486|  3.46M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.73M|    {
 1663|  1.73M|        return std::move(value());
 1664|  1.73M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.73M|    {
 1627|  1.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.73M|        return this->get_value();
 1629|  1.73M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.73M|    {
  451|  1.73M|        return m_value;
  452|  1.73M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.72M|    {
 1823|  1.72M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.72M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.72M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.72M|    else {
 1333|  1.72M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.72M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.72M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
 1335|  1.72M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.72M|                   : result(unexpect,
 1337|  1.72M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.72M|                                           std::forward<Exp>(exp).error()));
 1339|  1.72M|    }
 1340|  1.72M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  85.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  85.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  85.5k|    {
 1430|  85.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  85.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  85.5k|    {
  437|  85.5k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.23M|    {
 1653|  1.23M|        return value();
 1654|  1.23M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   402k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   159k|    {
 1673|   159k|        return &value();
 1674|   159k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.24M|    {
 2724|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.24M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.24M|    {
 2705|  1.24M|        return decay_copy(t.begin());
 2706|  1.24M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.24M|{
 1949|  1.24M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.24M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   757k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.49M|    {
 1837|  1.49M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.49M|                                            std::forward<F>(f));
 1839|  1.49M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|  1.49M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.49M|    else {
 1333|  1.49M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.49M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.49M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.49M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.49M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.49M|    }
 1340|  1.49M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.49M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.49M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.49M|    {
 1430|  1.49M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.49M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.49M|    {
  437|  1.49M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.49M|    {
 1177|  1.49M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.49M|    {
 1598|  1.49M|        return has_value();
 1599|  1.49M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.98M|    {
  485|  2.98M|        return m_has_value;
  486|  2.98M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.49M|    {
 1663|  1.49M|        return std::move(value());
 1664|  1.49M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.49M|    {
 1627|  1.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.49M|        return this->get_value();
 1629|  1.49M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.49M|    {
  451|  1.49M|        return m_value;
  452|  1.49M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.44M|    {
 1823|  1.44M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.44M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.44M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.44M|    else {
 1333|  1.44M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.44M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.44M]
  |  |  ------------------
  ------------------
 1335|  1.44M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.44M|                   : result(unexpect,
 1337|  1.44M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.44M|                                           std::forward<Exp>(exp).error()));
 1339|  1.44M|    }
 1340|  1.44M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  82.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  82.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  82.3k|    {
 1430|  82.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  82.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  82.3k|    {
  437|  82.3k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|  1.44M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.44M|    static_cast<    \
  |  |  929|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.44M|    {
 3648|  1.44M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  1.03M|    {
 1653|  1.03M|        return value();
 1654|  1.03M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  35.9k|    {
 1673|  35.9k|        return &value();
 1674|  35.9k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|  1.72M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.72M|    static_cast<    \
  |  |  929|  1.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.72M|    {
 3648|  1.72M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   661k|        : base(unexpect, std::move(e.error())),
 1474|   661k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   661k|    {
 1476|   661k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  6.89M|    {
 4280|  6.89M|        return x.is_at_end();
 4281|  6.89M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  10.8M|    {
 4324|  10.8M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 10.8M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  10.8M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 10.8M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  10.8M|        return !read_at_position();
 4331|  10.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  34.5M|    {
 4304|  34.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  34.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  34.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 34.5M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  34.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  34.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.4M, False: 4.08M]
  |  |  ------------------
  ------------------
 4311|  30.4M|            return true;
 4312|  30.4M|        }
 4313|       |
 4314|  7.98M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 4.08M, False: 3.89M]
  ------------------
 4315|  4.08M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 194k, False: 3.89M]
  ------------------
 4316|   194k|                return false;
 4317|   194k|            }
 4318|  4.08M|        }
 4319|  3.89M|        return true;
 4320|  4.08M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  44.6M|    {
 4081|  44.6M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  44.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  10.8M|    {
 4239|  10.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  10.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 10.8M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  10.8M|        auto res = read_at_position();
 4248|  10.8M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  10.8M|        return parent()->get_character_at(m_position);
 4250|  10.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  10.8M|    {
 4112|  10.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  10.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.22M, False: 1.60M]
  |  |  ------------------
  ------------------
 4113|  10.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  9.22M|            return m_putback_buffer[pos];
 4115|  9.22M|        }
 4116|  1.60M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.60M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.60M|        return m_current_view[start];
 4119|  1.60M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  3.91M|{
 3807|       |    if constexpr (sizeof(U) == 1) {
 3808|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|  3.91M|    else {
 3814|       |        // utf-32
 3815|  3.91M|        static_assert(sizeof(U) == 4);
 3816|  3.91M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  3.91M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  3.91M|        return 1;
 3818|  3.91M|    }
 3819|  3.91M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  4.84M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.84M|    {
 1430|  4.84M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  4.84M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.84M|    {
  437|  4.84M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.90M|    {
 1177|  4.90M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  64.5k|        : base(unexpect, std::move(e.error())),
 1474|  64.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  64.5k|    {
 1476|  64.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  64.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  64.5k|          m_has_value(false)
  446|  64.5k|    {
  447|  64.5k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.92M|    {
 1598|  1.92M|        return has_value();
 1599|  1.92M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  28.3k|    {
 1653|  28.3k|        return value();
 1654|  28.3k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  5.23M|    {
 4274|  5.23M|        return !(lhs == rhs);
 4275|  5.23M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  7.12M|    {
 4269|  7.12M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 7.12M, False: 0]
  |  Branch (4269:46): [True: 2.28M, False: 4.83M]
  ------------------
 4270|  7.12M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  12.8M|    {
 4225|  12.8M|        ++m_position;
 4226|  12.8M|        (void)read_at_position();
 4227|  12.8M|        return *this;
 4228|  12.8M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.91M|{
 4013|       |    if constexpr (sizeof(CharT) == 1) {
 4014|       |        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|  3.91M|    else {
 4020|  3.91M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  3.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  3.91M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.91M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 268k, False: 3.64M]
  |  |  ------------------
  ------------------
 4023|   268k|            return invalid_code_point;
 4024|   268k|        }
 4025|  3.64M|        return cp;
 4026|  3.91M|    }
 4027|  3.91M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.86k|        : base(unexpect, std::move(e.error())),
 1474|  2.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.86k|    {
 1476|  2.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.86k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.86k|          m_has_value(false)
  446|  2.86k|    {
  447|  2.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.01M|    {
 1177|  1.01M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  1.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.01M|    {
  437|  1.01M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.01M|    {
 1598|  1.01M|        return has_value();
 1599|  1.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.02M|    {
  485|  2.02M|        return m_has_value;
  486|  2.02M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.86k|    {
 1604|  2.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.86k|        return this->get_unexpected().error();
 1606|  2.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.86k|    {
  468|  2.86k|        return m_unexpected;
  469|  2.86k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.01M|    {
 1663|  1.01M|        return std::move(value());
 1664|  1.01M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  17.8M|    {
 3334|  17.8M|        return m_sentinel;
 3335|  17.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  2.15k|    {
 1604|  2.15k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.15k|        return this->get_unexpected().error();
 1606|  2.15k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   876k|        : base(unexpect, std::move(e.error())),
 1474|   876k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   876k|    {
 1476|   876k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   935k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   935k|          m_has_value(false)
  446|   935k|    {
  447|   935k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.47M|    {
 1177|  8.47M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  28.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  28.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  28.3k|    {
 1430|  28.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  28.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  28.3k|    {
  437|  28.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  4.81M|        : base(unexpect, std::move(e.error())),
 1474|  4.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.81M|    {
 1476|  4.81M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  4.81M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.81M|          m_has_value(false)
  446|  4.81M|    {
  447|  4.81M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  9.29M|    {
 1598|  9.29M|        return has_value();
 1599|  9.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  16.4M|    {
  485|  16.4M|        return m_has_value;
  486|  16.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  2.74M|    {
 1604|  2.74M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.74M|        return this->get_unexpected().error();
 1606|  2.74M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.74M|    {
  468|  2.74M|        return m_unexpected;
  469|  2.74M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   832k|        : base(std::in_place, std::forward<U>(val)),
 1428|   832k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   832k|    {
 1430|   832k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   832k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   832k|    {
  437|   832k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   833k|    {
 1177|   833k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     91|        : base(unexpect, std::move(e.error())),
 1474|     91|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     91|    {
 1476|     91|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     91|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     91|          m_has_value(false)
  446|     91|    {
  447|     91|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  1.22M|    {
 1653|  1.22M|        return value();
 1654|  1.22M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.32M|    {
 1627|  3.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.32M|        return this->get_value();
 1629|  3.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  3.32M|    {
  451|  3.32M|        return m_value;
  452|  3.32M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  16.9k|    {
 1598|  16.9k|        return has_value();
 1599|  16.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.66M|    {
  485|  1.66M|        return m_has_value;
  486|  1.66M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   816k|    {
 1663|   816k|        return std::move(value());
 1664|   816k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   832k|    {
 1627|   832k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   832k|        return this->get_value();
 1629|   832k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   832k|    {
  451|   832k|        return m_value;
  452|   832k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.15M|    {
 1837|  2.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.15M|                                            std::forward<F>(f));
 1839|  2.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.15M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.15M|    else {
 1333|  2.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.09M, False: 58.5k]
  |  |  ------------------
  ------------------
 1335|  2.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.15M|                   : result(unexpect,
 1337|  58.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  58.5k|                                           std::forward<Exp>(exp).error()));
 1339|  2.15M|    }
 1340|  2.15M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  2.70M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.70M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.70M|    {
 1430|  2.70M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.70M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.70M|    {
  437|  2.70M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  58.5k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  58.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  58.5k|    {
 1486|  58.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.09M|    {
 1663|  2.09M|        return std::move(value());
 1664|  2.09M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   621k|    {
 3330|   621k|        return m_iterator;
 3331|   621k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   621k|    {
 3334|   621k|        return m_sentinel;
 3335|   621k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  5.50M|    {
 1598|  5.50M|        return has_value();
 1599|  5.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.78M|    {
  485|  8.78M|        return m_has_value;
  486|  8.78M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   893k|    {
 1604|   893k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   893k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   893k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   893k|        return this->get_unexpected().error();
 1606|   893k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   893k|    {
  468|   893k|        return m_unexpected;
  469|   893k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.97M|    {
 1663|  1.97M|        return std::move(value());
 1664|  1.97M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.39M|    {
 1627|  2.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.39M|        return this->get_value();
 1629|  2.39M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.39M|    {
  451|  2.39M|        return m_value;
  452|  2.39M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  1.16M|{
  304|  1.16M|    return p;
  305|  1.16M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.16M|{
  326|  1.16M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.16M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|   582k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   582k|    {
 3316|   582k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  4.00M|    {
 4291|  4.00M|        return !x.is_at_end();
 4292|  4.00M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  63.1k|        : base(unexpect, std::move(e.error())),
 1474|  63.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  63.1k|    {
 1476|  63.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  63.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  63.1k|          m_has_value(false)
  446|  63.1k|    {
  447|  63.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.09M|    {
 1177|  4.09M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  4.03M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.03M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.03M|    {
 1430|  4.03M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.03M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.03M|    {
  437|  4.03M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  1.11M|    {
 1598|  1.11M|        return has_value();
 1599|  1.11M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  7.09M|    {
  485|  7.09M|        return m_has_value;
  486|  7.09M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  12.1k|    {
 1653|  12.1k|        return value();
 1654|  12.1k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.92M|    {
 1627|  2.92M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.92M|        return this->get_value();
 1629|  2.92M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.92M|    {
  451|  2.92M|        return m_value;
  452|  2.92M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.86k|        : base(unexpect, std::move(e.error())),
 1474|  2.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.86k|    {
 1476|  2.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.86k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.86k|          m_has_value(false)
  446|  2.86k|    {
  447|  2.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.01M|    {
 1177|  1.01M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.01M|    {
  437|  1.01M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   820k|    {
 1837|   820k|        return detail::transform_error_impl(std::move(*this),
 1838|   820k|                                            std::forward<F>(f));
 1839|   820k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   820k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   820k|    else {
 1333|   820k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   820k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   820k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 816k, False: 3.85k]
  |  |  ------------------
  ------------------
 1335|   820k|                   ? result(*std::forward<Exp>(exp))
 1336|   820k|                   : result(unexpect,
 1337|  3.85k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.85k|                                           std::forward<Exp>(exp).error()));
 1339|   820k|    }
 1340|   820k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.91M|    {
 1663|  2.91M|        return std::move(value());
 1664|  2.91M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  62.5k|    {
 1614|  62.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  62.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  62.5k|        return std::move(this->get_unexpected().error());
 1616|  62.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  63.1k|    {
  468|  63.1k|        return m_unexpected;
  469|  63.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   924k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   924k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   924k|    {
 1486|   924k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.01M|    {
 1598|  1.01M|        return has_value();
 1599|  1.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.02M|    {
  485|  2.02M|        return m_has_value;
  486|  2.02M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.86k|    {
 1604|  2.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.86k|        return this->get_unexpected().error();
 1606|  2.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.86k|    {
  468|  2.86k|        return m_unexpected;
  469|  2.86k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.01M|    {
 1663|  1.01M|        return std::move(value());
 1664|  1.01M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    524|    {
 1604|    524|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    524|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    524|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    524|        return this->get_unexpected().error();
 1606|    524|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   876k|        : base(unexpect, std::move(e.error())),
 1474|   876k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   876k|    {
 1476|   876k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   934k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   934k|          m_has_value(false)
  446|   934k|    {
  447|   934k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.73M|    {
 1177|  6.73M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  12.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  12.1k|    {
 1430|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  12.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  12.1k|    {
  437|  12.1k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.49M|        : base(unexpect, std::move(e.error())),
 1474|  3.49M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.49M|    {
 1476|  3.49M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.49M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.49M|          m_has_value(false)
  446|  3.49M|    {
  447|  3.49M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  7.55M|    {
 1598|  7.55M|        return has_value();
 1599|  7.55M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  13.5M|    {
  485|  13.5M|        return m_has_value;
  486|  13.5M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  2.61M|    {
 1604|  2.61M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.61M|        return this->get_unexpected().error();
 1606|  2.61M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.61M|    {
  468|  2.61M|        return m_unexpected;
  469|  2.61M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   822k|        : base(std::in_place, std::forward<U>(val)),
 1428|   822k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   822k|    {
 1430|   822k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   822k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   822k|    {
  437|   822k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   822k|    {
 1177|   822k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     30|        : base(unexpect, std::move(e.error())),
 1474|     30|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     30|    {
 1476|     30|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     30|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     30|          m_has_value(false)
  446|     30|    {
  447|     30|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   396k|    {
 1653|   396k|        return value();
 1654|   396k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.49M|    {
 1627|  2.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.49M|        return this->get_value();
 1629|  2.49M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.49M|    {
  451|  2.49M|        return m_value;
  452|  2.49M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  5.80k|    {
 1598|  5.80k|        return has_value();
 1599|  5.80k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.64M|    {
  485|  1.64M|        return m_has_value;
  486|  1.64M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   816k|    {
 1663|   816k|        return std::move(value());
 1664|   816k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   822k|    {
 1627|   822k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   822k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   822k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   822k|        return this->get_value();
 1629|   822k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   822k|    {
  451|   822k|        return m_value;
  452|   822k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.15M|    {
 1837|  2.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.15M|                                            std::forward<F>(f));
 1839|  2.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.15M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.15M|    else {
 1333|  2.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.10M, False: 58.7k]
  |  |  ------------------
  ------------------
 1335|  2.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.15M|                   : result(unexpect,
 1337|  58.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  58.7k|                                           std::forward<Exp>(exp).error()));
 1339|  2.15M|    }
 1340|  2.15M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.29M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.29M|    {
 1430|  2.29M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.29M|    {
  437|  2.29M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  58.7k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  58.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  58.7k|    {
 1486|  58.7k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.10M|    {
 1663|  2.10M|        return std::move(value());
 1664|  2.10M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   707k|    {
 2855|   707k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   707k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   707k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   707k|    {
 2836|   707k|        return t.data();
 2837|   707k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   816k|    {
 1837|   816k|        return detail::transform_error_impl(std::move(*this),
 1838|   816k|                                            std::forward<F>(f));
 1839|   816k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   816k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   816k|    else {
 1333|   816k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   816k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   816k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 816k, False: 0]
  |  |  ------------------
  ------------------
 1335|   816k|                   ? result(*std::forward<Exp>(exp))
 1336|   816k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   816k|    }
 1340|   816k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   816k|        : base(std::in_place, std::forward<U>(val)),
 1428|   816k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   816k|    {
 1430|   816k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   816k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   816k|    {
  437|   816k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   816k|    {
 1177|   816k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   816k|    {
 1598|   816k|        return has_value();
 1599|   816k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.63M|    {
  485|  1.63M|        return m_has_value;
  486|  1.63M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   816k|    {
 1663|   816k|        return std::move(value());
 1664|   816k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   816k|    {
 1627|   816k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   816k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   816k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   816k|        return this->get_value();
 1629|   816k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   816k|    {
  451|   816k|        return m_value;
  452|   816k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.04M|    {
 1823|  1.04M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.04M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.04M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.04M|    else {
 1333|  1.04M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.04M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1335|  1.04M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.04M|                   : result(unexpect,
 1337|  1.04M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.04M|                                           std::forward<Exp>(exp).error()));
 1339|  1.04M|    }
 1340|  1.04M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   414k|    {
 1653|   414k|        return value();
 1654|   414k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   160k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  16.8k|    {
 1673|  16.8k|        return &value();
 1674|  16.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   655k|    {
 2724|   655k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   655k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   655k|    {
 2705|   655k|        return decay_copy(t.begin());
 2706|   655k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   655k|{
 1949|   655k|    return SCN_FWD(t);
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   655k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   363k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   816k|    {
 1837|   816k|        return detail::transform_error_impl(std::move(*this),
 1838|   816k|                                            std::forward<F>(f));
 1839|   816k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   816k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   816k|    else {
 1333|   816k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   816k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   816k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 816k, False: 0]
  |  |  ------------------
  ------------------
 1335|   816k|                   ? result(*std::forward<Exp>(exp))
 1336|   816k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   816k|    }
 1340|   816k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   816k|        : base(std::in_place, std::forward<U>(val)),
 1428|   816k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   816k|    {
 1430|   816k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   816k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   816k|    {
  437|   816k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   816k|    {
 1177|   816k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   816k|    {
 1598|   816k|        return has_value();
 1599|   816k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.63M|    {
  485|  1.63M|        return m_has_value;
  486|  1.63M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   816k|    {
 1663|   816k|        return std::move(value());
 1664|   816k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   816k|    {
 1627|   816k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   816k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   816k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   816k|        return this->get_value();
 1629|   816k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   816k|    {
  451|   816k|        return m_value;
  452|   816k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   920k|    {
 1823|   920k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   920k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   920k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   920k|    else {
 1333|   920k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   920k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   920k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 920k]
  |  |  ------------------
  ------------------
 1335|   920k|                   ? result(*std::forward<Exp>(exp))
 1336|   920k|                   : result(unexpect,
 1337|   920k|                            trivial_invoke(std::forward<F>(f),
 1338|   920k|                                           std::forward<Exp>(exp).error()));
 1339|   920k|    }
 1340|   920k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|   920k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   920k|    static_cast<    \
  |  |  929|   920k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|   920k|    {
 3648|   920k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   415k|    {
 1653|   415k|        return value();
 1654|   415k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  5.77k|    {
 1673|  5.77k|        return &value();
 1674|  5.77k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|  1.04M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.04M|    static_cast<    \
  |  |  929|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.04M|    {
 3648|  1.04M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   156k|        : base(std::in_place, std::forward<U>(val)),
 1428|   156k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   156k|    {
 1430|   156k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   156k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   156k|    {
  437|   156k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   171k|{
 3654|   171k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   171k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.37M|    {
 2855|  1.37M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.37M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.37M|    {
 2836|  1.37M|        return t.data();
 2837|  1.37M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  2.95M|    {
 5466|  2.95M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  2.95M|        return static_cast<std::size_t>(m_desc &
 5471|  2.95M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  2.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  5.90M|    {
 5491|  5.90M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  5.90M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  2.95M|    {
 5434|  2.95M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  2.95M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  2.95M|        const auto t = type(id);
 5446|  2.95M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  2.95M|        basic_scan_arg<Context> arg;
 5451|  2.95M|        arg.m_type = t;
 5452|  2.95M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 2.95M, False: 0]
  ------------------
 5453|  2.95M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  2.95M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  2.95M|        return arg;
 5459|  2.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  2.95M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  2.95M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  2.95M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  2.95M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  2.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  2.95M|    {
 5495|  2.95M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  2.95M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  5.59M|    {
 5247|  5.59M|        return m_type != detail::arg_type::none_type;
 5248|  5.59M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   443k|{
 8417|   443k|#define SCN_VISIT(Type)                                         \
 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   443k|    }                                                           \
 8421|   443k|    else {                                                      \
 8422|   443k|        return vis(monostate_val);                              \
 8423|   443k|    }
 8424|       |
 8425|   443k|    monostate monostate_val{};
 8426|       |
 8427|   443k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 443k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 443k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 443k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 443k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 443k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 443k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 443k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 443k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 443k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 443k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 443k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 443k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 443k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 443k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 443k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   142k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 142k, False: 300k]
  ------------------
 8459|   142k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   142k|    }                                                           \
  |  | 8421|   142k|    else {                                                      \
  |  | 8422|   142k|        return vis(monostate_val);                              \
  |  | 8423|   142k|    }
  ------------------
 8460|   291k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 148k, False: 294k]
  ------------------
 8461|   291k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   291k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   291k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   291k|    }                                                           \
  |  | 8421|   291k|    else {                                                      \
  |  | 8422|   291k|        return vis(monostate_val);                              \
  |  | 8423|   291k|    }
  ------------------
 8462|   443k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 151k, False: 291k]
  ------------------
 8463|   443k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   443k|    }                                                           \
  |  | 8421|   443k|    else {                                                      \
  |  | 8422|   443k|        return vis(monostate_val);                              \
  |  | 8423|   443k|    }
  ------------------
 8464|   443k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 443k]
  ------------------
 8465|   443k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   443k|    }                                                           \
  |  | 8421|   443k|    else {                                                      \
  |  | 8422|   443k|        return vis(monostate_val);                              \
  |  | 8423|   443k|    }
  ------------------
 8466|   443k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 443k]
  ------------------
 8467|   443k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   443k|    }                                                           \
  |  | 8421|   443k|    else {                                                      \
  |  | 8422|   443k|        return vis(monostate_val);                              \
  |  | 8423|   443k|    }
  ------------------
 8468|   443k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 443k]
  ------------------
 8469|   443k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   443k|    }                                                           \
  |  | 8421|   443k|    else {                                                      \
  |  | 8422|   443k|        return vis(monostate_val);                              \
  |  | 8423|   443k|    }
  ------------------
 8470|   443k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 443k]
  ------------------
 8471|   443k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   443k|    }                                                           \
  |  | 8421|   443k|    else {                                                      \
  |  | 8422|   443k|        return vis(monostate_val);                              \
  |  | 8423|   443k|    }
  ------------------
 8472|   443k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 443k]
  ------------------
 8473|   443k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   443k|    }                                                           \
  |  | 8421|   443k|    else {                                                      \
  |  | 8422|   443k|        return vis(monostate_val);                              \
  |  | 8423|   443k|    }
  ------------------
 8474|   443k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 443k]
  ------------------
 8475|   443k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   443k|    }                                                           \
  |  | 8421|   443k|    else {                                                      \
  |  | 8422|   443k|        return vis(monostate_val);                              \
  |  | 8423|   443k|    }
  ------------------
 8476|       |
 8477|   443k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 443k]
  ------------------
 8478|   443k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   443k|            return vis(
 8480|   443k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 443k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 443k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   443k|            SCN_CLANG_POP
 8495|   443k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5543|  2.33M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  2.33M|    {
 5545|  2.33M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|  1.26M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.26M|    static_cast<    \
  |  |  929|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.26M|    {
 8138|  1.26M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8054|  2.33M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.33M|    static_cast<    \
  |  |  929|  2.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.33M|    static_cast<    \
  |  |  929|  2.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  2.33M|    {
 8056|  2.33M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.75M|{
 4344|  1.75M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.75M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.75M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.75M|                            ranges::default_sentinel};
 4350|  1.75M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4175|  1.75M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|  1.75M|    {
 4177|  1.75M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.75M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.75M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   486k|{
 8417|   486k|#define SCN_VISIT(Type)                                         \
 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   486k|    }                                                           \
 8421|   486k|    else {                                                      \
 8422|   486k|        return vis(monostate_val);                              \
 8423|   486k|    }
 8424|       |
 8425|   486k|    monostate monostate_val{};
 8426|       |
 8427|   486k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 486k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 486k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 486k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 486k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 486k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 486k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 486k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 486k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 486k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 486k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 486k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 486k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 486k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 486k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 486k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   156k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 156k, False: 330k]
  ------------------
 8459|   156k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   156k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   156k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   156k|    }                                                           \
  |  | 8421|   156k|    else {                                                      \
  |  | 8422|   156k|        return vis(monostate_val);                              \
  |  | 8423|   156k|    }
  ------------------
 8460|   320k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 164k, False: 322k]
  ------------------
 8461|   320k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   320k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   320k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   320k|    }                                                           \
  |  | 8421|   320k|    else {                                                      \
  |  | 8422|   320k|        return vis(monostate_val);                              \
  |  | 8423|   320k|    }
  ------------------
 8462|   486k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 166k, False: 320k]
  ------------------
 8463|   486k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   486k|    }                                                           \
  |  | 8421|   486k|    else {                                                      \
  |  | 8422|   486k|        return vis(monostate_val);                              \
  |  | 8423|   486k|    }
  ------------------
 8464|   486k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 486k]
  ------------------
 8465|   486k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   486k|    }                                                           \
  |  | 8421|   486k|    else {                                                      \
  |  | 8422|   486k|        return vis(monostate_val);                              \
  |  | 8423|   486k|    }
  ------------------
 8466|   486k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 486k]
  ------------------
 8467|   486k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   486k|    }                                                           \
  |  | 8421|   486k|    else {                                                      \
  |  | 8422|   486k|        return vis(monostate_val);                              \
  |  | 8423|   486k|    }
  ------------------
 8468|   486k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 486k]
  ------------------
 8469|   486k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   486k|    }                                                           \
  |  | 8421|   486k|    else {                                                      \
  |  | 8422|   486k|        return vis(monostate_val);                              \
  |  | 8423|   486k|    }
  ------------------
 8470|   486k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 486k]
  ------------------
 8471|   486k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   486k|    }                                                           \
  |  | 8421|   486k|    else {                                                      \
  |  | 8422|   486k|        return vis(monostate_val);                              \
  |  | 8423|   486k|    }
  ------------------
 8472|   486k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 486k]
  ------------------
 8473|   486k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   486k|    }                                                           \
  |  | 8421|   486k|    else {                                                      \
  |  | 8422|   486k|        return vis(monostate_val);                              \
  |  | 8423|   486k|    }
  ------------------
 8474|   486k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 486k]
  ------------------
 8475|   486k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   486k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   486k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   486k|    }                                                           \
  |  | 8421|   486k|    else {                                                      \
  |  | 8422|   486k|        return vis(monostate_val);                              \
  |  | 8423|   486k|    }
  ------------------
 8476|       |
 8477|   486k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 486k]
  ------------------
 8478|   486k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   486k|            return vis(
 8480|   486k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 486k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 486k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   486k|            SCN_CLANG_POP
 8495|   486k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.06M|{
 7044|  1.06M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.06M|    handler.check_args_exhausted();
 7046|  1.06M|    return handler.get_error();
 7047|  1.06M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.06M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.06M|    auto begin = format.data();
 7013|  1.06M|    auto it = begin;
 7014|  1.06M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  2.04M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.06M, False: 973k]
  ------------------
 7017|  1.06M|        const auto ch = *it++;
 7018|  1.06M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.06M, False: 0]
  ------------------
 7019|  1.06M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.06M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.06M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 92.6k, False: 973k]
  ------------------
 7023|  92.6k|                return;
 7024|  92.6k|            }
 7025|  1.06M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.06M|    }
 7036|       |
 7037|   973k|    handler.on_literal_text(begin, end);
 7038|   973k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  1.06M|{
 6942|  1.06M|    struct id_adapter {
 6943|  1.06M|        constexpr void operator()()
 6944|  1.06M|        {
 6945|  1.06M|            arg_id = handler.on_arg_id();
 6946|  1.06M|        }
 6947|  1.06M|        constexpr void operator()(std::size_t id)
 6948|  1.06M|        {
 6949|  1.06M|            arg_id = handler.on_arg_id(id);
 6950|  1.06M|        }
 6951|       |
 6952|  1.06M|        constexpr void on_error(const char* msg)
 6953|  1.06M|        {
 6954|  1.06M|            SCN_UNLIKELY_ATTR
 6955|  1.06M|            handler.on_error(msg);
 6956|  1.06M|        }
 6957|       |
 6958|  1.06M|        Handler& handler;
 6959|  1.06M|        std::size_t arg_id;
 6960|  1.06M|    };
 6961|       |
 6962|  1.06M|    ++begin;
 6963|  1.06M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.06M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.06M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.06M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.06M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.06M|    else {
 6975|  1.06M|        auto adapter = id_adapter{handler, 0};
 6976|  1.06M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.06M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.06M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.06M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.06M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.06M, False: 0]
  ------------------
 6987|  1.06M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.06M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.06M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  |  Branch (859:45): [True: 0, False: 1.06M]
  |  |  |  Branch (859:45): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.06M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.06M|    }
 7003|  1.06M|    return begin + 1;
 7004|  1.06M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  2.33M|    {
 8039|  2.33M|        return m_args.get(id);
 8040|  2.33M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  2.33M|    {
 8049|  2.33M|        return m_locale;
 8050|  2.33M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  2.33M|    {
 5566|  2.33M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  2.33M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  2.33M|        do_check_arg_id(id);
 5574|  2.33M|        return id;
 5575|  2.33M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  2.33M|{
 6054|  2.33M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  2.33M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  2.33M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.06M|{
 6443|  1.06M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.06M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.06M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.06M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.06M|    handler();
 6449|  1.06M|    return begin;
 6450|  1.06M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.06M|        {
 6945|  1.06M|            arg_id = handler.on_arg_id();
 6946|  1.06M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  4.66M|    {
 5252|  4.66M|        return m_type;
 5253|  4.66M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  2.33M|    {
 5561|  2.33M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  2.33M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  4.66M|    {
 5550|  4.66M|        return m_format.data();
 5551|  4.66M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|  1.06M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.06M|    {
 7122|  1.06M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.06M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  1.06M|{
 6858|  1.06M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.06M|        if (*begin == CharT{'['}) {
 6860|  1.06M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.06M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.06M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.06M|                return begin;
 6866|  1.06M|            }
 6867|  1.06M|            handler.on_character_set_string(set);
 6868|  1.06M|            return begin;
 6869|  1.06M|        }
 6870|  1.06M|        if (*begin == CharT{'/'}) {
 6871|  1.06M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.06M|        }
 6873|  1.06M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.06M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.06M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.06M|            return begin;
 6877|  1.06M|        }
 6878|  1.06M|        handler.on_type(type);
 6879|  1.06M|        return begin;
 6880|  1.06M|    };
 6881|       |
 6882|  1.06M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.06M, False: 0]
  |  Branch (6882:28): [True: 1.06M, False: 0]
  ------------------
 6883|  1.06M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.06M, False: 0]
  |  Branch (6883:36): [True: 771k, False: 295k]
  ------------------
 6884|   771k|        return do_presentation();
 6885|   771k|    }
 6886|       |
 6887|   295k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   295k|    begin = parse_align(begin, end, handler);
 6893|   295k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   295k|    begin = parse_width(begin, end, handler);
 6899|   295k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   295k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 295k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   295k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 295k, False: 0]
  ------------------
 6918|   295k|        handler.on_localized();
 6919|   295k|        ++begin;
 6920|   295k|    }
 6921|   295k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   295k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 295k, False: 0]
  |  Branch (6926:25): [True: 0, False: 295k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   295k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   295k|    return begin;
 6935|   295k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.33M|{
 6507|  2.33M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.67M, False: 653k]
  |  Branch (6507:33): [True: 1.67M, False: 0]
  ------------------
 6508|  2.33M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 653k, False: 0]
  |  Branch (6508:33): [True: 653k, False: 0]
  ------------------
 6509|  2.33M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   771k|    auto do_presentation = [&]() -> const CharT* {
 6859|   771k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 771k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   771k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 771k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   771k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   771k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   771k|        handler.on_type(type);
 6879|   771k|        return begin;
 6880|   771k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.67M|{
 6455|  1.67M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.67M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.67M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.67M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.67M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.67M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.67M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.67M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.67M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.67M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.67M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   712k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 712k, False: 967k]
  ------------------
 6474|   712k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.67M]
  ------------------
 6475|   712k|            return presentation_type::float_hex;
 6476|  55.6k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 55.6k, False: 1.62M]
  ------------------
 6477|  55.6k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.67M]
  ------------------
 6478|  55.6k|            return presentation_type::float_scientific;
 6479|   351k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 351k, False: 1.32M]
  ------------------
 6480|   351k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.67M]
  ------------------
 6481|   351k|            return presentation_type::float_fixed;
 6482|   560k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 560k, False: 1.11M]
  ------------------
 6483|   560k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.67M]
  ------------------
 6484|   560k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.67M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.67M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.67M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.67M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.67M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.67M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.67M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.67M|    }
 6502|  1.67M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   295k|{
 6532|   295k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   295k|    auto check_align = [](wchar_t ch) {
 6535|   295k|        switch (ch) {
 6536|   295k|            case L'<':
 6537|   295k|                return align_type::left;
 6538|   295k|            case L'>':
 6539|   295k|                return align_type::right;
 6540|   295k|            case L'^':
 6541|   295k|                return align_type::center;
 6542|   295k|            default:
 6543|   295k|                return align_type::none;
 6544|   295k|        }
 6545|   295k|    };
 6546|       |
 6547|   295k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   295k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  |  Branch (859:45): [True: 0, False: 295k]
  |  |  |  Branch (859:45): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6549|   295k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   295k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   295k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   295k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   295k|    const auto begin_before_fill = begin;
 6559|   295k|    begin += potential_fill_len;
 6560|       |
 6561|   295k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 295k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   295k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   295k|    const auto begin_after_fill = begin;
 6567|   295k|    ++begin;
 6568|       |
 6569|   295k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 295k, False: 0]
  ------------------
 6570|   295k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   295k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 295k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   295k|    }
 6578|       |
 6579|   295k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 295k, False: 0]
  ------------------
 6580|   295k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 295k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   295k|        return begin_before_fill;
 6585|   295k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   295k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   653k|{
 6514|   653k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   653k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   653k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|       |    if constexpr (sizeof(CharT) != 1) {
 6516|       |        return 1;
 6517|       |    }
 6518|   653k|    else {
 6519|   653k|        const auto lengths =
 6520|   653k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   653k|            "\3\4";
 6522|   653k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   653k|        return len;
 6524|   653k|    }
 6525|   653k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   591k|    auto check_align = [](wchar_t ch) {
 6535|   591k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 591k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 591k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 591k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   591k|            default:
  ------------------
  |  Branch (6542:13): [True: 591k, False: 0]
  ------------------
 6543|   591k|                return align_type::none;
 6544|   591k|        }
 6545|   591k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   295k|{
 6597|   295k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   295k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 295k, False: 0]
  |  Branch (6599:33): [True: 0, False: 295k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   295k|    return begin;
 6610|   295k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   295k|    {
 7127|   295k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   295k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 295k, False: 0]
  ------------------
 7129|   295k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 295k, False: 0]
  ------------------
 7130|   295k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 295k]
  ------------------
 7131|   295k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   295k|        Handler::on_localized();
 7139|   295k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.06M|{
 8417|  1.06M|#define SCN_VISIT(Type)                                         \
 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.06M|    }                                                           \
 8421|  1.06M|    else {                                                      \
 8422|  1.06M|        return vis(monostate_val);                              \
 8423|  1.06M|    }
 8424|       |
 8425|  1.06M|    monostate monostate_val{};
 8426|       |
 8427|  1.06M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.06M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.06M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.06M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.06M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.06M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.06M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.06M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.06M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.06M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.06M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.06M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.06M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.06M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.06M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.06M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   347k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 347k, False: 719k]
  ------------------
 8459|   347k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   347k|    }                                                           \
  |  | 8421|   347k|    else {                                                      \
  |  | 8422|   347k|        return vis(monostate_val);                              \
  |  | 8423|   347k|    }
  ------------------
 8460|   704k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 357k, False: 708k]
  ------------------
 8461|   704k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   704k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   704k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   704k|    }                                                           \
  |  | 8421|   704k|    else {                                                      \
  |  | 8422|   704k|        return vis(monostate_val);                              \
  |  | 8423|   704k|    }
  ------------------
 8462|  1.06M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 361k, False: 704k]
  ------------------
 8463|  1.06M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.06M|    }                                                           \
  |  | 8421|  1.06M|    else {                                                      \
  |  | 8422|  1.06M|        return vis(monostate_val);                              \
  |  | 8423|  1.06M|    }
  ------------------
 8464|  1.06M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.06M]
  ------------------
 8465|  1.06M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.06M|    }                                                           \
  |  | 8421|  1.06M|    else {                                                      \
  |  | 8422|  1.06M|        return vis(monostate_val);                              \
  |  | 8423|  1.06M|    }
  ------------------
 8466|  1.06M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.06M]
  ------------------
 8467|  1.06M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.06M|    }                                                           \
  |  | 8421|  1.06M|    else {                                                      \
  |  | 8422|  1.06M|        return vis(monostate_val);                              \
  |  | 8423|  1.06M|    }
  ------------------
 8468|  1.06M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.06M]
  ------------------
 8469|  1.06M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.06M|    }                                                           \
  |  | 8421|  1.06M|    else {                                                      \
  |  | 8422|  1.06M|        return vis(monostate_val);                              \
  |  | 8423|  1.06M|    }
  ------------------
 8470|  1.06M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.06M]
  ------------------
 8471|  1.06M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.06M|    }                                                           \
  |  | 8421|  1.06M|    else {                                                      \
  |  | 8422|  1.06M|        return vis(monostate_val);                              \
  |  | 8423|  1.06M|    }
  ------------------
 8472|  1.06M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.06M]
  ------------------
 8473|  1.06M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.06M|    }                                                           \
  |  | 8421|  1.06M|    else {                                                      \
  |  | 8422|  1.06M|        return vis(monostate_val);                              \
  |  | 8423|  1.06M|    }
  ------------------
 8474|  1.06M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.06M]
  ------------------
 8475|  1.06M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.06M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.06M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.06M|    }                                                           \
  |  | 8421|  1.06M|    else {                                                      \
  |  | 8422|  1.06M|        return vis(monostate_val);                              \
  |  | 8423|  1.06M|    }
  ------------------
 8476|       |
 8477|  1.06M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.06M]
  ------------------
 8478|  1.06M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.06M|            return vis(
 8480|  1.06M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.06M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.06M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.06M|            SCN_CLANG_POP
 8495|  1.06M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.26M|{
 7044|  1.26M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.26M|    handler.check_args_exhausted();
 7046|  1.26M|    return handler.get_error();
 7047|  1.26M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.26M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.26M|    auto begin = format.data();
 7013|  1.26M|    auto it = begin;
 7014|  1.26M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  2.44M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.26M, False: 1.17M]
  ------------------
 7017|  1.26M|        const auto ch = *it++;
 7018|  1.26M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.26M, False: 0]
  ------------------
 7019|  1.26M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.26M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.26M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 92.6k, False: 1.17M]
  ------------------
 7023|  92.6k|                return;
 7024|  92.6k|            }
 7025|  1.26M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.26M|    }
 7036|       |
 7037|  1.17M|    handler.on_literal_text(begin, end);
 7038|  1.17M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  1.17M|    {
 8175|  1.17M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.17M|    static_cast<    \
  |  |  929|  1.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.17M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  1.26M|{
 6942|  1.26M|    struct id_adapter {
 6943|  1.26M|        constexpr void operator()()
 6944|  1.26M|        {
 6945|  1.26M|            arg_id = handler.on_arg_id();
 6946|  1.26M|        }
 6947|  1.26M|        constexpr void operator()(std::size_t id)
 6948|  1.26M|        {
 6949|  1.26M|            arg_id = handler.on_arg_id(id);
 6950|  1.26M|        }
 6951|       |
 6952|  1.26M|        constexpr void on_error(const char* msg)
 6953|  1.26M|        {
 6954|  1.26M|            SCN_UNLIKELY_ATTR
 6955|  1.26M|            handler.on_error(msg);
 6956|  1.26M|        }
 6957|       |
 6958|  1.26M|        Handler& handler;
 6959|  1.26M|        std::size_t arg_id;
 6960|  1.26M|    };
 6961|       |
 6962|  1.26M|    ++begin;
 6963|  1.26M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.26M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.26M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.26M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.26M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.26M|    else {
 6975|  1.26M|        auto adapter = id_adapter{handler, 0};
 6976|  1.26M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.26M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.26M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.26M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.26M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.26M, False: 0]
  ------------------
 6987|  1.26M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.26M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.26M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  |  Branch (859:45): [True: 0, False: 1.26M]
  |  |  |  Branch (859:45): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.26M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.26M|    }
 7003|  1.26M|    return begin + 1;
 7004|  1.26M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.26M|{
 6443|  1.26M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.26M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.26M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.26M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.26M|    handler();
 6449|  1.26M|    return begin;
 6450|  1.26M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.26M|        {
 6945|  1.26M|            arg_id = handler.on_arg_id();
 6946|  1.26M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|  1.26M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.26M|    {
 7122|  1.26M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.26M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  1.26M|{
 6858|  1.26M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.26M|        if (*begin == CharT{'['}) {
 6860|  1.26M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.26M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.26M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.26M|                return begin;
 6866|  1.26M|            }
 6867|  1.26M|            handler.on_character_set_string(set);
 6868|  1.26M|            return begin;
 6869|  1.26M|        }
 6870|  1.26M|        if (*begin == CharT{'/'}) {
 6871|  1.26M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.26M|        }
 6873|  1.26M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.26M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.26M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.26M|            return begin;
 6877|  1.26M|        }
 6878|  1.26M|        handler.on_type(type);
 6879|  1.26M|        return begin;
 6880|  1.26M|    };
 6881|       |
 6882|  1.26M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.26M, False: 0]
  |  Branch (6882:28): [True: 1.26M, False: 0]
  ------------------
 6883|  1.26M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.26M, False: 0]
  |  Branch (6883:36): [True: 908k, False: 357k]
  ------------------
 6884|   908k|        return do_presentation();
 6885|   908k|    }
 6886|       |
 6887|   357k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   357k|    begin = parse_align(begin, end, handler);
 6893|   357k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   357k|    begin = parse_width(begin, end, handler);
 6899|   357k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   357k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 357k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   357k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 357k, False: 0]
  ------------------
 6918|   357k|        handler.on_localized();
 6919|   357k|        ++begin;
 6920|   357k|    }
 6921|   357k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   357k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 357k, False: 0]
  |  Branch (6926:25): [True: 0, False: 357k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   357k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   357k|    return begin;
 6935|   357k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   908k|    auto do_presentation = [&]() -> const CharT* {
 6859|   908k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 908k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   908k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 908k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   908k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   908k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   908k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 908k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   908k|        handler.on_type(type);
 6879|   908k|        return begin;
 6880|   908k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   357k|{
 6532|   357k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   357k|    auto check_align = [](wchar_t ch) {
 6535|   357k|        switch (ch) {
 6536|   357k|            case L'<':
 6537|   357k|                return align_type::left;
 6538|   357k|            case L'>':
 6539|   357k|                return align_type::right;
 6540|   357k|            case L'^':
 6541|   357k|                return align_type::center;
 6542|   357k|            default:
 6543|   357k|                return align_type::none;
 6544|   357k|        }
 6545|   357k|    };
 6546|       |
 6547|   357k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   357k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   715k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  |  Branch (859:45): [True: 0, False: 357k]
  |  |  |  Branch (859:45): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6549|   357k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   357k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   357k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   357k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   357k|    const auto begin_before_fill = begin;
 6559|   357k|    begin += potential_fill_len;
 6560|       |
 6561|   357k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 357k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   357k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   357k|    const auto begin_after_fill = begin;
 6567|   357k|    ++begin;
 6568|       |
 6569|   357k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 357k, False: 0]
  ------------------
 6570|   357k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   357k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 357k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   357k|    }
 6578|       |
 6579|   357k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 357k, False: 0]
  ------------------
 6580|   357k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 357k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   357k|        return begin_before_fill;
 6585|   357k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   357k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   715k|    auto check_align = [](wchar_t ch) {
 6535|   715k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 715k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 715k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 715k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   715k|            default:
  ------------------
  |  Branch (6542:13): [True: 715k, False: 0]
  ------------------
 6543|   715k|                return align_type::none;
 6544|   715k|        }
 6545|   715k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   357k|{
 6597|   357k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   357k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 357k, False: 0]
  |  Branch (6599:33): [True: 0, False: 357k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   357k|    return begin;
 6610|   357k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   357k|    {
 7127|   357k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   357k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 357k, False: 0]
  ------------------
 7129|   357k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 357k, False: 0]
  ------------------
 7130|   357k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 357k]
  ------------------
 7131|   357k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   357k|        Handler::on_localized();
 7139|   357k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.26M|{
 8417|  1.26M|#define SCN_VISIT(Type)                                         \
 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.26M|    }                                                           \
 8421|  1.26M|    else {                                                      \
 8422|  1.26M|        return vis(monostate_val);                              \
 8423|  1.26M|    }
 8424|       |
 8425|  1.26M|    monostate monostate_val{};
 8426|       |
 8427|  1.26M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.26M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.26M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.26M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.26M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.26M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.26M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.26M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.26M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.26M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.26M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.26M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.26M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.26M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.26M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.26M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   408k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 408k, False: 857k]
  ------------------
 8459|   408k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   408k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   408k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   408k|    }                                                           \
  |  | 8421|   408k|    else {                                                      \
  |  | 8422|   408k|        return vis(monostate_val);                              \
  |  | 8423|   408k|    }
  ------------------
 8460|   835k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 426k, False: 839k]
  ------------------
 8461|   835k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   835k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   835k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   835k|    }                                                           \
  |  | 8421|   835k|    else {                                                      \
  |  | 8422|   835k|        return vis(monostate_val);                              \
  |  | 8423|   835k|    }
  ------------------
 8462|  1.26M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 431k, False: 835k]
  ------------------
 8463|  1.26M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.26M|    }                                                           \
  |  | 8421|  1.26M|    else {                                                      \
  |  | 8422|  1.26M|        return vis(monostate_val);                              \
  |  | 8423|  1.26M|    }
  ------------------
 8464|  1.26M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.26M]
  ------------------
 8465|  1.26M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.26M|    }                                                           \
  |  | 8421|  1.26M|    else {                                                      \
  |  | 8422|  1.26M|        return vis(monostate_val);                              \
  |  | 8423|  1.26M|    }
  ------------------
 8466|  1.26M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.26M]
  ------------------
 8467|  1.26M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.26M|    }                                                           \
  |  | 8421|  1.26M|    else {                                                      \
  |  | 8422|  1.26M|        return vis(monostate_val);                              \
  |  | 8423|  1.26M|    }
  ------------------
 8468|  1.26M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.26M]
  ------------------
 8469|  1.26M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.26M|    }                                                           \
  |  | 8421|  1.26M|    else {                                                      \
  |  | 8422|  1.26M|        return vis(monostate_val);                              \
  |  | 8423|  1.26M|    }
  ------------------
 8470|  1.26M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.26M]
  ------------------
 8471|  1.26M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.26M|    }                                                           \
  |  | 8421|  1.26M|    else {                                                      \
  |  | 8422|  1.26M|        return vis(monostate_val);                              \
  |  | 8423|  1.26M|    }
  ------------------
 8472|  1.26M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.26M]
  ------------------
 8473|  1.26M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.26M|    }                                                           \
  |  | 8421|  1.26M|    else {                                                      \
  |  | 8422|  1.26M|        return vis(monostate_val);                              \
  |  | 8423|  1.26M|    }
  ------------------
 8474|  1.26M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.26M]
  ------------------
 8475|  1.26M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.26M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.26M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.26M|    }                                                           \
  |  | 8421|  1.26M|    else {                                                      \
  |  | 8422|  1.26M|        return vis(monostate_val);                              \
  |  | 8423|  1.26M|    }
  ------------------
 8476|       |
 8477|  1.26M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.26M]
  ------------------
 8478|  1.26M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.26M|            return vis(
 8480|  1.26M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.26M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.26M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.26M|            SCN_CLANG_POP
 8495|  1.26M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   120k|    {
 4076|   120k|        sync(0);
 4077|   120k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  1.49M|    {
 5466|  1.49M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.49M|        return static_cast<std::size_t>(m_desc &
 5471|  1.49M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.49M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  2.98M|    {
 5491|  2.98M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  2.98M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  1.49M|    {
 5434|  1.49M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.49M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.49M|        const auto t = type(id);
 5446|  1.49M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.49M|        basic_scan_arg<Context> arg;
 5451|  1.49M|        arg.m_type = t;
 5452|  1.49M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.49M, False: 0]
  ------------------
 5453|  1.49M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.49M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.49M|        return arg;
 5459|  1.49M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  1.49M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.49M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.49M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.49M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.49M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  1.49M|    {
 5495|  1.49M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.49M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  2.84M|    {
 5247|  2.84M|        return m_type != detail::arg_type::none_type;
 5248|  2.84M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   220k|{
 8417|   220k|#define SCN_VISIT(Type)                                         \
 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   220k|    }                                                           \
 8421|   220k|    else {                                                      \
 8422|   220k|        return vis(monostate_val);                              \
 8423|   220k|    }
 8424|       |
 8425|   220k|    monostate monostate_val{};
 8426|       |
 8427|   220k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 220k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 220k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 220k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 220k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 220k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 220k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 220k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 220k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 220k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 220k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 220k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 220k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 220k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 220k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 220k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  64.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 64.6k, False: 155k]
  ------------------
 8459|  64.6k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  64.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  64.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  64.6k|    }                                                           \
  |  | 8421|  64.6k|    else {                                                      \
  |  | 8422|  64.6k|        return vis(monostate_val);                              \
  |  | 8423|  64.6k|    }
  ------------------
 8460|   141k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 76.5k, False: 143k]
  ------------------
 8461|   141k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   141k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   141k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   141k|    }                                                           \
  |  | 8421|   141k|    else {                                                      \
  |  | 8422|   141k|        return vis(monostate_val);                              \
  |  | 8423|   141k|    }
  ------------------
 8462|   220k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 79.0k, False: 141k]
  ------------------
 8463|   220k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   220k|    }                                                           \
  |  | 8421|   220k|    else {                                                      \
  |  | 8422|   220k|        return vis(monostate_val);                              \
  |  | 8423|   220k|    }
  ------------------
 8464|   220k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 220k]
  ------------------
 8465|   220k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   220k|    }                                                           \
  |  | 8421|   220k|    else {                                                      \
  |  | 8422|   220k|        return vis(monostate_val);                              \
  |  | 8423|   220k|    }
  ------------------
 8466|   220k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 220k]
  ------------------
 8467|   220k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   220k|    }                                                           \
  |  | 8421|   220k|    else {                                                      \
  |  | 8422|   220k|        return vis(monostate_val);                              \
  |  | 8423|   220k|    }
  ------------------
 8468|   220k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 220k]
  ------------------
 8469|   220k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   220k|    }                                                           \
  |  | 8421|   220k|    else {                                                      \
  |  | 8422|   220k|        return vis(monostate_val);                              \
  |  | 8423|   220k|    }
  ------------------
 8470|   220k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 220k]
  ------------------
 8471|   220k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   220k|    }                                                           \
  |  | 8421|   220k|    else {                                                      \
  |  | 8422|   220k|        return vis(monostate_val);                              \
  |  | 8423|   220k|    }
  ------------------
 8472|   220k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 220k]
  ------------------
 8473|   220k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   220k|    }                                                           \
  |  | 8421|   220k|    else {                                                      \
  |  | 8422|   220k|        return vis(monostate_val);                              \
  |  | 8423|   220k|    }
  ------------------
 8474|   220k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 220k]
  ------------------
 8475|   220k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   220k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   220k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   220k|    }                                                           \
  |  | 8421|   220k|    else {                                                      \
  |  | 8422|   220k|        return vis(monostate_val);                              \
  |  | 8423|   220k|    }
  ------------------
 8476|       |
 8477|   220k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 220k]
  ------------------
 8478|   220k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   220k|            return vis(
 8480|   220k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 220k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 220k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   220k|            SCN_CLANG_POP
 8495|   220k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5543|  1.20M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  1.20M|    {
 5545|  1.20M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|   599k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   599k|    static_cast<    \
  |  |  929|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|   599k|    {
 8138|   599k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8054|  1.20M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  1.20M|    {
 8056|  1.20M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   600k|{
 7044|   600k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   600k|    handler.check_args_exhausted();
 7046|   600k|    return handler.get_error();
 7047|   600k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   600k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   600k|    auto begin = format.data();
 7013|   600k|    auto it = begin;
 7014|   600k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.01M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 600k, False: 415k]
  ------------------
 7017|   600k|        const auto ch = *it++;
 7018|   600k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 600k, False: 0]
  ------------------
 7019|   600k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   600k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   600k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 185k, False: 415k]
  ------------------
 7023|   185k|                return;
 7024|   185k|            }
 7025|   600k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   600k|    }
 7036|       |
 7037|   415k|    handler.on_literal_text(begin, end);
 7038|   415k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   600k|{
 6942|   600k|    struct id_adapter {
 6943|   600k|        constexpr void operator()()
 6944|   600k|        {
 6945|   600k|            arg_id = handler.on_arg_id();
 6946|   600k|        }
 6947|   600k|        constexpr void operator()(std::size_t id)
 6948|   600k|        {
 6949|   600k|            arg_id = handler.on_arg_id(id);
 6950|   600k|        }
 6951|       |
 6952|   600k|        constexpr void on_error(const char* msg)
 6953|   600k|        {
 6954|   600k|            SCN_UNLIKELY_ATTR
 6955|   600k|            handler.on_error(msg);
 6956|   600k|        }
 6957|       |
 6958|   600k|        Handler& handler;
 6959|   600k|        std::size_t arg_id;
 6960|   600k|    };
 6961|       |
 6962|   600k|    ++begin;
 6963|   600k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 600k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   600k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 600k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   600k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 600k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   600k|    else {
 6975|   600k|        auto adapter = id_adapter{handler, 0};
 6976|   600k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   600k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 600k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   600k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 600k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   600k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 600k, False: 0]
  ------------------
 6987|   600k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 600k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   600k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   600k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 600k]
  |  |  |  Branch (859:45): [True: 0, False: 600k]
  |  |  |  Branch (859:45): [True: 0, False: 600k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   600k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   600k|    }
 7003|   600k|    return begin + 1;
 7004|   600k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  1.20M|    {
 8039|  1.20M|        return m_args.get(id);
 8040|  1.20M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  1.20M|    {
 8049|  1.20M|        return m_locale;
 8050|  1.20M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  1.20M|    {
 5566|  1.20M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.20M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.20M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.20M|        do_check_arg_id(id);
 5574|  1.20M|        return id;
 5575|  1.20M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  1.20M|{
 6054|  1.20M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.20M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.20M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   600k|{
 6443|   600k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   600k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   600k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   600k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 600k, False: 0]
  |  Branch (6444:26): [True: 0, False: 600k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   600k|    handler();
 6449|   600k|    return begin;
 6450|   600k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   600k|        {
 6945|   600k|            arg_id = handler.on_arg_id();
 6946|   600k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  2.40M|    {
 5252|  2.40M|        return m_type;
 5253|  2.40M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  1.20M|    {
 5561|  1.20M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.20M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   819k|{
 4344|   819k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 819k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   819k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   819k|                            ranges::default_sentinel};
 4350|   819k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4175|   819k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|   819k|    {
 4177|   819k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   819k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   819k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  2.40M|    {
 5550|  2.40M|        return m_format.data();
 5551|  2.40M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   600k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   600k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   600k|    {
 7122|   600k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   600k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   600k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   600k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   600k|{
 6858|   600k|    auto do_presentation = [&]() -> const CharT* {
 6859|   600k|        if (*begin == CharT{'['}) {
 6860|   600k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   600k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   600k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   600k|                return begin;
 6866|   600k|            }
 6867|   600k|            handler.on_character_set_string(set);
 6868|   600k|            return begin;
 6869|   600k|        }
 6870|   600k|        if (*begin == CharT{'/'}) {
 6871|   600k|            return parse_presentation_regex(begin, end, handler);
 6872|   600k|        }
 6873|   600k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   600k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   600k|            handler.on_error("Invalid type specifier in format string");
 6876|   600k|            return begin;
 6877|   600k|        }
 6878|   600k|        handler.on_type(type);
 6879|   600k|        return begin;
 6880|   600k|    };
 6881|       |
 6882|   600k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 600k, False: 0]
  |  Branch (6882:28): [True: 600k, False: 0]
  ------------------
 6883|   600k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 600k, False: 0]
  |  Branch (6883:36): [True: 453k, False: 146k]
  ------------------
 6884|   453k|        return do_presentation();
 6885|   453k|    }
 6886|       |
 6887|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   146k|    begin = parse_align(begin, end, handler);
 6893|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   146k|    begin = parse_width(begin, end, handler);
 6899|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   146k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 146k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   146k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 146k, False: 0]
  ------------------
 6918|   146k|        handler.on_localized();
 6919|   146k|        ++begin;
 6920|   146k|    }
 6921|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   146k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 146k, False: 0]
  |  Branch (6926:25): [True: 0, False: 146k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   146k|    return begin;
 6935|   146k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  1.20M|{
 6507|  1.20M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 906k, False: 293k]
  |  Branch (6507:33): [True: 906k, False: 0]
  ------------------
 6508|  1.20M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 293k, False: 0]
  |  Branch (6508:33): [True: 293k, False: 0]
  ------------------
 6509|  1.20M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   453k|    auto do_presentation = [&]() -> const CharT* {
 6859|   453k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 453k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   453k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 453k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   453k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   453k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   453k|        handler.on_type(type);
 6879|   453k|        return begin;
 6880|   453k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   906k|{
 6455|   906k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 906k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 906k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 906k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 906k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 906k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 906k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 906k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 906k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 906k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 906k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   321k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 321k, False: 585k]
  ------------------
 6474|   321k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 906k]
  ------------------
 6475|   321k|            return presentation_type::float_hex;
 6476|  76.0k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 76.0k, False: 830k]
  ------------------
 6477|  76.0k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 906k]
  ------------------
 6478|  76.0k|            return presentation_type::float_scientific;
 6479|   234k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 234k, False: 672k]
  ------------------
 6480|   234k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 906k]
  ------------------
 6481|   234k|            return presentation_type::float_fixed;
 6482|   275k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 275k, False: 631k]
  ------------------
 6483|   275k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 906k]
  ------------------
 6484|   275k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 906k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 906k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 906k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 906k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 906k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 906k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 906k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   906k|    }
 6502|   906k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|   146k|{
 6532|   146k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   146k|    auto check_align = [](wchar_t ch) {
 6535|   146k|        switch (ch) {
 6536|   146k|            case L'<':
 6537|   146k|                return align_type::left;
 6538|   146k|            case L'>':
 6539|   146k|                return align_type::right;
 6540|   146k|            case L'^':
 6541|   146k|                return align_type::center;
 6542|   146k|            default:
 6543|   146k|                return align_type::none;
 6544|   146k|        }
 6545|   146k|    };
 6546|       |
 6547|   146k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   146k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  |  Branch (859:45): [True: 0, False: 146k]
  |  |  |  Branch (859:45): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6549|   146k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   146k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   146k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   146k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   146k|    const auto begin_before_fill = begin;
 6559|   146k|    begin += potential_fill_len;
 6560|       |
 6561|   146k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 146k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   146k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   146k|    const auto begin_after_fill = begin;
 6567|   146k|    ++begin;
 6568|       |
 6569|   146k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 146k, False: 0]
  ------------------
 6570|   146k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   146k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 146k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   146k|    }
 6578|       |
 6579|   146k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 146k, False: 0]
  ------------------
 6580|   146k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 146k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   146k|        return begin_before_fill;
 6585|   146k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   146k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   293k|{
 6514|   293k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   293k|    if constexpr (sizeof(CharT) != 1) {
 6516|   293k|        return 1;
 6517|       |    }
 6518|       |    else {
 6519|       |        const auto lengths =
 6520|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|       |            "\3\4";
 6522|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|       |        return len;
 6524|       |    }
 6525|   293k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   293k|    auto check_align = [](wchar_t ch) {
 6535|   293k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 293k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 293k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 293k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   293k|            default:
  ------------------
  |  Branch (6542:13): [True: 293k, False: 0]
  ------------------
 6543|   293k|                return align_type::none;
 6544|   293k|        }
 6545|   293k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|   146k|{
 6597|   146k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   146k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 146k, False: 0]
  |  Branch (6599:33): [True: 0, False: 146k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   146k|    return begin;
 6610|   146k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|   146k|    {
 7127|   146k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   146k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 146k, False: 0]
  ------------------
 7129|   146k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 146k, False: 0]
  ------------------
 7130|   146k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 146k]
  ------------------
 7131|   146k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   146k|        Handler::on_localized();
 7139|   146k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   600k|{
 8417|   600k|#define SCN_VISIT(Type)                                         \
 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   600k|    }                                                           \
 8421|   600k|    else {                                                      \
 8422|   600k|        return vis(monostate_val);                              \
 8423|   600k|    }
 8424|       |
 8425|   600k|    monostate monostate_val{};
 8426|       |
 8427|   600k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 600k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 600k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 600k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 600k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 600k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 600k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 600k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 600k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 600k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 600k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 600k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 600k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 600k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 600k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 600k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   188k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 188k, False: 412k]
  ------------------
 8459|   188k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   188k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   188k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   188k|    }                                                           \
  |  | 8421|   188k|    else {                                                      \
  |  | 8422|   188k|        return vis(monostate_val);                              \
  |  | 8423|   188k|    }
  ------------------
 8460|   392k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 204k, False: 396k]
  ------------------
 8461|   392k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   392k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   392k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   392k|    }                                                           \
  |  | 8421|   392k|    else {                                                      \
  |  | 8422|   392k|        return vis(monostate_val);                              \
  |  | 8423|   392k|    }
  ------------------
 8462|   600k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 207k, False: 392k]
  ------------------
 8463|   600k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   600k|    }                                                           \
  |  | 8421|   600k|    else {                                                      \
  |  | 8422|   600k|        return vis(monostate_val);                              \
  |  | 8423|   600k|    }
  ------------------
 8464|   600k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 600k]
  ------------------
 8465|   600k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   600k|    }                                                           \
  |  | 8421|   600k|    else {                                                      \
  |  | 8422|   600k|        return vis(monostate_val);                              \
  |  | 8423|   600k|    }
  ------------------
 8466|   600k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 600k]
  ------------------
 8467|   600k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   600k|    }                                                           \
  |  | 8421|   600k|    else {                                                      \
  |  | 8422|   600k|        return vis(monostate_val);                              \
  |  | 8423|   600k|    }
  ------------------
 8468|   600k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 600k]
  ------------------
 8469|   600k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   600k|    }                                                           \
  |  | 8421|   600k|    else {                                                      \
  |  | 8422|   600k|        return vis(monostate_val);                              \
  |  | 8423|   600k|    }
  ------------------
 8470|   600k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 600k]
  ------------------
 8471|   600k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   600k|    }                                                           \
  |  | 8421|   600k|    else {                                                      \
  |  | 8422|   600k|        return vis(monostate_val);                              \
  |  | 8423|   600k|    }
  ------------------
 8472|   600k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 600k]
  ------------------
 8473|   600k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   600k|    }                                                           \
  |  | 8421|   600k|    else {                                                      \
  |  | 8422|   600k|        return vis(monostate_val);                              \
  |  | 8423|   600k|    }
  ------------------
 8474|   600k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 600k]
  ------------------
 8475|   600k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   600k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   600k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   600k|    }                                                           \
  |  | 8421|   600k|    else {                                                      \
  |  | 8422|   600k|        return vis(monostate_val);                              \
  |  | 8423|   600k|    }
  ------------------
 8476|       |
 8477|   600k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 600k]
  ------------------
 8478|   600k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   600k|            return vis(
 8480|   600k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 600k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 600k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   600k|            SCN_CLANG_POP
 8495|   600k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   219k|{
 8417|   219k|#define SCN_VISIT(Type)                                         \
 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   219k|    }                                                           \
 8421|   219k|    else {                                                      \
 8422|   219k|        return vis(monostate_val);                              \
 8423|   219k|    }
 8424|       |
 8425|   219k|    monostate monostate_val{};
 8426|       |
 8427|   219k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 219k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 219k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 219k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 219k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 219k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 219k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 219k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 219k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 219k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 219k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 219k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 219k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 219k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 219k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 219k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  64.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 64.5k, False: 155k]
  ------------------
 8459|  64.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  64.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  64.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  64.5k|    }                                                           \
  |  | 8421|  64.5k|    else {                                                      \
  |  | 8422|  64.5k|        return vis(monostate_val);                              \
  |  | 8423|  64.5k|    }
  ------------------
 8460|   141k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 76.4k, False: 143k]
  ------------------
 8461|   141k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   141k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   141k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   141k|    }                                                           \
  |  | 8421|   141k|    else {                                                      \
  |  | 8422|   141k|        return vis(monostate_val);                              \
  |  | 8423|   141k|    }
  ------------------
 8462|   219k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 78.9k, False: 141k]
  ------------------
 8463|   219k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   219k|    }                                                           \
  |  | 8421|   219k|    else {                                                      \
  |  | 8422|   219k|        return vis(monostate_val);                              \
  |  | 8423|   219k|    }
  ------------------
 8464|   219k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 219k]
  ------------------
 8465|   219k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   219k|    }                                                           \
  |  | 8421|   219k|    else {                                                      \
  |  | 8422|   219k|        return vis(monostate_val);                              \
  |  | 8423|   219k|    }
  ------------------
 8466|   219k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 219k]
  ------------------
 8467|   219k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   219k|    }                                                           \
  |  | 8421|   219k|    else {                                                      \
  |  | 8422|   219k|        return vis(monostate_val);                              \
  |  | 8423|   219k|    }
  ------------------
 8468|   219k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 219k]
  ------------------
 8469|   219k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   219k|    }                                                           \
  |  | 8421|   219k|    else {                                                      \
  |  | 8422|   219k|        return vis(monostate_val);                              \
  |  | 8423|   219k|    }
  ------------------
 8470|   219k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 219k]
  ------------------
 8471|   219k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   219k|    }                                                           \
  |  | 8421|   219k|    else {                                                      \
  |  | 8422|   219k|        return vis(monostate_val);                              \
  |  | 8423|   219k|    }
  ------------------
 8472|   219k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 219k]
  ------------------
 8473|   219k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   219k|    }                                                           \
  |  | 8421|   219k|    else {                                                      \
  |  | 8422|   219k|        return vis(monostate_val);                              \
  |  | 8423|   219k|    }
  ------------------
 8474|   219k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 219k]
  ------------------
 8475|   219k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   219k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   219k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   219k|    }                                                           \
  |  | 8421|   219k|    else {                                                      \
  |  | 8422|   219k|        return vis(monostate_val);                              \
  |  | 8423|   219k|    }
  ------------------
 8476|       |
 8477|   219k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 219k]
  ------------------
 8478|   219k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   219k|            return vis(
 8480|   219k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 219k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 219k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   219k|            SCN_CLANG_POP
 8495|   219k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   599k|{
 7044|   599k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   599k|    handler.check_args_exhausted();
 7046|   599k|    return handler.get_error();
 7047|   599k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   599k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   599k|    auto begin = format.data();
 7013|   599k|    auto it = begin;
 7014|   599k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.01M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 599k, False: 414k]
  ------------------
 7017|   599k|        const auto ch = *it++;
 7018|   599k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 599k, False: 0]
  ------------------
 7019|   599k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   599k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   599k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 185k, False: 414k]
  ------------------
 7023|   185k|                return;
 7024|   185k|            }
 7025|   599k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   599k|    }
 7036|       |
 7037|   414k|    handler.on_literal_text(begin, end);
 7038|   414k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   414k|    {
 8175|   414k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   414k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   599k|{
 6942|   599k|    struct id_adapter {
 6943|   599k|        constexpr void operator()()
 6944|   599k|        {
 6945|   599k|            arg_id = handler.on_arg_id();
 6946|   599k|        }
 6947|   599k|        constexpr void operator()(std::size_t id)
 6948|   599k|        {
 6949|   599k|            arg_id = handler.on_arg_id(id);
 6950|   599k|        }
 6951|       |
 6952|   599k|        constexpr void on_error(const char* msg)
 6953|   599k|        {
 6954|   599k|            SCN_UNLIKELY_ATTR
 6955|   599k|            handler.on_error(msg);
 6956|   599k|        }
 6957|       |
 6958|   599k|        Handler& handler;
 6959|   599k|        std::size_t arg_id;
 6960|   599k|    };
 6961|       |
 6962|   599k|    ++begin;
 6963|   599k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 599k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   599k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 599k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   599k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 599k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   599k|    else {
 6975|   599k|        auto adapter = id_adapter{handler, 0};
 6976|   599k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   599k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 599k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   599k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 599k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   599k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 599k, False: 0]
  ------------------
 6987|   599k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 599k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   599k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   599k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 599k]
  |  |  |  Branch (859:45): [True: 0, False: 599k]
  |  |  |  Branch (859:45): [True: 0, False: 599k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   599k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   599k|    }
 7003|   599k|    return begin + 1;
 7004|   599k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   599k|{
 6443|   599k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   599k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   599k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   599k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 599k, False: 0]
  |  Branch (6444:26): [True: 0, False: 599k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   599k|    handler();
 6449|   599k|    return begin;
 6450|   599k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   599k|        {
 6945|   599k|            arg_id = handler.on_arg_id();
 6946|   599k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|   599k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   599k|    {
 7122|   599k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   599k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   599k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   599k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   599k|{
 6858|   599k|    auto do_presentation = [&]() -> const CharT* {
 6859|   599k|        if (*begin == CharT{'['}) {
 6860|   599k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   599k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   599k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   599k|                return begin;
 6866|   599k|            }
 6867|   599k|            handler.on_character_set_string(set);
 6868|   599k|            return begin;
 6869|   599k|        }
 6870|   599k|        if (*begin == CharT{'/'}) {
 6871|   599k|            return parse_presentation_regex(begin, end, handler);
 6872|   599k|        }
 6873|   599k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   599k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   599k|            handler.on_error("Invalid type specifier in format string");
 6876|   599k|            return begin;
 6877|   599k|        }
 6878|   599k|        handler.on_type(type);
 6879|   599k|        return begin;
 6880|   599k|    };
 6881|       |
 6882|   599k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 599k, False: 0]
  |  Branch (6882:28): [True: 599k, False: 0]
  ------------------
 6883|   599k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 599k, False: 0]
  |  Branch (6883:36): [True: 453k, False: 146k]
  ------------------
 6884|   453k|        return do_presentation();
 6885|   453k|    }
 6886|       |
 6887|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   146k|    begin = parse_align(begin, end, handler);
 6893|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   146k|    begin = parse_width(begin, end, handler);
 6899|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   146k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 146k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   146k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 146k, False: 0]
  ------------------
 6918|   146k|        handler.on_localized();
 6919|   146k|        ++begin;
 6920|   146k|    }
 6921|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   146k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 146k, False: 0]
  |  Branch (6926:25): [True: 0, False: 146k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   146k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   146k|    return begin;
 6935|   146k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   453k|    auto do_presentation = [&]() -> const CharT* {
 6859|   453k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 453k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   453k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 453k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   453k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   453k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   453k|        handler.on_type(type);
 6879|   453k|        return begin;
 6880|   453k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|   146k|{
 6532|   146k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   146k|    auto check_align = [](wchar_t ch) {
 6535|   146k|        switch (ch) {
 6536|   146k|            case L'<':
 6537|   146k|                return align_type::left;
 6538|   146k|            case L'>':
 6539|   146k|                return align_type::right;
 6540|   146k|            case L'^':
 6541|   146k|                return align_type::center;
 6542|   146k|            default:
 6543|   146k|                return align_type::none;
 6544|   146k|        }
 6545|   146k|    };
 6546|       |
 6547|   146k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   146k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  |  Branch (859:45): [True: 0, False: 146k]
  |  |  |  Branch (859:45): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6549|   146k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   146k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   146k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   146k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   146k|    const auto begin_before_fill = begin;
 6559|   146k|    begin += potential_fill_len;
 6560|       |
 6561|   146k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 146k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   146k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   146k|    const auto begin_after_fill = begin;
 6567|   146k|    ++begin;
 6568|       |
 6569|   146k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 146k, False: 0]
  ------------------
 6570|   146k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   146k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 146k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   146k|    }
 6578|       |
 6579|   146k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 146k, False: 0]
  ------------------
 6580|   146k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 146k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   146k|        return begin_before_fill;
 6585|   146k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   146k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   293k|    auto check_align = [](wchar_t ch) {
 6535|   293k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 293k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 293k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 293k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   293k|            default:
  ------------------
  |  Branch (6542:13): [True: 293k, False: 0]
  ------------------
 6543|   293k|                return align_type::none;
 6544|   293k|        }
 6545|   293k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|   146k|{
 6597|   146k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   146k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 146k, False: 0]
  |  Branch (6599:33): [True: 0, False: 146k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   146k|    return begin;
 6610|   146k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|   146k|    {
 7127|   146k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   146k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 146k, False: 0]
  ------------------
 7129|   146k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 146k, False: 0]
  ------------------
 7130|   146k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 146k]
  ------------------
 7131|   146k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   146k|        Handler::on_localized();
 7139|   146k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   599k|{
 8417|   599k|#define SCN_VISIT(Type)                                         \
 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   599k|    }                                                           \
 8421|   599k|    else {                                                      \
 8422|   599k|        return vis(monostate_val);                              \
 8423|   599k|    }
 8424|       |
 8425|   599k|    monostate monostate_val{};
 8426|       |
 8427|   599k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 599k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 599k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 599k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 599k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 599k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 599k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 599k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 599k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 599k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 599k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 599k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 599k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 599k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 599k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 599k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   188k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 188k, False: 411k]
  ------------------
 8459|   188k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   188k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   188k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   188k|    }                                                           \
  |  | 8421|   188k|    else {                                                      \
  |  | 8422|   188k|        return vis(monostate_val);                              \
  |  | 8423|   188k|    }
  ------------------
 8460|   392k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 204k, False: 395k]
  ------------------
 8461|   392k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   392k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   392k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   392k|    }                                                           \
  |  | 8421|   392k|    else {                                                      \
  |  | 8422|   392k|        return vis(monostate_val);                              \
  |  | 8423|   392k|    }
  ------------------
 8462|   599k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 207k, False: 392k]
  ------------------
 8463|   599k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   599k|    }                                                           \
  |  | 8421|   599k|    else {                                                      \
  |  | 8422|   599k|        return vis(monostate_val);                              \
  |  | 8423|   599k|    }
  ------------------
 8464|   599k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 599k]
  ------------------
 8465|   599k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   599k|    }                                                           \
  |  | 8421|   599k|    else {                                                      \
  |  | 8422|   599k|        return vis(monostate_val);                              \
  |  | 8423|   599k|    }
  ------------------
 8466|   599k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 599k]
  ------------------
 8467|   599k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   599k|    }                                                           \
  |  | 8421|   599k|    else {                                                      \
  |  | 8422|   599k|        return vis(monostate_val);                              \
  |  | 8423|   599k|    }
  ------------------
 8468|   599k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 599k]
  ------------------
 8469|   599k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   599k|    }                                                           \
  |  | 8421|   599k|    else {                                                      \
  |  | 8422|   599k|        return vis(monostate_val);                              \
  |  | 8423|   599k|    }
  ------------------
 8470|   599k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 599k]
  ------------------
 8471|   599k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   599k|    }                                                           \
  |  | 8421|   599k|    else {                                                      \
  |  | 8422|   599k|        return vis(monostate_val);                              \
  |  | 8423|   599k|    }
  ------------------
 8472|   599k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 599k]
  ------------------
 8473|   599k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   599k|    }                                                           \
  |  | 8421|   599k|    else {                                                      \
  |  | 8422|   599k|        return vis(monostate_val);                              \
  |  | 8423|   599k|    }
  ------------------
 8474|   599k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 599k]
  ------------------
 8475|   599k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   599k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   599k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   599k|    }                                                           \
  |  | 8421|   599k|    else {                                                      \
  |  | 8422|   599k|        return vis(monostate_val);                              \
  |  | 8423|   599k|    }
  ------------------
 8476|       |
 8477|   599k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 599k]
  ------------------
 8478|   599k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   599k|            return vis(
 8480|   599k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 599k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 599k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   599k|            SCN_CLANG_POP
 8495|   599k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   240k|    {
 4076|   240k|        sync(0);
 4077|   240k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   310k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|   146k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   115k|{
   89|   115k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   115k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   115k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   373k|{
   44|   373k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   373k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   115k|{
  127|   115k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   115k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   115k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   373k|{
   60|   373k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   373k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  21.5k|{
  163|  21.5k|    T value;
  164|  21.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  21.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  21.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  21.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  21.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.17k|    }                                                  \
  |  |  |  | 3671|  21.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  15.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.3k|    static_cast<    \
  |  |  929|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.3k|    static_cast<    \
  |  |  929|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  21.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  73.4k|{
   72|  73.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  73.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  73.4k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   127k|{
   89|   127k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   127k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   127k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   127k|{
  127|   127k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   127k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   127k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  25.5k|{
  163|  25.5k|    T value;
  164|  25.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  25.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  25.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 19.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.17k|    }                                                  \
  |  |  |  | 3671|  25.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  19.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  19.3k|    static_cast<    \
  |  |  929|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  19.3k|    static_cast<    \
  |  |  929|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   130k|{
   89|   130k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   130k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   130k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   130k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   130k|{
  127|   130k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   130k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   130k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   130k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  26.3k|{
  163|  26.3k|    T value;
  164|  26.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  26.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 20.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.17k|    }                                                  \
  |  |  |  | 3671|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  20.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.1k|    static_cast<    \
  |  |  929|  20.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.1k|    static_cast<    \
  |  |  929|  20.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  26.3k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   115k|{
   89|   115k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   115k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   115k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   373k|{
   44|   373k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   373k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   115k|{
  127|   115k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   115k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   115k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   115k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   373k|{
   60|   373k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   373k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  21.5k|{
  163|  21.5k|    T value;
  164|  21.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  21.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  21.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  21.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  21.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 15.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.17k|    }                                                  \
  |  |  |  | 3671|  21.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  15.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.3k|    static_cast<    \
  |  |  929|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.3k|    static_cast<    \
  |  |  929|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  21.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  73.3k|{
   72|  73.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  73.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   127k|{
   89|   127k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   127k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   127k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   127k|{
  127|   127k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   127k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   127k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   127k|    static_cast<    \
  |  |  929|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   127k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  25.4k|{
  163|  25.4k|    T value;
  164|  25.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  25.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 19.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.17k|    }                                                  \
  |  |  |  | 3671|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  19.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  19.3k|    static_cast<    \
  |  |  929|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  19.3k|    static_cast<    \
  |  |  929|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  25.4k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   130k|{
   89|   130k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   130k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   130k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   130k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   130k|{
  127|   130k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   130k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   130k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   130k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  26.3k|{
  163|  26.3k|    T value;
  164|  26.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  26.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 20.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.17k|    }                                                  \
  |  |  |  | 3671|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  20.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.1k|    static_cast<    \
  |  |  929|  20.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.1k|    static_cast<    \
  |  |  929|  20.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  26.3k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  2.22M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  2.22M|{
  653|  2.22M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.22M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   937k|{
  659|   937k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   937k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 468k, False: 468k]
  ------------------
  661|   937k|                    : std::locale{};
  662|   937k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   996k|{
 1221|   996k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   996k|                                  m_nan_payload_buffer, value);
 1223|   996k|    value = this->setsign(value);
 1224|   996k|    return n;
 1225|   996k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   390k|{
 1221|   390k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   390k|                                  m_nan_payload_buffer, value);
 1223|   390k|    value = this->setsign(value);
 1224|   390k|    return n;
 1225|   390k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.03M|{
 1221|  1.03M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.03M|                                  m_nan_payload_buffer, value);
 1223|  1.03M|    value = this->setsign(value);
 1224|  1.03M|    return n;
 1225|  1.03M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   444k|{
 1221|   444k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   444k|                                  m_nan_payload_buffer, value);
 1223|   444k|    value = this->setsign(value);
 1224|   444k|    return n;
 1225|   444k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.04M|{
 1221|  1.04M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.04M|                                  m_nan_payload_buffer, value);
 1223|  1.04M|    value = this->setsign(value);
 1224|  1.04M|    return n;
 1225|  1.04M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   455k|{
 1221|   455k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   455k|                                  m_nan_payload_buffer, value);
 1223|   455k|    value = this->setsign(value);
 1224|   455k|    return n;
 1225|   455k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   681k|{
 2184|   681k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   681k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   795k|{
 2192|   795k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   795k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   795k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 739k, False: 55.6k]
  |  |  ------------------
  ------------------
 2194|   739k|        source.sync(*n);
 2195|   739k|    }
 2196|  55.6k|    else {
 2197|  55.6k|        source.sync_all();
 2198|  55.6k|    }
 2199|   795k|    return n;
 2200|   795k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   373k|{
 2208|   373k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   373k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   373k|{
 2216|   373k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   373k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   373k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262k, False: 111k]
  |  |  ------------------
  ------------------
 2218|   262k|        source.sync(*n);
 2219|   262k|    }
 2220|   111k|    else {
 2221|   111k|        source.sync_all();
 2222|   111k|    }
 2223|   373k|    return n;
 2224|   373k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  1.37M|{
  194|  1.37M|    return find_classic_impl(
  195|  1.37M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  1.37M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  1.37M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  3.25M|{
  202|  3.25M|    return find_classic_impl(
  203|  3.25M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  3.25M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  3.25M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   681k|{
 2141|   681k|    return vscan_internal(source, format, args);
 2142|   681k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   795k|{
 2147|   795k|    auto n = vscan_internal(source, format, args);
 2148|   795k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   795k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 739k, False: 55.6k]
  |  |  ------------------
  ------------------
 2149|   739k|        source.sync(*n);
 2150|   739k|    }
 2151|  55.6k|    else {
 2152|  55.6k|        source.sync_all();
 2153|  55.6k|    }
 2154|   795k|    return n;
 2155|   795k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   373k|{
 2161|   373k|    return vscan_internal(source, format, args);
 2162|   373k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   373k|{
 2167|   373k|    auto n = vscan_internal(source, format, args);
 2168|   373k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   373k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 262k, False: 111k]
  |  |  ------------------
  ------------------
 2169|   262k|        source.sync(*n);
 2170|   262k|    }
 2171|   111k|    else {
 2172|   111k|        source.sync_all();
 2173|   111k|    }
 2174|   373k|    return n;
 2175|   373k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   147k|{
 2251|   147k|    return vscan_value_internal(source, arg);
 2252|   147k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   162k|{
 2256|   162k|    auto n = vscan_value_internal(source, arg);
 2257|   162k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   162k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 153k, False: 9.26k]
  |  |  ------------------
  ------------------
 2258|   153k|        source.sync(*n);
 2259|   153k|    }
 2260|  9.26k|    else {
 2261|  9.26k|        source.sync_all();
 2262|  9.26k|    }
 2263|   162k|    return n;
 2264|   162k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  73.4k|{
 2270|  73.4k|    return vscan_value_internal(source, arg);
 2271|  73.4k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  73.3k|{
 2276|  73.3k|    auto n = vscan_value_internal(source, arg);
 2277|  73.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  73.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 54.7k, False: 18.5k]
  |  |  ------------------
  ------------------
 2278|  54.7k|        source.sync(*n);
 2279|  54.7k|    }
 2280|  18.5k|    else {
 2281|  18.5k|        source.sync_all();
 2282|  18.5k|    }
 2283|  73.3k|    return n;
 2284|  73.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  1.37M|{
  118|  1.37M|    auto it = source.begin();
  119|       |
  120|  4.48M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.59M, False: 884k]
  ------------------
  121|  3.59M|        auto sv =
  122|  3.59M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.59M|                .substr(0, 8);
  124|       |
  125|  3.59M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.51M, False: 79.9k]
  ------------------
  126|  3.51M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.51M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.51M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 457k, False: 3.05M]
  ------------------
  129|   457k|                break;
  130|   457k|            }
  131|  3.05M|            continue;
  132|  3.51M|        }
  133|       |
  134|   269k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 221k, False: 47.1k]
  ------------------
  135|   221k|            auto tmp =
  136|   221k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   221k|            auto res = get_next_code_point(tmp);
  138|   221k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 32.7k, False: 189k]
  ------------------
  139|  32.7k|                return it;
  140|  32.7k|            }
  141|   189k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   189k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   189k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   189k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   189k|        }
  145|  79.9k|    }
  146|       |
  147|  1.34M|    return detail::make_string_view_iterator(source, it);
  148|  1.37M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  5.58M|{
  105|  5.58M|    static_assert(sizeof(*source.data()) == 1);
  106|  5.58M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  5.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  5.58M|    uint64_t word{};
  108|  5.58M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  5.58M|    return has_byte_greater(word, 127) != 0;
  111|  5.58M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  21.4M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   221k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.25M|{
  118|  3.25M|    auto it = source.begin();
  119|       |
  120|  3.55M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.98M, False: 1.56M]
  ------------------
  121|  1.98M|        auto sv =
  122|  1.98M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.98M|                .substr(0, 8);
  124|       |
  125|  1.98M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.87M, False: 110k]
  ------------------
  126|  1.87M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.87M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.87M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.58M, False: 295k]
  ------------------
  129|  1.58M|                break;
  130|  1.58M|            }
  131|   295k|            continue;
  132|  1.87M|        }
  133|       |
  134|   209k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 199k, False: 10.1k]
  ------------------
  135|   199k|            auto tmp =
  136|   199k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   199k|            auto res = get_next_code_point(tmp);
  138|   199k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 100k, False: 98.9k]
  ------------------
  139|   100k|                return it;
  140|   100k|            }
  141|  98.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  98.9k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  98.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  98.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  98.9k|        }
  145|   110k|    }
  146|       |
  147|  3.15M|    return detail::make_string_view_iterator(source, it);
  148|  3.25M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.94M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   199k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   996k|{
 1138|   996k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.65k, False: 991k]
  ------------------
 1139|  5.65k|        value = std::numeric_limits<T>::infinity();
 1140|  5.65k|        return 3;
 1141|  5.65k|    }
 1142|   991k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.70k, False: 985k]
  ------------------
 1143|  5.70k|        value = std::numeric_limits<T>::infinity();
 1144|  5.70k|        return 8;
 1145|  5.70k|    }
 1146|   985k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 39.0k, False: 946k]
  ------------------
 1147|  39.0k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  39.0k|        return 3;
 1149|  39.0k|    }
 1150|   946k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 944k]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|   944k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   944k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   944k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   944k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 204k, False: 740k]
  ------------------
 1185|   204k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.12k, False: 200k]
  |  |  ------------------
  ------------------
 1186|  4.12k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.12k|                                         "Invalid floating-point digit");
 1188|  4.12k|        }
 1189|   204k|    }
 1190|   940k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   940k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 929k]
  |  |  ------------------
  ------------------
 1191|  10.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.8k|                                     "Invalid floating-point digit");
 1193|  10.8k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   929k|    else {
 1211|       |        // Default to fast_float
 1212|   929k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   929k|    }
 1214|   929k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   929k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   929k|    {
 1078|   929k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  3.35M|    {
  712|  3.35M|        return {kind, options};
  713|  3.35M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   929k|    {
 1082|   929k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 200k, False: 729k]
  ------------------
 1083|   929k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 30.9k, False: 698k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   231k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   231k|                                              value);
 1087|   231k|        }
 1088|       |
 1089|   698k|        const auto flags = get_flags();
 1090|   698k|        const auto view = get_view();
 1091|   698k|        const auto result = fast_float::from_chars(
 1092|   698k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   698k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 698k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   698k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 692k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  6.21k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  6.21k|                                              value);
 1102|  6.21k|        }
 1103|       |
 1104|   692k|        return result.ptr - view.data();
 1105|   698k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   237k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   237k|    {
 1048|   237k|#if !SCN_DISABLE_STRTOD
 1049|   237k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   237k|    }
 1056|   237k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   237k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   237k|    {
  894|   237k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   325k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   237k|    {
  898|   237k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   237k|                           generic_strtod);
  900|   237k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   237k|    {
  732|   237k|        CharT* end{};
  733|   237k|        errno = 0;
  734|   237k|        value = strtod_cb(src, &end);
  735|   237k|        const auto saved_errno = errno;
  736|   237k|        auto chars_read = end - src;
  737|       |
  738|   237k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   237k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.36k, False: 230k]
  |  |  ------------------
  ------------------
  740|  7.36k|            return unexpected(e);
  741|  7.36k|        }
  742|       |
  743|   230k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 199k, False: 30.7k]
  ------------------
  744|   230k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 199k, False: 0]
  ------------------
  745|   199k|            chars_read -= 2;
  746|   199k|        }
  747|       |
  748|   230k|        return chars_read;
  749|   237k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   325k|    {
  778|   325k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 127k, False: 197k]
  |  Branch (778:37): [True: 0, False: 127k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   325k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 31.6k, False: 293k]
  ------------------
  785|   325k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 31.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   325k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 12.5k, False: 312k]
  |  Branch (791:34): [True: 2.71k, False: 9.86k]
  ------------------
  792|  2.71k|            SCN_UNLIKELY_ATTR
  793|  2.71k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.71k|        }
  795|       |
  796|   322k|        SCN_GCC_COMPAT_PUSH
  797|   322k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   322k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 322k, False: 0]
  ------------------
  800|   322k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 322k, False: 0]
  ------------------
  801|   322k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 9.83k, False: 312k]
  ------------------
  802|  9.83k|            SCN_UNLIKELY_ATTR
  803|  9.83k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  9.83k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   312k|            return {};
  809|   322k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   338k|{
  687|   338k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 130k, False: 207k]
  |  Branch (687:25): [True: 0, False: 207k]
  ------------------
  688|   338k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   237k|    {
  755|   237k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 232k, False: 5.01k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   232k|            auto first_space = read_until_classic_space(input.view());
  758|   232k|            input.assign(
  759|   232k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   232k|        }
  761|       |
  762|   237k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 200k, False: 37.1k]
  ------------------
  763|   200k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   200k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   200k|        }
  770|       |
  771|   237k|        return input.get_allocated_string().c_str();
  772|   237k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   237k|    {
  905|   237k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   237k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   237k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   237k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   237k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   237k|        if constexpr (std::is_same_v<T, float>) {
  838|   237k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   237k|#endif
  847|   237k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.01M|    {
 1061|  2.01M|        unsigned format_flags{};
 1062|  2.01M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.00M, False: 13.0k]
  ------------------
 1063|  2.00M|            format_flags |= fast_float::fixed;
 1064|  2.00M|        }
 1065|  2.01M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.70M, False: 310k]
  ------------------
 1066|  1.70M|            format_flags |= fast_float::scientific;
 1067|  1.70M|        }
 1068|       |
 1069|  2.01M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.01M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   698k|    {
 1110|   698k|        if constexpr (sizeof(CharT) == 1) {
 1111|   698k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   698k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   390k|{
 1138|   390k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 390k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   390k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 390k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   390k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 390k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   390k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 390k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   390k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   390k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 94.2k, False: 296k]
  ------------------
 1185|  94.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 82.2k]
  |  |  ------------------
  ------------------
 1186|  11.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.9k|                                         "Invalid floating-point digit");
 1188|  11.9k|        }
 1189|  94.2k|    }
 1190|   378k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   378k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 350k]
  |  |  ------------------
  ------------------
 1191|  28.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  28.6k|                                     "Invalid floating-point digit");
 1193|  28.6k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   350k|    else {
 1211|       |        // Default to fast_float
 1212|   350k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   350k|    }
 1214|   350k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   350k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   350k|    {
 1078|   350k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  1.33M|    {
  712|  1.33M|        return {kind, options};
  713|  1.33M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   350k|    {
 1082|   350k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 82.2k, False: 267k]
  ------------------
 1083|   350k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 686, False: 267k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  82.9k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  82.9k|                                              value);
 1087|  82.9k|        }
 1088|       |
 1089|   267k|        const auto flags = get_flags();
 1090|   267k|        const auto view = get_view();
 1091|   267k|        const auto result = fast_float::from_chars(
 1092|   267k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   267k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 267k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   267k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.10k, False: 262k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.10k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.10k|                                              value);
 1102|  5.10k|        }
 1103|       |
 1104|   262k|        return result.ptr - view.data();
 1105|   267k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  88.0k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  88.0k|    {
 1048|  88.0k|#if !SCN_DISABLE_STRTOD
 1049|  88.0k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  88.0k|    }
 1056|  88.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|  88.0k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  88.0k|    {
  894|  88.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  88.0k|    {
  898|  88.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  88.0k|                           generic_strtod);
  900|  88.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  88.0k|    {
  732|  88.0k|        CharT* end{};
  733|  88.0k|        errno = 0;
  734|  88.0k|        value = strtod_cb(src, &end);
  735|  88.0k|        const auto saved_errno = errno;
  736|  88.0k|        auto chars_read = end - src;
  737|       |
  738|  88.0k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  88.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  88.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.18k, False: 82.8k]
  |  |  ------------------
  ------------------
  740|  5.18k|            return unexpected(e);
  741|  5.18k|        }
  742|       |
  743|  82.8k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 82.1k, False: 686]
  ------------------
  744|  82.8k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 82.1k, False: 0]
  ------------------
  745|  82.1k|            chars_read -= 2;
  746|  82.1k|        }
  747|       |
  748|  82.8k|        return chars_read;
  749|  88.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  88.0k|    {
  755|  88.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 85.0k, False: 2.98k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  85.0k|            auto first_space = read_until_classic_space(input.view());
  758|  85.0k|            input.assign(
  759|  85.0k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  85.0k|        }
  761|       |
  762|  88.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 82.2k, False: 5.79k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  82.2k|            else {
  767|  82.2k|                input.get_allocated_string().insert(0, L"0x");
  768|  82.2k|            }
  769|  82.2k|        }
  770|       |
  771|  88.0k|        return input.get_allocated_string().c_str();
  772|  88.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  88.0k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  88.0k|        else {
  909|  88.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  88.0k|        }
  911|  88.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  88.0k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  88.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  88.0k|        if constexpr (std::is_same_v<T, float>) {
  876|  88.0k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  88.0k|#endif
  885|  88.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   267k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   267k|        else {
 1119|   267k|            return std::u32string_view{
 1120|   267k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   267k|                m_input.view().size()};
 1122|   267k|        }
 1123|   267k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.03M|{
 1138|  1.03M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.31k, False: 1.03M]
  ------------------
 1139|  6.31k|        value = std::numeric_limits<T>::infinity();
 1140|  6.31k|        return 3;
 1141|  6.31k|    }
 1142|  1.03M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.11k, False: 1.02M]
  ------------------
 1143|  6.11k|        value = std::numeric_limits<T>::infinity();
 1144|  6.11k|        return 8;
 1145|  6.11k|    }
 1146|  1.02M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 40.1k, False: 984k]
  ------------------
 1147|  40.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  40.1k|        return 3;
 1149|  40.1k|    }
 1150|   984k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.04k, False: 982k]
  ------------------
 1151|  2.04k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.04k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.04k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.04k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.04k|    }
 1182|       |
 1183|   982k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   982k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   982k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   982k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 209k, False: 772k]
  ------------------
 1185|   209k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.24k, False: 205k]
  |  |  ------------------
  ------------------
 1186|  4.24k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.24k|                                         "Invalid floating-point digit");
 1188|  4.24k|        }
 1189|   209k|    }
 1190|   978k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.4k, False: 966k]
  |  |  ------------------
  ------------------
 1191|  11.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.4k|                                     "Invalid floating-point digit");
 1193|  11.4k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   966k|    else {
 1211|       |        // Default to fast_float
 1212|   966k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   966k|    }
 1214|   966k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|   966k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   966k|    {
 1078|   966k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   966k|    {
 1082|   966k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 205k, False: 761k]
  ------------------
 1083|   966k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 33.2k, False: 727k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   238k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   238k|                                              value);
 1087|   238k|        }
 1088|       |
 1089|   727k|        const auto flags = get_flags();
 1090|   727k|        const auto view = get_view();
 1091|   727k|        const auto result = fast_float::from_chars(
 1092|   727k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   727k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   727k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.89k, False: 724k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.89k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.89k|                                              value);
 1102|  2.89k|        }
 1103|       |
 1104|   724k|        return result.ptr - view.data();
 1105|   727k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   241k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   241k|    {
 1048|   241k|#if !SCN_DISABLE_STRTOD
 1049|   241k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   241k|    }
 1056|   241k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   241k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   241k|    {
  894|   241k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   326k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   241k|    {
  898|   241k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   241k|                           generic_strtod);
  900|   241k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   241k|    {
  732|   241k|        CharT* end{};
  733|   241k|        errno = 0;
  734|   241k|        value = strtod_cb(src, &end);
  735|   241k|        const auto saved_errno = errno;
  736|   241k|        auto chars_read = end - src;
  737|       |
  738|   241k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   241k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.41k, False: 238k]
  |  |  ------------------
  ------------------
  740|  3.41k|            return unexpected(e);
  741|  3.41k|        }
  742|       |
  743|   238k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 205k, False: 33.2k]
  ------------------
  744|   238k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 205k, False: 0]
  ------------------
  745|   205k|            chars_read -= 2;
  746|   205k|        }
  747|       |
  748|   238k|        return chars_read;
  749|   241k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   326k|    {
  778|   326k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 126k, False: 200k]
  |  Branch (778:37): [True: 0, False: 126k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   326k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 33.9k, False: 292k]
  ------------------
  785|   326k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 33.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   326k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.75k, False: 321k]
  |  Branch (791:34): [True: 637, False: 5.11k]
  ------------------
  792|    637|            SCN_UNLIKELY_ATTR
  793|    637|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    637|        }
  795|       |
  796|   326k|        SCN_GCC_COMPAT_PUSH
  797|   326k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   326k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 326k, False: 0]
  ------------------
  800|   326k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 326k, False: 0]
  ------------------
  801|   326k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.11k, False: 321k]
  ------------------
  802|  5.11k|            SCN_UNLIKELY_ATTR
  803|  5.11k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.11k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   321k|            return {};
  809|   326k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   332k|{
  691|   332k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 127k, False: 205k]
  |  Branch (691:24): [True: 0, False: 205k]
  ------------------
  692|   332k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   241k|    {
  755|   241k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 238k, False: 3.63k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   238k|            auto first_space = read_until_classic_space(input.view());
  758|   238k|            input.assign(
  759|   238k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   238k|        }
  761|       |
  762|   241k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 205k, False: 36.1k]
  ------------------
  763|   205k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   205k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   205k|        }
  770|       |
  771|   241k|        return input.get_allocated_string().c_str();
  772|   241k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   241k|    {
  905|   241k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   241k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   241k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   241k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   241k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   241k|        else if constexpr (std::is_same_v<T, double>) {
  841|   241k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   241k|#endif
  847|   241k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   727k|    {
 1110|   727k|        if constexpr (sizeof(CharT) == 1) {
 1111|   727k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   727k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   444k|{
 1138|   444k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 444k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   444k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 444k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   444k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 444k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   444k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 444k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   444k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   444k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 94.2k, False: 350k]
  ------------------
 1185|  94.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 82.2k]
  |  |  ------------------
  ------------------
 1186|  11.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.9k|                                         "Invalid floating-point digit");
 1188|  11.9k|        }
 1189|  94.2k|    }
 1190|   432k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.5k, False: 403k]
  |  |  ------------------
  ------------------
 1191|  29.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  29.5k|                                     "Invalid floating-point digit");
 1193|  29.5k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   403k|    else {
 1211|       |        // Default to fast_float
 1212|   403k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   403k|    }
 1214|   403k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   403k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   403k|    {
 1078|   403k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   403k|    {
 1082|   403k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 82.2k, False: 321k]
  ------------------
 1083|   403k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 686, False: 320k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  82.9k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  82.9k|                                              value);
 1087|  82.9k|        }
 1088|       |
 1089|   320k|        const auto flags = get_flags();
 1090|   320k|        const auto view = get_view();
 1091|   320k|        const auto result = fast_float::from_chars(
 1092|   320k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   320k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 320k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   320k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.26k, False: 318k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.26k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.26k|                                              value);
 1102|  2.26k|        }
 1103|       |
 1104|   318k|        return result.ptr - view.data();
 1105|   320k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  85.1k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  85.1k|    {
 1048|  85.1k|#if !SCN_DISABLE_STRTOD
 1049|  85.1k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  85.1k|    }
 1056|  85.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  85.1k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  85.1k|    {
  894|  85.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  85.1k|    {
  898|  85.1k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  85.1k|                           generic_strtod);
  900|  85.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  85.1k|    {
  732|  85.1k|        CharT* end{};
  733|  85.1k|        errno = 0;
  734|  85.1k|        value = strtod_cb(src, &end);
  735|  85.1k|        const auto saved_errno = errno;
  736|  85.1k|        auto chars_read = end - src;
  737|       |
  738|  85.1k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  85.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.33k, False: 82.8k]
  |  |  ------------------
  ------------------
  740|  2.33k|            return unexpected(e);
  741|  2.33k|        }
  742|       |
  743|  82.8k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 82.1k, False: 686]
  ------------------
  744|  82.8k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 82.1k, False: 0]
  ------------------
  745|  82.1k|            chars_read -= 2;
  746|  82.1k|        }
  747|       |
  748|  82.8k|        return chars_read;
  749|  85.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  85.1k|    {
  755|  85.1k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 83.5k, False: 1.57k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  83.5k|            auto first_space = read_until_classic_space(input.view());
  758|  83.5k|            input.assign(
  759|  83.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  83.5k|        }
  761|       |
  762|  85.1k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 82.2k, False: 2.95k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  82.2k|            else {
  767|  82.2k|                input.get_allocated_string().insert(0, L"0x");
  768|  82.2k|            }
  769|  82.2k|        }
  770|       |
  771|  85.1k|        return input.get_allocated_string().c_str();
  772|  85.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  85.1k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  85.1k|        else {
  909|  85.1k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  85.1k|        }
  911|  85.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  85.1k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  85.1k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  85.1k|        else if constexpr (std::is_same_v<T, double>) {
  879|  85.1k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  85.1k|#endif
  885|  85.1k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   320k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   320k|        else {
 1119|   320k|            return std::u32string_view{
 1120|   320k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   320k|                m_input.view().size()};
 1122|   320k|        }
 1123|   320k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.04M|{
 1138|  1.04M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.47k, False: 1.04M]
  ------------------
 1139|  6.47k|        value = std::numeric_limits<T>::infinity();
 1140|  6.47k|        return 3;
 1141|  6.47k|    }
 1142|  1.04M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.23k, False: 1.03M]
  ------------------
 1143|  6.23k|        value = std::numeric_limits<T>::infinity();
 1144|  6.23k|        return 8;
 1145|  6.23k|    }
 1146|  1.03M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 40.3k, False: 994k]
  ------------------
 1147|  40.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  40.3k|        return 3;
 1149|  40.3k|    }
 1150|   994k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.08k, False: 992k]
  ------------------
 1151|  2.08k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.08k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.08k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.08k|    }
 1182|       |
 1183|   992k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   992k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   992k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   992k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 210k, False: 781k]
  ------------------
 1185|   210k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.35k, False: 206k]
  |  |  ------------------
  ------------------
 1186|  4.35k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.35k|                                         "Invalid floating-point digit");
 1188|  4.35k|        }
 1189|   210k|    }
 1190|   987k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   987k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 975k]
  |  |  ------------------
  ------------------
 1191|  11.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.9k|                                     "Invalid floating-point digit");
 1193|  11.9k|    }
 1194|       |
 1195|   975k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   975k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   975k|            return fast_float_fallback(data, value);
 1208|   975k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   975k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   975k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   975k|    {
 1048|   975k|#if !SCN_DISABLE_STRTOD
 1049|   975k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   975k|    }
 1056|   975k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|   975k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   975k|    {
  894|   975k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.38M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   975k|    {
  898|   975k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   975k|                           generic_strtod);
  900|   975k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   975k|    {
  732|   975k|        CharT* end{};
  733|   975k|        errno = 0;
  734|   975k|        value = strtod_cb(src, &end);
  735|   975k|        const auto saved_errno = errno;
  736|   975k|        auto chars_read = end - src;
  737|       |
  738|   975k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   975k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 774, False: 974k]
  |  |  ------------------
  ------------------
  740|    774|            return unexpected(e);
  741|    774|        }
  742|       |
  743|   974k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 206k, False: 768k]
  ------------------
  744|   974k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 206k, False: 0]
  ------------------
  745|   206k|            chars_read -= 2;
  746|   206k|        }
  747|       |
  748|   974k|        return chars_read;
  749|   975k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.38M|    {
  778|  1.38M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 598k, False: 790k]
  |  Branch (778:37): [True: 0, False: 598k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.38M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 34.0k, False: 1.35M]
  ------------------
  785|  1.38M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 34.0k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.38M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.03k, False: 1.38M]
  |  Branch (791:34): [True: 155, False: 877]
  ------------------
  792|    155|            SCN_UNLIKELY_ATTR
  793|    155|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    155|        }
  795|       |
  796|  1.38M|        SCN_GCC_COMPAT_PUSH
  797|  1.38M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.38M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.38M, False: 0]
  ------------------
  800|  1.38M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.38M, False: 0]
  ------------------
  801|  1.38M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 877, False: 1.38M]
  ------------------
  802|    877|            SCN_UNLIKELY_ATTR
  803|    877|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    877|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.38M|            return {};
  809|  1.38M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.38M|{
  695|  1.38M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 598k, False: 791k]
  |  Branch (695:26): [True: 0, False: 791k]
  ------------------
  696|  1.38M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   975k|    {
  755|   975k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 904k, False: 71.2k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   904k|            auto first_space = read_until_classic_space(input.view());
  758|   904k|            input.assign(
  759|   904k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   904k|        }
  761|       |
  762|   975k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 206k, False: 769k]
  ------------------
  763|   206k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   206k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   206k|        }
  770|       |
  771|   975k|        return input.get_allocated_string().c_str();
  772|   975k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   975k|    {
  905|   975k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   975k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   975k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   975k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   975k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|   975k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   975k|            return std::strtold(str, str_end);
  845|   975k|        }
  846|   975k|#endif
  847|   975k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   455k|{
 1138|   455k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 455k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   455k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 455k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   455k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 455k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   455k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 455k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   455k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   455k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   455k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   455k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 94.2k, False: 360k]
  ------------------
 1185|  94.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 82.2k]
  |  |  ------------------
  ------------------
 1186|  11.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.9k|                                         "Invalid floating-point digit");
 1188|  11.9k|        }
 1189|  94.2k|    }
 1190|   443k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.2k, False: 412k]
  |  |  ------------------
  ------------------
 1191|  30.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  30.2k|                                     "Invalid floating-point digit");
 1193|  30.2k|    }
 1194|       |
 1195|   412k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   412k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   412k|            return fast_float_fallback(data, value);
 1208|   412k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   412k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   412k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   412k|    {
 1048|   412k|#if !SCN_DISABLE_STRTOD
 1049|   412k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   412k|    }
 1056|   412k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   412k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   412k|    {
  894|   412k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   412k|    {
  898|   412k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   412k|                           generic_strtod);
  900|   412k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   412k|    {
  732|   412k|        CharT* end{};
  733|   412k|        errno = 0;
  734|   412k|        value = strtod_cb(src, &end);
  735|   412k|        const auto saved_errno = errno;
  736|   412k|        auto chars_read = end - src;
  737|       |
  738|   412k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   412k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 258, False: 412k]
  |  |  ------------------
  ------------------
  740|    258|            return unexpected(e);
  741|    258|        }
  742|       |
  743|   412k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 82.2k, False: 330k]
  ------------------
  744|   412k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 82.2k, False: 0]
  ------------------
  745|  82.2k|            chars_read -= 2;
  746|  82.2k|        }
  747|       |
  748|   412k|        return chars_read;
  749|   412k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   412k|    {
  755|   412k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 406k, False: 6.97k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   406k|            auto first_space = read_until_classic_space(input.view());
  758|   406k|            input.assign(
  759|   406k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   406k|        }
  761|       |
  762|   412k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 82.2k, False: 330k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  82.2k|            else {
  767|  82.2k|                input.get_allocated_string().insert(0, L"0x");
  768|  82.2k|            }
  769|  82.2k|        }
  770|       |
  771|   412k|        return input.get_allocated_string().c_str();
  772|   412k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   412k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   412k|        else {
  909|   412k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   412k|        }
  911|   412k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   412k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   412k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   412k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   412k|            return std::wcstold(str, str_end);
  883|   412k|        }
  884|   412k|#endif
  885|   412k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.59M|{
 2073|  1.59M|    const auto argcount = args.size();
 2074|  1.59M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 324k, False: 1.26M]
  |  Branch (2074:60): [True: 324k, False: 0]
  ------------------
 2075|   324k|        auto arg = args.get(0);
 2076|   324k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   324k|    static_cast<    \
  |  |  929|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   324k|    }
 2078|       |
 2079|  1.26M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.26M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.26M|    SCN_UNLIKELY_ATTR
 2087|  1.26M|    {
 2088|  1.26M|        auto handler = format_handler<false, CharT>{
 2089|  1.26M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.26M|    static_cast<    \
  |  |  929|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.26M|    static_cast<    \
  |  |  929|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.26M|        return vscan_parse_format_string(format, handler);
 2091|  1.26M|    }
 2092|  1.26M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.95M|{
 1625|  2.95M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 2.33M, False: 620k]
  ------------------
 1626|  2.33M|        return false;
 1627|  2.33M|    }
 1628|   620k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 620k, False: 0]
  |  Branch (1628:39): [True: 620k, False: 0]
  ------------------
 1629|  2.95M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   486k|{
 1658|   486k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   486k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   486k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   486k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   486k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   486k|    static_cast<    \
  |  |  929|   486k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   486k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   486k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   486k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   486k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.8k, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  27.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  27.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  27.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  27.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  27.8k|    }                                                  \
  |  |  |  | 3671|   486k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   459k|    return it.position();
 1675|   486k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|  1.06M|        : format_handler_base{argcount},
 1900|  1.06M|          parse_ctx{format},
 1901|  1.06M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.06M|    {
 1903|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  3.53M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  3.53M|    {
 1722|  3.53M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.53M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|  1.06M|        : contiguous_ctx(source, args, loc)
 1852|  1.06M|    {
 1853|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.06M|{
 2038|  1.06M|    const auto beg = handler.get_ctx().begin();
 2039|  1.06M|    detail::parse_format_string<false>(format, handler);
 2040|  1.06M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92.6k, False: 973k]
  |  |  ------------------
  ------------------
 2041|  92.6k|        return unexpected(handler.error);
 2042|  92.6k|    }
 2043|   973k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.06M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  7.28M|    {
 2022|  7.28M|        return ctx.get();
 2023|  7.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  7.28M|    {
 1857|  7.28M|        return contiguous_ctx;
 1858|  7.28M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  2.04M|    {
 1907|  2.04M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.04M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.06M|{
 1681|  1.06M|    auto arg = ctx.arg(id);
 1682|  1.06M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.06M|    return arg;
 1686|  1.06M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.53M|    {
 1797|  3.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.53M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.53M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.53M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.53M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.53M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.53M|            visited_args_lower64 |= (1ull << id);
 1808|  3.53M|            return;
 1809|  3.53M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.53M|    {
 1782|  3.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.53M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.53M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.53M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.53M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.53M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   556k|    {
 1766|   556k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   556k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 556k, False: 0]
  |  |  ------------------
  ------------------
 1767|   556k|            error = err;
 1768|   556k|        }
 1769|   556k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  1.06M|    {
 1944|  1.06M|        return parse_ctx.next_arg_id();
 1945|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  1.06M|    {
 1985|  1.06M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.06M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.06M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.06M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.06M|        auto specs = detail::format_specs{};
 1998|  1.06M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.06M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.06M|            arg.type()};
 2001|       |
 2002|  1.06M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.06M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.06M]
  |  Branch (2003:29): [True: 0, False: 1.06M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.06M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.06M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.06M|        on_visit_scan_arg(
 2014|  1.06M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.06M|                                           get_ctx().locale()},
 2016|  1.06M|            arg);
 2017|  1.06M|        return parse_ctx.begin();
 2018|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  1.06M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.06M|    {
 1701|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  1.06M|    {
 1956|  1.06M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.06M]
  |  Branch (1956:23): [True: 0, False: 1.06M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.06M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.06M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92.6k, False: 973k]
  |  |  ------------------
  ------------------
 1963|  92.6k|            on_error(r.error());
 1964|  92.6k|        }
 1965|   973k|        else {
 1966|   973k|            get_ctx().advance_to(*r);
 1967|   973k|        }
 1968|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.53M|    {
 1729|  3.53M|        {
 1730|  3.53M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.53M]
  ------------------
 1731|  3.53M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.53M]
  ------------------
 1732|  3.53M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.53M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.53M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.53M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.53M|        }
 1739|       |
 1740|  3.53M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.53M, False: 0]
  ------------------
 1741|  3.53M|            return;
 1742|  3.53M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.53M|    {
 1777|  3.53M|        return error;
 1778|  3.53M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  10.6M|    {
 1773|  10.6M|        return static_cast<bool>(error);
 1774|  10.6M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  1.26M|        : format_handler_base{argcount},
 1900|  1.26M|          parse_ctx{format},
 1901|  1.26M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.26M|    static_cast<    \
  |  |  929|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.26M|    static_cast<    \
  |  |  929|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.26M|    {
 1903|  1.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  1.26M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.26M|    static_cast<    \
  |  |  929|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.26M|    {
 1830|  1.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.26M|{
 2038|  1.26M|    const auto beg = handler.get_ctx().begin();
 2039|  1.26M|    detail::parse_format_string<false>(format, handler);
 2040|  1.26M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92.6k, False: 1.17M]
  |  |  ------------------
  ------------------
 2041|  92.6k|        return unexpected(handler.error);
 2042|  92.6k|    }
 2043|  1.17M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.26M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  8.67M|    {
 2022|  8.67M|        return ctx.get();
 2023|  8.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  8.67M|    {
 1834|  8.67M|        return ctx;
 1835|  8.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  2.44M|    {
 1907|  2.44M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.44M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.44M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.26M|{
 1681|  1.26M|    auto arg = ctx.arg(id);
 1682|  1.26M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.26M|    return arg;
 1686|  1.26M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.26M|    {
 1944|  1.26M|        return parse_ctx.next_arg_id();
 1945|  1.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.26M|    {
 1985|  1.26M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.26M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.26M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.26M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.26M|        auto specs = detail::format_specs{};
 1998|  1.26M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.26M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.26M|            arg.type()};
 2001|       |
 2002|  1.26M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.26M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.26M]
  |  Branch (2003:29): [True: 0, False: 1.26M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.26M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.26M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.26M|        on_visit_scan_arg(
 2014|  1.26M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.26M|                                           get_ctx().locale()},
 2016|  1.26M|            arg);
 2017|  1.26M|        return parse_ctx.begin();
 2018|  1.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  1.26M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.26M|    {
 1701|  1.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.26M|    {
 1956|  1.26M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.26M]
  |  Branch (1956:23): [True: 0, False: 1.26M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.26M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.26M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92.6k, False: 1.17M]
  |  |  ------------------
  ------------------
 1963|  92.6k|            on_error(r.error());
 1964|  92.6k|        }
 1965|  1.17M|        else {
 1966|  1.17M|            get_ctx().advance_to(*r);
 1967|  1.17M|        }
 1968|  1.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.36M|{
 2053|  1.36M|    const auto argcount = args.size();
 2054|  1.36M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 295k, False: 1.06M]
  |  Branch (2054:60): [True: 295k, False: 0]
  ------------------
 2055|   295k|        auto arg = args.get(0);
 2056|   295k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   295k|    static_cast<    \
  |  |  929|   295k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   295k|    }
 2058|       |
 2059|  1.06M|    auto handler = format_handler<true, CharT>{
 2060|  1.06M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.06M|                                       source.data() + source.size()},
 2062|  1.06M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.06M|    return vscan_parse_format_string(format, handler);
 2064|  1.36M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   443k|{
 1638|   443k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   443k|    auto reader =
 1644|   443k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   443k|            ranges::subrange<const CharT*>{source.data(),
 1646|   443k|                                           source.data() + source.size()},
 1647|   443k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   443k|    static_cast<    \
  |  |  929|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   443k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   443k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   443k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   443k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.8k, False: 415k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  27.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  27.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  27.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  27.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  27.8k|    }                                                  \
  |  |  |  | 3671|   443k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   415k|    return ranges::distance(source.data(), it);
 1650|   443k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   747k|{
 2053|   747k|    const auto argcount = args.size();
 2054|   747k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 146k, False: 600k]
  |  Branch (2054:60): [True: 146k, False: 0]
  ------------------
 2055|   146k|        auto arg = args.get(0);
 2056|   146k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   146k|    }
 2058|       |
 2059|   600k|    auto handler = format_handler<true, CharT>{
 2060|   600k|        ranges::subrange<const CharT*>{source.data(),
 2061|   600k|                                       source.data() + source.size()},
 2062|   600k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   600k|    static_cast<    \
  |  |  929|   600k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   600k|    static_cast<    \
  |  |  929|   600k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   600k|    return vscan_parse_format_string(format, handler);
 2064|   747k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.49M|{
 1625|  1.49M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.20M, False: 293k]
  ------------------
 1626|  1.20M|        return false;
 1627|  1.20M|    }
 1628|   293k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 293k, False: 0]
  |  Branch (1628:39): [True: 293k, False: 0]
  ------------------
 1629|  1.49M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   220k|{
 1638|   220k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   220k|    auto reader =
 1644|   220k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   220k|            ranges::subrange<const CharT*>{source.data(),
 1646|   220k|                                           source.data() + source.size()},
 1647|   220k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   220k|    static_cast<    \
  |  |  929|   220k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   220k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.6k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  55.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  55.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  55.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  55.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  55.6k|    }                                                  \
  |  |  |  | 3671|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   164k|    return ranges::distance(source.data(), it);
 1650|   220k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   600k|        : format_handler_base{argcount},
 1900|   600k|          parse_ctx{format},
 1901|   600k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   600k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   600k|    static_cast<    \
  |  |  929|   600k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   600k|    static_cast<    \
  |  |  929|   600k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   600k|    {
 1903|   600k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   600k|        : contiguous_ctx(source, args, loc)
 1852|   600k|    {
 1853|   600k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   600k|{
 2038|   600k|    const auto beg = handler.get_ctx().begin();
 2039|   600k|    detail::parse_format_string<false>(format, handler);
 2040|   600k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 185k, False: 415k]
  |  |  ------------------
  ------------------
 2041|   185k|        return unexpected(handler.error);
 2042|   185k|    }
 2043|   415k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   600k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  3.83M|    {
 2022|  3.83M|        return ctx.get();
 2023|  3.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  3.83M|    {
 1857|  3.83M|        return contiguous_ctx;
 1858|  3.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.01M|    {
 1907|  1.01M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.01M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   600k|{
 1681|   600k|    auto arg = ctx.arg(id);
 1682|   600k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 600k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   600k|    return arg;
 1686|   600k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   600k|    {
 1944|   600k|        return parse_ctx.next_arg_id();
 1945|   600k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   600k|    {
 1985|   600k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   600k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   600k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 600k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   600k|        auto specs = detail::format_specs{};
 1998|   600k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   600k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   600k|            arg.type()};
 2001|       |
 2002|   600k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   600k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 600k]
  |  Branch (2003:29): [True: 0, False: 600k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   600k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 600k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   600k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   600k|        on_visit_scan_arg(
 2014|   600k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   600k|                                           get_ctx().locale()},
 2016|   600k|            arg);
 2017|   600k|        return parse_ctx.begin();
 2018|   600k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   600k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   600k|    {
 1701|   600k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   600k|    {
 1956|   600k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 600k]
  |  Branch (1956:23): [True: 0, False: 600k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   600k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   600k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   600k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 185k, False: 415k]
  |  |  ------------------
  ------------------
 1963|   185k|            on_error(r.error());
 1964|   185k|        }
 1965|   415k|        else {
 1966|   415k|            get_ctx().advance_to(*r);
 1967|   415k|        }
 1968|   600k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   746k|{
 2073|   746k|    const auto argcount = args.size();
 2074|   746k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 146k, False: 599k]
  |  Branch (2074:60): [True: 146k, False: 0]
  ------------------
 2075|   146k|        auto arg = args.get(0);
 2076|   146k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   146k|    }
 2078|       |
 2079|   599k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 599k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   599k|    SCN_UNLIKELY_ATTR
 2087|   599k|    {
 2088|   599k|        auto handler = format_handler<false, CharT>{
 2089|   599k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   599k|    static_cast<    \
  |  |  929|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   599k|    static_cast<    \
  |  |  929|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   599k|        return vscan_parse_format_string(format, handler);
 2091|   599k|    }
 2092|   599k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   219k|{
 1658|   219k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   219k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   219k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   219k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   219k|    static_cast<    \
  |  |  929|   219k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   219k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.6k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  55.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  55.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  55.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  55.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  55.6k|    }                                                  \
  |  |  |  | 3671|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   164k|    return it.position();
 1675|   219k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   599k|        : format_handler_base{argcount},
 1900|   599k|          parse_ctx{format},
 1901|   599k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   599k|    static_cast<    \
  |  |  929|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   599k|    static_cast<    \
  |  |  929|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   599k|    {
 1903|   599k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   599k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   599k|    static_cast<    \
  |  |  929|   599k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   599k|    {
 1830|   599k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   599k|{
 2038|   599k|    const auto beg = handler.get_ctx().begin();
 2039|   599k|    detail::parse_format_string<false>(format, handler);
 2040|   599k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 185k, False: 414k]
  |  |  ------------------
  ------------------
 2041|   185k|        return unexpected(handler.error);
 2042|   185k|    }
 2043|   414k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   599k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  3.82M|    {
 2022|  3.82M|        return ctx.get();
 2023|  3.82M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  3.82M|    {
 1834|  3.82M|        return ctx;
 1835|  3.82M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  1.01M|    {
 1907|  1.01M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.01M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   599k|{
 1681|   599k|    auto arg = ctx.arg(id);
 1682|   599k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 599k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   599k|    return arg;
 1686|   599k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   599k|    {
 1944|   599k|        return parse_ctx.next_arg_id();
 1945|   599k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   599k|    {
 1985|   599k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   599k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   599k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 599k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   599k|        auto specs = detail::format_specs{};
 1998|   599k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   599k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   599k|            arg.type()};
 2001|       |
 2002|   599k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   599k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 599k]
  |  Branch (2003:29): [True: 0, False: 599k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   599k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 599k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   599k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   599k|        on_visit_scan_arg(
 2014|   599k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   599k|                                           get_ctx().locale()},
 2016|   599k|            arg);
 2017|   599k|        return parse_ctx.begin();
 2018|   599k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   599k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   599k|    {
 1701|   599k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   599k|    {
 1956|   599k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 599k]
  |  Branch (1956:23): [True: 0, False: 599k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   599k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   599k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 185k, False: 414k]
  |  |  ------------------
  ------------------
 1963|   185k|            on_error(r.error());
 1964|   185k|        }
 1965|   414k|        else {
 1966|   414k|            get_ctx().advance_to(*r);
 1967|   414k|        }
 1968|   599k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   147k|{
 2099|   147k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   162k|{
 2099|   162k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   162k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  73.4k|{
 2099|  73.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  73.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  73.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  73.3k|{
 2099|  73.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  73.3k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.08k|{
 1363|  3.08k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.08k|    if constexpr (sizeof(SourceCharT) == 1) {
 1366|       |        if constexpr (sizeof(DestCharT) == 2) {
 1367|       |            std::u32string tmp;
 1368|       |            transcode_to_string_impl_to32(src, tmp);
 1369|       |            return transcode_to_string_impl_32to16<false>(
 1370|       |                std::u32string_view{tmp}, dest);
 1371|       |        }
 1372|  3.08k|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|  3.08k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.08k|        }
 1375|       |    }
 1376|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|       |        if constexpr (sizeof(DestCharT) == 1) {
 1378|       |            std::u32string tmp;
 1379|       |            transcode_to_string_impl_to32(src, tmp);
 1380|       |            return transcode_to_string_impl_32to8<false>(
 1381|       |                std::u32string_view{tmp}, dest);
 1382|       |        }
 1383|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1384|       |            return trasncode_to_string_impl_to32(src, dest);
 1385|       |        }
 1386|       |    }
 1387|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|       |        if constexpr (sizeof(DestCharT) == 1) {
 1389|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|       |        }
 1391|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1392|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|       |        }
 1394|       |    }
 1395|       |
 1396|  3.08k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|  3.08k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.08k|{
 1256|  3.08k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.08k|    auto it = src.begin();
 1259|   996k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 993k, False: 3.08k]
  ------------------
 1260|   993k|        auto res = get_next_code_point(
 1261|   993k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   993k|                                                                 src.end()));
 1263|   993k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   993k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.67k, False: 990k]
  |  |  ------------------
  ------------------
 1264|  3.67k|            dest.push_back(DestCharT{0xfffd});
 1265|  3.67k|        }
 1266|   990k|        else {
 1267|   990k|            dest.push_back(res.value);
 1268|   990k|        }
 1269|   993k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   993k|    }
 1271|  3.08k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.41M|{
 1169|  1.41M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.41M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.41M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 1.37M]
  |  |  ------------------
  ------------------
 1173|  38.4k|        return {get_start_for_next_code_point(input),
 1174|  38.4k|                detail::invalid_code_point};
 1175|  38.4k|    }
 1176|  1.37M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.02k, False: 1.37M]
  |  |  ------------------
  ------------------
 1177|  5.02k|        return {input.end(), detail::invalid_code_point};
 1178|  5.02k|    }
 1179|       |
 1180|  1.37M|    return {input.begin() + len,
 1181|  1.37M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.37M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  38.4k|{
 1155|  38.4k|    auto it = input.begin();
 1156|   315k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 306k, False: 8.65k]
  ------------------
 1157|   306k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 29.8k, False: 276k]
  ------------------
 1158|  29.8k|            break;
 1159|  29.8k|        }
 1160|   306k|    }
 1161|  38.4k|    return it;
 1162|  38.4k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  38.8M|    constexpr parse_error(code c) : m_code(c)
  808|  38.8M|    {
  809|  38.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  38.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  38.8M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  14.5M|    {
  823|  14.5M|        return a.m_code == b.m_code;
  824|  14.5M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1726|  2.04M|    clocale_restorer(int cat) : m_category(cat)
 1727|  2.04M|    {
 1728|  2.04M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.04M|        std::strcpy(m_locbuf, loc);
 1730|  2.04M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.04M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.04M|        std::setlocale(m_category, m_locbuf);
 1735|  2.04M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1755|  2.04M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1756|  2.04M|    {
 1757|  2.04M|        std::setlocale(cat, "C");
 1758|  2.04M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.53M|    {
 2936|  3.53M|        return m_msg == nullptr;
 2937|  3.53M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  3.49M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  24.4M|{
  458|  24.4M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  24.4M|        static_cast<unsigned char>(ch))];
  460|  24.4M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   198k|{
  469|   198k|    return static_cast<unsigned char>(ch) <= 127;
  470|   198k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  5.58M|{
  539|  5.58M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  5.58M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  16.4M|{
  784|  16.4M|    return e != eof_error::good;
  785|  16.4M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  47.6k|{
  798|  47.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  47.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  47.6k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  47.6k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   225k|{
  845|   225k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   225k|    return parse_error::eof;
  847|   225k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.12M|{
  854|  5.12M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.12M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.12M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 82.6k, False: 5.04M]
  ------------------
  859|  82.6k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  82.6k|    }
  861|       |
  862|  5.04M|    return scan_error{code, msg};
  863|  5.12M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.12M|{
  868|  5.12M|    return [code, msg](parse_error err) {
  869|  5.12M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.12M|    };
  871|  5.12M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  7.29M|{
 1200|       |    // Pattern_White_Space property
 1201|  7.29M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 7.00M, False: 288k]
  |  Branch (1201:27): [True: 1.39M, False: 5.60M]
  ------------------
 1202|  7.29M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 96.2k, False: 5.79M]
  ------------------
 1203|  7.29M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 67.8k, False: 5.73M]
  ------------------
 1204|  7.29M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 4.13k, False: 5.72M]
  ------------------
 1205|  7.29M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 25.0k, False: 5.70M]
  ------------------
 1206|  7.29M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.38M, False: 4.32M]
  ------------------
 1207|  7.29M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 4.32M]
  ------------------
 1208|  7.29M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.93M|{
 2220|  3.93M|    unsigned char running_diff{0};
 2221|  14.7M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 10.8M, False: 3.93M]
  ------------------
 2222|  10.8M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  10.8M|    }
 2224|  3.93M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 115k, False: 3.81M]
  |  Branch (2224:33): [True: 21.9k, False: 3.79M]
  ------------------
 2225|  3.93M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  29.0M|{
 3123|  29.0M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  29.0M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  4.42M|{
 3127|  4.42M|#if WCHAR_MIN < 0
 3128|  4.42M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 4.40M, False: 19.4k]
  |  Branch (3128:20): [True: 2.74M, False: 1.65M]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  2.74M|        return char_to_int(static_cast<char>(ch));
 3133|  2.74M|    }
 3134|  1.67M|    return 255;
 3135|  4.42M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  2.97M|{
 6008|  2.97M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 2.97M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  2.97M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 2.97M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  2.97M|    return {};
 6023|  2.97M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  4.40M|    {
  304|  4.40M|        ranges::advance(x, n);
  305|  4.40M|        return x;
  306|  4.40M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  4.40M|    {
  268|  4.40M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.40M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  4.40M|    {
  151|  4.40M|        i += n;
  152|  4.40M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  5.20M|    {
  108|  5.20M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.20M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  5.20M|    {
   87|  5.20M|        return s - i;
   88|  5.20M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.67M|    {
  304|  2.67M|        ranges::advance(x, n);
  305|  2.67M|        return x;
  306|  2.67M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.67M|    {
  268|  2.67M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.67M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.67M|    {
  151|  2.67M|        i += n;
  152|  2.67M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   768k|    {
  108|   768k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   768k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   768k|    {
   87|   768k|        return s - i;
   88|   768k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.75M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.75M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.75M|        auto beg = r.begin();
  990|  1.75M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.75M, False: 0]
  ------------------
  991|  1.75M|            return false;
  992|  1.75M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.75M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  45.9M|    {
  763|  45.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  45.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  45.9M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  4.62M|{
 1857|  4.62M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  4.62M|    else {
 1868|  4.62M|        auto it = range.begin();
 1869|  4.62M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 2.85M, False: 1.76M]
  ------------------
 1870|  2.85M|            return ranges::next(it, count);
 1871|  2.85M|        }
 1872|       |
 1873|  7.04M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 5.31M, False: 1.73M]
  ------------------
 1874|  5.31M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 38.9k, False: 5.27M]
  ------------------
 1875|  38.9k|                return unexpected(eof_error::eof);
 1876|  38.9k|            }
 1877|  5.31M|        }
 1878|       |
 1879|  1.73M|        return it;
 1880|  1.76M|    }
 1881|  4.62M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  4.62M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  4.62M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  4.62M|        else {
 1106|  4.62M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 4.62M, False: 0]
  ------------------
 1107|  4.62M|                return static_cast<size_t>(
 1108|  4.62M|                    r.begin().parent()->chars_available() -
 1109|  4.62M|                    r.begin().position());
 1110|  4.62M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  4.62M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  4.62M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.23M|        : m_fptr([](storage fn,
  743|  4.23M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.23M|              cvref<T> obj = *get<T>(fn);
  745|  4.23M|              if constexpr (std::is_void_v<R>) {
  746|  4.23M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.23M|              }
  748|  4.23M|              else {
  749|  4.23M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.23M|              }
  751|  4.23M|          }),
  752|  4.23M|          m_storage(std::addressof(f))
  753|  4.23M|    {
  754|  4.23M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  22.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.9M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  22.9M|              else {
  749|  22.9M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.9M|              }
  751|  22.9M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  22.9M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  22.9M|        else if constexpr (std::is_object_v<T>) {
  688|  22.9M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  22.9M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.23M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.23M|        {
  662|  4.23M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  12.6M|    {
  763|  12.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  12.6M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.19M|        : m_fptr([](storage fn,
  743|  3.19M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.19M|              cvref<T> obj = *get<T>(fn);
  745|  3.19M|              if constexpr (std::is_void_v<R>) {
  746|  3.19M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.19M|              }
  748|  3.19M|              else {
  749|  3.19M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.19M|              }
  751|  3.19M|          }),
  752|  3.19M|          m_storage(std::addressof(f))
  753|  3.19M|    {
  754|  3.19M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.79M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.79M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.79M|              else {
  749|  5.79M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.79M|              }
  751|  5.79M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.79M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.79M|        else if constexpr (std::is_object_v<T>) {
  688|  5.79M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.79M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.19M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.19M|        {
  662|  3.19M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.26M|    {
 6037|  1.26M|        const bool need_skipped_width =
 6038|  1.26M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.26M]
  |  Branch (6038:33): [True: 0, False: 1.26M]
  ------------------
 6039|  1.26M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.26M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.26M]
  ------------------
 6043|  1.26M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.26M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.26M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.26M, False: 0]
  |  Branch (6047:56): [True: 1.26M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.26M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.26M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  2.51M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 1.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.7k|    }                                                  \
  |  |  |  | 3671|  1.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  2.51M|                            make_eof_scan_error));
 6058|       |
 6059|  2.51M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.24M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.24M|            return result_type{it, 0};
 6067|  2.51M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.26M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  3.38M|{
 1976|  3.38M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.38M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  3.38M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  3.38M|    else {
 1961|  3.38M|        auto first = range.begin();
 1962|  18.5M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 18.4M, False: 30.6k]
  ------------------
 1963|  18.4M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 3.35M, False: 15.1M]
  ------------------
 1964|  3.35M|                return first;
 1965|  3.35M|            }
 1966|  18.4M|        }
 1967|  30.6k|        return first;
 1968|  3.38M|    }
 1969|  3.38M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.02M|    {
  108|  3.02M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.02M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.02M|    {
   94|  3.02M|        iter_difference_t<I> counter{0};
   95|  30.0M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 27.0M, False: 3.02M]
  ------------------
   96|  27.0M|            ++i;
   97|  27.0M|            ++counter;
   98|  27.0M|        }
   99|  3.02M|        return counter;
  100|  3.02M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.12M|    return [code, msg](parse_error err) {
  869|  5.12M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.12M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   645k|    {
 1780|   645k|        auto stdloc = loc.get<std::locale>();
 1781|   645k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   645k|        grouping = numpunct.grouping();
 1783|   645k|        thousands_sep =
 1784|   645k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 645k]
  ------------------
 1785|   645k|        decimal_point = numpunct.decimal_point();
 1786|   645k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   645k|{
 1717|   645k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 645k, False: 0]
  ------------------
 1718|   645k|        return std::use_facet<Facet>(stdloc);
 1719|   645k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   645k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  4.94M|{
 1846|  4.94M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.7k, False: 4.92M]
  |  |  ------------------
  ------------------
 1847|  22.7k|        return unexpected(e);
 1848|  22.7k|    }
 1849|       |
 1850|  4.92M|    return ranges::next(range.begin());
 1851|  4.94M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  7.18M|{
  950|  7.18M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.8k, False: 7.13M]
  |  |  ------------------
  ------------------
  951|  44.8k|        return eof_error::eof;
  952|  44.8k|    }
  953|  7.13M|    return eof_error::good;
  954|  7.18M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  10.1M|{
  944|  10.1M|    return is_range_eof(r.begin(), r.end());
  945|  10.1M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  10.1M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  10.1M|    {
  937|  10.1M|        return begin == end;
  938|  10.1M|    }
  939|  10.1M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  4.92M|    {
  296|  4.92M|        ++x;
  297|  4.92M|        return x;
  298|  4.92M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.89M|{
 3141|  1.89M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.89M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.46M, False: 429k]
  ------------------
 3143|  1.46M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.46M, False: 309]
  ------------------
 3144|  1.46M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.46M|        }
 3146|    309|        return unexpected(eof_error::eof);
 3147|  1.46M|    }
 3148|       |
 3149|   429k|    auto& it = *r;
 3150|   429k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 175k, False: 254k]
  ------------------
 3151|   175k|        return std::pair{it, sign_type::minus_sign};
 3152|   175k|    }
 3153|   254k|    return std::pair{it, sign_type::plus_sign};
 3154|   429k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  3.30M|{
 2272|  3.30M|    auto it = read_code_unit(range);
 2273|  3.30M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 3.29M]
  |  |  ------------------
  ------------------
 2274|  13.4k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  13.4k|    }
 2276|       |
 2277|  6.22M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.22M, False: 2.70M]
  ------------------
 2278|  6.22M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 589k, False: 5.63M]
  ------------------
 2279|   589k|            return *it;
 2280|   589k|        }
 2281|  6.22M|    }
 2282|       |
 2283|  2.70M|    return unexpected(parse_error::error);
 2284|  3.29M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  4.62M|{
 2231|  4.62M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  4.62M|    else {
 2244|  4.62M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.62M|            if (ch < 'A' || ch > 'Z') {
 2246|  4.62M|                return ch;
 2247|  4.62M|            }
 2248|  4.62M|            return static_cast<char_type>(ch +
 2249|  4.62M|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.62M|        };
 2251|       |
 2252|  4.62M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.62M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.62M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.62M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.9k, False: 4.58M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.9k|    }                                                  \
  |  |  |  | 3671|  4.62M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.58M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.58M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.58M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.43M, False: 143k]
  |  |  ------------------
  ------------------
 2257|  4.58M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.58M|                    return ascii_tolower(a) ==
 2259|  4.58M|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.58M|                }))) {
 2261|  4.43M|            return unexpected(parse_error::error);
 2262|  4.43M|        }
 2263|       |
 2264|   143k|        return it;
 2265|  4.58M|    }
 2266|  4.62M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  5.28M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  5.28M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 4.80M, False: 479k]
  |  Branch (2245:29): [True: 399k, False: 79.5k]
  ------------------
 2246|  5.20M|                return ch;
 2247|  5.20M|            }
 2248|  79.5k|            return static_cast<char_type>(ch +
 2249|  79.5k|                                          static_cast<char_type>('a' - 'A'));
 2250|  5.28M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.64M|{
 2146|  1.64M|    auto it = read_code_unit(range);
 2147|  1.64M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.30k, False: 1.63M]
  |  |  ------------------
  ------------------
 2148|  9.30k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  9.30k|    }
 2150|       |
 2151|  1.63M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.32M, False: 304k]
  |  |  ------------------
  ------------------
 2152|  1.63M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.32M|        return unexpected(parse_error::error);
 2154|  1.32M|    }
 2155|       |
 2156|   304k|    return *it;
 2157|  1.63M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  3.37M|{
 1996|  3.37M|    auto it = read_while_code_unit(range, pred);
 1997|  3.37M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.37M, False: 2.00M]
  ------------------
 1998|  1.37M|        return unexpected(parse_error::error);
 1999|  1.37M|    }
 2000|  2.00M|    return it;
 2001|  3.37M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.56M|    {
 1621|  1.56M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|  1.56M|                           ranges::common_range<Range>) {
 1638|  1.56M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.56M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.56M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 209k, False: 1.35M]
  |  |  ------------------
  ------------------
 1641|  1.56M|                             detail::to_address(end_seg.end()))) {
 1642|   209k|                auto& str = m_storage.emplace();
 1643|   209k|                str.reserve(range.end().position() - range.begin().position());
 1644|   209k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   209k|                m_view = string_view_type{str};
 1646|   209k|                return;
 1647|   209k|            }
 1648|       |
 1649|  1.35M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.35M|                                                            end_seg.data());
 1651|  1.35M|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.56M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  10.6M|    {
 1582|  10.6M|        return m_view;
 1583|  10.6M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  6.44M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.16M|    {
 6079|  1.16M|        const bool need_skipped_width =
 6080|  1.16M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.16M]
  |  Branch (6080:33): [True: 0, False: 1.16M]
  ------------------
 6081|  1.16M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.16M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.16M]
  ------------------
 6084|  1.16M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.16M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.16M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.16M, False: 0]
  ------------------
 6093|  1.16M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.16M]
  ------------------
 6094|  1.16M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.16M|        return result_type{rng.begin(), 0};
 6118|  1.16M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  2.23M|{
 1846|  2.23M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.40k, False: 2.22M]
  |  |  ------------------
  ------------------
 1847|  5.40k|        return unexpected(e);
 1848|  5.40k|    }
 1849|       |
 1850|  2.22M|    return ranges::next(range.begin());
 1851|  2.23M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  4.18M|{
  950|  4.18M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.2k, False: 4.15M]
  |  |  ------------------
  ------------------
  951|  23.2k|        return eof_error::eof;
  952|  23.2k|    }
  953|  4.15M|    return eof_error::good;
  954|  4.18M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  4.18M|{
  944|  4.18M|    return is_range_eof(r.begin(), r.end());
  945|  4.18M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  4.18M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.18M|    {
  937|  4.18M|        return begin == end;
  938|  4.18M|    }
  939|  4.18M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.22M|    {
  296|  2.22M|        ++x;
  297|  2.22M|        return x;
  298|  2.22M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.52M|{
 3141|  1.52M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.52M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.18M, False: 346k]
  ------------------
 3143|  1.18M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.18M, False: 102]
  ------------------
 3144|  1.18M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.18M|        }
 3146|    102|        return unexpected(eof_error::eof);
 3147|  1.18M|    }
 3148|       |
 3149|   346k|    auto& it = *r;
 3150|   346k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 152k, False: 194k]
  ------------------
 3151|   152k|        return std::pair{it, sign_type::minus_sign};
 3152|   152k|    }
 3153|   194k|    return std::pair{it, sign_type::plus_sign};
 3154|   346k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.77M|{
 2272|  1.77M|    auto it = read_code_unit(range);
 2273|  1.77M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.37k, False: 1.77M]
  |  |  ------------------
  ------------------
 2274|  2.37k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.37k|    }
 2276|       |
 2277|  3.32M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 3.32M, False: 1.38M]
  ------------------
 2278|  3.32M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 382k, False: 2.94M]
  ------------------
 2279|   382k|            return *it;
 2280|   382k|        }
 2281|  3.32M|    }
 2282|       |
 2283|  1.38M|    return unexpected(parse_error::error);
 2284|  1.77M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.97M|{
 2231|  3.97M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|  3.97M|                  std::is_same_v<char_type, char>) {
 2235|  3.97M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 37.9k, False: 3.93M]
  ------------------
 2236|  37.9k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  37.9k|        }
 2238|  3.93M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.79M, False: 137k]
  ------------------
 2239|  3.79M|            return unexpected(parse_error::error);
 2240|  3.79M|        }
 2241|   137k|        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|       |    else {
 2244|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|       |            if (ch < 'A' || ch > 'Z') {
 2246|       |                return ch;
 2247|       |            }
 2248|       |            return static_cast<char_type>(ch +
 2249|       |                                          static_cast<char_type>('a' - 'A'));
 2250|       |        };
 2251|       |
 2252|       |        SCN_TRY(it, read_exactly_n_code_units(
 2253|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|       |                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|       |        if (SCN_UNLIKELY(!std::equal(
 2257|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|       |                    return ascii_tolower(a) ==
 2259|       |                           static_cast<detail::char_t<Range>>(b);
 2260|       |                }))) {
 2261|       |            return unexpected(parse_error::error);
 2262|       |        }
 2263|       |
 2264|       |        return it;
 2265|       |    }
 2266|  3.97M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   458k|{
 2146|   458k|    auto it = read_code_unit(range);
 2147|   458k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.03k, False: 455k]
  |  |  ------------------
  ------------------
 2148|  3.03k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.03k|    }
 2150|       |
 2151|   455k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 376k, False: 79.1k]
  |  |  ------------------
  ------------------
 2152|   455k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   376k|        return unexpected(parse_error::error);
 2154|   376k|    }
 2155|       |
 2156|  79.1k|    return *it;
 2157|   455k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  5.76M|    {
 1503|  5.76M|        return sv;
 1504|  5.76M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   855k|{
 1976|   855k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   855k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   855k|{
 1957|   855k|    if constexpr (ranges::common_range<Range>) {
 1958|   855k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   855k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.50M|{
 2951|  1.50M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.50M, False: 0]
  ------------------
 2952|  1.50M|        auto it = read_while_classic_space(range);
 2953|  1.50M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.50M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 1.49M]
  |  |  ------------------
  ------------------
 2955|  13.3k|            return unexpected(e);
 2956|  13.3k|        }
 2957|       |
 2958|  1.49M|        return it;
 2959|  1.50M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.50M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.50M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|  1.50M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|  1.50M|        auto buf = make_contiguous_buffer(range);
 2121|  1.50M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.50M|        return ranges::next(range.begin(),
 2123|  1.50M|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|  1.50M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.50M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.50M|                  ranges::sized_range<Range>) {
 1686|  1.50M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.50M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1488|  1.50M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.50M|    {
 1490|  1.50M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  4.67M|    {
  304|  4.67M|        ranges::advance(x, n);
  305|  4.67M|        return x;
  306|  4.67M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  6.23M|    {
  268|  6.23M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.23M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  6.23M|    {
  181|  29.5M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 23.2M, False: 6.23M]
  ------------------
  182|  23.2M|            ++i;
  183|  23.2M|        }
  184|  6.23M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   408k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   408k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   408k|            auto rd = make_reader<T, char_type>();
 6206|   408k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   408k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 408k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   408k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   408k|                return impl(rd, range, value);
 6213|   408k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   408k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.33M|    {
 3040|  2.33M|        reader_error_handler eh{};
 3041|  2.33M|        get_derived().check_specs_impl(specs, eh);
 3042|  2.33M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  2.33M|        return {};
 3046|  2.33M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  2.33M|    {
 3051|  2.33M|        return static_cast<Derived&>(*this);
 3052|  2.33M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  2.33M|    {
 4145|  2.33M|        detail::check_float_type_specs(specs, eh);
 4146|  2.33M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   408k|    {
 6124|   408k|        const bool need_skipped_width =
 6125|   408k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 408k]
  |  Branch (6125:33): [True: 0, False: 408k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   408k|        auto it = rng.begin();
 6129|   408k|        std::ptrdiff_t prefix_width = 0;
 6130|   408k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 408k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   408k|        else {
 6138|   408k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   408k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   408k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   408k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.03k, False: 403k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.03k|    }                                                  \
  |  |  |  | 3671|   408k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   403k|            std::tie(it, prefix_width) = prefix_result;
 6140|   403k|        }
 6141|   403k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   403k|        std::ptrdiff_t value_width = 0;
 6145|   403k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 403k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   403k|        else {
 6161|   403k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   403k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   403k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.8k, False: 377k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  25.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  25.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  25.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  25.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  25.8k|    }                                                  \
  |  | 3671|   403k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   377k|                                             specs, value, loc));
 6163|       |
 6164|   377k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 377k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   377k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   377k|        std::ptrdiff_t postfix_width = 0;
 6173|   377k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 373k, False: 4.10k]
  ------------------
 6174|   373k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   373k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   373k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   373k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 373k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   373k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   373k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   373k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   373k|                                 value_width));
 6178|   373k|            std::tie(it, postfix_width) = postfix_result;
 6179|   373k|        }
 6180|       |
 6181|   377k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   377k|                                                 value_width, postfix_width);
 6183|   377k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 377k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   377k|        return it;
 6188|   377k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  5.38M|    {
 3035|  5.38M|        return true;
 3036|  5.38M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  2.30M|    {
 4217|  2.30M|        unsigned options{};
 4218|  2.30M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 645k, False: 1.65M]
  ------------------
 4219|   645k|            options |= float_reader_base::allow_thsep;
 4220|   645k|        }
 4221|       |
 4222|  2.30M|        SCN_GCC_COMPAT_PUSH
 4223|  2.30M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  2.30M|        switch (specs.type) {
 4226|   348k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 348k, False: 1.95M]
  ------------------
 4227|   348k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  53.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 53.9k, False: 2.24M]
  ------------------
 4230|  53.9k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   702k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 702k, False: 1.60M]
  ------------------
 4233|   702k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   553k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 553k, False: 1.74M]
  ------------------
 4236|   553k|                return options | float_reader_base::allow_scientific |
 4237|   553k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   645k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 645k, False: 1.65M]
  ------------------
 4240|   645k|                return options | float_reader_base::allow_scientific |
 4241|   645k|                       float_reader_base::allow_fixed |
 4242|   645k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 2.30M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  2.30M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  2.30M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  2.30M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  2.30M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  3.22M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  6.44M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   996k|    {
 3691|   996k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   996k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   996k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   996k|        const std::ptrdiff_t sign_len =
 3694|   996k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 229k, False: 767k]
  ------------------
 3695|       |
 3696|   996k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   996k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   996k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   996k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   996k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.3k, False: 974k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  22.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  22.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  22.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  22.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  22.3k|    }                                                  \
  |  |  |  | 3671|   996k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   974k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   974k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   996k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  3.08M|    {
 4057|  3.08M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 3.08M, False: 0]
  ------------------
 4058|  3.08M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 3.08M, False: 0]
  ------------------
 4059|  3.08M|            return;
 4060|  3.08M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  3.52M|    {
 1587|  3.52M|        return m_storage.has_value();
 1588|  3.52M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.06M|    {
 1592|  2.06M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.06M|        return *m_storage;
 1594|  2.06M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   403k|    {
 4170|   403k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   403k|#if !SCN_DISABLE_LOCALE
 4173|   403k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 112k, False: 291k]
  ------------------
 4174|   112k|            return read_impl<Range>(
 4175|   112k|                range, rd,
 4176|   112k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   112k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   112k|                },
 4179|   112k|                value, loc);
 4180|   112k|        }
 4181|   291k|#endif
 4182|       |
 4183|   291k|        return read_impl<Range>(
 4184|   291k|            range, rd,
 4185|   291k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   291k|                return r.read_source(SCN_FWD(args)...);
 4187|   291k|            },
 4188|   291k|            value);
 4189|   403k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   558k|    {
 4206|   558k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   558k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.5k, False: 528k]
  |  |  ------------------
  ------------------
 4208|  29.5k|            return unexpected(r.error());
 4209|  29.5k|        }
 4210|       |
 4211|   528k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   528k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   528k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   528k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   528k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.04k, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.04k|    }                                                  \
  |  |  |  | 3671|   528k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   524k|        return ranges::next(range.begin(), n);
 4213|   528k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.73M|    {
  763|  1.73M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.73M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   112k|        : m_fptr([](storage fn,
  743|   112k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   112k|              cvref<T> obj = *get<T>(fn);
  745|   112k|              if constexpr (std::is_void_v<R>) {
  746|   112k|                  obj(static_cast<decltype(args)>(args)...);
  747|   112k|              }
  748|   112k|              else {
  749|   112k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   112k|              }
  751|   112k|          }),
  752|   112k|          m_storage(std::addressof(f))
  753|   112k|    {
  754|   112k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   112k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   112k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   112k|              else {
  749|   112k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   112k|              }
  751|   112k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   112k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   112k|        else if constexpr (std::is_object_v<T>) {
  688|   112k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   112k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   112k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   112k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   112k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   353k|    {
 3679|   353k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   353k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   353k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 353k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   353k|        return read_source_impl(range);
 3685|   353k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.73M|    {
 3705|  1.73M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.73M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.73M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.73M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.73M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.73M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.73M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.73M|        auto it = sign_result.first;
 3708|  1.73M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.73M|        auto digits_begin = it;
 3711|  1.73M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|  1.73M|        else {
 3738|  1.73M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.73M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.73M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 91.9k, False: 1.63M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  91.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  91.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  91.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  91.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  91.9k|    }                                                  \
  |  | 3671|  1.73M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.63M|                it,
 3740|  1.63M|                do_read_source_impl(
 3741|  1.63M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.63M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.63M|        }
 3744|       |
 3745|  1.73M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.63M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.62M, False: 9.38k]
  |  Branch (3747:48): [True: 1.62M, False: 9.37k]
  ------------------
 3748|  1.63M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.56M, False: 60.4k]
  ------------------
 3749|  1.63M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.55M, False: 3.15k]
  ------------------
 3750|  1.55M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.55M|        }
 3752|       |
 3753|  1.63M|        handle_separators();
 3754|       |
 3755|  1.63M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.63M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.63M|        return it;
 3768|  1.63M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.73M|    {
 4000|  1.73M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.73M|        const bool allowed_nonhex =
 4002|  1.73M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.73M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.73M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.71M, False: 18.7k]
  |  Branch (4005:45): [True: 0, False: 1.71M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.73M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 18.7k, False: 1.71M]
  ------------------
 4011|  18.7k|            return *r;
 4012|  18.7k|        }
 4013|       |
 4014|  1.71M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.64M, False: 63.6k]
  |  Branch (4014:45): [True: 1.62k, False: 1.64M]
  ------------------
 4015|  1.62k|            return unexpected(r.error());
 4016|  1.62k|        }
 4017|  1.71M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 63.6k, False: 1.64M]
  ------------------
 4018|  63.6k|            return *r;
 4019|  63.6k|        }
 4020|       |
 4021|  1.64M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.15M, False: 487k]
  |  Branch (4021:28): [True: 367k, False: 791k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   367k|            auto it = range.begin();
 4025|       |
 4026|   367k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 15.7k, False: 351k]
  ------------------
 4027|  15.7k|                m_kind = float_kind::hex_with_prefix;
 4028|  15.7k|                it = *r;
 4029|  15.7k|            }
 4030|   351k|            else {
 4031|   351k|                m_kind = float_kind::hex_without_prefix;
 4032|   351k|            }
 4033|       |
 4034|   367k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   367k|        }
 4036|  1.27M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 487k, False: 791k]
  |  Branch (4036:29): [True: 487k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   487k|            m_kind = float_kind::generic;
 4040|   487k|            return read_regular_float(range);
 4041|   487k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   791k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   791k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.6k, False: 757k]
  |  |  ------------------
  ------------------
 4047|  34.6k|            m_kind = float_kind::hex_with_prefix;
 4048|  34.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  34.6k|        }
 4050|       |
 4051|   757k|        m_kind = float_kind::generic;
 4052|   757k|        return read_regular(range);
 4053|   791k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.73M|    {
 3811|  1.73M|        auto it = range.begin();
 3812|  1.73M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.71M, False: 18.7k]
  ------------------
 3813|  1.71M|            return unexpected(r.error());
 3814|  1.71M|        }
 3815|  18.7k|        else {
 3816|  18.7k|            it = *r;
 3817|  18.7k|        }
 3818|       |
 3819|  18.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  18.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  18.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 9.38k, False: 9.37k]
  ------------------
 3822|  9.38k|            m_kind = float_kind::inf_short;
 3823|  9.38k|            return it;
 3824|  9.38k|        }
 3825|  9.37k|        else {
 3826|  9.37k|            m_kind = float_kind::inf_long;
 3827|  9.37k|            return *r;
 3828|  9.37k|        }
 3829|  18.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.71M|    {
 3834|  1.71M|        auto it = range.begin();
 3835|  1.71M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.64M, False: 65.2k]
  ------------------
 3836|  1.64M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.64M|                scan_error::invalid_scanned_value,
 3838|  1.64M|                "Invalid floating-point NaN value"));
 3839|  1.64M|        }
 3840|  65.2k|        else {
 3841|  65.2k|            it = *r;
 3842|  65.2k|        }
 3843|       |
 3844|  65.2k|        if (auto r =
 3845|  65.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  65.2k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 60.4k, False: 4.78k]
  ------------------
 3847|  60.4k|            m_kind = float_kind::nan_simple;
 3848|  60.4k|            return it;
 3849|  60.4k|        }
 3850|  4.78k|        else {
 3851|  4.78k|            it = *r;
 3852|  4.78k|        }
 3853|       |
 3854|  4.78k|        auto payload_beg_it = it;
 3855|  4.78k|        it = read_while_code_unit(
 3856|  4.78k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  4.78k|                return is_ascii_char(ch) &&
 3858|  4.78k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  4.78k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  4.78k|            });
 3861|  4.78k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  4.78k|        m_kind = float_kind::nan_with_payload;
 3864|  4.78k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 3.15k, False: 1.62k]
  ------------------
 3865|  4.78k|                                             ')')) {
 3866|  3.15k|            return *r;
 3867|  3.15k|        }
 3868|  1.62k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.62k|                                     "Invalid floating-point NaN payload");
 3870|  4.78k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  4.78k|        : m_fptr([](storage fn,
  743|  4.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.78k|              cvref<T> obj = *get<T>(fn);
  745|  4.78k|              if constexpr (std::is_void_v<R>) {
  746|  4.78k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.78k|              }
  748|  4.78k|              else {
  749|  4.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.78k|              }
  751|  4.78k|          }),
  752|  4.78k|          m_storage(std::addressof(f))
  753|  4.78k|    {
  754|  4.78k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|   109k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|   109k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 108k, False: 91]
  ------------------
 3858|   109k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 105k, False: 3.62k]
  |  Branch (3858:39): [True: 95.5k, False: 9.74k]
  |  Branch (3858:54): [True: 2.93k, False: 10.4k]
  |  Branch (3858:67): [True: 2.84k, False: 83]
  ------------------
 3859|   108k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 6.90k, False: 3.62k]
  |  Branch (3859:39): [True: 2.55k, False: 4.34k]
  |  Branch (3859:53): [True: 4.26k, False: 3.70k]
  ------------------
 3860|   109k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  4.78k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.78k|        {
  662|  4.78k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.15M|    {
 3804|  1.15M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.15M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   402k|    {
 3904|   402k|        auto it = range.begin();
 3905|       |
 3906|   402k|        std::ptrdiff_t digits_count = 0;
 3907|   402k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   402k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 390k]
  |  |  ------------------
  ------------------
 3909|  11.6k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  11.6k|                scan_error::invalid_scanned_value,
 3911|  11.6k|                "Invalid hexadecimal floating-point value"));
 3912|  11.6k|        }
 3913|   390k|        else {
 3914|   390k|            digits_count += ranges::distance(it, *r);
 3915|   390k|            it = *r;
 3916|   390k|        }
 3917|       |
 3918|   390k|        m_integral_part_length = digits_count;
 3919|   390k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 62.9k, False: 327k]
  ------------------
 3920|   390k|                                             m_locale_options.decimal_point)) {
 3921|  62.9k|            it = *r;
 3922|  62.9k|        }
 3923|       |
 3924|   390k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 57.6k, False: 332k]
  ------------------
 3925|   390k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  57.6k|            digits_count += ranges::distance(it, *r);
 3927|  57.6k|            it = *r;
 3928|  57.6k|        }
 3929|       |
 3930|   390k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 390k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   390k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   390k|        return it;
 3938|   390k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   792k|    {
 3789|   792k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   792k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 792k]
  |  |  |  Branch (859:45): [True: 0, False: 792k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   792k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   792k|        return read_while1_code_unit(
 3798|   792k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   792k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   792k|        : m_fptr([](storage fn,
  743|   792k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   792k|              cvref<T> obj = *get<T>(fn);
  745|   792k|              if constexpr (std::is_void_v<R>) {
  746|   792k|                  obj(static_cast<decltype(args)>(args)...);
  747|   792k|              }
  748|   792k|              else {
  749|   792k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   792k|              }
  751|   792k|          }),
  752|   792k|          m_storage(std::addressof(f))
  753|   792k|    {
  754|   792k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  4.20M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.20M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.20M|              else {
  749|  4.20M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.20M|              }
  751|  4.20M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  4.20M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.20M|        else if constexpr (std::is_object_v<T>) {
  688|  4.20M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.20M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  4.20M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   792k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   792k|        {
  662|   792k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.41M|    {
 3876|  1.41M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 159k, False: 1.25M]
  ------------------
 3877|   159k|            auto beg_exp_it = range.begin();
 3878|   159k|            auto it = *r;
 3879|       |
 3880|   159k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 159k, False: 309]
  ------------------
 3881|   159k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   159k|                it = r_sign->first;
 3883|   159k|            }
 3884|       |
 3885|   159k|            if (auto r_exp = read_while1_code_unit(
 3886|   159k|                    ranges::subrange{it, range.end()},
 3887|   159k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   159k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.31k, False: 157k]
  |  |  ------------------
  ------------------
 3889|  2.31k|                it = beg_exp_it;
 3890|  2.31k|            }
 3891|   157k|            else {
 3892|   157k|                it = *r_exp;
 3893|   157k|            }
 3894|       |
 3895|   159k|            return it;
 3896|   159k|        }
 3897|  1.25M|        return range.begin();
 3898|  1.41M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   159k|        : m_fptr([](storage fn,
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|   159k|              if constexpr (std::is_void_v<R>) {
  746|   159k|                  obj(static_cast<decltype(args)>(args)...);
  747|   159k|              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
  752|   159k|          m_storage(std::addressof(f))
  753|   159k|    {
  754|   159k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   512k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   512k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   512k|              else {
  749|   512k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   512k|              }
  751|   512k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   512k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   512k|        else if constexpr (std::is_object_v<T>) {
  688|   512k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   512k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   512k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   159k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   159k|        {
  662|   159k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.24M|    {
 3944|  1.24M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.24M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.06M, False: 176k]
  |  Branch (3945:50): [True: 26.9k, False: 1.04M]
  ------------------
 3946|       |
 3947|  1.24M|        auto it = ranges::begin(range);
 3948|  1.24M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.24M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.24M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.5k, False: 1.18M]
  |  |  ------------------
  ------------------
 3952|  62.5k|            return r.transform_error(
 3953|  62.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  62.5k|                                              "Invalid floating-point value"));
 3955|  62.5k|        }
 3956|  1.18M|        else {
 3957|  1.18M|            digits_count += ranges::distance(it, *r);
 3958|  1.18M|            it = *r;
 3959|  1.18M|        }
 3960|       |
 3961|  1.18M|        m_integral_part_length = digits_count;
 3962|  1.18M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 233k, False: 949k]
  ------------------
 3963|  1.18M|                                             m_locale_options.decimal_point)) {
 3964|   233k|            it = *r;
 3965|   233k|        }
 3966|       |
 3967|  1.18M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 217k, False: 965k]
  ------------------
 3968|  1.18M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   217k|            digits_count += ranges::distance(it, *r);
 3970|   217k|            it = *r;
 3971|   217k|        }
 3972|       |
 3973|  1.18M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.18M|        auto beg_exp_it = it;
 3979|  1.18M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.02M, False: 160k]
  ------------------
 3980|  1.02M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.02M|        }
 3982|  1.18M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 26.0k, False: 1.15M]
  |  Branch (3982:29): [True: 16.1k, False: 9.93k]
  ------------------
 3983|  16.1k|            return unexpected_scan_error(
 3984|  16.1k|                scan_error::invalid_scanned_value,
 3985|  16.1k|                "No exponent given to scientific float");
 3986|  16.1k|        }
 3987|       |
 3988|  1.16M|        m_kind =
 3989|  1.16M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.00M, False: 156k]
  ------------------
 3990|       |
 3991|  1.16M|        return it;
 3992|  1.18M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  2.42M|    {
 3774|  2.42M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.42M]
  |  |  |  Branch (859:45): [True: 0, False: 2.42M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  2.42M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  2.42M|        return read_while1_code_unit(
 3783|  2.42M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  2.42M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.42M|        : m_fptr([](storage fn,
  743|  2.42M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.42M|              cvref<T> obj = *get<T>(fn);
  745|  2.42M|              if constexpr (std::is_void_v<R>) {
  746|  2.42M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.42M|              }
  748|  2.42M|              else {
  749|  2.42M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.42M|              }
  751|  2.42M|          }),
  752|  2.42M|          m_storage(std::addressof(f))
  753|  2.42M|    {
  754|  2.42M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  13.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.6M|              else {
  749|  13.6M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6M|              }
  751|  13.6M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  13.6M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.6M|        else if constexpr (std::is_object_v<T>) {
  688|  13.6M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.6M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  13.6M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.42M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.42M|        {
  662|  2.42M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|  1.56M|    {
 1577|  1.56M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.56M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   112k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   112k|        {
  662|   112k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   291k|        : m_fptr([](storage fn,
  743|   291k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   291k|              cvref<T> obj = *get<T>(fn);
  745|   291k|              if constexpr (std::is_void_v<R>) {
  746|   291k|                  obj(static_cast<decltype(args)>(args)...);
  747|   291k|              }
  748|   291k|              else {
  749|   291k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   291k|              }
  751|   291k|          }),
  752|   291k|          m_storage(std::addressof(f))
  753|   291k|    {
  754|   291k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   291k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   291k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   291k|              else {
  749|   291k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   291k|              }
  751|   291k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   291k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   291k|        else if constexpr (std::is_object_v<T>) {
  688|   291k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   291k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   291k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   291k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   291k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  1.37M|    {
 3665|  1.37M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.37M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.37M|        return read_source_impl(range);
 3671|  1.37M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   291k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   291k|        {
  662|   291k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   343k|    {
 4170|   343k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   343k|#if !SCN_DISABLE_LOCALE
 4173|   343k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 94.3k, False: 248k]
  ------------------
 4174|  94.3k|            return read_impl<Range>(
 4175|  94.3k|                range, rd,
 4176|  94.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  94.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  94.3k|                },
 4179|  94.3k|                value, loc);
 4180|  94.3k|        }
 4181|   248k|#endif
 4182|       |
 4183|   248k|        return read_impl<Range>(
 4184|   248k|            range, rd,
 4185|   248k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   248k|                return r.read_source(SCN_FWD(args)...);
 4187|   248k|            },
 4188|   248k|            value);
 4189|   343k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   484k|    {
 4206|   484k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   484k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 468k]
  |  |  ------------------
  ------------------
 4208|  16.4k|            return unexpected(r.error());
 4209|  16.4k|        }
 4210|       |
 4211|   468k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   468k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   468k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   468k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.3k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.3k|    }                                                  \
  |  |  |  | 3671|   468k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   449k|        return ranges::next(range.begin(), n);
 4213|   468k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.49M|    {
  763|  1.49M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.49M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  94.3k|        : m_fptr([](storage fn,
  743|  94.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.3k|              cvref<T> obj = *get<T>(fn);
  745|  94.3k|              if constexpr (std::is_void_v<R>) {
  746|  94.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.3k|              }
  748|  94.3k|              else {
  749|  94.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.3k|              }
  751|  94.3k|          }),
  752|  94.3k|          m_storage(std::addressof(f))
  753|  94.3k|    {
  754|  94.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  94.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.3k|              else {
  749|  94.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.3k|              }
  751|  94.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.3k|        else if constexpr (std::is_object_v<T>) {
  688|  94.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  94.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  94.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  94.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  94.3k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   292k|    {
 3679|   292k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   292k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   292k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   292k|        return read_source_impl(range);
 3685|   292k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.49M|    {
 3705|  1.49M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.49M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.49M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.49M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.49M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.49M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.49M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.49M|        auto it = sign_result.first;
 3708|  1.49M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.49M|        auto digits_begin = it;
 3711|  1.49M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|  1.49M|                      ranges::sized_range<Range>) {
 3714|  1.49M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.49M]
  |  |  |  Branch (859:45): [True: 0, False: 1.49M]
  |  |  |  Branch (859:45): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
 3715|  1.49M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.49M|            else {
 3724|  1.49M|                auto cb = [&](const auto& rr)
 3725|  1.49M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.49M|                    auto res = read_all(rr);
 3727|  1.49M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.49M|                        return unexpected_scan_error(
 3729|  1.49M|                            scan_error::invalid_scanned_value,
 3730|  1.49M|                            "Invalid float value");
 3731|  1.49M|                    }
 3732|  1.49M|                    return res;
 3733|  1.49M|                };
 3734|  1.49M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.49M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.49M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 50.5k, False: 1.44M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  50.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  50.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  50.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  50.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  50.5k|    }                                                  \
  |  | 3671|  1.49M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.44M|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|  1.49M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.44M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.43M, False: 9.06k]
  |  Branch (3747:48): [True: 1.42M, False: 8.68k]
  ------------------
 3748|  1.44M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.36M, False: 59.0k]
  ------------------
 3749|  1.44M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.36M, False: 2.79k]
  ------------------
 3750|  1.36M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.36M|        }
 3752|       |
 3753|  1.44M|        handle_separators();
 3754|       |
 3755|  1.44M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.44M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.44M|        return it;
 3768|  1.44M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.49M|    {
 3811|  1.49M|        auto it = range.begin();
 3812|  1.49M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.47M, False: 17.7k]
  ------------------
 3813|  1.47M|            return unexpected(r.error());
 3814|  1.47M|        }
 3815|  17.7k|        else {
 3816|  17.7k|            it = *r;
 3817|  17.7k|        }
 3818|       |
 3819|  17.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  17.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  17.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 9.06k, False: 8.68k]
  ------------------
 3822|  9.06k|            m_kind = float_kind::inf_short;
 3823|  9.06k|            return it;
 3824|  9.06k|        }
 3825|  8.68k|        else {
 3826|  8.68k|            m_kind = float_kind::inf_long;
 3827|  8.68k|            return *r;
 3828|  8.68k|        }
 3829|  17.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.47M|    {
 3834|  1.47M|        auto it = range.begin();
 3835|  1.47M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.41M, False: 63.2k]
  ------------------
 3836|  1.41M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.41M|                scan_error::invalid_scanned_value,
 3838|  1.41M|                "Invalid floating-point NaN value"));
 3839|  1.41M|        }
 3840|  63.2k|        else {
 3841|  63.2k|            it = *r;
 3842|  63.2k|        }
 3843|       |
 3844|  63.2k|        if (auto r =
 3845|  63.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  63.2k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 59.0k, False: 4.21k]
  ------------------
 3847|  59.0k|            m_kind = float_kind::nan_simple;
 3848|  59.0k|            return it;
 3849|  59.0k|        }
 3850|  4.21k|        else {
 3851|  4.21k|            it = *r;
 3852|  4.21k|        }
 3853|       |
 3854|  4.21k|        auto payload_beg_it = it;
 3855|  4.21k|        it = read_while_code_unit(
 3856|  4.21k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  4.21k|                return is_ascii_char(ch) &&
 3858|  4.21k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  4.21k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  4.21k|            });
 3861|  4.21k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  4.21k|        m_kind = float_kind::nan_with_payload;
 3864|  4.21k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.79k, False: 1.42k]
  ------------------
 3865|  4.21k|                                             ')')) {
 3866|  2.79k|            return *r;
 3867|  2.79k|        }
 3868|  1.42k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.42k|                                     "Invalid floating-point NaN payload");
 3870|  4.21k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  4.21k|        : m_fptr([](storage fn,
  743|  4.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.21k|              cvref<T> obj = *get<T>(fn);
  745|  4.21k|              if constexpr (std::is_void_v<R>) {
  746|  4.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.21k|              }
  748|  4.21k|              else {
  749|  4.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.21k|              }
  751|  4.21k|          }),
  752|  4.21k|          m_storage(std::addressof(f))
  753|  4.21k|    {
  754|  4.21k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  89.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.6k|              else {
  749|  89.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.6k|              }
  751|  89.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  89.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.6k|        else if constexpr (std::is_object_v<T>) {
  688|  89.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.6k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  89.6k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  89.6k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 89.5k, False: 85]
  ------------------
 3858|  89.6k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 86.4k, False: 3.06k]
  |  Branch (3858:39): [True: 76.8k, False: 9.62k]
  |  Branch (3858:54): [True: 2.80k, False: 9.88k]
  |  Branch (3858:67): [True: 2.72k, False: 83]
  ------------------
 3859|  89.5k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 6.90k, False: 3.06k]
  |  Branch (3859:39): [True: 2.55k, False: 4.34k]
  |  Branch (3859:53): [True: 4.26k, False: 3.14k]
  ------------------
 3860|  89.6k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  4.21k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.21k|        {
  662|  4.21k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   987k|    {
 3804|   987k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   987k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   850k|{
 1996|   850k|    auto it = read_while_code_unit(range, pred);
 1997|   850k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 358k, False: 492k]
  ------------------
 1998|   358k|        return unexpected(parse_error::error);
 1999|   358k|    }
 2000|   492k|    return it;
 2001|   850k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   245k|    {
 3876|   245k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 36.0k, False: 209k]
  ------------------
 3877|  36.0k|            auto beg_exp_it = range.begin();
 3878|  36.0k|            auto it = *r;
 3879|       |
 3880|  36.0k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 35.9k, False: 102]
  ------------------
 3881|  36.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  35.9k|                it = r_sign->first;
 3883|  35.9k|            }
 3884|       |
 3885|  36.0k|            if (auto r_exp = read_while1_code_unit(
 3886|  36.0k|                    ranges::subrange{it, range.end()},
 3887|  36.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  36.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 800, False: 35.2k]
  |  |  ------------------
  ------------------
 3889|    800|                it = beg_exp_it;
 3890|    800|            }
 3891|  35.2k|            else {
 3892|  35.2k|                it = *r_exp;
 3893|  35.2k|            }
 3894|       |
 3895|  36.0k|            return it;
 3896|  36.0k|        }
 3897|   209k|        return range.begin();
 3898|   245k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  36.0k|        : m_fptr([](storage fn,
  743|  36.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.0k|              cvref<T> obj = *get<T>(fn);
  745|  36.0k|              if constexpr (std::is_void_v<R>) {
  746|  36.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.0k|              }
  748|  36.0k|              else {
  749|  36.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.0k|              }
  751|  36.0k|          }),
  752|  36.0k|          m_storage(std::addressof(f))
  753|  36.0k|    {
  754|  36.0k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   107k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  36.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.0k|        {
  662|  36.0k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   423k|    {
 3944|   423k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   423k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 261k, False: 161k]
  |  Branch (3945:50): [True: 24.5k, False: 237k]
  ------------------
 3946|       |
 3947|   423k|        auto it = ranges::begin(range);
 3948|   423k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   423k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   423k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 391k]
  |  |  ------------------
  ------------------
 3952|  32.4k|            return r.transform_error(
 3953|  32.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  32.4k|                                              "Invalid floating-point value"));
 3955|  32.4k|        }
 3956|   391k|        else {
 3957|   391k|            digits_count += ranges::distance(it, *r);
 3958|   391k|            it = *r;
 3959|   391k|        }
 3960|       |
 3961|   391k|        m_integral_part_length = digits_count;
 3962|   391k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 72.1k, False: 318k]
  ------------------
 3963|   391k|                                             m_locale_options.decimal_point)) {
 3964|  72.1k|            it = *r;
 3965|  72.1k|        }
 3966|       |
 3967|   391k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 66.3k, False: 324k]
  ------------------
 3968|   391k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  66.3k|            digits_count += ranges::distance(it, *r);
 3970|  66.3k|            it = *r;
 3971|  66.3k|        }
 3972|       |
 3973|   391k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 391k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   391k|        auto beg_exp_it = it;
 3979|   391k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 245k, False: 145k]
  ------------------
 3980|   245k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   245k|        }
 3982|   391k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 23.1k, False: 368k]
  |  Branch (3982:29): [True: 15.7k, False: 7.35k]
  ------------------
 3983|  15.7k|            return unexpected_scan_error(
 3984|  15.7k|                scan_error::invalid_scanned_value,
 3985|  15.7k|                "No exponent given to scientific float");
 3986|  15.7k|        }
 3987|       |
 3988|   375k|        m_kind =
 3989|   375k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 340k, False: 35.2k]
  ------------------
 3990|       |
 3991|   375k|        return it;
 3992|   391k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   814k|    {
 3774|   814k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 814k]
  |  |  |  Branch (859:45): [True: 0, False: 814k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   814k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   814k|        return read_while1_code_unit(
 3783|   814k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   814k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   814k|        : m_fptr([](storage fn,
  743|   814k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   814k|              cvref<T> obj = *get<T>(fn);
  745|   814k|              if constexpr (std::is_void_v<R>) {
  746|   814k|                  obj(static_cast<decltype(args)>(args)...);
  747|   814k|              }
  748|   814k|              else {
  749|   814k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   814k|              }
  751|   814k|          }),
  752|   814k|          m_storage(std::addressof(f))
  753|   814k|    {
  754|   814k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  4.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.31M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.31M|              else {
  749|  4.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.31M|              }
  751|  4.31M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  4.31M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.31M|        else if constexpr (std::is_object_v<T>) {
  688|  4.31M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.31M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  4.31M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   814k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   814k|        {
  662|   814k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.49M|    {
 4000|  1.49M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.49M|        const bool allowed_nonhex =
 4002|  1.49M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.49M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.49M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.47M, False: 17.7k]
  |  Branch (4005:45): [True: 0, False: 1.47M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.49M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 17.7k, False: 1.47M]
  ------------------
 4011|  17.7k|            return *r;
 4012|  17.7k|        }
 4013|       |
 4014|  1.47M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.41M, False: 61.8k]
  |  Branch (4014:45): [True: 1.42k, False: 1.41M]
  ------------------
 4015|  1.42k|            return unexpected(r.error());
 4016|  1.42k|        }
 4017|  1.47M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 61.8k, False: 1.41M]
  ------------------
 4018|  61.8k|            return *r;
 4019|  61.8k|        }
 4020|       |
 4021|  1.41M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 987k, False: 423k]
  |  Branch (4021:28): [True: 298k, False: 689k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   298k|            auto it = range.begin();
 4025|       |
 4026|   298k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 14.0k, False: 284k]
  ------------------
 4027|  14.0k|                m_kind = float_kind::hex_with_prefix;
 4028|  14.0k|                it = *r;
 4029|  14.0k|            }
 4030|   284k|            else {
 4031|   284k|                m_kind = float_kind::hex_without_prefix;
 4032|   284k|            }
 4033|       |
 4034|   298k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   298k|        }
 4036|  1.11M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 423k, False: 689k]
  |  Branch (4036:29): [True: 423k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   423k|            m_kind = float_kind::generic;
 4040|   423k|            return read_regular_float(range);
 4041|   423k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   689k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.9k, False: 655k]
  |  |  ------------------
  ------------------
 4047|  33.9k|            m_kind = float_kind::hex_with_prefix;
 4048|  33.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  33.9k|        }
 4050|       |
 4051|   655k|        m_kind = float_kind::generic;
 4052|   655k|        return read_regular(range);
 4053|   689k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   987k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   987k|                    auto res = read_all(rr);
 3727|   987k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   987k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 879, False: 986k]
  |  |  ------------------
  ------------------
 3728|    879|                        return unexpected_scan_error(
 3729|    879|                            scan_error::invalid_scanned_value,
 3730|    879|                            "Invalid float value");
 3731|    879|                    }
 3732|   986k|                    return res;
 3733|   987k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   987k|{
 1839|   987k|    return ranges::next(range.begin(), range.end());
 1840|   987k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   987k|    {
  313|   987k|        ranges::advance(x, bound);
  314|   987k|        return x;
  315|   987k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   987k|    {
  275|   987k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   987k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   987k|    {
  190|   987k|        i = std::move(bound);
  191|   987k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|  1.36M|    {
 1577|  1.36M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.36M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.36M|    {
 1621|  1.36M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|  1.36M|                      ranges::sized_range<Range>) {
 1626|  1.36M|            m_storage.reset();
 1627|  1.36M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.36M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  94.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.3k|        {
  662|  94.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   248k|        : m_fptr([](storage fn,
  743|   248k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   248k|              cvref<T> obj = *get<T>(fn);
  745|   248k|              if constexpr (std::is_void_v<R>) {
  746|   248k|                  obj(static_cast<decltype(args)>(args)...);
  747|   248k|              }
  748|   248k|              else {
  749|   248k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   248k|              }
  751|   248k|          }),
  752|   248k|          m_storage(std::addressof(f))
  753|   248k|    {
  754|   248k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   248k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   248k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   248k|              else {
  749|   248k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   248k|              }
  751|   248k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   248k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   248k|        else if constexpr (std::is_object_v<T>) {
  688|   248k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   248k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   248k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   248k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   248k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.19M|    {
 3665|  1.19M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.19M|        return read_source_impl(range);
 3671|  1.19M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   248k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   248k|        {
  662|   248k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   426k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   426k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   426k|            auto rd = make_reader<T, char_type>();
 6206|   426k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 426k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   426k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 426k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   426k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   426k|                return impl(rd, range, value);
 6213|   426k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   426k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   426k|    {
 6124|   426k|        const bool need_skipped_width =
 6125|   426k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 426k]
  |  Branch (6125:33): [True: 0, False: 426k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   426k|        auto it = rng.begin();
 6129|   426k|        std::ptrdiff_t prefix_width = 0;
 6130|   426k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 426k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   426k|        else {
 6138|   426k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   426k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   426k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   426k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.67k, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.67k|    }                                                  \
  |  |  |  | 3671|   426k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   421k|            std::tie(it, prefix_width) = prefix_result;
 6140|   421k|        }
 6141|   421k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   421k|        std::ptrdiff_t value_width = 0;
 6145|   421k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 421k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   421k|        else {
 6161|   421k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   421k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   421k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.2k, False: 395k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  25.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  25.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  25.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  25.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  25.2k|    }                                                  \
  |  | 3671|   421k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   395k|                                             specs, value, loc));
 6163|       |
 6164|   395k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 395k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   395k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   395k|        std::ptrdiff_t postfix_width = 0;
 6173|   395k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 391k, False: 4.62k]
  ------------------
 6174|   391k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   391k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   391k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   391k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   391k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   391k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   391k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   391k|                                 value_width));
 6178|   391k|            std::tie(it, postfix_width) = postfix_result;
 6179|   391k|        }
 6180|       |
 6181|   395k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   395k|                                                 value_width, postfix_width);
 6183|   395k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 395k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   395k|        return it;
 6188|   395k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.03M|    {
 3691|  1.03M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.03M|        const std::ptrdiff_t sign_len =
 3694|  1.03M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 239k, False: 797k]
  ------------------
 3695|       |
 3696|  1.03M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.1k, False: 1.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.1k|    }                                                  \
  |  |  |  | 3671|  1.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.01M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.03M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   421k|    {
 4170|   421k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   421k|#if !SCN_DISABLE_LOCALE
 4173|   421k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 119k, False: 301k]
  ------------------
 4174|   119k|            return read_impl<Range>(
 4175|   119k|                range, rd,
 4176|   119k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   119k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   119k|                },
 4179|   119k|                value, loc);
 4180|   119k|        }
 4181|   301k|#endif
 4182|       |
 4183|   301k|        return read_impl<Range>(
 4184|   301k|            range, rd,
 4185|   301k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   301k|                return r.read_source(SCN_FWD(args)...);
 4187|   301k|            },
 4188|   301k|            value);
 4189|   421k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   583k|    {
 4206|   583k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   583k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.7k, False: 552k]
  |  |  ------------------
  ------------------
 4208|  30.7k|            return unexpected(r.error());
 4209|  30.7k|        }
 4210|       |
 4211|   552k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   552k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   552k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   552k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.90k, False: 551k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.90k|    }                                                  \
  |  |  |  | 3671|   552k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   551k|        return ranges::next(range.begin(), n);
 4213|   552k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   119k|        : m_fptr([](storage fn,
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|   119k|              if constexpr (std::is_void_v<R>) {
  746|   119k|                  obj(static_cast<decltype(args)>(args)...);
  747|   119k|              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
  752|   119k|          m_storage(std::addressof(f))
  753|   119k|    {
  754|   119k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   119k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   119k|        else if constexpr (std::is_object_v<T>) {
  688|   119k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   119k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   119k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   119k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   119k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   119k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   119k|        {
  662|   119k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   301k|        : m_fptr([](storage fn,
  743|   301k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   301k|              cvref<T> obj = *get<T>(fn);
  745|   301k|              if constexpr (std::is_void_v<R>) {
  746|   301k|                  obj(static_cast<decltype(args)>(args)...);
  747|   301k|              }
  748|   301k|              else {
  749|   301k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   301k|              }
  751|   301k|          }),
  752|   301k|          m_storage(std::addressof(f))
  753|   301k|    {
  754|   301k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   301k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   301k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   301k|              else {
  749|   301k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   301k|              }
  751|   301k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   301k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   301k|        else if constexpr (std::is_object_v<T>) {
  688|   301k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   301k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   301k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   301k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   301k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   301k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   301k|        {
  662|   301k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   353k|    {
 4170|   353k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   353k|#if !SCN_DISABLE_LOCALE
 4173|   353k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 98.1k, False: 255k]
  ------------------
 4174|  98.1k|            return read_impl<Range>(
 4175|  98.1k|                range, rd,
 4176|  98.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  98.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  98.1k|                },
 4179|  98.1k|                value, loc);
 4180|  98.1k|        }
 4181|   255k|#endif
 4182|       |
 4183|   255k|        return read_impl<Range>(
 4184|   255k|            range, rd,
 4185|   255k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   255k|                return r.read_source(SCN_FWD(args)...);
 4187|   255k|            },
 4188|   255k|            value);
 4189|   353k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   500k|    {
 4206|   500k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   500k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 483k]
  |  |  ------------------
  ------------------
 4208|  16.8k|            return unexpected(r.error());
 4209|  16.8k|        }
 4210|       |
 4211|   483k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   483k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   483k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   483k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.2k, False: 466k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.2k|    }                                                  \
  |  |  |  | 3671|   483k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   466k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   466k|        return ranges::next(range.begin(), n);
 4213|   483k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  98.1k|        : m_fptr([](storage fn,
  743|  98.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.1k|              cvref<T> obj = *get<T>(fn);
  745|  98.1k|              if constexpr (std::is_void_v<R>) {
  746|  98.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.1k|              }
  748|  98.1k|              else {
  749|  98.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.1k|              }
  751|  98.1k|          }),
  752|  98.1k|          m_storage(std::addressof(f))
  753|  98.1k|    {
  754|  98.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  98.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.1k|              else {
  749|  98.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.1k|              }
  751|  98.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  98.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.1k|        else if constexpr (std::is_object_v<T>) {
  688|  98.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  98.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  98.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  98.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.1k|        {
  662|  98.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   255k|        : m_fptr([](storage fn,
  743|   255k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   255k|              cvref<T> obj = *get<T>(fn);
  745|   255k|              if constexpr (std::is_void_v<R>) {
  746|   255k|                  obj(static_cast<decltype(args)>(args)...);
  747|   255k|              }
  748|   255k|              else {
  749|   255k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   255k|              }
  751|   255k|          }),
  752|   255k|          m_storage(std::addressof(f))
  753|   255k|    {
  754|   255k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   255k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   255k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   255k|              else {
  749|   255k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   255k|              }
  751|   255k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   255k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   255k|        else if constexpr (std::is_object_v<T>) {
  688|   255k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   255k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   255k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   255k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   255k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   255k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   255k|        {
  662|   255k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   431k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   431k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   431k|            auto rd = make_reader<T, char_type>();
 6206|   431k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 431k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   431k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 431k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   431k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   431k|                return impl(rd, range, value);
 6213|   431k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   431k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   431k|    {
 6124|   431k|        const bool need_skipped_width =
 6125|   431k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 431k]
  |  Branch (6125:33): [True: 0, False: 431k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   431k|        auto it = rng.begin();
 6129|   431k|        std::ptrdiff_t prefix_width = 0;
 6130|   431k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 431k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   431k|        else {
 6138|   431k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   431k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   431k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   431k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.05k, False: 424k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.05k|    }                                                  \
  |  |  |  | 3671|   431k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   424k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   424k|            std::tie(it, prefix_width) = prefix_result;
 6140|   424k|        }
 6141|   424k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   424k|        std::ptrdiff_t value_width = 0;
 6145|   424k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 424k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   424k|        else {
 6161|   424k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   424k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   424k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   424k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24.8k, False: 400k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  24.8k|    }                                                  \
  |  | 3671|   424k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   424k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   400k|                                             specs, value, loc));
 6163|       |
 6164|   400k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 400k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   400k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   400k|        std::ptrdiff_t postfix_width = 0;
 6173|   400k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 395k, False: 4.91k]
  ------------------
 6174|   395k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   395k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   395k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   395k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 395k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   395k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   395k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   395k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   395k|                                 value_width));
 6178|   395k|            std::tie(it, postfix_width) = postfix_result;
 6179|   395k|        }
 6180|       |
 6181|   400k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   400k|                                                 value_width, postfix_width);
 6183|   400k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 400k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   400k|        return it;
 6188|   400k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.04M|    {
 3691|  1.04M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.04M|        const std::ptrdiff_t sign_len =
 3694|  1.04M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 244k, False: 802k]
  ------------------
 3695|       |
 3696|  1.04M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.04M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.04M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.04M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.0k, False: 1.03M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.0k|    }                                                  \
  |  |  |  | 3671|  1.04M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.03M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.04M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   424k|    {
 4170|   424k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   424k|#if !SCN_DISABLE_LOCALE
 4173|   424k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 121k, False: 303k]
  ------------------
 4174|   121k|            return read_impl<Range>(
 4175|   121k|                range, rd,
 4176|   121k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   121k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   121k|                },
 4179|   121k|                value, loc);
 4180|   121k|        }
 4181|   303k|#endif
 4182|       |
 4183|   303k|        return read_impl<Range>(
 4184|   303k|            range, rd,
 4185|   303k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   303k|                return r.read_source(SCN_FWD(args)...);
 4187|   303k|            },
 4188|   303k|            value);
 4189|   424k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   589k|    {
 4206|   589k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   589k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.6k, False: 557k]
  |  |  ------------------
  ------------------
 4208|  31.6k|            return unexpected(r.error());
 4209|  31.6k|        }
 4210|       |
 4211|   557k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   557k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   557k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   557k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 548, False: 557k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    548|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    548|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    548|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    548|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    548|    }                                                  \
  |  |  |  | 3671|   557k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   557k|        return ranges::next(range.begin(), n);
 4213|   557k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   121k|        : m_fptr([](storage fn,
  743|   121k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   121k|              cvref<T> obj = *get<T>(fn);
  745|   121k|              if constexpr (std::is_void_v<R>) {
  746|   121k|                  obj(static_cast<decltype(args)>(args)...);
  747|   121k|              }
  748|   121k|              else {
  749|   121k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   121k|              }
  751|   121k|          }),
  752|   121k|          m_storage(std::addressof(f))
  753|   121k|    {
  754|   121k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   121k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   121k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   121k|              else {
  749|   121k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   121k|              }
  751|   121k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   121k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   121k|        else if constexpr (std::is_object_v<T>) {
  688|   121k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   121k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   121k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   121k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   121k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   121k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   121k|        {
  662|   121k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   303k|        : m_fptr([](storage fn,
  743|   303k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   303k|              cvref<T> obj = *get<T>(fn);
  745|   303k|              if constexpr (std::is_void_v<R>) {
  746|   303k|                  obj(static_cast<decltype(args)>(args)...);
  747|   303k|              }
  748|   303k|              else {
  749|   303k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   303k|              }
  751|   303k|          }),
  752|   303k|          m_storage(std::addressof(f))
  753|   303k|    {
  754|   303k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   303k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   303k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   303k|              else {
  749|   303k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   303k|              }
  751|   303k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   303k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   303k|        else if constexpr (std::is_object_v<T>) {
  688|   303k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   303k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   303k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   303k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   303k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   303k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   303k|        {
  662|   303k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   357k|    {
 4170|   357k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   357k|#if !SCN_DISABLE_LOCALE
 4173|   357k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 99.8k, False: 257k]
  ------------------
 4174|  99.8k|            return read_impl<Range>(
 4175|  99.8k|                range, rd,
 4176|  99.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  99.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  99.8k|                },
 4179|  99.8k|                value, loc);
 4180|  99.8k|        }
 4181|   257k|#endif
 4182|       |
 4183|   257k|        return read_impl<Range>(
 4184|   257k|            range, rd,
 4185|   257k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   257k|                return r.read_source(SCN_FWD(args)...);
 4187|   257k|            },
 4188|   257k|            value);
 4189|   357k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   506k|    {
 4206|   506k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   506k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 489k]
  |  |  ------------------
  ------------------
 4208|  17.2k|            return unexpected(r.error());
 4209|  17.2k|        }
 4210|       |
 4211|   489k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   489k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   489k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   489k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.4k, False: 473k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.4k|    }                                                  \
  |  |  |  | 3671|   489k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   473k|        return ranges::next(range.begin(), n);
 4213|   489k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  99.8k|        : m_fptr([](storage fn,
  743|  99.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.8k|              cvref<T> obj = *get<T>(fn);
  745|  99.8k|              if constexpr (std::is_void_v<R>) {
  746|  99.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.8k|              }
  748|  99.8k|              else {
  749|  99.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.8k|              }
  751|  99.8k|          }),
  752|  99.8k|          m_storage(std::addressof(f))
  753|  99.8k|    {
  754|  99.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  99.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  99.8k|              else {
  749|  99.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.8k|              }
  751|  99.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  99.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  99.8k|        else if constexpr (std::is_object_v<T>) {
  688|  99.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  99.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  99.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  99.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  99.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  99.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  99.8k|        {
  662|  99.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   257k|        : m_fptr([](storage fn,
  743|   257k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   257k|              cvref<T> obj = *get<T>(fn);
  745|   257k|              if constexpr (std::is_void_v<R>) {
  746|   257k|                  obj(static_cast<decltype(args)>(args)...);
  747|   257k|              }
  748|   257k|              else {
  749|   257k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   257k|              }
  751|   257k|          }),
  752|   257k|          m_storage(std::addressof(f))
  753|   257k|    {
  754|   257k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   257k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   257k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   257k|              else {
  749|   257k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   257k|              }
  751|   257k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   257k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   257k|        else if constexpr (std::is_object_v<T>) {
  688|   257k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   257k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   257k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   257k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   257k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   257k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   257k|        {
  662|   257k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.74M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.74M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.74M|        else {
 1054|  1.74M|            return r.begin().contiguous_segment();
 1055|  1.74M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.74M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.55M|{
 2061|  1.55M|    auto it = range.begin();
 2062|  2.99M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.97M, False: 17.3k]
  ------------------
 2063|  2.97M|        const auto val =
 2064|  2.97M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.97M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.95M, False: 18.8k]
  |  |  ------------------
  ------------------
 2066|  2.95M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.95M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.95M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.53M, False: 1.41M]
  ------------------
 2069|  1.53M|                return it;
 2070|  1.53M|            }
 2071|  2.95M|        }
 2072|  1.43M|        it = val.iterator;
 2073|  1.43M|    }
 2074|       |
 2075|  17.3k|    return it;
 2076|  1.55M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.97M|{
 1899|  2.97M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.97M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.97M|    auto it = range.begin();
 1903|  2.97M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.97M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 2.95M]
  |  |  ------------------
  ------------------
 1906|  18.8k|        ++it;
 1907|  18.8k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  18.8k|        return {it, {}};
 1909|  18.8k|    }
 1910|       |
 1911|  2.95M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.93M, False: 25.8k]
  ------------------
 1912|  2.93M|        ++it;
 1913|  2.93M|        return {it, string_type(1, *range.begin())};
 1914|  2.93M|    }
 1915|       |
 1916|  25.8k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  25.8k|    return {it, string_type{range.begin(), it}};
 1918|  2.95M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  18.8k|{
 1155|  18.8k|    auto it = input.begin();
 1156|   186k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 185k, False: 1.45k]
  ------------------
 1157|   185k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.3k, False: 167k]
  ------------------
 1158|  17.3k|            break;
 1159|  17.3k|        }
 1160|   185k|    }
 1161|  18.8k|    return it;
 1162|  18.8k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  25.8k|    {
  283|  25.8k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  25.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  25.8k|    {
  252|  25.8k|        constexpr iter_difference_t<I> zero{0};
  253|  25.8k|        iter_difference_t<I> counter{0};
  254|       |
  255|  78.3k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 53.5k, False: 24.8k]
  |  Branch (255:30): [True: 52.5k, False: 1.00k]
  ------------------
  256|  52.5k|            ++i;
  257|  52.5k|            ++counter;
  258|  52.5k|        }
  259|       |
  260|  25.8k|        return counter;
  261|  25.8k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.97M|    {
 1890|  2.97M|        return !codepoint.empty();
 1891|  2.97M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.55M|{
 2082|  1.55M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.55M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.74M|{
 2951|  1.74M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.74M, False: 0]
  ------------------
 2952|  1.74M|        auto it = read_while_classic_space(range);
 2953|  1.74M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.74M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 1.73M]
  |  |  ------------------
  ------------------
 2955|  17.3k|            return unexpected(e);
 2956|  17.3k|        }
 2957|       |
 2958|  1.73M|        return it;
 2959|  1.74M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.74M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.74M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  1.74M|    else {
 2126|  1.74M|        auto it = range.begin();
 2127|       |
 2128|  1.74M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.74M|            auto seg = get_contiguous_beginning(range);
 2130|  1.74M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.74M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 192k, False: 1.55M]
  ------------------
 2132|   192k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   192k|            }
 2134|  1.55M|            ranges::advance(it, seg.size());
 2135|  1.55M|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|  1.74M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.74M|    }
 2140|  1.74M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.55M|        : m_fptr([](storage fn,
  743|  1.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55M|              cvref<T> obj = *get<T>(fn);
  745|  1.55M|              if constexpr (std::is_void_v<R>) {
  746|  1.55M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.55M|              }
  748|  1.55M|              else {
  749|  1.55M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55M|              }
  751|  1.55M|          }),
  752|  1.55M|          m_storage(std::addressof(f))
  753|  1.55M|    {
  754|  1.55M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.95M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.95M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.95M|              else {
  749|  2.95M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.95M|              }
  751|  2.95M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.95M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.95M|        else if constexpr (std::is_object_v<T>) {
  688|  2.95M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.95M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.95M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.55M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.55M|        {
  662|  1.55M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   819k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   819k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   819k|        auto beg = r.begin();
  990|   819k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 819k, False: 0]
  ------------------
  991|   819k|            return false;
  992|   819k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   819k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  5.78M|    {
  763|  5.78M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  5.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  5.78M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  2.15M|{
 1857|  2.15M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  2.15M|    else {
 1868|  2.15M|        auto it = range.begin();
 1869|  2.15M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.30M, False: 849k]
  ------------------
 1870|  1.30M|            return ranges::next(it, count);
 1871|  1.30M|        }
 1872|       |
 1873|  3.30M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.51M, False: 790k]
  ------------------
 1874|  2.51M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 58.5k, False: 2.45M]
  ------------------
 1875|  58.5k|                return unexpected(eof_error::eof);
 1876|  58.5k|            }
 1877|  2.51M|        }
 1878|       |
 1879|   790k|        return it;
 1880|   849k|    }
 1881|  2.15M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  2.15M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  2.15M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  2.15M|        else {
 1106|  2.15M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 2.15M, False: 0]
  ------------------
 1107|  2.15M|                return static_cast<size_t>(
 1108|  2.15M|                    r.begin().parent()->chars_available() -
 1109|  2.15M|                    r.begin().position());
 1110|  2.15M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  2.15M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  2.15M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.90M|        : m_fptr([](storage fn,
  743|  1.90M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.90M|              cvref<T> obj = *get<T>(fn);
  745|  1.90M|              if constexpr (std::is_void_v<R>) {
  746|  1.90M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.90M|              }
  748|  1.90M|              else {
  749|  1.90M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.90M|              }
  751|  1.90M|          }),
  752|  1.90M|          m_storage(std::addressof(f))
  753|  1.90M|    {
  754|  1.90M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.89M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.89M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.89M|              else {
  749|  2.89M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.89M|              }
  751|  2.89M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.89M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.89M|        else if constexpr (std::is_object_v<T>) {
  688|  2.89M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.89M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.90M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.90M|        {
  662|  1.90M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   599k|    {
 6037|   599k|        const bool need_skipped_width =
 6038|   599k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 599k]
  |  Branch (6038:33): [True: 0, False: 599k]
  ------------------
 6039|   599k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   599k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 599k]
  ------------------
 6043|   599k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 599k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   599k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 599k, False: 0]
  |  Branch (6047:56): [True: 599k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   599k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 599k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.19M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   599k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   599k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   599k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.86k, False: 597k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.86k|    }                                                  \
  |  |  |  | 3671|   599k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.19M|                            make_eof_scan_error));
 6058|       |
 6059|  1.19M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 597k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   597k|            return result_type{it, 0};
 6067|  1.19M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   599k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.42M|{
 1976|  1.42M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.42M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.42M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  1.42M|    else {
 1961|  1.42M|        auto first = range.begin();
 1962|  2.16M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 2.16M, False: 3.27k]
  ------------------
 1963|  2.16M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.41M, False: 748k]
  ------------------
 1964|  1.41M|                return first;
 1965|  1.41M|            }
 1966|  2.16M|        }
 1967|  3.27k|        return first;
 1968|  1.42M|    }
 1969|  1.42M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.00M|    {
  108|  1.00M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.00M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.00M|    {
   94|  1.00M|        iter_difference_t<I> counter{0};
   95|  2.66M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.65M, False: 1.00M]
  ------------------
   96|  1.65M|            ++i;
   97|  1.65M|            ++counter;
   98|  1.65M|        }
   99|  1.00M|        return counter;
  100|  1.00M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   292k|    {
 1780|   292k|        auto stdloc = loc.get<std::locale>();
 1781|   292k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   292k|        grouping = numpunct.grouping();
 1783|   292k|        thousands_sep =
 1784|   292k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 292k]
  ------------------
 1785|   292k|        decimal_point = numpunct.decimal_point();
 1786|   292k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   292k|{
 1717|   292k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 292k, False: 0]
  ------------------
 1718|   292k|        return std::use_facet<Facet>(stdloc);
 1719|   292k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   292k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  1.92M|{
 1846|  1.92M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 1.92M]
  |  |  ------------------
  ------------------
 1847|  2.15k|        return unexpected(e);
 1848|  2.15k|    }
 1849|       |
 1850|  1.92M|    return ranges::next(range.begin());
 1851|  1.92M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  2.96M|{
  950|  2.96M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 2.96M]
  |  |  ------------------
  ------------------
  951|  6.00k|        return eof_error::eof;
  952|  6.00k|    }
  953|  2.96M|    return eof_error::good;
  954|  2.96M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  4.38M|{
  944|  4.38M|    return is_range_eof(r.begin(), r.end());
  945|  4.38M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  4.38M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.38M|    {
  937|  4.38M|        return begin == end;
  938|  4.38M|    }
  939|  4.38M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.92M|    {
  296|  1.92M|        ++x;
  297|  1.92M|        return x;
  298|  1.92M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   833k|{
 3141|   833k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   833k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 824k, False: 8.59k]
  ------------------
 3143|   824k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 824k, False: 91]
  ------------------
 3144|   824k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   824k|        }
 3146|     91|        return unexpected(eof_error::eof);
 3147|   824k|    }
 3148|       |
 3149|  8.59k|    auto& it = *r;
 3150|  8.59k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 7.31k, False: 1.28k]
  ------------------
 3151|  7.31k|        return std::pair{it, sign_type::minus_sign};
 3152|  7.31k|    }
 3153|  1.28k|    return std::pair{it, sign_type::plus_sign};
 3154|  8.59k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  1.34M|{
 2272|  1.34M|    auto it = read_code_unit(range);
 2273|  1.34M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.19k, False: 1.33M]
  |  |  ------------------
  ------------------
 2274|  1.19k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  1.19k|    }
 2276|       |
 2277|  2.67M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.67M, False: 1.31M]
  ------------------
 2278|  2.67M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 25.5k, False: 2.65M]
  ------------------
 2279|  25.5k|            return *it;
 2280|  25.5k|        }
 2281|  2.67M|    }
 2282|       |
 2283|  1.31M|    return unexpected(parse_error::error);
 2284|  1.33M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  2.15M|{
 2231|  2.15M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  2.15M|    else {
 2244|  2.15M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.15M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.15M|                return ch;
 2247|  2.15M|            }
 2248|  2.15M|            return static_cast<char_type>(ch +
 2249|  2.15M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.15M|        };
 2251|       |
 2252|  2.15M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58.5k, False: 2.09M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  58.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  58.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  58.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  58.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  58.5k|    }                                                  \
  |  |  |  | 3671|  2.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  2.09M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.09M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.09M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09M, False: 1.40k]
  |  |  ------------------
  ------------------
 2257|  2.09M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.09M|                    return ascii_tolower(a) ==
 2259|  2.09M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.09M|                }))) {
 2261|  2.09M|            return unexpected(parse_error::error);
 2262|  2.09M|        }
 2263|       |
 2264|  1.40k|        return it;
 2265|  2.09M|    }
 2266|  2.15M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  2.45M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.45M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.92M, False: 531k]
  |  Branch (2245:29): [True: 515k, False: 16.1k]
  ------------------
 2246|  2.43M|                return ch;
 2247|  2.43M|            }
 2248|  16.1k|            return static_cast<char_type>(ch +
 2249|  16.1k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.45M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   587k|{
 2146|   587k|    auto it = read_code_unit(range);
 2147|   587k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   587k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 952, False: 586k]
  |  |  ------------------
  ------------------
 2148|    952|        return unexpected(make_eof_parse_error(it.error()));
 2149|    952|    }
 2150|       |
 2151|   586k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 584k, False: 2.77k]
  |  |  ------------------
  ------------------
 2152|   586k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   584k|        return unexpected(parse_error::error);
 2154|   584k|    }
 2155|       |
 2156|  2.77k|    return *it;
 2157|   586k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  1.42M|{
 1996|  1.42M|    auto it = read_while_code_unit(range, pred);
 1997|  1.42M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 815k, False: 605k]
  ------------------
 1998|   815k|        return unexpected(parse_error::error);
 1999|   815k|    }
 2000|   605k|    return it;
 2001|  1.42M|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   582k|    {
 1621|   582k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|   582k|                           ranges::common_range<Range>) {
 1638|   582k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   582k|            auto end_seg = range.end().contiguous_segment();
 1640|   582k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.1k, False: 563k]
  |  |  ------------------
  ------------------
 1641|   582k|                             detail::to_address(end_seg.end()))) {
 1642|  19.1k|                auto& str = m_storage.emplace();
 1643|  19.1k|                str.reserve(range.end().position() - range.begin().position());
 1644|  19.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  19.1k|                m_view = string_view_type{str};
 1646|  19.1k|                return;
 1647|  19.1k|            }
 1648|       |
 1649|   563k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   563k|                                                            end_seg.data());
 1651|   563k|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   582k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  5.15M|    {
 1582|  5.15M|        return m_view;
 1583|  5.15M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.26M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   413k|    {
 6079|   413k|        const bool need_skipped_width =
 6080|   413k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 413k]
  |  Branch (6080:33): [True: 0, False: 413k]
  ------------------
 6081|   413k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   413k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 413k]
  ------------------
 6084|   413k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 413k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   413k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 413k, False: 0]
  ------------------
 6093|   413k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 413k]
  ------------------
 6094|   413k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   413k|        return result_type{rng.begin(), 0};
 6118|   413k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  2.15M|{
 1857|  2.15M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  2.15M|    if constexpr (ranges::sized_range<Range>) {
 1860|  2.15M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  2.15M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 58.7k, False: 2.10M]
  ------------------
 1862|  58.7k|            return unexpected(eof_error::eof);
 1863|  58.7k|        }
 1864|       |
 1865|  2.10M|        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|       |    else {
 1868|       |        auto it = range.begin();
 1869|       |        if (guaranteed_minimum_size(range) >= count) {
 1870|       |            return ranges::next(it, count);
 1871|       |        }
 1872|       |
 1873|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|       |            if (it == range.end()) {
 1875|       |                return unexpected(eof_error::eof);
 1876|       |            }
 1877|       |        }
 1878|       |
 1879|       |        return it;
 1880|       |    }
 1881|  2.15M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  2.49M|{
 1899|  2.49M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.49M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.49M|    auto it = range.begin();
 1903|  2.49M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.49M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  2.49M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.49M, False: 0]
  ------------------
 1912|  2.49M|        ++it;
 1913|  2.49M|        return {it, string_type(1, *range.begin())};
 1914|  2.49M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  2.49M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  4.65M|{
  944|  4.65M|    return is_range_eof(r.begin(), r.end());
  945|  4.65M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  4.65M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.65M|    {
  937|  4.65M|        return begin == end;
  938|  4.65M|    }
  939|  4.65M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   525k|    {
  190|   525k|        i = std::move(bound);
  191|   525k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  2.49M|    {
 1890|  2.49M|        return !codepoint.empty();
 1891|  2.49M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.15M|{
  950|  2.15M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.37k, False: 2.15M]
  |  |  ------------------
  ------------------
  951|  4.37k|        return eof_error::eof;
  952|  4.37k|    }
  953|  2.15M|    return eof_error::good;
  954|  2.15M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.11M|{
 1846|  1.11M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 524, False: 1.11M]
  |  |  ------------------
  ------------------
 1847|    524|        return unexpected(e);
 1848|    524|    }
 1849|       |
 1850|  1.11M|    return ranges::next(range.begin());
 1851|  1.11M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.11M|    {
  296|  1.11M|        ++x;
  297|  1.11M|        return x;
  298|  1.11M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   822k|{
 3141|   822k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   822k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 817k, False: 5.20k]
  ------------------
 3143|   817k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 817k, False: 30]
  ------------------
 3144|   817k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   817k|        }
 3146|     30|        return unexpected(eof_error::eof);
 3147|   817k|    }
 3148|       |
 3149|  5.20k|    auto& it = *r;
 3150|  5.20k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 4.14k, False: 1.06k]
  ------------------
 3151|  4.14k|        return std::pair{it, sign_type::minus_sign};
 3152|  4.14k|    }
 3153|  1.06k|    return std::pair{it, sign_type::plus_sign};
 3154|  5.20k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   930k|{
 2272|   930k|    auto it = read_code_unit(range);
 2273|   930k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 930k]
  |  |  ------------------
  ------------------
 2274|    264|        return unexpected(make_eof_parse_error(it.error()));
 2275|    264|    }
 2276|       |
 2277|  1.85M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.85M, False: 919k]
  ------------------
 2278|  1.85M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 11.0k, False: 1.84M]
  ------------------
 2279|  11.0k|            return *it;
 2280|  11.0k|        }
 2281|  1.85M|    }
 2282|       |
 2283|   919k|    return unexpected(parse_error::error);
 2284|   930k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.15M|{
 2231|  2.15M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  2.15M|    else {
 2244|  2.15M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.15M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.15M|                return ch;
 2247|  2.15M|            }
 2248|  2.15M|            return static_cast<char_type>(ch +
 2249|  2.15M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.15M|        };
 2251|       |
 2252|  2.15M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58.7k, False: 2.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  58.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  58.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  58.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  58.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  58.7k|    }                                                  \
  |  |  |  | 3671|  2.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  2.10M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.10M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.10M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09M, False: 1.40k]
  |  |  ------------------
  ------------------
 2257|  2.10M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.10M|                    return ascii_tolower(a) ==
 2259|  2.10M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.10M|                }))) {
 2261|  2.09M|            return unexpected(parse_error::error);
 2262|  2.09M|        }
 2263|       |
 2264|  1.40k|        return it;
 2265|  2.10M|    }
 2266|  2.15M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  2.45M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.45M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.92M, False: 534k]
  |  Branch (2245:29): [True: 517k, False: 16.2k]
  ------------------
 2246|  2.44M|                return ch;
 2247|  2.44M|            }
 2248|  16.2k|            return static_cast<char_type>(ch +
 2249|  16.2k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.45M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   187k|{
 2146|   187k|    auto it = read_code_unit(range);
 2147|   187k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 260, False: 187k]
  |  |  ------------------
  ------------------
 2148|    260|        return unexpected(make_eof_parse_error(it.error()));
 2149|    260|    }
 2150|       |
 2151|   187k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 186k, False: 1.10k]
  |  |  ------------------
  ------------------
 2152|   187k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   186k|        return unexpected(parse_error::error);
 2154|   186k|    }
 2155|       |
 2156|  1.10k|    return *it;
 2157|   187k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   485k|{
 1976|   485k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   485k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   485k|{
 1957|   485k|    if constexpr (ranges::common_range<Range>) {
 1958|   485k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   485k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   820k|{
 2951|   820k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 820k, False: 0]
  ------------------
 2952|   820k|        auto it = read_while_classic_space(range);
 2953|   820k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   820k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 816k]
  |  |  ------------------
  ------------------
 2955|  3.37k|            return unexpected(e);
 2956|  3.37k|        }
 2957|       |
 2958|   816k|        return it;
 2959|   820k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   820k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   820k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   820k|    else {
 2126|   820k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   820k|        return read_while_code_point(
 2138|   820k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   820k|    }
 2140|   820k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   820k|{
 2082|   820k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   820k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  1.39M|{
 2061|  1.39M|    auto it = range.begin();
 2062|  2.85M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.49M, False: 357k]
  ------------------
 2063|  2.49M|        const auto val =
 2064|  2.49M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.49M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.49M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49M, False: 0]
  |  |  ------------------
  ------------------
 2066|  2.49M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.49M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.49M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.03M, False: 1.45M]
  ------------------
 2069|  1.03M|                return it;
 2070|  1.03M|            }
 2071|  2.49M|        }
 2072|  1.45M|        it = val.iterator;
 2073|  1.45M|    }
 2074|       |
 2075|   357k|    return it;
 2076|  1.39M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   820k|        : m_fptr([](storage fn,
  743|   820k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   820k|              cvref<T> obj = *get<T>(fn);
  745|   820k|              if constexpr (std::is_void_v<R>) {
  746|   820k|                  obj(static_cast<decltype(args)>(args)...);
  747|   820k|              }
  748|   820k|              else {
  749|   820k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   820k|              }
  751|   820k|          }),
  752|   820k|          m_storage(std::addressof(f))
  753|   820k|    {
  754|   820k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.41M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.41M|              else {
  749|  1.41M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.41M|              }
  751|  1.41M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.41M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.41M|        else if constexpr (std::is_object_v<T>) {
  688|  1.41M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.41M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  1.41M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   820k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   820k|        {
  662|   820k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.88M|    {
  304|  1.88M|        ranges::advance(x, n);
  305|  1.88M|        return x;
  306|  1.88M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.88M|    {
  268|  1.88M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.88M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.88M|    {
  181|  6.03M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 4.14M, False: 1.88M]
  ------------------
  182|  4.14M|            ++i;
  183|  4.14M|        }
  184|  1.88M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   188k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   188k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   188k|            auto rd = make_reader<T, char_type>();
 6206|   188k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 188k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   188k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 188k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   188k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   188k|                return impl(rd, range, value);
 6213|   188k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   188k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.20M|    {
 3040|  1.20M|        reader_error_handler eh{};
 3041|  1.20M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.20M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.20M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.20M|        return {};
 3046|  1.20M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  1.20M|    {
 3051|  1.20M|        return static_cast<Derived&>(*this);
 3052|  1.20M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.20M|    {
 4145|  1.20M|        detail::check_float_type_specs(specs, eh);
 4146|  1.20M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   188k|    {
 6124|   188k|        const bool need_skipped_width =
 6125|   188k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 188k]
  |  Branch (6125:33): [True: 0, False: 188k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   188k|        auto it = rng.begin();
 6129|   188k|        std::ptrdiff_t prefix_width = 0;
 6130|   188k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 188k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   188k|        else {
 6138|   188k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    894|    }                                                  \
  |  |  |  | 3671|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   187k|            std::tie(it, prefix_width) = prefix_result;
 6140|   187k|        }
 6141|   187k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   187k|        std::ptrdiff_t value_width = 0;
 6145|   187k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 187k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   187k|        else {
 6161|   187k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.8k, False: 126k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  60.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  60.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  60.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  60.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  60.8k|    }                                                  \
  |  | 3671|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   126k|                                             specs, value, loc));
 6163|       |
 6164|   126k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 126k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   126k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   126k|        std::ptrdiff_t postfix_width = 0;
 6173|   126k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 126k, False: 396]
  ------------------
 6174|   126k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   126k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   126k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   126k|                                 value_width));
 6178|   126k|            std::tie(it, postfix_width) = postfix_result;
 6179|   126k|        }
 6180|       |
 6181|   126k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   126k|                                                 value_width, postfix_width);
 6183|   126k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 126k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   126k|        return it;
 6188|   126k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  2.46M|    {
 3035|  2.46M|        return true;
 3036|  2.46M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.19M|    {
 4217|  1.19M|        unsigned options{};
 4218|  1.19M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 292k, False: 902k]
  ------------------
 4219|   292k|            options |= float_reader_base::allow_thsep;
 4220|   292k|        }
 4221|       |
 4222|  1.19M|        SCN_GCC_COMPAT_PUSH
 4223|  1.19M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.19M|        switch (specs.type) {
 4226|   233k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 233k, False: 961k]
  ------------------
 4227|   233k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  75.7k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 75.7k, False: 1.11M]
  ------------------
 4230|  75.7k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   319k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 319k, False: 875k]
  ------------------
 4233|   319k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   274k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 274k, False: 920k]
  ------------------
 4236|   274k|                return options | float_reader_base::allow_scientific |
 4237|   274k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   292k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 292k, False: 902k]
  ------------------
 4240|   292k|                return options | float_reader_base::allow_scientific |
 4241|   292k|                       float_reader_base::allow_fixed |
 4242|   292k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.19M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.19M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.19M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.19M|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|  1.19M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.63M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  3.26M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   390k|    {
 3691|   390k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   390k|        const std::ptrdiff_t sign_len =
 3694|   390k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 2.09k, False: 388k]
  ------------------
 3695|       |
 3696|   390k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   390k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   390k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   390k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.8k, False: 344k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  45.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  45.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  45.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  45.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  45.8k|    }                                                  \
  |  |  |  | 3671|   390k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   344k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   390k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.29M|    {
 4057|  1.29M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.29M, False: 0]
  ------------------
 4058|  1.29M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.29M, False: 0]
  ------------------
 4059|  1.29M|            return;
 4060|  1.29M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  1.41M|    {
 1587|  1.41M|        return m_storage.has_value();
 1588|  1.41M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   832k|    {
 1592|   832k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   832k|        return *m_storage;
 1594|   832k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   187k|    {
 4170|   187k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   187k|#if !SCN_DISABLE_LOCALE
 4173|   187k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 42.8k, False: 144k]
  ------------------
 4174|  42.8k|            return read_impl<Range>(
 4175|  42.8k|                range, rd,
 4176|  42.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  42.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  42.8k|                },
 4179|  42.8k|                value, loc);
 4180|  42.8k|        }
 4181|   144k|#endif
 4182|       |
 4183|   144k|        return read_impl<Range>(
 4184|   144k|            range, rd,
 4185|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   144k|                return r.read_source(SCN_FWD(args)...);
 4187|   144k|            },
 4188|   144k|            value);
 4189|   187k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   251k|    {
 4206|   251k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   251k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.5k, False: 174k]
  |  |  ------------------
  ------------------
 4208|  76.5k|            return unexpected(r.error());
 4209|  76.5k|        }
 4210|       |
 4211|   174k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 172k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.61k|    }                                                  \
  |  |  |  | 3671|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   172k|        return ranges::next(range.begin(), n);
 4213|   174k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   816k|    {
  763|   816k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   816k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  42.8k|        : m_fptr([](storage fn,
  743|  42.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.8k|              cvref<T> obj = *get<T>(fn);
  745|  42.8k|              if constexpr (std::is_void_v<R>) {
  746|  42.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.8k|              }
  748|  42.8k|              else {
  749|  42.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.8k|              }
  751|  42.8k|          }),
  752|  42.8k|          m_storage(std::addressof(f))
  753|  42.8k|    {
  754|  42.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  42.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.8k|              else {
  749|  42.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.8k|              }
  751|  42.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.8k|        else if constexpr (std::is_object_v<T>) {
  688|  42.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  42.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  42.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  42.8k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   145k|    {
 3679|   145k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   145k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 145k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   145k|        return read_source_impl(range);
 3685|   145k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   816k|    {
 3705|   816k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   816k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   816k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   816k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 816k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   816k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   816k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   816k|        auto it = sign_result.first;
 3708|   816k|        m_sign = sign_result.second;
 3709|       |
 3710|   816k|        auto digits_begin = it;
 3711|   816k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|   816k|        else {
 3738|   816k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   816k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   816k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 233k, False: 582k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   233k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   233k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   233k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   233k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   233k|    }                                                  \
  |  | 3671|   816k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   582k|                it,
 3740|   582k|                do_read_source_impl(
 3741|   582k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   582k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   582k|        }
 3744|       |
 3745|   816k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   816k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   816k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   582k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 582k, False: 0]
  |  Branch (3747:48): [True: 582k, False: 0]
  ------------------
 3748|   582k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 582k, False: 0]
  ------------------
 3749|   582k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 582k, False: 0]
  ------------------
 3750|   582k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   582k|        }
 3752|       |
 3753|   582k|        handle_separators();
 3754|       |
 3755|   582k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 582k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   582k|        return it;
 3768|   582k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   816k|    {
 4000|   816k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   816k|        const bool allowed_nonhex =
 4002|   816k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   816k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   816k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 816k, False: 0]
  |  Branch (4005:45): [True: 0, False: 816k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   816k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 816k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   816k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 816k, False: 0]
  |  Branch (4014:45): [True: 0, False: 816k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   816k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 816k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   816k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 524k, False: 291k]
  |  Branch (4021:28): [True: 159k, False: 364k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   159k|            auto it = range.begin();
 4025|       |
 4026|   159k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 426, False: 159k]
  ------------------
 4027|    426|                m_kind = float_kind::hex_with_prefix;
 4028|    426|                it = *r;
 4029|    426|            }
 4030|   159k|            else {
 4031|   159k|                m_kind = float_kind::hex_without_prefix;
 4032|   159k|            }
 4033|       |
 4034|   159k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   159k|        }
 4036|   656k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 291k, False: 364k]
  |  Branch (4036:29): [True: 291k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   291k|            m_kind = float_kind::generic;
 4040|   291k|            return read_regular_float(range);
 4041|   291k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   364k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 980, False: 363k]
  |  |  ------------------
  ------------------
 4047|    980|            m_kind = float_kind::hex_with_prefix;
 4048|    980|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    980|        }
 4050|       |
 4051|   363k|        m_kind = float_kind::generic;
 4052|   363k|        return read_regular(range);
 4053|   364k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   816k|    {
 3811|   816k|        auto it = range.begin();
 3812|   816k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 816k, False: 0]
  ------------------
 3813|   816k|            return unexpected(r.error());
 3814|   816k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   816k|    {
 3834|   816k|        auto it = range.begin();
 3835|   816k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 816k, False: 0]
  ------------------
 3836|   816k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   816k|                scan_error::invalid_scanned_value,
 3838|   816k|                "Invalid floating-point NaN value"));
 3839|   816k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   524k|    {
 3804|   524k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   524k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   160k|    {
 3904|   160k|        auto it = range.begin();
 3905|       |
 3906|   160k|        std::ptrdiff_t digits_count = 0;
 3907|   160k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   160k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.4k, False: 124k]
  |  |  ------------------
  ------------------
 3909|  36.4k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  36.4k|                scan_error::invalid_scanned_value,
 3911|  36.4k|                "Invalid hexadecimal floating-point value"));
 3912|  36.4k|        }
 3913|   124k|        else {
 3914|   124k|            digits_count += ranges::distance(it, *r);
 3915|   124k|            it = *r;
 3916|   124k|        }
 3917|       |
 3918|   124k|        m_integral_part_length = digits_count;
 3919|   124k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 516, False: 123k]
  ------------------
 3920|   124k|                                             m_locale_options.decimal_point)) {
 3921|    516|            it = *r;
 3922|    516|        }
 3923|       |
 3924|   124k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 414, False: 123k]
  ------------------
 3925|   124k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|    414|            digits_count += ranges::distance(it, *r);
 3927|    414|            it = *r;
 3928|    414|        }
 3929|       |
 3930|   124k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   124k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   124k|        return it;
 3938|   124k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   284k|    {
 3789|   284k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 284k]
  |  |  |  Branch (859:45): [True: 0, False: 284k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   284k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   284k|        return read_while1_code_unit(
 3798|   284k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   284k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   284k|        : m_fptr([](storage fn,
  743|   284k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   284k|              cvref<T> obj = *get<T>(fn);
  745|   284k|              if constexpr (std::is_void_v<R>) {
  746|   284k|                  obj(static_cast<decltype(args)>(args)...);
  747|   284k|              }
  748|   284k|              else {
  749|   284k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   284k|              }
  751|   284k|          }),
  752|   284k|          m_storage(std::addressof(f))
  753|   284k|    {
  754|   284k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   443k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   443k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   443k|              else {
  749|   443k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   443k|              }
  751|   443k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   443k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   443k|        else if constexpr (std::is_object_v<T>) {
  688|   443k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   443k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   443k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   284k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   284k|        {
  662|   284k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   507k|    {
 3876|   507k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 16.9k, False: 490k]
  ------------------
 3877|  16.9k|            auto beg_exp_it = range.begin();
 3878|  16.9k|            auto it = *r;
 3879|       |
 3880|  16.9k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 16.8k, False: 91]
  ------------------
 3881|  16.9k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  16.8k|                it = r_sign->first;
 3883|  16.8k|            }
 3884|       |
 3885|  16.9k|            if (auto r_exp = read_while1_code_unit(
 3886|  16.9k|                    ranges::subrange{it, range.end()},
 3887|  16.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  16.9k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.50k, False: 15.4k]
  |  |  ------------------
  ------------------
 3889|  1.50k|                it = beg_exp_it;
 3890|  1.50k|            }
 3891|  15.4k|            else {
 3892|  15.4k|                it = *r_exp;
 3893|  15.4k|            }
 3894|       |
 3895|  16.9k|            return it;
 3896|  16.9k|        }
 3897|   490k|        return range.begin();
 3898|   507k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  16.9k|        : m_fptr([](storage fn,
  743|  16.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.9k|              cvref<T> obj = *get<T>(fn);
  745|  16.9k|              if constexpr (std::is_void_v<R>) {
  746|  16.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.9k|              }
  748|  16.9k|              else {
  749|  16.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.9k|              }
  751|  16.9k|          }),
  752|  16.9k|          m_storage(std::addressof(f))
  753|  16.9k|    {
  754|  16.9k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  57.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.8k|              else {
  749|  57.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.8k|              }
  751|  57.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  57.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.8k|        else if constexpr (std::is_object_v<T>) {
  688|  57.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.8k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  57.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  16.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  16.9k|        {
  662|  16.9k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   655k|    {
 3944|   655k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   655k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 538k, False: 116k]
  |  Branch (3945:50): [True: 37.8k, False: 501k]
  ------------------
 3946|       |
 3947|   655k|        auto it = ranges::begin(range);
 3948|   655k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   655k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   655k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 191k, False: 463k]
  |  |  ------------------
  ------------------
 3952|   191k|            return r.transform_error(
 3953|   191k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   191k|                                              "Invalid floating-point value"));
 3955|   191k|        }
 3956|   463k|        else {
 3957|   463k|            digits_count += ranges::distance(it, *r);
 3958|   463k|            it = *r;
 3959|   463k|        }
 3960|       |
 3961|   463k|        m_integral_part_length = digits_count;
 3962|   463k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 2.25k, False: 461k]
  ------------------
 3963|   463k|                                             m_locale_options.decimal_point)) {
 3964|  2.25k|            it = *r;
 3965|  2.25k|        }
 3966|       |
 3967|   463k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 1.83k, False: 462k]
  ------------------
 3968|   463k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  1.83k|            digits_count += ranges::distance(it, *r);
 3970|  1.83k|            it = *r;
 3971|  1.83k|        }
 3972|       |
 3973|   463k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   463k|        auto beg_exp_it = it;
 3979|   463k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 383k, False: 80.0k]
  ------------------
 3980|   383k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   383k|        }
 3982|   463k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 6.18k, False: 457k]
  |  Branch (3982:29): [True: 4.98k, False: 1.19k]
  ------------------
 3983|  4.98k|            return unexpected_scan_error(
 3984|  4.98k|                scan_error::invalid_scanned_value,
 3985|  4.98k|                "No exponent given to scientific float");
 3986|  4.98k|        }
 3987|       |
 3988|   458k|        m_kind =
 3989|   458k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 443k, False: 15.3k]
  ------------------
 3990|       |
 3991|   458k|        return it;
 3992|   463k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.11M|    {
 3774|  1.11M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.11M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.11M|        return read_while1_code_unit(
 3783|  1.11M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.11M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.11M|        : m_fptr([](storage fn,
  743|  1.11M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.11M|              cvref<T> obj = *get<T>(fn);
  745|  1.11M|              if constexpr (std::is_void_v<R>) {
  746|  1.11M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.11M|              }
  748|  1.11M|              else {
  749|  1.11M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.11M|              }
  751|  1.11M|          }),
  752|  1.11M|          m_storage(std::addressof(f))
  753|  1.11M|    {
  754|  1.11M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.66M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.66M|              else {
  749|  1.66M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66M|              }
  751|  1.66M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.66M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.66M|        else if constexpr (std::is_object_v<T>) {
  688|  1.66M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.66M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|  1.66M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.11M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.11M|        {
  662|  1.11M|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|   582k|    {
 1577|   582k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   582k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  42.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  42.8k|        {
  662|  42.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   144k|        : m_fptr([](storage fn,
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|   144k|              if constexpr (std::is_void_v<R>) {
  746|   144k|                  obj(static_cast<decltype(args)>(args)...);
  747|   144k|              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
  752|   144k|          m_storage(std::addressof(f))
  753|   144k|    {
  754|   144k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   144k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  688|   144k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   144k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   144k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   144k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   670k|    {
 3665|   670k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 670k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   670k|        return read_source_impl(range);
 3671|   670k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   144k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   144k|        {
  662|   144k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   187k|    {
 4170|   187k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   187k|#if !SCN_DISABLE_LOCALE
 4173|   187k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 42.8k, False: 144k]
  ------------------
 4174|  42.8k|            return read_impl<Range>(
 4175|  42.8k|                range, rd,
 4176|  42.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  42.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  42.8k|                },
 4179|  42.8k|                value, loc);
 4180|  42.8k|        }
 4181|   144k|#endif
 4182|       |
 4183|   144k|        return read_impl<Range>(
 4184|   144k|            range, rd,
 4185|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   144k|                return r.read_source(SCN_FWD(args)...);
 4187|   144k|            },
 4188|   144k|            value);
 4189|   187k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   251k|    {
 4206|   251k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   251k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.9k, False: 215k]
  |  |  ------------------
  ------------------
 4208|  35.9k|            return unexpected(r.error());
 4209|  35.9k|        }
 4210|       |
 4211|   215k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   215k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 43.2k, False: 172k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  43.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  43.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  43.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  43.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  43.2k|    }                                                  \
  |  |  |  | 3671|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   172k|        return ranges::next(range.begin(), n);
 4213|   215k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   816k|    {
  763|   816k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   816k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  42.8k|        : m_fptr([](storage fn,
  743|  42.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.8k|              cvref<T> obj = *get<T>(fn);
  745|  42.8k|              if constexpr (std::is_void_v<R>) {
  746|  42.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.8k|              }
  748|  42.8k|              else {
  749|  42.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.8k|              }
  751|  42.8k|          }),
  752|  42.8k|          m_storage(std::addressof(f))
  753|  42.8k|    {
  754|  42.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  42.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.8k|              else {
  749|  42.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.8k|              }
  751|  42.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.8k|        else if constexpr (std::is_object_v<T>) {
  688|  42.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  42.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  42.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  42.8k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   146k|    {
 3679|   146k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   146k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   146k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   146k|        return read_source_impl(range);
 3685|   146k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   816k|    {
 3705|   816k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   816k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   816k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   816k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 816k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   816k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   816k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   816k|        auto it = sign_result.first;
 3708|   816k|        m_sign = sign_result.second;
 3709|       |
 3710|   816k|        auto digits_begin = it;
 3711|   816k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|   816k|                      ranges::sized_range<Range>) {
 3714|   816k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 816k]
  |  |  |  Branch (859:45): [True: 0, False: 816k]
  |  |  |  Branch (859:45): [True: 0, False: 816k]
  |  |  ------------------
  ------------------
 3715|   816k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   816k|            else {
 3724|   816k|                auto cb = [&](const auto& rr)
 3725|   816k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   816k|                    auto res = read_all(rr);
 3727|   816k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   816k|                        return unexpected_scan_error(
 3729|   816k|                            scan_error::invalid_scanned_value,
 3730|   816k|                            "Invalid float value");
 3731|   816k|                    }
 3732|   816k|                    return res;
 3733|   816k|                };
 3734|   816k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   816k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   816k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 108k, False: 707k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   108k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   108k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   108k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   108k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   108k|    }                                                  \
  |  | 3671|   816k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   707k|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|   816k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   816k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   816k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   707k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 707k, False: 0]
  |  Branch (3747:48): [True: 707k, False: 0]
  ------------------
 3748|   707k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 707k, False: 0]
  ------------------
 3749|   707k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 707k, False: 0]
  ------------------
 3750|   707k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   707k|        }
 3752|       |
 3753|   707k|        handle_separators();
 3754|       |
 3755|   707k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 707k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   707k|        return it;
 3768|   707k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   816k|    {
 3811|   816k|        auto it = range.begin();
 3812|   816k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 816k, False: 0]
  ------------------
 3813|   816k|            return unexpected(r.error());
 3814|   816k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   816k|    {
 3834|   816k|        auto it = range.begin();
 3835|   816k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 816k, False: 0]
  ------------------
 3836|   816k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   816k|                scan_error::invalid_scanned_value,
 3838|   816k|                "Invalid floating-point NaN value"));
 3839|   816k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   525k|    {
 3804|   525k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   525k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   485k|{
 1996|   485k|    auto it = read_while_code_unit(range, pred);
 1997|   485k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 291k, False: 193k]
  ------------------
 1998|   291k|        return unexpected(parse_error::error);
 1999|   291k|    }
 2000|   193k|    return it;
 2001|   485k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   107k|    {
 3876|   107k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 5.80k, False: 102k]
  ------------------
 3877|  5.80k|            auto beg_exp_it = range.begin();
 3878|  5.80k|            auto it = *r;
 3879|       |
 3880|  5.80k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 5.77k, False: 30]
  ------------------
 3881|  5.80k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  5.77k|                it = r_sign->first;
 3883|  5.77k|            }
 3884|       |
 3885|  5.80k|            if (auto r_exp = read_while1_code_unit(
 3886|  5.80k|                    ranges::subrange{it, range.end()},
 3887|  5.80k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  5.80k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 568, False: 5.23k]
  |  |  ------------------
  ------------------
 3889|    568|                it = beg_exp_it;
 3890|    568|            }
 3891|  5.23k|            else {
 3892|  5.23k|                it = *r_exp;
 3893|  5.23k|            }
 3894|       |
 3895|  5.80k|            return it;
 3896|  5.80k|        }
 3897|   102k|        return range.begin();
 3898|   107k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.80k|        : m_fptr([](storage fn,
  743|  5.80k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.80k|              cvref<T> obj = *get<T>(fn);
  745|  5.80k|              if constexpr (std::is_void_v<R>) {
  746|  5.80k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.80k|              }
  748|  5.80k|              else {
  749|  5.80k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.80k|              }
  751|  5.80k|          }),
  752|  5.80k|          m_storage(std::addressof(f))
  753|  5.80k|    {
  754|  5.80k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  19.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  19.5k|              else {
  749|  19.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.5k|              }
  751|  19.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  19.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  19.5k|        else if constexpr (std::is_object_v<T>) {
  688|  19.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  19.5k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  19.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.80k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.80k|        {
  662|  5.80k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   291k|    {
 3944|   291k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   291k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 174k, False: 116k]
  |  Branch (3945:50): [True: 37.8k, False: 137k]
  ------------------
 3946|       |
 3947|   291k|        auto it = ranges::begin(range);
 3948|   291k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   291k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   291k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 187k]
  |  |  ------------------
  ------------------
 3952|   103k|            return r.transform_error(
 3953|   103k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   103k|                                              "Invalid floating-point value"));
 3955|   103k|        }
 3956|   187k|        else {
 3957|   187k|            digits_count += ranges::distance(it, *r);
 3958|   187k|            it = *r;
 3959|   187k|        }
 3960|       |
 3961|   187k|        m_integral_part_length = digits_count;
 3962|   187k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 1.10k, False: 186k]
  ------------------
 3963|   187k|                                             m_locale_options.decimal_point)) {
 3964|  1.10k|            it = *r;
 3965|  1.10k|        }
 3966|       |
 3967|   187k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 888, False: 186k]
  ------------------
 3968|   187k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    888|            digits_count += ranges::distance(it, *r);
 3970|    888|            it = *r;
 3971|    888|        }
 3972|       |
 3973|   187k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   187k|        auto beg_exp_it = it;
 3979|   187k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 107k, False: 80.0k]
  ------------------
 3980|   107k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   107k|        }
 3982|   187k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 6.18k, False: 181k]
  |  Branch (3982:29): [True: 4.98k, False: 1.19k]
  ------------------
 3983|  4.98k|            return unexpected_scan_error(
 3984|  4.98k|                scan_error::invalid_scanned_value,
 3985|  4.98k|                "No exponent given to scientific float");
 3986|  4.98k|        }
 3987|       |
 3988|   182k|        m_kind =
 3989|   182k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 177k, False: 5.23k]
  ------------------
 3990|       |
 3991|   182k|        return it;
 3992|   187k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   479k|    {
 3774|   479k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   479k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   479k|        return read_while1_code_unit(
 3783|   479k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   479k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   479k|        : m_fptr([](storage fn,
  743|   479k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   479k|              cvref<T> obj = *get<T>(fn);
  745|   479k|              if constexpr (std::is_void_v<R>) {
  746|   479k|                  obj(static_cast<decltype(args)>(args)...);
  747|   479k|              }
  748|   479k|              else {
  749|   479k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   479k|              }
  751|   479k|          }),
  752|   479k|          m_storage(std::addressof(f))
  753|   479k|    {
  754|   479k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   704k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   704k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   704k|              else {
  749|   704k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   704k|              }
  751|   704k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   704k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   704k|        else if constexpr (std::is_object_v<T>) {
  688|   704k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   704k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   704k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   479k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   479k|        {
  662|   479k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   816k|    {
 4000|   816k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   816k|        const bool allowed_nonhex =
 4002|   816k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   816k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   816k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 816k, False: 0]
  |  Branch (4005:45): [True: 0, False: 816k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   816k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 816k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   816k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 816k, False: 0]
  |  Branch (4014:45): [True: 0, False: 816k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   816k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 816k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   816k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 525k, False: 291k]
  |  Branch (4021:28): [True: 159k, False: 365k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   159k|            auto it = range.begin();
 4025|       |
 4026|   159k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 426, False: 159k]
  ------------------
 4027|    426|                m_kind = float_kind::hex_with_prefix;
 4028|    426|                it = *r;
 4029|    426|            }
 4030|   159k|            else {
 4031|   159k|                m_kind = float_kind::hex_without_prefix;
 4032|   159k|            }
 4033|       |
 4034|   159k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   159k|        }
 4036|   657k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 291k, False: 365k]
  |  Branch (4036:29): [True: 291k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   291k|            m_kind = float_kind::generic;
 4040|   291k|            return read_regular_float(range);
 4041|   291k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   365k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 980, False: 364k]
  |  |  ------------------
  ------------------
 4047|    980|            m_kind = float_kind::hex_with_prefix;
 4048|    980|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    980|        }
 4050|       |
 4051|   364k|        m_kind = float_kind::generic;
 4052|   364k|        return read_regular(range);
 4053|   365k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   525k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   525k|                    auto res = read_all(rr);
 3727|   525k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151, False: 525k]
  |  |  ------------------
  ------------------
 3728|    151|                        return unexpected_scan_error(
 3729|    151|                            scan_error::invalid_scanned_value,
 3730|    151|                            "Invalid float value");
 3731|    151|                    }
 3732|   525k|                    return res;
 3733|   525k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   525k|{
 1839|   525k|    return ranges::next(range.begin(), range.end());
 1840|   525k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   525k|    {
  313|   525k|        ranges::advance(x, bound);
  314|   525k|        return x;
  315|   525k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   525k|    {
  275|   525k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   525k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|   707k|    {
 1577|   707k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   707k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   707k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   707k|    {
 1621|   707k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|   707k|                      ranges::sized_range<Range>) {
 1626|   707k|            m_storage.reset();
 1627|   707k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   707k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  42.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  42.8k|        {
  662|  42.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   144k|        : m_fptr([](storage fn,
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|   144k|              if constexpr (std::is_void_v<R>) {
  746|   144k|                  obj(static_cast<decltype(args)>(args)...);
  747|   144k|              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
  752|   144k|          m_storage(std::addressof(f))
  753|   144k|    {
  754|   144k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   144k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  688|   144k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   144k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   144k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   144k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   670k|    {
 3665|   670k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 670k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   670k|        return read_source_impl(range);
 3671|   670k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   144k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   144k|        {
  662|   144k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   204k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   204k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   204k|            auto rd = make_reader<T, char_type>();
 6206|   204k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 204k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   204k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 204k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   204k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   204k|                return impl(rd, range, value);
 6213|   204k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   204k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   204k|    {
 6124|   204k|        const bool need_skipped_width =
 6125|   204k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 204k]
  |  Branch (6125:33): [True: 0, False: 204k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   204k|        auto it = rng.begin();
 6129|   204k|        std::ptrdiff_t prefix_width = 0;
 6130|   204k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 204k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   204k|        else {
 6138|   204k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   204k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   204k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   204k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 962, False: 203k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    962|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    962|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    962|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    962|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    962|    }                                                  \
  |  |  |  | 3671|   204k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   203k|            std::tie(it, prefix_width) = prefix_result;
 6140|   203k|        }
 6141|   203k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   203k|        std::ptrdiff_t value_width = 0;
 6145|   203k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 203k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   203k|        else {
 6161|   203k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.8k, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  60.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  60.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  60.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  60.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  60.8k|    }                                                  \
  |  | 3671|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   142k|                                             specs, value, loc));
 6163|       |
 6164|   142k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 142k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   142k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   142k|        std::ptrdiff_t postfix_width = 0;
 6173|   142k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 142k, False: 428]
  ------------------
 6174|   142k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   142k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   142k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   142k|                                 value_width));
 6178|   142k|            std::tie(it, postfix_width) = postfix_result;
 6179|   142k|        }
 6180|       |
 6181|   142k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   142k|                                                 value_width, postfix_width);
 6183|   142k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 142k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   142k|        return it;
 6188|   142k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   444k|    {
 3691|   444k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   444k|        const std::ptrdiff_t sign_len =
 3694|   444k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 2.16k, False: 442k]
  ------------------
 3695|       |
 3696|   444k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   444k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   444k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   444k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 43.8k, False: 401k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  43.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  43.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  43.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  43.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  43.8k|    }                                                  \
  |  |  |  | 3671|   444k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   401k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   444k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   203k|    {
 4170|   203k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   203k|#if !SCN_DISABLE_LOCALE
 4173|   203k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 50.7k, False: 152k]
  ------------------
 4174|  50.7k|            return read_impl<Range>(
 4175|  50.7k|                range, rd,
 4176|  50.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  50.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  50.7k|                },
 4179|  50.7k|                value, loc);
 4180|  50.7k|        }
 4181|   152k|#endif
 4182|       |
 4183|   152k|        return read_impl<Range>(
 4184|   152k|            range, rd,
 4185|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   152k|                return r.read_source(SCN_FWD(args)...);
 4187|   152k|            },
 4188|   152k|            value);
 4189|   203k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   279k|    {
 4206|   279k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   279k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 201k]
  |  |  ------------------
  ------------------
 4208|  77.8k|            return unexpected(r.error());
 4209|  77.8k|        }
 4210|       |
 4211|   201k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.18k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.18k|    }                                                  \
  |  |  |  | 3671|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   200k|        return ranges::next(range.begin(), n);
 4213|   201k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  50.7k|        : m_fptr([](storage fn,
  743|  50.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.7k|              cvref<T> obj = *get<T>(fn);
  745|  50.7k|              if constexpr (std::is_void_v<R>) {
  746|  50.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.7k|              }
  748|  50.7k|              else {
  749|  50.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.7k|              }
  751|  50.7k|          }),
  752|  50.7k|          m_storage(std::addressof(f))
  753|  50.7k|    {
  754|  50.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  50.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.7k|              else {
  749|  50.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.7k|              }
  751|  50.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  50.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.7k|        else if constexpr (std::is_object_v<T>) {
  688|  50.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  50.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  50.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  50.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  50.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  50.7k|        {
  662|  50.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   152k|        : m_fptr([](storage fn,
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|   152k|              if constexpr (std::is_void_v<R>) {
  746|   152k|                  obj(static_cast<decltype(args)>(args)...);
  747|   152k|              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
  752|   152k|          m_storage(std::addressof(f))
  753|   152k|    {
  754|   152k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   152k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   152k|        else if constexpr (std::is_object_v<T>) {
  688|   152k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   152k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   152k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   152k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   152k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   152k|        {
  662|   152k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   203k|    {
 4170|   203k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   203k|#if !SCN_DISABLE_LOCALE
 4173|   203k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 50.8k, False: 152k]
  ------------------
 4174|  50.8k|            return read_impl<Range>(
 4175|  50.8k|                range, rd,
 4176|  50.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  50.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  50.8k|                },
 4179|  50.8k|                value, loc);
 4180|  50.8k|        }
 4181|   152k|#endif
 4182|       |
 4183|   152k|        return read_impl<Range>(
 4184|   152k|            range, rd,
 4185|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   152k|                return r.read_source(SCN_FWD(args)...);
 4187|   152k|            },
 4188|   152k|            value);
 4189|   203k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   279k|    {
 4206|   279k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   279k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.3k, False: 243k]
  |  |  ------------------
  ------------------
 4208|  36.3k|            return unexpected(r.error());
 4209|  36.3k|        }
 4210|       |
 4211|   243k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.7k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  42.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  42.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  42.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  42.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  42.7k|    }                                                  \
  |  |  |  | 3671|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   200k|        return ranges::next(range.begin(), n);
 4213|   243k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  50.8k|        : m_fptr([](storage fn,
  743|  50.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.8k|              cvref<T> obj = *get<T>(fn);
  745|  50.8k|              if constexpr (std::is_void_v<R>) {
  746|  50.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.8k|              }
  748|  50.8k|              else {
  749|  50.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.8k|              }
  751|  50.8k|          }),
  752|  50.8k|          m_storage(std::addressof(f))
  753|  50.8k|    {
  754|  50.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  50.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.8k|              else {
  749|  50.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.8k|              }
  751|  50.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  50.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.8k|        else if constexpr (std::is_object_v<T>) {
  688|  50.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  50.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  50.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  50.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  50.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  50.8k|        {
  662|  50.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   152k|        : m_fptr([](storage fn,
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|   152k|              if constexpr (std::is_void_v<R>) {
  746|   152k|                  obj(static_cast<decltype(args)>(args)...);
  747|   152k|              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
  752|   152k|          m_storage(std::addressof(f))
  753|   152k|    {
  754|   152k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   152k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   152k|        else if constexpr (std::is_object_v<T>) {
  688|   152k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   152k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   152k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   152k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   152k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   152k|        {
  662|   152k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   207k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   207k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   207k|            auto rd = make_reader<T, char_type>();
 6206|   207k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 207k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   207k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 207k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   207k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   207k|                return impl(rd, range, value);
 6213|   207k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   207k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   207k|    {
 6124|   207k|        const bool need_skipped_width =
 6125|   207k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 207k]
  |  Branch (6125:33): [True: 0, False: 207k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   207k|        auto it = rng.begin();
 6129|   207k|        std::ptrdiff_t prefix_width = 0;
 6130|   207k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 207k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   207k|        else {
 6138|   207k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   206k|            std::tie(it, prefix_width) = prefix_result;
 6140|   206k|        }
 6141|   206k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   206k|        std::ptrdiff_t value_width = 0;
 6145|   206k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 206k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   206k|        else {
 6161|   206k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 145k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  60.7k|    }                                                  \
  |  | 3671|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   145k|                                             specs, value, loc));
 6163|       |
 6164|   145k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 145k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   145k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   145k|        std::ptrdiff_t postfix_width = 0;
 6173|   145k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 145k, False: 450]
  ------------------
 6174|   145k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   145k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   145k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   145k|                                 value_width));
 6178|   145k|            std::tie(it, postfix_width) = postfix_result;
 6179|   145k|        }
 6180|       |
 6181|   145k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   145k|                                                 value_width, postfix_width);
 6183|   145k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 145k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   145k|        return it;
 6188|   145k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   455k|    {
 3691|   455k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   455k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   455k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   455k|        const std::ptrdiff_t sign_len =
 3694|   455k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 2.17k, False: 453k]
  ------------------
 3695|       |
 3696|   455k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   455k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   455k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   455k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.4k, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  42.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  42.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  42.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  42.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  42.4k|    }                                                  \
  |  |  |  | 3671|   455k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   412k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   455k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   206k|    {
 4170|   206k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   206k|#if !SCN_DISABLE_LOCALE
 4173|   206k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 52.3k, False: 154k]
  ------------------
 4174|  52.3k|            return read_impl<Range>(
 4175|  52.3k|                range, rd,
 4176|  52.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  52.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  52.3k|                },
 4179|  52.3k|                value, loc);
 4180|  52.3k|        }
 4181|   154k|#endif
 4182|       |
 4183|   154k|        return read_impl<Range>(
 4184|   154k|            range, rd,
 4185|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   154k|                return r.read_source(SCN_FWD(args)...);
 4187|   154k|            },
 4188|   154k|            value);
 4189|   206k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   285k|    {
 4206|   285k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   285k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.7k, False: 206k]
  |  |  ------------------
  ------------------
 4208|  78.7k|            return unexpected(r.error());
 4209|  78.7k|        }
 4210|       |
 4211|   206k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   206k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 151, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    151|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    151|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    151|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    151|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    151|    }                                                  \
  |  |  |  | 3671|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   206k|        return ranges::next(range.begin(), n);
 4213|   206k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  52.3k|        : m_fptr([](storage fn,
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|  52.3k|              if constexpr (std::is_void_v<R>) {
  746|  52.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.3k|              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
  752|  52.3k|          m_storage(std::addressof(f))
  753|  52.3k|    {
  754|  52.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  52.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.3k|        else if constexpr (std::is_object_v<T>) {
  688|  52.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  52.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  52.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  52.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  52.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  52.3k|        {
  662|  52.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   154k|        : m_fptr([](storage fn,
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
  752|   154k|          m_storage(std::addressof(f))
  753|   154k|    {
  754|   154k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   154k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  688|   154k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   154k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   154k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   154k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   154k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   154k|        {
  662|   154k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   206k|    {
 4170|   206k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   206k|#if !SCN_DISABLE_LOCALE
 4173|   206k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 52.4k, False: 154k]
  ------------------
 4174|  52.4k|            return read_impl<Range>(
 4175|  52.4k|                range, rd,
 4176|  52.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  52.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  52.4k|                },
 4179|  52.4k|                value, loc);
 4180|  52.4k|        }
 4181|   154k|#endif
 4182|       |
 4183|   154k|        return read_impl<Range>(
 4184|   154k|            range, rd,
 4185|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   154k|                return r.read_source(SCN_FWD(args)...);
 4187|   154k|            },
 4188|   154k|            value);
 4189|   206k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   285k|    {
 4206|   285k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   285k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.6k, False: 248k]
  |  |  ------------------
  ------------------
 4208|  36.6k|            return unexpected(r.error());
 4209|  36.6k|        }
 4210|       |
 4211|   248k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.3k, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  42.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  42.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  42.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  42.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  42.3k|    }                                                  \
  |  |  |  | 3671|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   206k|        return ranges::next(range.begin(), n);
 4213|   248k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  52.4k|        : m_fptr([](storage fn,
  743|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.4k|              cvref<T> obj = *get<T>(fn);
  745|  52.4k|              if constexpr (std::is_void_v<R>) {
  746|  52.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.4k|              }
  748|  52.4k|              else {
  749|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.4k|              }
  751|  52.4k|          }),
  752|  52.4k|          m_storage(std::addressof(f))
  753|  52.4k|    {
  754|  52.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.4k|              else {
  749|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.4k|              }
  751|  52.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  52.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.4k|        else if constexpr (std::is_object_v<T>) {
  688|  52.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  52.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  52.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  52.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  52.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  52.4k|        {
  662|  52.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   154k|        : m_fptr([](storage fn,
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
  752|   154k|          m_storage(std::addressof(f))
  753|   154k|    {
  754|   154k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   154k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  688|   154k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   154k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   154k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   154k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   154k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   154k|        {
  662|   154k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   819k|{
 2061|   819k|    auto it = range.begin();
 2062|  1.41M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.41M, False: 3.37k]
  ------------------
 2063|  1.41M|        const auto val =
 2064|  1.41M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.41M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.41M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.41M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.41M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.41M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 816k, False: 599k]
  ------------------
 2069|   816k|                return it;
 2070|   816k|            }
 2071|  1.41M|        }
 2072|   599k|        it = val.iterator;
 2073|   599k|    }
 2074|       |
 2075|  3.37k|    return it;
 2076|   819k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.41M|{
 1899|  1.41M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.41M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.41M|    auto it = range.begin();
 1903|  1.41M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.41M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.41M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.41M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.41M, False: 0]
  ------------------
 1912|  1.41M|        ++it;
 1913|  1.41M|        return {it, string_type(1, *range.begin())};
 1914|  1.41M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.41M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  1.41M|    {
 1890|  1.41M|        return !codepoint.empty();
 1891|  1.41M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   819k|{
 2082|   819k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   819k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   819k|{
 2951|   819k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 819k, False: 0]
  ------------------
 2952|   819k|        auto it = read_while_classic_space(range);
 2953|   819k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   819k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   819k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 816k]
  |  |  ------------------
  ------------------
 2955|  3.37k|            return unexpected(e);
 2956|  3.37k|        }
 2957|       |
 2958|   816k|        return it;
 2959|   819k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   819k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   819k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   819k|    else {
 2126|   819k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   819k|        return read_while_code_point(
 2138|   819k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   819k|    }
 2140|   819k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   819k|        : m_fptr([](storage fn,
  743|   819k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   819k|              cvref<T> obj = *get<T>(fn);
  745|   819k|              if constexpr (std::is_void_v<R>) {
  746|   819k|                  obj(static_cast<decltype(args)>(args)...);
  747|   819k|              }
  748|   819k|              else {
  749|   819k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   819k|              }
  751|   819k|          }),
  752|   819k|          m_storage(std::addressof(f))
  753|   819k|    {
  754|   819k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.41M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.41M|              else {
  749|  1.41M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.41M|              }
  751|  1.41M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.41M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.41M|        else if constexpr (std::is_object_v<T>) {
  688|  1.41M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.41M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.41M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   819k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   819k|        {
  662|   819k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  1.37M|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|  1.37M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|  1.37M|        auto buf = make_contiguous_buffer(range);
 2092|  1.37M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.37M|        return ranges::next(range.begin(),
 2094|  1.37M|                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|       |    else {
 2097|       |        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|       |        return read_until_code_point(
 2109|       |            ranges::subrange{it, range.end()},
 2110|       |            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|       |    }
 2112|  1.37M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  1.37M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.37M|                  ranges::sized_range<Range>) {
 1686|  1.37M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.37M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1488|  1.37M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.37M|    {
 1490|  1.37M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|  1.37M|    {
 1577|  1.37M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.37M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  1.37M|    {
 1621|  1.37M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.37M|                                          std::basic_string<CharT>>) {
 1631|  1.37M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  1.37M|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.37M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   996k|    {
 4100|   996k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 99.5k, False: 897k]
  ------------------
 4101|  99.5k|            return std::copysign(value, T{-1.0});
 4102|  99.5k|        }
 4103|   897k|        return std::copysign(value, T{1.0});
 4104|   996k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   574k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|   574k|    else {
 2097|   574k|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|   574k|        return read_until_code_point(
 2109|   574k|            ranges::subrange{it, range.end()},
 2110|   574k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   574k|    }
 2112|   574k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   574k|        : m_fptr([](storage fn,
  743|   574k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   574k|              cvref<T> obj = *get<T>(fn);
  745|   574k|              if constexpr (std::is_void_v<R>) {
  746|   574k|                  obj(static_cast<decltype(args)>(args)...);
  747|   574k|              }
  748|   574k|              else {
  749|   574k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   574k|              }
  751|   574k|          }),
  752|   574k|          m_storage(std::addressof(f))
  753|   574k|    {
  754|   574k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.07M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.07M|              else {
  749|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.07M|              }
  751|  1.07M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.07M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.07M|        else if constexpr (std::is_object_v<T>) {
  688|  1.07M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.07M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|  1.07M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   574k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   574k|        {
  662|   574k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|   574k|    {
 1577|   574k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   574k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   574k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   574k|    {
 1621|   574k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   574k|                                          std::basic_string<CharT>>) {
 1631|   574k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   574k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   574k|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   574k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   390k|    {
 4100|   390k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.63k, False: 389k]
  ------------------
 4101|  1.63k|            return std::copysign(value, T{-1.0});
 4102|  1.63k|        }
 4103|   389k|        return std::copysign(value, T{1.0});
 4104|   390k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.03M|    {
 4100|  1.03M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 103k, False: 933k]
  ------------------
 4101|   103k|            return std::copysign(value, T{-1.0});
 4102|   103k|        }
 4103|   933k|        return std::copysign(value, T{1.0});
 4104|  1.03M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   444k|    {
 4100|   444k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.66k, False: 443k]
  ------------------
 4101|  1.66k|            return std::copysign(value, T{-1.0});
 4102|  1.66k|        }
 4103|   443k|        return std::copysign(value, T{1.0});
 4104|   444k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.04M|    {
 4100|  1.04M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 106k, False: 941k]
  ------------------
 4101|   106k|            return std::copysign(value, T{-1.0});
 4102|   106k|        }
 4103|   941k|        return std::copysign(value, T{1.0});
 4104|  1.04M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   455k|    {
 4100|   455k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.67k, False: 453k]
  ------------------
 4101|  1.67k|            return std::copysign(value, T{-1.0});
 4102|  1.67k|        }
 4103|   453k|        return std::copysign(value, T{1.0});
 4104|   455k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   443k|{
 5795|   443k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 438k]
  |  |  ------------------
  ------------------
 5796|  4.54k|        return unexpected(e);
 5797|  4.54k|    }
 5798|       |
 5799|   438k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 438k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   438k|    return skip_classic_whitespace(range);
 5804|   438k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   142k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   142k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   142k|            auto rd = make_reader<T, char_type>();
 5876|   142k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   142k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   142k|    {
 5863|   142k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.48k|    }                                                  \
  |  |  |  | 3671|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   141k|                        .transform_error(make_eof_scan_error));
 5865|   141k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   142k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   141k|    {
 4152|   141k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   141k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   141k|        float_reader<CharT> rd{};
 4155|   141k|        return read_impl<Range>(
 4156|   141k|            range, rd,
 4157|   141k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   141k|                return r.read_source(SCN_FWD(args)...);
 4159|   141k|            },
 4160|   141k|            value);
 4161|   141k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   919k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.35M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   141k|        : m_fptr([](storage fn,
  743|   141k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   141k|              cvref<T> obj = *get<T>(fn);
  745|   141k|              if constexpr (std::is_void_v<R>) {
  746|   141k|                  obj(static_cast<decltype(args)>(args)...);
  747|   141k|              }
  748|   141k|              else {
  749|   141k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   141k|              }
  751|   141k|          }),
  752|   141k|          m_storage(std::addressof(f))
  753|   141k|    {
  754|   141k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   141k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   141k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   141k|              else {
  749|   141k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   141k|              }
  751|   141k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   141k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   141k|        else if constexpr (std::is_object_v<T>) {
  688|   141k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   141k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   141k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   141k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   141k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   141k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   141k|        {
  662|   141k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   148k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   148k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   148k|            auto rd = make_reader<T, char_type>();
 5876|   148k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   148k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   148k|    {
 5863|   148k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.70k, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.70k|    }                                                  \
  |  |  |  | 3671|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   147k|                        .transform_error(make_eof_scan_error));
 5865|   147k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   148k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   147k|    {
 4152|   147k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   147k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   147k|        float_reader<CharT> rd{};
 4155|   147k|        return read_impl<Range>(
 4156|   147k|            range, rd,
 4157|   147k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   147k|                return r.read_source(SCN_FWD(args)...);
 4159|   147k|            },
 4160|   147k|            value);
 4161|   147k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   147k|        : m_fptr([](storage fn,
  743|   147k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   147k|              cvref<T> obj = *get<T>(fn);
  745|   147k|              if constexpr (std::is_void_v<R>) {
  746|   147k|                  obj(static_cast<decltype(args)>(args)...);
  747|   147k|              }
  748|   147k|              else {
  749|   147k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   147k|              }
  751|   147k|          }),
  752|   147k|          m_storage(std::addressof(f))
  753|   147k|    {
  754|   147k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   147k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   147k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   147k|              else {
  749|   147k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   147k|              }
  751|   147k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   147k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   147k|        else if constexpr (std::is_object_v<T>) {
  688|   147k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   147k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   147k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   147k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   147k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   147k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   147k|        {
  662|   147k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   151k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   151k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   151k|            auto rd = make_reader<T, char_type>();
 5876|   151k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   151k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   151k|    {
 5863|   151k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.84k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.84k|    }                                                  \
  |  |  |  | 3671|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   149k|                        .transform_error(make_eof_scan_error));
 5865|   149k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   151k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   149k|    {
 4152|   149k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   149k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   149k|        float_reader<CharT> rd{};
 4155|   149k|        return read_impl<Range>(
 4156|   149k|            range, rd,
 4157|   149k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   149k|                return r.read_source(SCN_FWD(args)...);
 4159|   149k|            },
 4160|   149k|            value);
 4161|   149k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   149k|        : m_fptr([](storage fn,
  743|   149k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   149k|              cvref<T> obj = *get<T>(fn);
  745|   149k|              if constexpr (std::is_void_v<R>) {
  746|   149k|                  obj(static_cast<decltype(args)>(args)...);
  747|   149k|              }
  748|   149k|              else {
  749|   149k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   149k|              }
  751|   149k|          }),
  752|   149k|          m_storage(std::addressof(f))
  753|   149k|    {
  754|   149k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   149k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   149k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   149k|              else {
  749|   149k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   149k|              }
  751|   149k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   149k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   149k|        else if constexpr (std::is_object_v<T>) {
  688|   149k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   149k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   149k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   149k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   149k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   149k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   149k|        {
  662|   149k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   486k|{
 5795|   486k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.74k, False: 482k]
  |  |  ------------------
  ------------------
 5796|  4.74k|        return unexpected(e);
 5797|  4.74k|    }
 5798|       |
 5799|   482k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 482k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   482k|    return skip_classic_whitespace(range);
 5804|   482k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   156k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   156k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   156k|            auto rd = make_reader<T, char_type>();
 5880|   156k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 156k, False: 0]
  ------------------
 5881|   156k|                return impl(rd, range, value);
 5882|   156k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   156k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   156k|    {
 5863|   156k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.56k|    }                                                  \
  |  |  |  | 3671|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   154k|                        .transform_error(make_eof_scan_error));
 5865|   154k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   156k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   154k|    {
 4152|   154k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   154k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   154k|        float_reader<CharT> rd{};
 4155|   154k|        return read_impl<Range>(
 4156|   154k|            range, rd,
 4157|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   154k|                return r.read_source(SCN_FWD(args)...);
 4159|   154k|            },
 4160|   154k|            value);
 4161|   154k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   154k|        : m_fptr([](storage fn,
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
  752|   154k|          m_storage(std::addressof(f))
  753|   154k|    {
  754|   154k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   154k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  688|   154k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   154k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   154k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   154k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   154k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   154k|        {
  662|   154k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   164k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   164k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   164k|            auto rd = make_reader<T, char_type>();
 5880|   164k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 164k, False: 0]
  ------------------
 5881|   164k|                return impl(rd, range, value);
 5882|   164k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   164k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   164k|    {
 5863|   164k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.80k, False: 162k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.80k|    }                                                  \
  |  |  |  | 3671|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   162k|                        .transform_error(make_eof_scan_error));
 5865|   162k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   164k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   162k|    {
 4152|   162k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   162k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   162k|        float_reader<CharT> rd{};
 4155|   162k|        return read_impl<Range>(
 4156|   162k|            range, rd,
 4157|   162k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   162k|                return r.read_source(SCN_FWD(args)...);
 4159|   162k|            },
 4160|   162k|            value);
 4161|   162k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   162k|        : m_fptr([](storage fn,
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|   162k|              if constexpr (std::is_void_v<R>) {
  746|   162k|                  obj(static_cast<decltype(args)>(args)...);
  747|   162k|              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
  752|   162k|          m_storage(std::addressof(f))
  753|   162k|    {
  754|   162k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   162k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   162k|        else if constexpr (std::is_object_v<T>) {
  688|   162k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   162k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   162k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   162k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   162k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   162k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   162k|        {
  662|   162k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   166k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   166k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   166k|            auto rd = make_reader<T, char_type>();
 5880|   166k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 166k, False: 0]
  ------------------
 5881|   166k|                return impl(rd, range, value);
 5882|   166k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   166k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   166k|    {
 5863|   166k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.93k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.93k|    }                                                  \
  |  |  |  | 3671|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   164k|                        .transform_error(make_eof_scan_error));
 5865|   164k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   166k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   164k|    {
 4152|   164k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   164k|        float_reader<CharT> rd{};
 4155|   164k|        return read_impl<Range>(
 4156|   164k|            range, rd,
 4157|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   164k|                return r.read_source(SCN_FWD(args)...);
 4159|   164k|            },
 4160|   164k|            value);
 4161|   164k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   164k|        : m_fptr([](storage fn,
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|   164k|              if constexpr (std::is_void_v<R>) {
  746|   164k|                  obj(static_cast<decltype(args)>(args)...);
  747|   164k|              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
  752|   164k|          m_storage(std::addressof(f))
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   164k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   164k|        else if constexpr (std::is_object_v<T>) {
  688|   164k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   164k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   164k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   164k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   164k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2875|  1.06M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|  1.06M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  1.06M|          m_current(m_range.begin())
 2878|  1.06M|    {
 2879|  1.06M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  3.10M|    {
 2883|  3.10M|        return m_current;
 2884|  3.10M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  2.04M|    {
 2888|  2.04M|        return m_range.end();
 2889|  2.04M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   973k|    {
 2903|   973k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   973k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   973k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   973k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   973k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 973k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   973k|        }
 2909|   973k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   973k|    static_cast<    \
  |  |  929|   973k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   973k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.06M|    {
 2893|  1.06M|        return ranges::subrange{begin(), end()};
 2894|  1.06M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.06M|    {
 6037|  1.06M|        const bool need_skipped_width =
 6038|  1.06M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.06M]
  |  Branch (6038:33): [True: 0, False: 1.06M]
  ------------------
 6039|  1.06M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.06M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.06M]
  ------------------
 6043|  1.06M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.06M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.06M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.06M, False: 0]
  |  Branch (6047:56): [True: 1.06M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.06M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.06M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  2.12M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.8k, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.8k|    }                                                  \
  |  |  |  | 3671|  1.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  2.12M|                            make_eof_scan_error));
 6058|       |
 6059|  2.12M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.05M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.05M|            return result_type{it, 0};
 6067|  2.12M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.06M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   962k|    {
 6079|   962k|        const bool need_skipped_width =
 6080|   962k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 962k]
  |  Branch (6080:33): [True: 0, False: 962k]
  ------------------
 6081|   962k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   962k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 962k]
  ------------------
 6084|   962k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 962k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   962k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 962k, False: 0]
  ------------------
 6093|   962k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 962k]
  ------------------
 6094|   962k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   962k|        return result_type{rng.begin(), 0};
 6118|   962k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   347k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   347k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   347k|            auto rd = make_reader<T, char_type>();
 6198|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   347k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   347k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   347k|    {
 6124|   347k|        const bool need_skipped_width =
 6125|   347k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 347k]
  |  Branch (6125:33): [True: 0, False: 347k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   347k|        auto it = rng.begin();
 6129|   347k|        std::ptrdiff_t prefix_width = 0;
 6130|   347k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 347k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   347k|        else {
 6138|   347k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.88k, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.88k|    }                                                  \
  |  |  |  | 3671|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   343k|            std::tie(it, prefix_width) = prefix_result;
 6140|   343k|        }
 6141|   343k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   343k|        std::ptrdiff_t value_width = 0;
 6145|   343k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 343k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   343k|        else {
 6161|   343k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.0k, False: 316k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  27.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  27.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  27.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  27.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  27.0k|    }                                                  \
  |  | 3671|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   316k|                                             specs, value, loc));
 6163|       |
 6164|   316k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 316k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   316k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   316k|        std::ptrdiff_t postfix_width = 0;
 6173|   316k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 312k, False: 3.46k]
  ------------------
 6174|   312k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   312k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   312k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   312k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   312k|                                 value_width));
 6178|   312k|            std::tie(it, postfix_width) = postfix_result;
 6179|   312k|        }
 6180|       |
 6181|   316k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   316k|                                                 value_width, postfix_width);
 6183|   316k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 316k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   316k|        return it;
 6188|   316k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   357k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   357k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   357k|            auto rd = make_reader<T, char_type>();
 6198|   357k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   357k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   357k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   357k|    {
 6124|   357k|        const bool need_skipped_width =
 6125|   357k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 357k]
  |  Branch (6125:33): [True: 0, False: 357k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   357k|        auto it = rng.begin();
 6129|   357k|        std::ptrdiff_t prefix_width = 0;
 6130|   357k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 357k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   357k|        else {
 6138|   357k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.33k, False: 353k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.33k|    }                                                  \
  |  |  |  | 3671|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   353k|            std::tie(it, prefix_width) = prefix_result;
 6140|   353k|        }
 6141|   353k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   353k|        std::ptrdiff_t value_width = 0;
 6145|   353k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 353k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   353k|        else {
 6161|   353k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.5k, False: 327k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  26.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  26.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  26.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  26.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  26.5k|    }                                                  \
  |  | 3671|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   327k|                                             specs, value, loc));
 6163|       |
 6164|   327k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 327k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   327k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   327k|        std::ptrdiff_t postfix_width = 0;
 6173|   327k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 323k, False: 3.87k]
  ------------------
 6174|   323k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   323k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   323k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   323k|                                 value_width));
 6178|   323k|            std::tie(it, postfix_width) = postfix_result;
 6179|   323k|        }
 6180|       |
 6181|   327k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   327k|                                                 value_width, postfix_width);
 6183|   327k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 327k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   327k|        return it;
 6188|   327k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   361k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   361k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   361k|            auto rd = make_reader<T, char_type>();
 6198|   361k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   361k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   361k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   361k|    {
 6124|   361k|        const bool need_skipped_width =
 6125|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 361k]
  |  Branch (6125:33): [True: 0, False: 361k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   361k|        auto it = rng.begin();
 6129|   361k|        std::ptrdiff_t prefix_width = 0;
 6130|   361k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 361k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   361k|        else {
 6138|   361k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.61k, False: 357k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.61k|    }                                                  \
  |  |  |  | 3671|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   357k|            std::tie(it, prefix_width) = prefix_result;
 6140|   357k|        }
 6141|   357k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   357k|        std::ptrdiff_t value_width = 0;
 6145|   357k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 357k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   357k|        else {
 6161|   357k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.2k, False: 330k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  26.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  26.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  26.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  26.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  26.2k|    }                                                  \
  |  | 3671|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   330k|                                             specs, value, loc));
 6163|       |
 6164|   330k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 330k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   330k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   330k|        std::ptrdiff_t postfix_width = 0;
 6173|   330k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 326k, False: 4.11k]
  ------------------
 6174|   326k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   326k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   326k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   326k|                                 value_width));
 6178|   326k|            std::tie(it, postfix_width) = postfix_result;
 6179|   326k|        }
 6180|       |
 6181|   330k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   330k|                                                 value_width, postfix_width);
 6183|   330k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 330k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   330k|        return it;
 6188|   330k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   220k|{
 5795|   220k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 219k]
  |  |  ------------------
  ------------------
 5796|    474|        return unexpected(e);
 5797|    474|    }
 5798|       |
 5799|   219k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 219k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   219k|    return skip_classic_whitespace(range);
 5804|   219k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  64.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  64.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  64.6k|            auto rd = make_reader<T, char_type>();
 5876|  64.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  64.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  64.6k|    {
 5863|  64.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  64.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  64.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  64.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 64.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    291|    }                                                  \
  |  |  |  | 3671|  64.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  64.3k|                        .transform_error(make_eof_scan_error));
 5865|  64.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  64.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  64.3k|    {
 4152|  64.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  64.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  64.3k|        float_reader<CharT> rd{};
 4155|  64.3k|        return read_impl<Range>(
 4156|  64.3k|            range, rd,
 4157|  64.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  64.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  64.3k|            },
 4160|  64.3k|            value);
 4161|  64.3k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   438k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  64.3k|        : m_fptr([](storage fn,
  743|  64.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.3k|              cvref<T> obj = *get<T>(fn);
  745|  64.3k|              if constexpr (std::is_void_v<R>) {
  746|  64.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  64.3k|              }
  748|  64.3k|              else {
  749|  64.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.3k|              }
  751|  64.3k|          }),
  752|  64.3k|          m_storage(std::addressof(f))
  753|  64.3k|    {
  754|  64.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  64.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  64.3k|              else {
  749|  64.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.3k|              }
  751|  64.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  64.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  64.3k|        else if constexpr (std::is_object_v<T>) {
  688|  64.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  64.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  64.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  64.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  64.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  64.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  64.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  64.3k|        {
  662|  64.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  76.5k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  76.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  76.5k|            auto rd = make_reader<T, char_type>();
 5876|  76.5k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  76.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  76.5k|    {
 5863|  76.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  76.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  76.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  76.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 76.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    330|    }                                                  \
  |  |  |  | 3671|  76.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  76.2k|                        .transform_error(make_eof_scan_error));
 5865|  76.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  76.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  76.2k|    {
 4152|  76.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  76.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  76.2k|        float_reader<CharT> rd{};
 4155|  76.2k|        return read_impl<Range>(
 4156|  76.2k|            range, rd,
 4157|  76.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  76.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  76.2k|            },
 4160|  76.2k|            value);
 4161|  76.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  76.2k|        : m_fptr([](storage fn,
  743|  76.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.2k|              cvref<T> obj = *get<T>(fn);
  745|  76.2k|              if constexpr (std::is_void_v<R>) {
  746|  76.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.2k|              }
  748|  76.2k|              else {
  749|  76.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.2k|              }
  751|  76.2k|          }),
  752|  76.2k|          m_storage(std::addressof(f))
  753|  76.2k|    {
  754|  76.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  76.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  76.2k|              else {
  749|  76.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.2k|              }
  751|  76.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  76.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  76.2k|        else if constexpr (std::is_object_v<T>) {
  688|  76.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  76.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  76.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  76.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  76.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  76.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  76.2k|        {
  662|  76.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  79.0k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  79.0k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  79.0k|            auto rd = make_reader<T, char_type>();
 5876|  79.0k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  79.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  79.0k|    {
 5863|  79.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  79.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  79.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  79.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    363|    }                                                  \
  |  |  |  | 3671|  79.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.6k|                        .transform_error(make_eof_scan_error));
 5865|  78.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  79.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  78.6k|    {
 4152|  78.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  78.6k|        float_reader<CharT> rd{};
 4155|  78.6k|        return read_impl<Range>(
 4156|  78.6k|            range, rd,
 4157|  78.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  78.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  78.6k|            },
 4160|  78.6k|            value);
 4161|  78.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  78.6k|        : m_fptr([](storage fn,
  743|  78.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.6k|              cvref<T> obj = *get<T>(fn);
  745|  78.6k|              if constexpr (std::is_void_v<R>) {
  746|  78.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  78.6k|              }
  748|  78.6k|              else {
  749|  78.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.6k|              }
  751|  78.6k|          }),
  752|  78.6k|          m_storage(std::addressof(f))
  753|  78.6k|    {
  754|  78.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  78.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  78.6k|              else {
  749|  78.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.6k|              }
  751|  78.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  78.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  78.6k|        else if constexpr (std::is_object_v<T>) {
  688|  78.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  78.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  78.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  78.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  78.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  78.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  78.6k|        {
  662|  78.6k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2875|   600k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   600k|    static_cast<    \
  |  |  929|   600k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   600k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   600k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   600k|          m_current(m_range.begin())
 2878|   600k|    {
 2879|   600k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.61M|    {
 2883|  1.61M|        return m_current;
 2884|  1.61M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.01M|    {
 2888|  1.01M|        return m_range.end();
 2889|  1.01M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   415k|    {
 2903|   415k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   415k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   415k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   415k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   415k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 415k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   415k|        }
 2909|   415k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   415k|    static_cast<    \
  |  |  929|   415k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   415k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   600k|    {
 2893|   600k|        return ranges::subrange{begin(), end()};
 2894|   600k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   600k|    {
 6037|   600k|        const bool need_skipped_width =
 6038|   600k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 600k]
  |  Branch (6038:33): [True: 0, False: 600k]
  ------------------
 6039|   600k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   600k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 600k]
  ------------------
 6043|   600k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 600k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   600k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 600k, False: 0]
  |  Branch (6047:56): [True: 600k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   600k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 600k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.19M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   600k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   600k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   600k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.86k, False: 597k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.86k|    }                                                  \
  |  |  |  | 3671|   600k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.19M|                            make_eof_scan_error));
 6058|       |
 6059|  1.19M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 597k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   597k|            return result_type{it, 0};
 6067|  1.19M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   600k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   413k|    {
 6079|   413k|        const bool need_skipped_width =
 6080|   413k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 413k]
  |  Branch (6080:33): [True: 0, False: 413k]
  ------------------
 6081|   413k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   413k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 413k]
  ------------------
 6084|   413k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 413k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   413k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 413k, False: 0]
  ------------------
 6093|   413k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 413k]
  ------------------
 6094|   413k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   413k|        return result_type{rng.begin(), 0};
 6118|   413k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   188k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   188k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   188k|            auto rd = make_reader<T, char_type>();
 6198|   188k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 188k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   188k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   188k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   188k|    {
 6124|   188k|        const bool need_skipped_width =
 6125|   188k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 188k]
  |  Branch (6125:33): [True: 0, False: 188k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   188k|        auto it = rng.begin();
 6129|   188k|        std::ptrdiff_t prefix_width = 0;
 6130|   188k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 188k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   188k|        else {
 6138|   188k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    894|    }                                                  \
  |  |  |  | 3671|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   187k|            std::tie(it, prefix_width) = prefix_result;
 6140|   187k|        }
 6141|   187k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   187k|        std::ptrdiff_t value_width = 0;
 6145|   187k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 187k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   187k|        else {
 6161|   187k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.8k, False: 126k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  60.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  60.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  60.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  60.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  60.8k|    }                                                  \
  |  | 3671|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   126k|                                             specs, value, loc));
 6163|       |
 6164|   126k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 126k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   126k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   126k|        std::ptrdiff_t postfix_width = 0;
 6173|   126k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 126k, False: 396]
  ------------------
 6174|   126k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   126k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   126k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   126k|                                 value_width));
 6178|   126k|            std::tie(it, postfix_width) = postfix_result;
 6179|   126k|        }
 6180|       |
 6181|   126k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   126k|                                                 value_width, postfix_width);
 6183|   126k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 126k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   126k|        return it;
 6188|   126k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   204k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   204k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   204k|            auto rd = make_reader<T, char_type>();
 6198|   204k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 204k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   204k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   204k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   204k|    {
 6124|   204k|        const bool need_skipped_width =
 6125|   204k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 204k]
  |  Branch (6125:33): [True: 0, False: 204k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   204k|        auto it = rng.begin();
 6129|   204k|        std::ptrdiff_t prefix_width = 0;
 6130|   204k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 204k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   204k|        else {
 6138|   204k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   204k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   204k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   204k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 962, False: 203k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    962|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    962|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    962|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    962|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    962|    }                                                  \
  |  |  |  | 3671|   204k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   203k|            std::tie(it, prefix_width) = prefix_result;
 6140|   203k|        }
 6141|   203k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   203k|        std::ptrdiff_t value_width = 0;
 6145|   203k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 203k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   203k|        else {
 6161|   203k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.8k, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  60.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  60.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  60.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  60.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  60.8k|    }                                                  \
  |  | 3671|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   142k|                                             specs, value, loc));
 6163|       |
 6164|   142k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 142k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   142k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   142k|        std::ptrdiff_t postfix_width = 0;
 6173|   142k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 142k, False: 428]
  ------------------
 6174|   142k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   142k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   142k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   142k|                                 value_width));
 6178|   142k|            std::tie(it, postfix_width) = postfix_result;
 6179|   142k|        }
 6180|       |
 6181|   142k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   142k|                                                 value_width, postfix_width);
 6183|   142k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 142k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   142k|        return it;
 6188|   142k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   207k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   207k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   207k|            auto rd = make_reader<T, char_type>();
 6198|   207k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 207k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   207k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   207k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   207k|    {
 6124|   207k|        const bool need_skipped_width =
 6125|   207k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 207k]
  |  Branch (6125:33): [True: 0, False: 207k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   207k|        auto it = rng.begin();
 6129|   207k|        std::ptrdiff_t prefix_width = 0;
 6130|   207k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 207k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   207k|        else {
 6138|   207k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   206k|            std::tie(it, prefix_width) = prefix_result;
 6140|   206k|        }
 6141|   206k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   206k|        std::ptrdiff_t value_width = 0;
 6145|   206k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 206k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   206k|        else {
 6161|   206k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 145k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  60.7k|    }                                                  \
  |  | 3671|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   145k|                                             specs, value, loc));
 6163|       |
 6164|   145k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 145k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   145k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   145k|        std::ptrdiff_t postfix_width = 0;
 6173|   145k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 145k, False: 450]
  ------------------
 6174|   145k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   145k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   145k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   145k|                                 value_width));
 6178|   145k|            std::tie(it, postfix_width) = postfix_result;
 6179|   145k|        }
 6180|       |
 6181|   145k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   145k|                                                 value_width, postfix_width);
 6183|   145k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 145k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   145k|        return it;
 6188|   145k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   219k|{
 5795|   219k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 219k]
  |  |  ------------------
  ------------------
 5796|    474|        return unexpected(e);
 5797|    474|    }
 5798|       |
 5799|   219k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 219k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   219k|    return skip_classic_whitespace(range);
 5804|   219k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  64.5k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  64.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  64.5k|            auto rd = make_reader<T, char_type>();
 5880|  64.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 64.5k, False: 0]
  ------------------
 5881|  64.5k|                return impl(rd, range, value);
 5882|  64.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  64.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  64.5k|    {
 5863|  64.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  64.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  64.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  64.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 64.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    291|    }                                                  \
  |  |  |  | 3671|  64.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  64.2k|                        .transform_error(make_eof_scan_error));
 5865|  64.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  64.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  64.2k|    {
 4152|  64.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  64.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  64.2k|        float_reader<CharT> rd{};
 4155|  64.2k|        return read_impl<Range>(
 4156|  64.2k|            range, rd,
 4157|  64.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  64.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  64.2k|            },
 4160|  64.2k|            value);
 4161|  64.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  64.2k|        : m_fptr([](storage fn,
  743|  64.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.2k|              cvref<T> obj = *get<T>(fn);
  745|  64.2k|              if constexpr (std::is_void_v<R>) {
  746|  64.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  64.2k|              }
  748|  64.2k|              else {
  749|  64.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.2k|              }
  751|  64.2k|          }),
  752|  64.2k|          m_storage(std::addressof(f))
  753|  64.2k|    {
  754|  64.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  64.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  64.2k|              else {
  749|  64.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.2k|              }
  751|  64.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  64.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  64.2k|        else if constexpr (std::is_object_v<T>) {
  688|  64.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  64.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  64.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  64.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  64.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  64.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  64.2k|        {
  662|  64.2k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  76.4k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  76.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  76.4k|            auto rd = make_reader<T, char_type>();
 5880|  76.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 76.4k, False: 0]
  ------------------
 5881|  76.4k|                return impl(rd, range, value);
 5882|  76.4k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  76.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  76.4k|    {
 5863|  76.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  76.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  76.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  76.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 76.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    330|    }                                                  \
  |  |  |  | 3671|  76.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  76.1k|                        .transform_error(make_eof_scan_error));
 5865|  76.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  76.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  76.1k|    {
 4152|  76.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  76.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  76.1k|        float_reader<CharT> rd{};
 4155|  76.1k|        return read_impl<Range>(
 4156|  76.1k|            range, rd,
 4157|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  76.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  76.1k|            },
 4160|  76.1k|            value);
 4161|  76.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  76.1k|        : m_fptr([](storage fn,
  743|  76.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.1k|              cvref<T> obj = *get<T>(fn);
  745|  76.1k|              if constexpr (std::is_void_v<R>) {
  746|  76.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.1k|              }
  748|  76.1k|              else {
  749|  76.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.1k|              }
  751|  76.1k|          }),
  752|  76.1k|          m_storage(std::addressof(f))
  753|  76.1k|    {
  754|  76.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  76.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  76.1k|              else {
  749|  76.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.1k|              }
  751|  76.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  76.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  76.1k|        else if constexpr (std::is_object_v<T>) {
  688|  76.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  76.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  76.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  76.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  76.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  76.1k|        {
  662|  76.1k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  78.9k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  78.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  78.9k|            auto rd = make_reader<T, char_type>();
 5880|  78.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 78.9k, False: 0]
  ------------------
 5881|  78.9k|                return impl(rd, range, value);
 5882|  78.9k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  78.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  78.9k|    {
 5863|  78.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  78.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    363|    }                                                  \
  |  |  |  | 3671|  78.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  78.5k|                        .transform_error(make_eof_scan_error));
 5865|  78.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  78.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  78.5k|    {
 4152|  78.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  78.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  78.5k|        float_reader<CharT> rd{};
 4155|  78.5k|        return read_impl<Range>(
 4156|  78.5k|            range, rd,
 4157|  78.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  78.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  78.5k|            },
 4160|  78.5k|            value);
 4161|  78.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  78.5k|        : m_fptr([](storage fn,
  743|  78.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.5k|              cvref<T> obj = *get<T>(fn);
  745|  78.5k|              if constexpr (std::is_void_v<R>) {
  746|  78.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  78.5k|              }
  748|  78.5k|              else {
  749|  78.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.5k|              }
  751|  78.5k|          }),
  752|  78.5k|          m_storage(std::addressof(f))
  753|  78.5k|    {
  754|  78.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  78.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  78.5k|              else {
  749|  78.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.5k|              }
  751|  78.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  78.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  78.5k|        else if constexpr (std::is_object_v<T>) {
  688|  78.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  78.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  78.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  78.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  78.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  78.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  78.5k|        {
  662|  78.5k|        }

LLVMFuzzerTestOneInput:
   54|  3.08k|{
   55|  3.08k|    scn::fuzz::run(data, size);
   56|  3.08k|    return 0;
   57|  3.08k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.08k|{
   33|  3.08k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.08k]
  |  Branch (33:35): [True: 0, False: 3.08k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.08k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.08k|    const auto& f =
   40|  3.08k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.08k|    do_basic_run(sv, f);
   42|       |
   43|  3.08k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.08k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.08k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.08k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.08k, False: 0]
  ------------------
   47|  3.08k|        do_basic_run(wsv_transcode, wf);
   48|  3.08k|    }
   49|  3.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.08k|{
   25|  3.08k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.08k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.08k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.08k|{
   25|  3.08k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.08k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.08k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.17k|{
   25|  6.17k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.17k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.17k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.17k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.17k|{
   25|  6.17k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.17k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.17k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.17k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.08k|{
   52|  3.08k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.08k|    string_buffer.resize(size);
   56|  3.08k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.08k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.08k|    const auto wsv_reinterpret_size =
   61|  3.08k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 71, False: 3.01k]
  ------------------
   62|  3.08k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.08k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.08k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.08k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.08k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.08k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.08k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.08k|{
  122|  3.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.08k|    buf.resize(sizeof...(Args));
  125|  3.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.08k|    return buf;
  127|  3.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.08k|{
  108|  3.08k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  3.08k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  3.08k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.08k|{
  185|  3.08k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.08k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.08k|                                   format_strings);
  188|  3.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.08k|{
  133|       |    // Regular scan
  134|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.5k, False: 3.08k]
  ------------------
  135|  18.5k|        auto it = scn::ranges::begin(source);
  136|   221k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   221k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   221k|            auto result = scn::scan<T>(
  139|   221k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   221k|                scn::runtime_format(f));
  141|   221k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.5k, False: 202k]
  ------------------
  142|  18.5k|                break;
  143|  18.5k|            }
  144|   202k|            it = result->begin();
  145|   202k|        }
  146|  18.5k|    }
  147|       |
  148|       |    // scan localized
  149|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.5k, False: 3.08k]
  ------------------
  150|  18.5k|        auto it = scn::ranges::begin(source);
  151|   221k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   221k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   221k|            auto result = scn::scan<T>(
  154|   221k|                global_locale,
  155|   221k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   221k|                scn::runtime_format(f));
  157|   221k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.5k, False: 202k]
  ------------------
  158|  18.5k|                break;
  159|  18.5k|            }
  160|   202k|            it = result->begin();
  161|   202k|        }
  162|  18.5k|    }
  163|       |
  164|       |    // scan_value
  165|  3.08k|    {
  166|  3.08k|        auto it = scn::ranges::begin(source);
  167|  47.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  47.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  47.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  47.6k|            auto result = scn::scan_value<T>(
  170|  47.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  47.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.08k, False: 44.5k]
  ------------------
  172|  3.08k|                break;
  173|  3.08k|            }
  174|  44.5k|            it = result->begin();
  175|  44.5k|        }
  176|  3.08k|    }
  177|  3.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.08k|{
  133|       |    // Regular scan
  134|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.5k, False: 3.08k]
  ------------------
  135|  18.5k|        auto it = scn::ranges::begin(source);
  136|   228k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   228k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   228k|            auto result = scn::scan<T>(
  139|   228k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   228k|                scn::runtime_format(f));
  141|   228k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.5k, False: 210k]
  ------------------
  142|  18.5k|                break;
  143|  18.5k|            }
  144|   210k|            it = result->begin();
  145|   210k|        }
  146|  18.5k|    }
  147|       |
  148|       |    // scan localized
  149|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.5k, False: 3.08k]
  ------------------
  150|  18.5k|        auto it = scn::ranges::begin(source);
  151|   228k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   228k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   228k|            auto result = scn::scan<T>(
  154|   228k|                global_locale,
  155|   228k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   228k|                scn::runtime_format(f));
  157|   228k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.5k, False: 210k]
  ------------------
  158|  18.5k|                break;
  159|  18.5k|            }
  160|   210k|            it = result->begin();
  161|   210k|        }
  162|  18.5k|    }
  163|       |
  164|       |    // scan_value
  165|  3.08k|    {
  166|  3.08k|        auto it = scn::ranges::begin(source);
  167|  49.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  49.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  49.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  49.6k|            auto result = scn::scan_value<T>(
  170|  49.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  49.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.08k, False: 46.5k]
  ------------------
  172|  3.08k|                break;
  173|  3.08k|            }
  174|  46.5k|            it = result->begin();
  175|  46.5k|        }
  176|  3.08k|    }
  177|  3.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.08k|{
  133|       |    // Regular scan
  134|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.5k, False: 3.08k]
  ------------------
  135|  18.5k|        auto it = scn::ranges::begin(source);
  136|   231k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   231k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   231k|            auto result = scn::scan<T>(
  139|   231k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   231k|                scn::runtime_format(f));
  141|   231k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.5k, False: 212k]
  ------------------
  142|  18.5k|                break;
  143|  18.5k|            }
  144|   212k|            it = result->begin();
  145|   212k|        }
  146|  18.5k|    }
  147|       |
  148|       |    // scan localized
  149|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.5k, False: 3.08k]
  ------------------
  150|  18.5k|        auto it = scn::ranges::begin(source);
  151|   231k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   231k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   231k|            auto result = scn::scan<T>(
  154|   231k|                global_locale,
  155|   231k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   231k|                scn::runtime_format(f));
  157|   231k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.5k, False: 212k]
  ------------------
  158|  18.5k|                break;
  159|  18.5k|            }
  160|   212k|            it = result->begin();
  161|   212k|        }
  162|  18.5k|    }
  163|       |
  164|       |    // scan_value
  165|  3.08k|    {
  166|  3.08k|        auto it = scn::ranges::begin(source);
  167|  50.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  50.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  50.5k|            auto result = scn::scan_value<T>(
  170|  50.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  50.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.08k, False: 47.4k]
  ------------------
  172|  3.08k|                break;
  173|  3.08k|            }
  174|  47.4k|            it = result->begin();
  175|  47.4k|        }
  176|  3.08k|    }
  177|  3.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.08k|{
  133|       |    // Regular scan
  134|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.5k, False: 3.08k]
  ------------------
  135|  18.5k|        auto it = scn::ranges::begin(source);
  136|   256k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   256k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   256k|            auto result = scn::scan<T>(
  139|   256k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   256k|                scn::runtime_format(f));
  141|   256k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.5k, False: 237k]
  ------------------
  142|  18.5k|                break;
  143|  18.5k|            }
  144|   237k|            it = result->begin();
  145|   237k|        }
  146|  18.5k|    }
  147|       |
  148|       |    // scan localized
  149|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.5k, False: 3.08k]
  ------------------
  150|  18.5k|        auto it = scn::ranges::begin(source);
  151|   256k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   256k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   256k|            auto result = scn::scan<T>(
  154|   256k|                global_locale,
  155|   256k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   256k|                scn::runtime_format(f));
  157|   256k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.5k, False: 237k]
  ------------------
  158|  18.5k|                break;
  159|  18.5k|            }
  160|   237k|            it = result->begin();
  161|   237k|        }
  162|  18.5k|    }
  163|       |
  164|       |    // scan_value
  165|  3.08k|    {
  166|  3.08k|        auto it = scn::ranges::begin(source);
  167|  52.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  52.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  52.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  52.1k|            auto result = scn::scan_value<T>(
  170|  52.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  52.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.08k, False: 49.0k]
  ------------------
  172|  3.08k|                break;
  173|  3.08k|            }
  174|  49.0k|            it = result->begin();
  175|  49.0k|        }
  176|  3.08k|    }
  177|  3.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.08k|{
  133|       |    // Regular scan
  134|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.5k, False: 3.08k]
  ------------------
  135|  18.5k|        auto it = scn::ranges::begin(source);
  136|   268k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   268k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   268k|            auto result = scn::scan<T>(
  139|   268k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   268k|                scn::runtime_format(f));
  141|   268k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.5k, False: 249k]
  ------------------
  142|  18.5k|                break;
  143|  18.5k|            }
  144|   249k|            it = result->begin();
  145|   249k|        }
  146|  18.5k|    }
  147|       |
  148|       |    // scan localized
  149|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.5k, False: 3.08k]
  ------------------
  150|  18.5k|        auto it = scn::ranges::begin(source);
  151|   268k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   268k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   268k|            auto result = scn::scan<T>(
  154|   268k|                global_locale,
  155|   268k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   268k|                scn::runtime_format(f));
  157|   268k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.5k, False: 249k]
  ------------------
  158|  18.5k|                break;
  159|  18.5k|            }
  160|   249k|            it = result->begin();
  161|   249k|        }
  162|  18.5k|    }
  163|       |
  164|       |    // scan_value
  165|  3.08k|    {
  166|  3.08k|        auto it = scn::ranges::begin(source);
  167|  54.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  54.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  54.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  54.7k|            auto result = scn::scan_value<T>(
  170|  54.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  54.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.08k, False: 51.7k]
  ------------------
  172|  3.08k|                break;
  173|  3.08k|            }
  174|  51.7k|            it = result->begin();
  175|  51.7k|        }
  176|  3.08k|    }
  177|  3.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.08k|{
  133|       |    // Regular scan
  134|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.5k, False: 3.08k]
  ------------------
  135|  18.5k|        auto it = scn::ranges::begin(source);
  136|   270k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   270k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   270k|            auto result = scn::scan<T>(
  139|   270k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   270k|                scn::runtime_format(f));
  141|   270k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.5k, False: 252k]
  ------------------
  142|  18.5k|                break;
  143|  18.5k|            }
  144|   252k|            it = result->begin();
  145|   252k|        }
  146|  18.5k|    }
  147|       |
  148|       |    // scan localized
  149|  18.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.5k, False: 3.08k]
  ------------------
  150|  18.5k|        auto it = scn::ranges::begin(source);
  151|   270k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   270k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   270k|            auto result = scn::scan<T>(
  154|   270k|                global_locale,
  155|   270k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   270k|                scn::runtime_format(f));
  157|   270k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.5k, False: 252k]
  ------------------
  158|  18.5k|                break;
  159|  18.5k|            }
  160|   252k|            it = result->begin();
  161|   252k|        }
  162|  18.5k|    }
  163|       |
  164|       |    // scan_value
  165|  3.08k|    {
  166|  3.08k|        auto it = scn::ranges::begin(source);
  167|  55.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.3k|            auto result = scn::scan_value<T>(
  170|  55.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.08k, False: 52.2k]
  ------------------
  172|  3.08k|                break;
  173|  3.08k|            }
  174|  52.2k|            it = result->begin();
  175|  52.2k|        }
  176|  3.08k|    }
  177|  3.08k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.08k|{
   90|  3.08k|    using char_type = ranges::range_value_t<Source>;
   91|  3.08k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.08k|    deque.clear();
   93|  3.08k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.08k|              std::back_inserter(deque));
   95|  3.08k|    return deque;
   96|  3.08k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.08k|{
   79|  3.08k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  3.08k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  3.08k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.08k|{
  122|  3.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.08k|    buf.resize(sizeof...(Args));
  125|  3.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.08k|    return buf;
  127|  3.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.08k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  3.08k|    else {
  112|  3.08k|        return wformat_string_view_buffer;
  113|  3.08k|    }
  114|  3.08k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.17k|{
  185|  6.17k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.17k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.17k|                                   format_strings);
  188|  6.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.17k|{
  133|       |    // Regular scan
  134|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 37.0k, False: 6.17k]
  ------------------
  135|  37.0k|        auto it = scn::ranges::begin(source);
  136|   115k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   115k|            auto result = scn::scan<T>(
  139|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   115k|                scn::runtime_format(f));
  141|   115k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 37.0k, False: 78.6k]
  ------------------
  142|  37.0k|                break;
  143|  37.0k|            }
  144|  78.6k|            it = result->begin();
  145|  78.6k|        }
  146|  37.0k|    }
  147|       |
  148|       |    // scan localized
  149|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 37.0k, False: 6.17k]
  ------------------
  150|  37.0k|        auto it = scn::ranges::begin(source);
  151|   115k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   115k|            auto result = scn::scan<T>(
  154|   115k|                global_locale,
  155|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   115k|                scn::runtime_format(f));
  157|   115k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 37.0k, False: 78.6k]
  ------------------
  158|  37.0k|                break;
  159|  37.0k|            }
  160|  78.6k|            it = result->begin();
  161|  78.6k|        }
  162|  37.0k|    }
  163|       |
  164|       |    // scan_value
  165|  6.17k|    {
  166|  6.17k|        auto it = scn::ranges::begin(source);
  167|  21.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  21.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  21.5k|            auto result = scn::scan_value<T>(
  170|  21.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  21.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.17k, False: 15.3k]
  ------------------
  172|  6.17k|                break;
  173|  6.17k|            }
  174|  15.3k|            it = result->begin();
  175|  15.3k|        }
  176|  6.17k|    }
  177|  6.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.17k|{
  133|       |    // Regular scan
  134|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 37.0k, False: 6.17k]
  ------------------
  135|  37.0k|        auto it = scn::ranges::begin(source);
  136|   127k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   127k|            auto result = scn::scan<T>(
  139|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   127k|                scn::runtime_format(f));
  141|   127k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 37.0k, False: 90.6k]
  ------------------
  142|  37.0k|                break;
  143|  37.0k|            }
  144|  90.6k|            it = result->begin();
  145|  90.6k|        }
  146|  37.0k|    }
  147|       |
  148|       |    // scan localized
  149|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 37.0k, False: 6.17k]
  ------------------
  150|  37.0k|        auto it = scn::ranges::begin(source);
  151|   127k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   127k|            auto result = scn::scan<T>(
  154|   127k|                global_locale,
  155|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   127k|                scn::runtime_format(f));
  157|   127k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 37.0k, False: 90.6k]
  ------------------
  158|  37.0k|                break;
  159|  37.0k|            }
  160|  90.6k|            it = result->begin();
  161|  90.6k|        }
  162|  37.0k|    }
  163|       |
  164|       |    // scan_value
  165|  6.17k|    {
  166|  6.17k|        auto it = scn::ranges::begin(source);
  167|  25.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  25.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  25.5k|            auto result = scn::scan_value<T>(
  170|  25.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  25.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.17k, False: 19.3k]
  ------------------
  172|  6.17k|                break;
  173|  6.17k|            }
  174|  19.3k|            it = result->begin();
  175|  19.3k|        }
  176|  6.17k|    }
  177|  6.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.17k|{
  133|       |    // Regular scan
  134|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 37.0k, False: 6.17k]
  ------------------
  135|  37.0k|        auto it = scn::ranges::begin(source);
  136|   130k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   130k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   130k|            auto result = scn::scan<T>(
  139|   130k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   130k|                scn::runtime_format(f));
  141|   130k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 37.0k, False: 93.1k]
  ------------------
  142|  37.0k|                break;
  143|  37.0k|            }
  144|  93.1k|            it = result->begin();
  145|  93.1k|        }
  146|  37.0k|    }
  147|       |
  148|       |    // scan localized
  149|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 37.0k, False: 6.17k]
  ------------------
  150|  37.0k|        auto it = scn::ranges::begin(source);
  151|   130k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   130k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   130k|            auto result = scn::scan<T>(
  154|   130k|                global_locale,
  155|   130k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   130k|                scn::runtime_format(f));
  157|   130k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 37.0k, False: 93.1k]
  ------------------
  158|  37.0k|                break;
  159|  37.0k|            }
  160|  93.1k|            it = result->begin();
  161|  93.1k|        }
  162|  37.0k|    }
  163|       |
  164|       |    // scan_value
  165|  6.17k|    {
  166|  6.17k|        auto it = scn::ranges::begin(source);
  167|  26.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.3k|            auto result = scn::scan_value<T>(
  170|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.17k, False: 20.1k]
  ------------------
  172|  6.17k|                break;
  173|  6.17k|            }
  174|  20.1k|            it = result->begin();
  175|  20.1k|        }
  176|  6.17k|    }
  177|  6.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.17k|{
  133|       |    // Regular scan
  134|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 37.0k, False: 6.17k]
  ------------------
  135|  37.0k|        auto it = scn::ranges::begin(source);
  136|   115k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   115k|            auto result = scn::scan<T>(
  139|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   115k|                scn::runtime_format(f));
  141|   115k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 37.0k, False: 78.5k]
  ------------------
  142|  37.0k|                break;
  143|  37.0k|            }
  144|  78.5k|            it = result->begin();
  145|  78.5k|        }
  146|  37.0k|    }
  147|       |
  148|       |    // scan localized
  149|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 37.0k, False: 6.17k]
  ------------------
  150|  37.0k|        auto it = scn::ranges::begin(source);
  151|   115k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   115k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   115k|            auto result = scn::scan<T>(
  154|   115k|                global_locale,
  155|   115k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   115k|                scn::runtime_format(f));
  157|   115k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 37.0k, False: 78.5k]
  ------------------
  158|  37.0k|                break;
  159|  37.0k|            }
  160|  78.5k|            it = result->begin();
  161|  78.5k|        }
  162|  37.0k|    }
  163|       |
  164|       |    // scan_value
  165|  6.17k|    {
  166|  6.17k|        auto it = scn::ranges::begin(source);
  167|  21.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  21.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  21.5k|            auto result = scn::scan_value<T>(
  170|  21.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  21.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.17k, False: 15.3k]
  ------------------
  172|  6.17k|                break;
  173|  6.17k|            }
  174|  15.3k|            it = result->begin();
  175|  15.3k|        }
  176|  6.17k|    }
  177|  6.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.17k|{
  133|       |    // Regular scan
  134|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 37.0k, False: 6.17k]
  ------------------
  135|  37.0k|        auto it = scn::ranges::begin(source);
  136|   127k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   127k|            auto result = scn::scan<T>(
  139|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   127k|                scn::runtime_format(f));
  141|   127k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 37.0k, False: 90.5k]
  ------------------
  142|  37.0k|                break;
  143|  37.0k|            }
  144|  90.5k|            it = result->begin();
  145|  90.5k|        }
  146|  37.0k|    }
  147|       |
  148|       |    // scan localized
  149|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 37.0k, False: 6.17k]
  ------------------
  150|  37.0k|        auto it = scn::ranges::begin(source);
  151|   127k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   127k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   127k|            auto result = scn::scan<T>(
  154|   127k|                global_locale,
  155|   127k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   127k|                scn::runtime_format(f));
  157|   127k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 37.0k, False: 90.5k]
  ------------------
  158|  37.0k|                break;
  159|  37.0k|            }
  160|  90.5k|            it = result->begin();
  161|  90.5k|        }
  162|  37.0k|    }
  163|       |
  164|       |    // scan_value
  165|  6.17k|    {
  166|  6.17k|        auto it = scn::ranges::begin(source);
  167|  25.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  25.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  25.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  25.4k|            auto result = scn::scan_value<T>(
  170|  25.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  25.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.17k, False: 19.3k]
  ------------------
  172|  6.17k|                break;
  173|  6.17k|            }
  174|  19.3k|            it = result->begin();
  175|  19.3k|        }
  176|  6.17k|    }
  177|  6.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.17k|{
  133|       |    // Regular scan
  134|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 37.0k, False: 6.17k]
  ------------------
  135|  37.0k|        auto it = scn::ranges::begin(source);
  136|   130k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   130k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   130k|            auto result = scn::scan<T>(
  139|   130k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   130k|                scn::runtime_format(f));
  141|   130k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 37.0k, False: 93.0k]
  ------------------
  142|  37.0k|                break;
  143|  37.0k|            }
  144|  93.0k|            it = result->begin();
  145|  93.0k|        }
  146|  37.0k|    }
  147|       |
  148|       |    // scan localized
  149|  37.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 37.0k, False: 6.17k]
  ------------------
  150|  37.0k|        auto it = scn::ranges::begin(source);
  151|   130k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   130k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   130k|            auto result = scn::scan<T>(
  154|   130k|                global_locale,
  155|   130k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   130k|                scn::runtime_format(f));
  157|   130k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 37.0k, False: 93.0k]
  ------------------
  158|  37.0k|                break;
  159|  37.0k|            }
  160|  93.0k|            it = result->begin();
  161|  93.0k|        }
  162|  37.0k|    }
  163|       |
  164|       |    // scan_value
  165|  6.17k|    {
  166|  6.17k|        auto it = scn::ranges::begin(source);
  167|  26.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.3k|            auto result = scn::scan_value<T>(
  170|  26.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.17k, False: 20.1k]
  ------------------
  172|  6.17k|                break;
  173|  6.17k|            }
  174|  20.1k|            it = result->begin();
  175|  20.1k|        }
  176|  6.17k|    }
  177|  6.17k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.17k|{
   90|  6.17k|    using char_type = ranges::range_value_t<Source>;
   91|  6.17k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.17k|    deque.clear();
   93|  6.17k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.17k|              std::back_inserter(deque));
   95|  6.17k|    return deque;
   96|  6.17k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.17k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  6.17k|    else {
   83|  6.17k|        return wnoncontiguous_buffer;
   84|  6.17k|    }
   85|  6.17k|}

