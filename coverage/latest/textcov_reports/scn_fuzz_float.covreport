_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.02M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.02M|  chars_format const fmt = options.format;
  277|  1.02M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.02M|  parsed_number_string_t<UC> answer;
  280|  1.02M|  answer.valid = false;
  281|  1.02M|  answer.too_many_digits = false;
  282|  1.02M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.02M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.02M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.02M|  UC const * const start_digits = p;
  303|       |
  304|  1.02M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  6.29M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 6.01M, False: 281k]
  |  Branch (306:25): [True: 5.27M, False: 743k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  5.27M|    i = 10 * i +
  310|  5.27M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  5.27M|    ++p;
  312|  5.27M|  }
  313|  1.02M|  UC const * const end_of_integer_part = p;
  314|  1.02M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.02M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.02M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  1.02M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.02M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.02M|  int64_t exponent = 0;
  324|  1.02M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 743k, False: 281k]
  |  Branch (324:49): [True: 143k, False: 599k]
  ------------------
  325|  1.02M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 143k, False: 881k]
  ------------------
  326|   143k|    ++p;
  327|   143k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   143k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   594k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 546k, False: 47.3k]
  |  Branch (332:27): [True: 450k, False: 96.3k]
  ------------------
  333|   450k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   450k|      ++p;
  335|   450k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   450k|    }
  337|   143k|    exponent = before - p;
  338|   143k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   143k|    digit_count -= exponent;
  340|   143k|  }
  341|  1.02M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  1.02M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.02M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.02M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.02M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.02M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.02M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 897k, False: 128k]
  ------------------
  352|  1.02M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 696k, False: 201k]
  ------------------
  353|  1.02M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 102k, False: 593k]
  |  Branch (353:29): [True: 29.8k, False: 563k]
  ------------------
  354|  1.02M|       ||
  355|  1.02M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|   892k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 892k]
  ------------------
  356|   892k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   892k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   132k|    UC const * location_of_e = p;
  359|   132k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 102k, False: 29.8k]
  |  Branch (359:28): [True: 29.8k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   132k|      ++p;
  361|   132k|    }
  362|   132k|    bool neg_exp = false;
  363|   132k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 132k, False: 260]
  |  Branch (363:24): [True: 12.8k, False: 119k]
  ------------------
  364|  12.8k|      neg_exp = true;
  365|  12.8k|      ++p;
  366|   119k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 119k, False: 260]
  |  Branch (366:31): [True: 24.4k, False: 94.9k]
  ------------------
  367|  24.4k|      ++p;
  368|  24.4k|    }
  369|   132k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 290, False: 132k]
  |  Branch (369:24): [True: 730, False: 131k]
  ------------------
  370|  1.02k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.02k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.02k|      p = location_of_e;
  376|   131k|    } else {
  377|   462k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 418k, False: 43.5k]
  |  Branch (377:29): [True: 330k, False: 88.0k]
  ------------------
  378|   330k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   330k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 291k, False: 39.4k]
  ------------------
  380|   291k|          exp_number = 10 * exp_number + digit;
  381|   291k|        }
  382|   330k|        ++p;
  383|   330k|      }
  384|   131k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 12.7k, False: 118k]
  ------------------
  385|   131k|      exponent += exp_number;
  386|   131k|    }
  387|   892k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   892k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 764k, False: 128k]
  |  Branch (389:44): [True: 0, False: 764k]
  ------------------
  390|   892k|  }
  391|  1.02M|  answer.lastmatch = p;
  392|  1.02M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.02M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 153k, False: 871k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   153k|    UC const * start = start_digits;
  405|  1.27M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.27M, False: 980]
  |  Branch (405:32): [True: 1.09M, False: 173k]
  |  Branch (405:53): [True: 20.6k, False: 152k]
  ------------------
  406|  1.11M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 1.09M, False: 20.6k]
  ------------------
  407|  1.11M|      start++;
  408|  1.11M|    }
  409|       |
  410|   153k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 143k, False: 10.5k]
  ------------------
  411|   143k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   143k|      i = 0;
  416|   143k|      p = answer.integer.ptr;
  417|   143k|      UC const* int_end = p + answer.integer.len();
  418|   143k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.35M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.28M, False: 64.0k]
  |  Branch (419:54): [True: 2.20M, False: 79.3k]
  ------------------
  420|  2.20M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.20M|        ++p;
  422|  2.20M|      }
  423|   143k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 64.0k, False: 79.3k]
  ------------------
  424|  64.0k|        exponent = end_of_integer_part - p + exp_number;
  425|  64.0k|      }
  426|  79.3k|      else { // We have a value with a fractional component.
  427|  79.3k|        p = answer.fraction.ptr;
  428|  79.3k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.53M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.45M, False: 79.3k]
  |  Branch (429:56): [True: 1.45M, False: 0]
  ------------------
  430|  1.45M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.45M|          ++p;
  432|  1.45M|        }
  433|  79.3k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  79.3k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   143k|    }
  437|   153k|  }
  438|  1.02M|  answer.exponent = exponent;
  439|  1.02M|  answer.mantissa = i;
  440|  1.02M|  return answer;
  441|  1.02M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  7.11M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  7.11M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 177k, False: 6.93M]
  |  Branch (36:27): [True: 750k, False: 6.18M]
  ------------------
   37|  7.11M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   143k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   623k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 570k, False: 52.5k]
  |  Branch (249:43): [True: 479k, False: 91.1k]
  ------------------
  250|   479k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   479k|    p += 8;
  252|   479k|  }
  253|   143k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   570k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   570k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   570k|     0x8080808080808080));
  172|   570k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.23M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.23M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.23M|  uint64_t val;
   63|  1.23M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.23M|  return val;
   69|  1.23M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   768k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   768k|  const uint64_t mask = 0x000000FF000000FF;
  148|   768k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   768k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   768k|  val -= 0x3030303030303030;
  151|   768k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   768k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   768k|  return uint32_t(val);
  154|   768k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   184k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   184k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   184k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   184k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   184k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   847k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   847k|  chars_format const fmt = options.format;
  277|   847k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   847k|  parsed_number_string_t<UC> answer;
  280|   847k|  answer.valid = false;
  281|   847k|  answer.too_many_digits = false;
  282|   847k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   847k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 847k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   847k|  UC const * const start_digits = p;
  303|       |
  304|   847k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.02M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.78M, False: 236k]
  |  Branch (306:25): [True: 4.17M, False: 611k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.17M|    i = 10 * i +
  310|  4.17M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.17M|    ++p;
  312|  4.17M|  }
  313|   847k|  UC const * const end_of_integer_part = p;
  314|   847k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   847k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   847k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|   847k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 847k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   847k|  int64_t exponent = 0;
  324|   847k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 611k, False: 236k]
  |  Branch (324:49): [True: 105k, False: 506k]
  ------------------
  325|   847k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 105k, False: 742k]
  ------------------
  326|   105k|    ++p;
  327|   105k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   105k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  2.64M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 2.60M, False: 33.6k]
  |  Branch (332:27): [True: 2.53M, False: 71.3k]
  ------------------
  333|  2.53M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  2.53M|      ++p;
  335|  2.53M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  2.53M|    }
  337|   105k|    exponent = before - p;
  338|   105k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   105k|    digit_count -= exponent;
  340|   105k|  }
  341|   847k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|   847k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 847k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   847k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 847k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   847k|  int64_t exp_number = 0;            // explicit exponential part
  351|   847k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 744k, False: 103k]
  ------------------
  352|   847k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 577k, False: 166k]
  ------------------
  353|   847k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 87.0k, False: 490k]
  |  Branch (353:29): [True: 28.3k, False: 462k]
  ------------------
  354|   847k|       ||
  355|   847k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|   732k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 732k]
  ------------------
  356|   732k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   732k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   115k|    UC const * location_of_e = p;
  359|   115k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 87.0k, False: 28.3k]
  |  Branch (359:28): [True: 28.3k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   115k|      ++p;
  361|   115k|    }
  362|   115k|    bool neg_exp = false;
  363|   115k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 115k, False: 270]
  |  Branch (363:24): [True: 11.7k, False: 103k]
  ------------------
  364|  11.7k|      neg_exp = true;
  365|  11.7k|      ++p;
  366|   103k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 103k, False: 270]
  |  Branch (366:31): [True: 22.8k, False: 80.6k]
  ------------------
  367|  22.8k|      ++p;
  368|  22.8k|    }
  369|   115k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 300, False: 115k]
  |  Branch (369:24): [True: 795, False: 114k]
  ------------------
  370|  1.09k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.09k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.09k|      p = location_of_e;
  376|   114k|    } else {
  377|   403k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 365k, False: 37.7k]
  |  Branch (377:29): [True: 289k, False: 76.5k]
  ------------------
  378|   289k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   289k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 253k, False: 35.6k]
  ------------------
  380|   253k|          exp_number = 10 * exp_number + digit;
  381|   253k|        }
  382|   289k|        ++p;
  383|   289k|      }
  384|   114k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 11.6k, False: 102k]
  ------------------
  385|   114k|      exponent += exp_number;
  386|   114k|    }
  387|   732k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   732k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 629k, False: 103k]
  |  Branch (389:44): [True: 0, False: 629k]
  ------------------
  390|   732k|  }
  391|   847k|  answer.lastmatch = p;
  392|   847k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   847k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 112k, False: 735k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   112k|    UC const * start = start_digits;
  405|   748k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 748k, False: 626]
  |  Branch (405:32): [True: 625k, False: 122k]
  |  Branch (405:53): [True: 10.7k, False: 111k]
  ------------------
  406|   636k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 625k, False: 10.7k]
  ------------------
  407|   636k|      start++;
  408|   636k|    }
  409|       |
  410|   112k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 104k, False: 8.01k]
  ------------------
  411|   104k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   104k|      i = 0;
  416|   104k|      p = answer.integer.ptr;
  417|   104k|      UC const* int_end = p + answer.integer.len();
  418|   104k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.74M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.68M, False: 52.4k]
  |  Branch (419:54): [True: 1.63M, False: 51.7k]
  ------------------
  420|  1.63M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.63M|        ++p;
  422|  1.63M|      }
  423|   104k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 52.4k, False: 51.7k]
  ------------------
  424|  52.4k|        exponent = end_of_integer_part - p + exp_number;
  425|  52.4k|      }
  426|  51.7k|      else { // We have a value with a fractional component.
  427|  51.7k|        p = answer.fraction.ptr;
  428|  51.7k|        UC const* frac_end = p + answer.fraction.len();
  429|   903k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 851k, False: 51.7k]
  |  Branch (429:56): [True: 851k, False: 0]
  ------------------
  430|   851k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|   851k|          ++p;
  432|   851k|        }
  433|  51.7k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  51.7k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   104k|    }
  437|   112k|  }
  438|   847k|  answer.exponent = exponent;
  439|   847k|  answer.mantissa = i;
  440|   847k|  return answer;
  441|   847k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  7.87M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  7.87M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 159k, False: 7.71M]
  |  Branch (36:27): [True: 600k, False: 7.11M]
  ------------------
   37|  7.87M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|   105k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|   105k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|   105k|    return;
  240|   105k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|   104k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   104k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   104k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   104k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   104k|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|   104k|uint64_t read8_to_u64(const UC *chars) {
   54|   104k|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|   104k|    uint64_t val = 0;
   56|   941k|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 836k, False: 104k]
  ------------------
   57|   836k|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|   836k|      ++chars;
   59|   836k|    }
   60|   104k|    return val;
   61|   104k|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|   104k|}

_ZN10fast_float6bigintC2Ev:
  412|  68.3k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   135k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   221k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   221k|    return small_mul(vec, y);
  565|   221k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   337k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   337k|  limb carry = 0;
  284|  1.36M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.03M, False: 337k]
  ------------------
  285|  1.03M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.03M|  }
  287|   337k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 215k, False: 122k]
  ------------------
  288|   215k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  174|   215k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 215k]
  |  |  ------------------
  ------------------
  289|   215k|  }
  290|   337k|  return true;
  291|   337k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.62M|  constexpr size_t len() const noexcept {
   77|  2.62M|    return length;
   78|  2.62M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.03M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.03M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.03M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.03M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.03M|  carry = limb(z >> limb_bits);
  235|  1.03M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.03M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.78M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.78M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|  2.78M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.78M|    return data[index];
   60|  2.78M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   298k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   298k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 298k, False: 0]
  ------------------
   93|   298k|      push_unchecked(value);
   94|   298k|      return true;
   95|   298k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   298k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   357k|  constexpr size_t capacity() const noexcept {
   83|   357k|    return size;
   84|   357k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   347k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   347k|    data[length] = value;
   88|   347k|    length++;
   89|   347k|  }
_ZN10fast_float6bigint3addEm:
  567|   221k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   221k|    return small_add(vec, y);
  569|   221k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   221k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   221k|  return small_add_from(vec, y, 0);
  277|   221k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   221k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   221k|  size_t index = start;
  259|   221k|  limb carry = y;
  260|   221k|  bool overflow;
  261|   323k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 169k, False: 153k]
  |  Branch (261:24): [True: 101k, False: 68.3k]
  ------------------
  262|   101k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   101k|    carry = limb(overflow);
  264|   101k|    index += 1;
  265|   101k|  }
  266|   221k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 68.3k, False: 153k]
  ------------------
  267|  68.3k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  174|  68.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
  268|  68.3k|  }
  269|   221k|  return true;
  270|   221k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   282k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   282k|  limb z;
  211|       |// gcc and clang
  212|   282k|#if defined(__has_builtin)
  213|   282k|  #if __has_builtin(__builtin_add_overflow)
  214|   282k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   282k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   282k|      return z;
  217|   282k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   282k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  19.7k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  19.7k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  174|  19.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
  611|  19.7k|    return pow2(exp);
  612|  19.7k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  68.3k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  68.3k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  68.3k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  73.0k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 4.64k, False: 68.3k]
  ------------------
  582|  4.64k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  174|  4.64k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 4.64k]
  |  |  ------------------
  ------------------
  583|  4.64k|      exp -= large_step;
  584|  4.64k|    }
  585|  68.3k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  68.3k|    uint32_t small_step = 27;
  587|  68.3k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   115k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 46.9k, False: 68.3k]
  ------------------
  593|  46.9k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  174|  46.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 46.9k]
  |  |  ------------------
  ------------------
  594|  46.9k|      exp -= small_step;
  595|  46.9k|    }
  596|  68.3k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 45.8k, False: 22.5k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  45.8k|      FASTFLOAT_TRY(
  ------------------
  |  |  174|  45.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 45.8k]
  |  |  ------------------
  ------------------
  601|  45.8k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  45.8k|      );
  603|  45.8k|    }
  604|       |
  605|  68.3k|    return true;
  606|  68.3k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  4.64k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  4.64k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 4.64k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  174|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  4.64k|  } else {
  368|  4.64k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  174|  4.64k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 4.64k]
  |  |  ------------------
  ------------------
  369|  4.64k|  }
  370|  4.64k|  return true;
  371|  4.64k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  4.64k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  4.64k|  limb_span xs = limb_span(x.data, x.len());
  337|  4.64k|  stackvec<size> z(xs);
  338|  4.64k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  4.64k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 4.64k, False: 0]
  ------------------
  341|  4.64k|    limb y0 = y[0];
  342|  4.64k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  174|  4.64k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 4.64k]
  |  |  ------------------
  ------------------
  343|  23.2k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 18.5k, False: 4.64k]
  ------------------
  344|  18.5k|      limb yi = y[index];
  345|  18.5k|      stackvec<size> zi;
  346|  18.5k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 18.5k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  18.5k|        zi.set_len(0);
  349|  18.5k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  174|  18.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
  350|  18.5k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  174|  18.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
  351|  18.5k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  18.5k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  174|  18.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
  353|  18.5k|      }
  354|  18.5k|    }
  355|  4.64k|  }
  356|       |
  357|  4.64k|  x.normalize();
  358|  4.64k|  return true;
  359|  4.64k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  4.64k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  4.64k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  166|  4.64k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  4.64k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  76.9k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  76.9k|    length = uint16_t(len);
   75|  76.9k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  23.2k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  23.2k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 23.2k, False: 0]
  ------------------
  108|  23.2k|      extend_unchecked(s);
  109|  23.2k|      return true;
  110|  23.2k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  23.2k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  23.2k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  23.2k|    limb* ptr = data + length;
  102|  23.2k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  23.2k|    set_len(len() + s.len());
  104|  23.2k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  18.5k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  18.5k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 18.5k]
  |  Branch (300:26): [True: 18.2k, False: 290]
  ------------------
  301|  18.2k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  174|  18.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 18.2k]
  |  |  ------------------
  ------------------
  302|  18.2k|  }
  303|       |
  304|  18.5k|  bool carry = false;
  305|   152k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 134k, False: 18.5k]
  ------------------
  306|   134k|    limb xi = x[index + start];
  307|   134k|    limb yi = y[index];
  308|   134k|    bool c1 = false;
  309|   134k|    bool c2 = false;
  310|   134k|    xi = scalar_add(xi, yi, c1);
  311|   134k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 46.7k, False: 87.4k]
  ------------------
  312|  46.7k|      xi = scalar_add(xi, 1, c2);
  313|  46.7k|    }
  314|   134k|    x[index + start] = xi;
  315|   134k|    carry = c1 | c2;
  316|   134k|  }
  317|       |
  318|       |  // handle overflow
  319|  18.5k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 18.5k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  174|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  18.5k|  return true;
  323|  18.5k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  18.2k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  18.2k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 18.2k]
  ------------------
  132|      0|      return false;
  133|  18.2k|    } else {
  134|  18.2k|      resize_unchecked(new_len, value);
  135|  18.2k|      return true;
  136|  18.2k|    }
  137|  18.2k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  18.2k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  18.2k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 18.2k, False: 0]
  ------------------
  120|  18.2k|      size_t count = new_len - len();
  121|  18.2k|      limb* first = data + len();
  122|  18.2k|      limb* last = first + count;
  123|  18.2k|      ::std::fill(first, last, value);
  124|  18.2k|      set_len(new_len);
  125|  18.2k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  18.2k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  53.2k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  53.2k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 53.2k, False: 0]
  |  Branch (152:25): [True: 0, False: 53.2k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  53.2k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   111k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   111k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   111k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   111k|    size_t rindex = length - index - 1;
   69|   111k|    return data[rindex];
   70|   111k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  68.2k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  68.2k|    return shl(exp);
  574|  68.2k|  }
_ZN10fast_float6bigint3shlEm:
  530|  68.2k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  68.2k|    size_t rem = n % limb_bits;
  532|  68.2k|    size_t div = n / limb_bits;
  533|  68.2k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 48.2k, False: 19.9k]
  ------------------
  534|  48.2k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  174|  48.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 48.2k]
  |  |  ------------------
  ------------------
  535|  48.2k|    }
  536|  68.2k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 16.9k, False: 51.3k]
  ------------------
  537|  16.9k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  174|  16.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
  538|  16.9k|    }
  539|  68.2k|    return true;
  540|  68.2k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  48.2k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  48.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  170|  48.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  48.2k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  170|  48.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  48.2k|    size_t shl = n;
  493|  48.2k|    size_t shr = limb_bits - shl;
  494|  48.2k|    limb prev = 0;
  495|   175k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 126k, False: 48.2k]
  ------------------
  496|   126k|      limb xi = vec[index];
  497|   126k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   126k|      prev = xi;
  499|   126k|    }
  500|       |
  501|  48.2k|    limb carry = prev >> shr;
  502|  48.2k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 15.0k, False: 33.1k]
  ------------------
  503|  15.0k|      return vec.try_push(carry);
  504|  15.0k|    }
  505|  33.1k|    return true;
  506|  48.2k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  16.9k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  16.9k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  170|  16.9k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  16.9k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 16.9k]
  ------------------
  512|      0|      return false;
  513|  16.9k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 16.9k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  16.9k|      limb* dst = vec.data + n;
  516|  16.9k|      const limb* src = vec.data;
  517|  16.9k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  16.9k|      limb* first = vec.data;
  520|  16.9k|      limb* last = first + n;
  521|  16.9k|      ::std::fill(first, last, 0);
  522|  16.9k|      vec.set_len(n + vec.len());
  523|  16.9k|      return true;
  524|  16.9k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  16.9k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  36.6k|  constexpr bool is_empty() const noexcept {
   80|  36.6k|    return length == 0;
   81|  36.6k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  19.7k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  19.7k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  19.7k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 19.7k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  19.7k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.52k, False: 18.2k]
  ------------------
  435|  1.52k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  18.2k|    } else {
  437|  18.2k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  18.2k|      truncated |= vec.nonzero(2);
  439|  18.2k|      return result;
  440|  18.2k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  19.7k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.52k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.52k|  truncated = false;
  167|  1.52k|  int shl = leading_zeroes(r0);
  168|  1.52k|  return r0 << shl;
  169|  1.52k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  18.2k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  18.2k|  int shl = leading_zeroes(r0);
  174|  18.2k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 18.1k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  18.1k|  } else {
  178|  18.1k|    int shr = 64 - shl;
  179|  18.1k|    truncated = (r1 << shl) != 0;
  180|  18.1k|    return (r0 << shl) | (r1 >> shr);
  181|  18.1k|  }
  182|  18.2k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  18.2k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  18.2k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 623, False: 17.6k]
  ------------------
  143|    623|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 587, False: 36]
  ------------------
  144|    587|        return true;
  145|    587|      }
  146|     36|      index++;
  147|     36|    }
  148|  17.6k|    return false;
  149|  18.2k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  19.7k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  19.7k|    int lz = ctlz();
  560|  19.7k|    return int(limb_bits * vec.len()) - lz;
  561|  19.7k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  19.7k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  19.7k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 19.7k]
  ------------------
  545|      0|      return 0;
  546|  19.7k|    } else {
  547|  19.7k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  19.7k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  19.7k|    }
  555|  19.7k|  }
_ZN10fast_float6bigintC2Em:
  418|  48.6k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  48.6k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  48.6k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  48.6k|    vec.normalize();
  426|  48.6k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  48.6k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  48.6k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 48.6k]
  ------------------
  464|      0|      return 1;
  465|  48.6k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 48.6k]
  ------------------
  466|      0|      return -1;
  467|  48.6k|    } else {
  468|  98.3k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 88.3k, False: 10.0k]
  ------------------
  469|  88.3k|        limb xi = vec[index - 1];
  470|  88.3k|        limb yi = other.vec[index - 1];
  471|  88.3k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 4.21k, False: 84.1k]
  ------------------
  472|  4.21k|          return 1;
  473|  84.1k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 34.3k, False: 49.7k]
  ------------------
  474|  34.3k|          return -1;
  475|  34.3k|        }
  476|  88.3k|      }
  477|  10.0k|      return 0;
  478|  48.6k|    }
  479|  48.6k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   176k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   176k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   176k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   176k|    return data[index];
   64|   176k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   355k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   355k|  adjusted_mantissa answer;
   96|   355k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.19k, False: 350k]
  |  Branch (96:19): [True: 1.88k, False: 348k]
  ------------------
   97|  7.07k|    answer.power2 = 0;
   98|  7.07k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.07k|    return answer;
  101|  7.07k|  }
  102|   348k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 6.06k, False: 342k]
  ------------------
  103|       |    // we want to get infinity:
  104|  6.06k|    answer.power2 = binary::infinite_power();
  105|  6.06k|    answer.mantissa = 0;
  106|  6.06k|    return answer;
  107|  6.06k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   342k|  int lz = leading_zeroes(w);
  112|   342k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   342k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   342k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   342k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   342k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   342k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 565, False: 341k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    565|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 529]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    529|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    529|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    529|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    529|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 529, False: 0]
  ------------------
  156|    529|    return answer;
  157|    565|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   341k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 126k, False: 215k]
  |  Branch (162:30): [True: 126k, False: 383]
  |  Branch (162:77): [True: 122k, False: 4.10k]
  ------------------
  163|   341k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 25.5k, False: 96.5k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  25.5k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.7k, False: 13.7k]
  ------------------
  168|  11.7k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.7k|    }
  170|  25.5k|  }
  171|       |
  172|   341k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   341k|  answer.mantissa >>= 1;
  174|   341k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 16.6k, False: 325k]
  ------------------
  175|  16.6k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  16.6k|    answer.power2++; // undo previous addition
  177|  16.6k|  }
  178|       |
  179|   341k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   341k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 3.50k, False: 338k]
  ------------------
  181|  3.50k|    answer.power2 = binary::infinite_power();
  182|  3.50k|    answer.mantissa = 0;
  183|  3.50k|  }
  184|   341k|  return answer;
  185|   342k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   372k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   372k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   372k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   372k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   372k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   372k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   372k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 51.0k, False: 321k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  51.0k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  51.0k|    firstproduct.low += secondproduct.high;
   35|  51.0k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 47.0k, False: 3.99k]
  ------------------
   36|  47.0k|      firstproduct.high++;
   37|  47.0k|    }
   38|  51.0k|  }
   39|   372k|  return firstproduct;
   40|   372k|}
_ZN10fast_float6detail5powerEi:
   58|   749k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   749k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   749k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  30.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  30.3k|  int lz = leading_zeroes(w);
   82|  30.3k|  w <<= lz;
   83|  30.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  30.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  30.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  30.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  30.3k|  int hilz = int(w >> 63) ^ 1;
   69|  30.3k|  adjusted_mantissa answer;
   70|  30.3k|  answer.mantissa = w << hilz;
   71|  30.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  30.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  30.3k|  return answer;
   74|  30.3k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   348k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   348k|  adjusted_mantissa answer;
   96|   348k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.07k, False: 343k]
  |  Branch (96:19): [True: 627, False: 342k]
  ------------------
   97|  5.69k|    answer.power2 = 0;
   98|  5.69k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.69k|    return answer;
  101|  5.69k|  }
  102|   342k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.46k, False: 339k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.46k|    answer.power2 = binary::infinite_power();
  105|  3.46k|    answer.mantissa = 0;
  106|  3.46k|    return answer;
  107|  3.46k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   339k|  int lz = leading_zeroes(w);
  112|   339k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   339k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   339k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   339k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   339k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   339k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 17.0k, False: 322k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  17.0k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 64, False: 16.9k]
  ------------------
  137|     64|      answer.power2 = 0;
  138|     64|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     64|      return answer;
  141|     64|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  16.9k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  16.9k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  16.9k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  16.9k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 16.9k, False: 0]
  ------------------
  156|  16.9k|    return answer;
  157|  17.0k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   322k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 94.4k, False: 227k]
  |  Branch (162:30): [True: 58.4k, False: 36.0k]
  |  Branch (162:77): [True: 56.0k, False: 2.36k]
  ------------------
  163|   322k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 19.6k, False: 36.4k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  19.6k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 15.1k, False: 4.50k]
  ------------------
  168|  15.1k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  15.1k|    }
  170|  19.6k|  }
  171|       |
  172|   322k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   322k|  answer.mantissa >>= 1;
  174|   322k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 15.2k, False: 306k]
  ------------------
  175|  15.2k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  15.2k|    answer.power2++; // undo previous addition
  177|  15.2k|  }
  178|       |
  179|   322k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   322k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 346, False: 321k]
  ------------------
  181|    346|    answer.power2 = binary::infinite_power();
  182|    346|    answer.mantissa = 0;
  183|    346|  }
  184|   322k|  return answer;
  185|   339k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   377k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   377k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   377k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   377k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   377k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   377k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   377k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 68.6k, False: 308k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  68.6k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  68.6k|    firstproduct.low += secondproduct.high;
   35|  68.6k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 41.8k, False: 26.7k]
  ------------------
   36|  41.8k|      firstproduct.high++;
   37|  41.8k|    }
   38|  68.6k|  }
   39|   377k|  return firstproduct;
   40|   377k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  38.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  38.0k|  int lz = leading_zeroes(w);
   82|  38.0k|  w <<= lz;
   83|  38.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  38.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  38.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  38.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  38.0k|  int hilz = int(w >> 63) ^ 1;
   69|  38.0k|  adjusted_mantissa answer;
   70|  38.0k|  answer.mantissa = w << hilz;
   71|  38.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  38.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  38.0k|  return answer;
   74|  38.0k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  17.9k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  17.9k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  17.9k|  int32_t sci_exp = scientific_exponent(num);
  411|  17.9k|  size_t max_digits = binary_format<T>::max_digits();
  412|  17.9k|  size_t digits = 0;
  413|  17.9k|  bigint bigmant;
  414|  17.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  17.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  17.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 448, False: 17.4k]
  ------------------
  418|    448|    return positive_digit_comp<T>(bigmant, exponent);
  419|  17.4k|  } else {
  420|  17.4k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  17.4k|  }
  422|  17.9k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  41.7k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  41.7k|  uint64_t mantissa = num.mantissa;
   30|  41.7k|  int32_t exponent = int32_t(num.exponent);
   31|   208k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 166k, False: 41.7k]
  ------------------
   32|   166k|    mantissa /= 10000;
   33|   166k|    exponent += 4;
   34|   166k|  }
   35|  83.4k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 41.7k, False: 41.7k]
  ------------------
   36|  41.7k|    mantissa /= 100;
   37|  41.7k|    exponent += 2;
   38|  41.7k|  }
   39|  41.7k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 41.7k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  41.7k|  return exponent;
   44|  41.7k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  41.7k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  41.7k|  size_t counter = 0;
  245|  41.7k|  digits = 0;
  246|  41.7k|  limb value = 0;
  247|  41.7k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  41.7k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  41.7k|  UC const * p = num.integer.ptr;
  255|  41.7k|  UC const * pend = p + num.integer.len();
  256|  41.7k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  87.1k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 45.4k, False: 41.7k]
  ------------------
  259|  83.9k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 45.8k, False: 38.0k]
  |  Branch (259:45): [True: 38.4k, False: 7.32k]
  |  Branch (259:70): [True: 38.4k, False: 0]
  ------------------
  260|  38.4k|      parse_eight_digits(p, value, counter, digits);
  261|  38.4k|    }
  262|   189k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 177k, False: 11.9k]
  |  Branch (262:30): [True: 144k, False: 33.4k]
  |  Branch (262:43): [True: 144k, False: 0]
  ------------------
  263|   144k|      parse_one_digit(p, value, counter, digits);
  264|   144k|    }
  265|  45.4k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 45.4k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  45.4k|    } else {
  277|  45.4k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  45.4k|      counter = 0;
  279|  45.4k|      value = 0;
  280|  45.4k|    }
  281|  45.4k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  41.7k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 30.6k, False: 11.0k]
  ------------------
  285|  30.6k|    p = num.fraction.ptr;
  286|  30.6k|    pend = p + num.fraction.len();
  287|  30.6k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 8.30k, False: 22.3k]
  ------------------
  288|  8.30k|      skip_zeros(p, pend);
  289|  8.30k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   119k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 92.0k, False: 27.6k]
  ------------------
  292|   237k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 202k, False: 34.8k]
  |  Branch (292:47): [True: 147k, False: 55.6k]
  |  Branch (292:72): [True: 145k, False: 1.48k]
  ------------------
  293|   145k|        parse_eight_digits(p, value, counter, digits);
  294|   145k|      }
  295|   387k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 325k, False: 62.3k]
  |  Branch (295:32): [True: 297k, False: 27.5k]
  |  Branch (295:45): [True: 295k, False: 2.03k]
  ------------------
  296|   295k|        parse_one_digit(p, value, counter, digits);
  297|   295k|      }
  298|  92.0k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 3.06k, False: 88.9k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  3.06k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  3.06k|        bool truncated = is_truncated(p, pend);
  302|  3.06k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.54k, False: 1.52k]
  ------------------
  303|  1.54k|          round_up_bigint(result, digits);
  304|  1.54k|        }
  305|  3.06k|        return;
  306|  88.9k|      } else {
  307|  88.9k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  88.9k|        counter = 0;
  309|  88.9k|        value = 0;
  310|  88.9k|      }
  311|  92.0k|    }
  312|  30.6k|  }
  313|       |
  314|  38.6k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 38.6k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  38.6k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  50.0k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  50.0k|  uint64_t val;
  161|  96.2k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 78.9k, False: 17.2k]
  ------------------
  162|  78.9k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  78.9k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 32.7k, False: 46.2k]
  ------------------
  164|  32.7k|      break;
  165|  32.7k|    }
  166|  46.2k|    first += int_cmp_len<UC>();
  167|  46.2k|  }
  168|   136k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 128k, False: 8.30k]
  ------------------
  169|   128k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 41.7k, False: 86.6k]
  ------------------
  170|  41.7k|      break;
  171|  41.7k|    }
  172|  86.6k|    first++;
  173|  86.6k|  }
  174|  50.0k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   184k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   184k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   184k|  p += 8;
  210|   184k|  counter += 8;
  211|   184k|  count += 8;
  212|   184k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   439k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   439k|  value = value * 10 + limb(*p - UC('0'));
  218|   439k|  p++;
  219|   439k|  counter++;
  220|   439k|  count++;
  221|   439k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   221k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   221k|  big.mul(power);
  226|   221k|  big.add(value);
  227|   221k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.06k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.06k|  uint64_t val;
  183|  5.44k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 3.38k, False: 2.06k]
  ------------------
  184|  3.38k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  3.38k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.00k, False: 2.37k]
  ------------------
  186|  1.00k|      return true;
  187|  1.00k|    }
  188|  2.37k|    first += int_cmp_len<UC>();
  189|  2.37k|  }
  190|  2.80k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 1.27k, False: 1.52k]
  ------------------
  191|  1.27k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 537, False: 741]
  ------------------
  192|    537|      return true;
  193|    537|    }
  194|    741|    ++first;
  195|    741|  }
  196|  1.52k|  return false;
  197|  2.06k|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.37k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.37k|  add_native(big, 10, 1);
  234|  2.37k|  count++;
  235|  2.37k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    844|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    844|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  166|    844|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    844|  adjusted_mantissa answer;
  324|    844|  bool truncated;
  325|    844|  answer.mantissa = bigmant.hi64(truncated);
  326|    844|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    844|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    844|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    844|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    844|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    844|    });
  333|    844|  });
  334|       |
  335|    844|  return answer;
  336|    844|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    844|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    844|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    844|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 844]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    844|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    844|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 844]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    844|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    844|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 844]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    844|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    844|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    844|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    844|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    844|    });
  333|    844|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    844|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    844|  const uint64_t mask
  125|    844|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 844]
  ------------------
  126|    844|    ? UINT64_MAX
  127|    844|    : (uint64_t(1) << shift) - 1;
  128|    844|  const uint64_t halfway
  129|    844|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 844]
  ------------------
  130|    844|    ? 0
  131|    844|    : uint64_t(1) << (shift - 1);
  132|    844|  uint64_t truncated_bits = am.mantissa & mask;
  133|    844|  bool is_above = truncated_bits > halfway;
  134|    844|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    844|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 844]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    844|  } else {
  140|    844|    am.mantissa >>= shift;
  141|    844|  }
  142|    844|  am.power2 += shift;
  143|       |
  144|    844|  bool is_odd = (am.mantissa & 1) == 1;
  145|    844|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    844|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    844|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    844|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 77, False: 767]
  |  Branch (331:27): [True: 648, False: 119]
  |  Branch (331:41): [True: 0, False: 648]
  |  Branch (331:56): [True: 76, False: 691]
  |  Branch (331:66): [True: 25, False: 51]
  ------------------
  332|    844|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  29.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  29.5k|  bigint& real_digits = bigmant;
  347|  29.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  29.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  29.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  29.5k|  T b;
  354|  29.5k|  to_float(false, am_b, b);
  355|  29.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  29.5k|  bigint theor_digits(theor.mantissa);
  357|  29.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  29.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  29.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  29.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 29.5k, False: 0]
  ------------------
  363|  29.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  166|  29.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  29.5k|  }
  365|  29.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 29.5k, False: 0]
  ------------------
  366|  29.5k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  166|  29.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  29.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  166|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  29.5k|  int ord = real_digits.compare(theor_digits);
  373|  29.5k|  adjusted_mantissa answer = am;
  374|  29.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.5k|      (void)_;  // not needed, since we've done our comparison
  377|  29.5k|      (void)__; // not needed, since we've done our comparison
  378|  29.5k|      if (ord > 0) {
  379|  29.5k|        return true;
  380|  29.5k|      } else if (ord < 0) {
  381|  29.5k|        return false;
  382|  29.5k|      } else {
  383|  29.5k|        return is_odd;
  384|  29.5k|      }
  385|  29.5k|    });
  386|  29.5k|  });
  387|       |
  388|  29.5k|  return answer;
  389|  29.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  29.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 29.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  29.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  48.6k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  48.6k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 48.6k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  48.6k|  } else {
  153|  48.6k|    am.mantissa >>= shift;
  154|  48.6k|  }
  155|  48.6k|  am.power2 += shift;
  156|  48.6k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  29.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  29.5k|  adjusted_mantissa am = to_extended(value);
   84|  29.5k|  am.mantissa <<= 1;
   85|  29.5k|  am.mantissa += 1;
   86|  29.5k|  am.power2 -= 1;
   87|  29.5k|  return am;
   88|  29.5k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  29.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  29.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  29.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  29.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  29.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  29.5k|  adjusted_mantissa am;
   56|  29.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  29.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  29.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  29.5k|#endif
   63|  29.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 29.5k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  29.5k|  } else {
   68|       |    // normal
   69|  29.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  29.5k|    am.power2 -= bias;
   71|  29.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  29.5k|  }
   73|       |
   74|  29.5k|  return am;
   75|  29.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  29.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 29.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  29.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.5k|      (void)_;  // not needed, since we've done our comparison
  377|  29.5k|      (void)__; // not needed, since we've done our comparison
  378|  29.5k|      if (ord > 0) {
  379|  29.5k|        return true;
  380|  29.5k|      } else if (ord < 0) {
  381|  29.5k|        return false;
  382|  29.5k|      } else {
  383|  29.5k|        return is_odd;
  384|  29.5k|      }
  385|  29.5k|    });
  386|  29.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  29.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  29.5k|  const uint64_t mask
  125|  29.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 29.5k]
  ------------------
  126|  29.5k|    ? UINT64_MAX
  127|  29.5k|    : (uint64_t(1) << shift) - 1;
  128|  29.5k|  const uint64_t halfway
  129|  29.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 29.5k]
  ------------------
  130|  29.5k|    ? 0
  131|  29.5k|    : uint64_t(1) << (shift - 1);
  132|  29.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  29.5k|  bool is_above = truncated_bits > halfway;
  134|  29.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  29.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 29.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  29.5k|  } else {
  140|  29.5k|    am.mantissa >>= shift;
  141|  29.5k|  }
  142|  29.5k|  am.power2 += shift;
  143|       |
  144|  29.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  29.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  29.5k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  29.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.5k|      (void)_;  // not needed, since we've done our comparison
  377|  29.5k|      (void)__; // not needed, since we've done our comparison
  378|  29.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 201, False: 29.3k]
  ------------------
  379|    201|        return true;
  380|  29.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 19.9k, False: 9.36k]
  ------------------
  381|  19.9k|        return false;
  382|  19.9k|      } else {
  383|  9.36k|        return is_odd;
  384|  9.36k|      }
  385|  29.5k|    });
_ZN10fast_float10digit_compIfDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  12.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  12.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  12.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  12.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  12.4k|  size_t digits = 0;
  413|  12.4k|  bigint bigmant;
  414|  12.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  12.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  12.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 396, False: 12.0k]
  ------------------
  418|    396|    return positive_digit_comp<T>(bigmant, exponent);
  419|  12.0k|  } else {
  420|  12.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  12.0k|  }
  422|  12.4k|}
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|  26.6k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  26.6k|  uint64_t mantissa = num.mantissa;
   30|  26.6k|  int32_t exponent = int32_t(num.exponent);
   31|   133k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 106k, False: 26.6k]
  ------------------
   32|   106k|    mantissa /= 10000;
   33|   106k|    exponent += 4;
   34|   106k|  }
   35|  53.3k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 26.6k, False: 26.6k]
  ------------------
   36|  26.6k|    mantissa /= 100;
   37|  26.6k|    exponent += 2;
   38|  26.6k|  }
   39|  26.6k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 26.6k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  26.6k|  return exponent;
   44|  26.6k|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  26.6k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  26.6k|  size_t counter = 0;
  245|  26.6k|  digits = 0;
  246|  26.6k|  limb value = 0;
  247|  26.6k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  26.6k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  26.6k|  UC const * p = num.integer.ptr;
  255|  26.6k|  UC const * pend = p + num.integer.len();
  256|  26.6k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  58.7k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 32.0k, False: 26.6k]
  ------------------
  259|  58.7k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 32.5k, False: 26.2k]
  |  Branch (259:45): [True: 26.6k, False: 5.84k]
  |  Branch (259:70): [True: 26.6k, False: 0]
  ------------------
  260|  26.6k|      parse_eight_digits(p, value, counter, digits);
  261|  26.6k|    }
  262|   138k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 129k, False: 8.96k]
  |  Branch (262:30): [True: 106k, False: 23.0k]
  |  Branch (262:43): [True: 106k, False: 0]
  ------------------
  263|   106k|      parse_one_digit(p, value, counter, digits);
  264|   106k|    }
  265|  32.0k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 32.0k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  32.0k|    } else {
  277|  32.0k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  32.0k|      counter = 0;
  279|  32.0k|      value = 0;
  280|  32.0k|    }
  281|  32.0k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  26.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 18.5k, False: 8.11k]
  ------------------
  285|  18.5k|    p = num.fraction.ptr;
  286|  18.5k|    pend = p + num.fraction.len();
  287|  18.5k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 3.57k, False: 14.9k]
  ------------------
  288|  3.57k|      skip_zeros(p, pend);
  289|  3.57k|    }
  290|       |    // process all digits, in increments of step per loop
  291|  66.2k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 49.9k, False: 16.2k]
  ------------------
  292|   127k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 107k, False: 20.1k]
  |  Branch (292:47): [True: 78.8k, False: 28.8k]
  |  Branch (292:72): [True: 77.9k, False: 950]
  ------------------
  293|  77.9k|        parse_eight_digits(p, value, counter, digits);
  294|  77.9k|      }
  295|   209k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 177k, False: 32.0k]
  |  Branch (295:32): [True: 161k, False: 16.6k]
  |  Branch (295:45): [True: 159k, False: 1.29k]
  ------------------
  296|   159k|        parse_one_digit(p, value, counter, digits);
  297|   159k|      }
  298|  49.9k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.28k, False: 47.6k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.28k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.28k|        bool truncated = is_truncated(p, pend);
  302|  2.28k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 835, False: 1.45k]
  ------------------
  303|    835|          round_up_bigint(result, digits);
  304|    835|        }
  305|  2.28k|        return;
  306|  47.6k|      } else {
  307|  47.6k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  47.6k|        counter = 0;
  309|  47.6k|        value = 0;
  310|  47.6k|      }
  311|  49.9k|    }
  312|  18.5k|  }
  313|       |
  314|  24.3k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 24.3k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  24.3k|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|  30.2k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  30.2k|  uint64_t val;
  161|   147k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 142k, False: 4.80k]
  ------------------
  162|   142k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   142k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 25.4k, False: 117k]
  ------------------
  164|  25.4k|      break;
  165|  25.4k|    }
  166|   117k|    first += int_cmp_len<UC>();
  167|   117k|  }
  168|  40.0k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 36.4k, False: 3.57k]
  ------------------
  169|  36.4k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 26.6k, False: 9.83k]
  ------------------
  170|  26.6k|      break;
  171|  26.6k|    }
  172|  9.83k|    first++;
  173|  9.83k|  }
  174|  30.2k|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|   104k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   104k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   104k|  p += 8;
  210|   104k|  counter += 8;
  211|   104k|  count += 8;
  212|   104k|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|   265k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   265k|  value = value * 10 + limb(*p - UC('0'));
  218|   265k|  p++;
  219|   265k|  counter++;
  220|   265k|  count++;
  221|   265k|}
_ZN10fast_float12is_truncatedIDiEEbPKT_S3_:
  180|  2.28k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  2.28k|  uint64_t val;
  183|  11.9k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 10.3k, False: 1.56k]
  ------------------
  184|  10.3k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  10.3k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 719, False: 9.66k]
  ------------------
  186|    719|      return true;
  187|    719|    }
  188|  9.66k|    first += int_cmp_len<UC>();
  189|  9.66k|  }
  190|  1.70k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 254, False: 1.45k]
  ------------------
  191|    254|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 116, False: 138]
  ------------------
  192|    116|      return true;
  193|    116|    }
  194|    138|    ++first;
  195|    138|  }
  196|  1.45k|  return false;
  197|  1.56k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  23.8k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  23.8k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  23.8k|  int32_t sci_exp = scientific_exponent(num);
  411|  23.8k|  size_t max_digits = binary_format<T>::max_digits();
  412|  23.8k|  size_t digits = 0;
  413|  23.8k|  bigint bigmant;
  414|  23.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  23.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  23.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 10.9k, False: 12.9k]
  ------------------
  418|  10.9k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  12.9k|  } else {
  420|  12.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  12.9k|  }
  422|  23.8k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  18.9k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  18.9k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  166|  18.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  18.9k|  adjusted_mantissa answer;
  324|  18.9k|  bool truncated;
  325|  18.9k|  answer.mantissa = bigmant.hi64(truncated);
  326|  18.9k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  18.9k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  18.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  18.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  18.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  18.9k|    });
  333|  18.9k|  });
  334|       |
  335|  18.9k|  return answer;
  336|  18.9k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  18.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  18.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  18.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 18.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  18.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  18.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 555, False: 18.3k]
  ------------------
  109|    555|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    555|    am.power2++;
  111|    555|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  18.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  18.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 18.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  18.9k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  18.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  18.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  18.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  18.9k|    });
  333|  18.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  18.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  18.9k|  const uint64_t mask
  125|  18.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 18.9k]
  ------------------
  126|  18.9k|    ? UINT64_MAX
  127|  18.9k|    : (uint64_t(1) << shift) - 1;
  128|  18.9k|  const uint64_t halfway
  129|  18.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 18.9k]
  ------------------
  130|  18.9k|    ? 0
  131|  18.9k|    : uint64_t(1) << (shift - 1);
  132|  18.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  18.9k|  bool is_above = truncated_bits > halfway;
  134|  18.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  18.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 18.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  18.9k|  } else {
  140|  18.9k|    am.mantissa >>= shift;
  141|  18.9k|  }
  142|  18.9k|  am.power2 += shift;
  143|       |
  144|  18.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  18.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  18.9k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  18.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  18.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 721, False: 18.1k]
  |  Branch (331:27): [True: 17.5k, False: 651]
  |  Branch (331:41): [True: 5.94k, False: 11.5k]
  |  Branch (331:56): [True: 223, False: 12.0k]
  |  Branch (331:66): [True: 71, False: 152]
  ------------------
  332|  18.9k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  19.1k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  19.1k|  bigint& real_digits = bigmant;
  347|  19.1k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  19.1k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  19.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  19.1k|  T b;
  354|  19.1k|  to_float(false, am_b, b);
  355|  19.1k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  19.1k|  bigint theor_digits(theor.mantissa);
  357|  19.1k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  19.1k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  19.1k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  19.1k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 19.1k, False: 0]
  ------------------
  363|  19.1k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  166|  19.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  19.1k|  }
  365|  19.1k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 3.65k, False: 15.4k]
  ------------------
  366|  3.65k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  166|  3.65k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  15.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 15.2k, False: 177]
  ------------------
  368|  15.2k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  166|  15.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  15.2k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  19.1k|  int ord = real_digits.compare(theor_digits);
  373|  19.1k|  adjusted_mantissa answer = am;
  374|  19.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  19.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  19.1k|      (void)_;  // not needed, since we've done our comparison
  377|  19.1k|      (void)__; // not needed, since we've done our comparison
  378|  19.1k|      if (ord > 0) {
  379|  19.1k|        return true;
  380|  19.1k|      } else if (ord < 0) {
  381|  19.1k|        return false;
  382|  19.1k|      } else {
  383|  19.1k|        return is_odd;
  384|  19.1k|      }
  385|  19.1k|    });
  386|  19.1k|  });
  387|       |
  388|  19.1k|  return answer;
  389|  19.1k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  19.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  19.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  19.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 142, False: 18.9k]
  ------------------
   96|       |    // have a denormal float
   97|    142|    int32_t shift = -am.power2 + 1;
   98|    142|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    142|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 142, False: 0]
  ------------------
  101|    142|    return;
  102|    142|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  18.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  18.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 18.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  18.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  18.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 18.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  18.9k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  19.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  19.1k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  19.1k|  adjusted_mantissa am = to_extended(value);
   84|  19.1k|  am.mantissa <<= 1;
   85|  19.1k|  am.mantissa += 1;
   86|  19.1k|  am.power2 -= 1;
   87|  19.1k|  return am;
   88|  19.1k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  19.1k|adjusted_mantissa to_extended(T value) noexcept {
   50|  19.1k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  19.1k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  19.1k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  19.1k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  19.1k|  adjusted_mantissa am;
   56|  19.1k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  19.1k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  19.1k|  ::memcpy(&bits, &value, sizeof(T));
   62|  19.1k|#endif
   63|  19.1k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 142, False: 18.9k]
  ------------------
   64|       |    // denormal
   65|    142|    am.power2 = 1 - bias;
   66|    142|    am.mantissa = bits & mantissa_mask;
   67|  18.9k|  } else {
   68|       |    // normal
   69|  18.9k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  18.9k|    am.power2 -= bias;
   71|  18.9k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  18.9k|  }
   73|       |
   74|  19.1k|  return am;
   75|  19.1k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  19.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  19.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  19.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 142, False: 18.9k]
  ------------------
   96|       |    // have a denormal float
   97|    142|    int32_t shift = -am.power2 + 1;
   98|    142|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    142|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 142, False: 0]
  ------------------
  101|    142|    return;
  102|    142|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  18.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  18.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 72, False: 18.9k]
  ------------------
  109|     72|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     72|    am.power2++;
  111|     72|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  18.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  18.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 18.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  18.9k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  19.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  19.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  19.1k|      (void)_;  // not needed, since we've done our comparison
  377|  19.1k|      (void)__; // not needed, since we've done our comparison
  378|  19.1k|      if (ord > 0) {
  379|  19.1k|        return true;
  380|  19.1k|      } else if (ord < 0) {
  381|  19.1k|        return false;
  382|  19.1k|      } else {
  383|  19.1k|        return is_odd;
  384|  19.1k|      }
  385|  19.1k|    });
  386|  19.1k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  19.1k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  19.1k|  const uint64_t mask
  125|  19.1k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 19.1k]
  ------------------
  126|  19.1k|    ? UINT64_MAX
  127|  19.1k|    : (uint64_t(1) << shift) - 1;
  128|  19.1k|  const uint64_t halfway
  129|  19.1k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 19.1k]
  ------------------
  130|  19.1k|    ? 0
  131|  19.1k|    : uint64_t(1) << (shift - 1);
  132|  19.1k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  19.1k|  bool is_above = truncated_bits > halfway;
  134|  19.1k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  19.1k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 19.1k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  19.1k|  } else {
  140|  19.1k|    am.mantissa >>= shift;
  141|  19.1k|  }
  142|  19.1k|  am.power2 += shift;
  143|       |
  144|  19.1k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  19.1k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  19.1k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  19.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  19.1k|      (void)_;  // not needed, since we've done our comparison
  377|  19.1k|      (void)__; // not needed, since we've done our comparison
  378|  19.1k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 4.01k, False: 15.1k]
  ------------------
  379|  4.01k|        return true;
  380|  15.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 14.4k, False: 689]
  ------------------
  381|  14.4k|        return false;
  382|  14.4k|      } else {
  383|    689|        return is_odd;
  384|    689|      }
  385|  19.1k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  14.2k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  14.2k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  14.2k|  int32_t sci_exp = scientific_exponent(num);
  411|  14.2k|  size_t max_digits = binary_format<T>::max_digits();
  412|  14.2k|  size_t digits = 0;
  413|  14.2k|  bigint bigmant;
  414|  14.2k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  14.2k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  14.2k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 7.99k, False: 6.20k]
  ------------------
  418|  7.99k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  7.99k|  } else {
  420|  6.20k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  6.20k|  }
  422|  14.2k|}

_ZN10fast_float4spanIKcEC2Ev:
  224|  2.05M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  223|  1.16M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  226|   295k|  constexpr size_t len() const noexcept {
  227|   295k|    return length;
  228|   295k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  453|   880k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  454|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  455|       |  return 0;
  456|       |#else
  457|   880k|  return -10;
  458|   880k|#endif
  459|   880k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  504|   849k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  505|   849k|  return 10;
  506|   849k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  518|   709k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  519|   709k|  return uint64_t(2) << mantissa_explicit_bits();
  520|   709k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  464|  2.32M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  465|  2.32M|  return 23;
  466|  2.32M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  535|   638k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  536|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  537|   638k|  return (void)powers_of_ten[0], powers_of_ten[power];
  538|   638k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  336|   840k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  555|   350k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  556|   350k|  return -65;
  557|   350k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  546|   348k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  547|   348k|  return 38;
  548|   348k|}
_ZN10fast_float14leading_zeroesEm:
  257|   789k|int leading_zeroes(uint64_t input_num) {
  258|   789k|  assert(input_num > 0);
  259|   789k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (259:7): [Folded - Ignored]
  ------------------
  260|      0|    return leading_zeroes_generic(input_num);
  261|      0|  }
  262|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  263|       |  #if defined(_M_X64) || defined(_M_ARM64)
  264|       |  unsigned long leading_zero = 0;
  265|       |  // Search the mask data from most significant bit (MSB)
  266|       |  // to least significant bit (LSB) for a set bit (1).
  267|       |  _BitScanReverse64(&leading_zero, input_num);
  268|       |  return (int)(63 - leading_zero);
  269|       |  #else
  270|       |  return leading_zeroes_generic(input_num);
  271|       |  #endif
  272|       |#else
  273|   789k|  return __builtin_clzll(input_num);
  274|   789k|#endif
  275|   789k|}
_ZN10fast_float19full_multiplicationEmm:
  309|   869k|value128 full_multiplication(uint64_t a, uint64_t b) {
  310|   869k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (310:7): [Folded - Ignored]
  ------------------
  311|      0|    value128 answer;
  312|      0|    answer.low = umul128_generic(a, b, &answer.high);
  313|      0|    return answer;
  314|      0|  }
  315|   869k|  value128 answer;
  316|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  317|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  318|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  319|       |  answer.high = __umulh(a, b);
  320|       |  answer.low = a * b;
  321|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  322|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  323|       |#elif defined(FASTFLOAT_64BIT)
  324|   869k|  __uint128_t r = ((__uint128_t)a) * b;
  325|   869k|  answer.low = uint64_t(r);
  326|   869k|  answer.high = uint64_t(r >> 64);
  327|       |#else
  328|       |  answer.low = umul128_generic(a, b, &answer.high);
  329|       |#endif
  330|   869k|  return answer;
  331|   869k|}
_ZN10fast_float8value128C2Ev:
  240|   869k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  487|   403k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  488|   403k|  return -127;
  489|   403k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  480|   126k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  481|   126k|  return -17;
  482|   126k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  472|   126k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  473|   126k|  return 10;
  474|   126k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  340|   247k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  341|   247k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (341:12): [True: 68.3k, False: 179k]
  |  Branch (341:38): [True: 0, False: 179k]
  ------------------
  342|   247k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  562|  30.3k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  563|  30.3k|  return 114;
  564|  30.3k|}
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  638|   150k|{
  639|   150k|    return sizeof(uint64_t) / sizeof(UC);
  640|   150k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  632|  82.3k|{
  633|  82.3k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  634|  82.3k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (634:12): [Folded - Ignored]
  |  Branch (634:53): [Folded - Ignored]
  ------------------
  635|  82.3k|}
_ZN10fast_float4spanImEC2EPKmm:
  223|  96.2k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  226|   291k|  constexpr size_t len() const noexcept {
  227|   291k|    return length;
  228|   291k|  }
_ZNK10fast_float4spanImEixEm:
  230|   157k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  231|   157k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   157k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  232|   157k|    return ptr[index];
  233|   157k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  595|   271k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|   271k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|   271k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|   271k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|   271k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|   271k|  ::memcpy(&value, &word, sizeof(T));
  604|   271k|#endif
  605|   271k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  499|   271k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  494|   652k|template <> inline constexpr int binary_format<float>::infinite_power() {
  495|   652k|  return 0xFF;
  496|   652k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   42|  1.02M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  224|  1.69M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  223|   952k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  226|   201k|  constexpr size_t len() const noexcept {
  227|   201k|    return length;
  228|   201k|  }
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  638|   285k|{
  639|   285k|    return sizeof(uint64_t) / sizeof(UC);
  640|   285k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  632|   152k|{
  633|   152k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  634|   152k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (634:12): [Folded - Ignored]
  |  Branch (634:53): [Folded - Ignored]
  ------------------
  635|   152k|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   42|   847k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  445|   992k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  446|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  447|       |  return 0;
  448|       |#else
  449|   992k|  return -22;
  450|   992k|#endif
  451|   992k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  501|   964k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  502|   964k|  return 22;
  503|   964k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  508|   796k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  509|   796k|  return uint64_t(2) << mantissa_explicit_bits();
  510|   796k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  461|  2.33M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  462|  2.33M|  return 52;
  463|  2.33M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  530|   778k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  531|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  532|   778k|  return (void)powers_of_ten[0], powers_of_ten[power];
  533|   778k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  551|   343k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  552|   343k|  return -342;
  553|   343k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  542|   342k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  543|   342k|  return 308;
  544|   342k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  484|   415k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  485|   415k|  return -1023;
  486|   415k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  476|  94.4k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  477|  94.4k|  return -4;
  478|  94.4k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  468|  58.4k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  469|  58.4k|  return 23;
  470|  58.4k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  559|  38.0k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  560|  38.0k|  return 769;
  561|  38.0k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  595|   233k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|   233k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|   233k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|   233k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|   233k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|   233k|  ::memcpy(&value, &word, sizeof(T));
  604|   233k|#endif
  605|   233k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  498|   233k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  491|   596k|template <> inline constexpr int binary_format<double>::infinite_power() {
  492|   596k|  return 0x7FF;
  493|   596k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   481k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   481k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   481k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   481k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   481k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   481k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   481k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   481k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 481k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   481k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   481k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 481k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   481k|  answer.ec = std::errc(); // be optimistic
  174|   481k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   481k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 462k, False: 18.9k]
  |  Branch (180:69): [True: 432k, False: 30.0k]
  |  Branch (180:131): [True: 384k, False: 48.1k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   384k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 384k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   384k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 346k, False: 37.9k]
  ------------------
  192|   346k|        value = T(pns.mantissa);
  193|   346k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 3.16k, False: 343k]
  ------------------
  194|   343k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   346k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 346k]
  ------------------
  196|   346k|        return answer;
  197|   346k|      }
  198|   384k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   384k|  }
  215|   135k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   135k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 65.8k, False: 69.2k]
  |  Branch (216:29): [True: 65.8k, False: 0]
  ------------------
  217|  65.8k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 17.9k, False: 47.9k]
  ------------------
  218|  17.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  17.9k|    }
  220|  65.8k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   135k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 17.9k, False: 117k]
  ------------------
  224|   135k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   135k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 132k, False: 2.63k]
  |  Branch (226:29): [True: 10.0k, False: 122k]
  |  Branch (226:49): [True: 770, False: 9.28k]
  |  Branch (226:68): [True: 3.99k, False: 130k]
  ------------------
  227|  4.76k|    answer.ec = std::errc::result_out_of_range;
  228|  4.76k|  }
  229|   135k|  return answer;
  230|   481k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   75|  1.50M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   76|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   77|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   78|       |  return false;
   79|       |#endif
   80|       |  // See
   81|       |  // A fast function to check your floating-point rounding mode
   82|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   83|       |  //
   84|       |  // This function is meant to be equivalent to :
   85|       |  // prior: #include <cfenv>
   86|       |  //  return fegetround() == FE_TONEAREST;
   87|       |  // However, it is expected to be much faster than the fegetround()
   88|       |  // function call.
   89|       |  //
   90|       |  // The volatile keywoard prevents the compiler from computing the function
   91|       |  // at compile-time.
   92|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   93|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   94|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   95|       |  // precision, as in 387 instructions).
   96|  1.50M|  static volatile float fmin = std::numeric_limits<float>::min();
   97|  1.50M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   98|       |  //
   99|       |  // Explanation:
  100|       |  // Only when fegetround() == FE_TONEAREST do we have that
  101|       |  // fmin + 1.0f == 1.0f - fmin.
  102|       |  //
  103|       |  // FE_UPWARD:
  104|       |  //  fmin + 1.0f > 1
  105|       |  //  1.0f - fmin == 1
  106|       |  //
  107|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  108|       |  //  fmin + 1.0f == 1
  109|       |  //  1.0f - fmin < 1
  110|       |  //
  111|       |  // Note: This may fail to be accurate if fast-math has been
  112|       |  // enabled, as rounding conventions may not apply.
  113|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  114|       |  #   pragma warning(push)
  115|       |  //  todo: is there a VS warning?
  116|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  117|       |  #elif defined(__clang__)
  118|  1.50M|  #   pragma clang diagnostic push
  119|  1.50M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  120|       |  #elif defined(__GNUC__)
  121|       |  #   pragma GCC diagnostic push
  122|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  123|       |  #endif
  124|  1.50M|  return (fmini + 1.0f == 1.0f - fmini);
  125|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  126|       |  #   pragma warning(pop)
  127|       |  #elif defined(__clang__)
  128|  1.50M|  #   pragma clang diagnostic pop
  129|       |  #elif defined(__GNUC__)
  130|       |  #   pragma GCC diagnostic pop
  131|       |  #endif
  132|  1.50M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   399k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   399k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   399k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   399k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   399k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   399k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   399k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   399k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 399k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   399k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   399k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 399k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   399k|  answer.ec = std::errc(); // be optimistic
  174|   399k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   399k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 387k, False: 11.9k]
  |  Branch (180:69): [True: 362k, False: 24.9k]
  |  Branch (180:131): [True: 325k, False: 37.0k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   325k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 325k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   325k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 291k, False: 33.1k]
  ------------------
  192|   291k|        value = T(pns.mantissa);
  193|   291k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 2.49k, False: 289k]
  ------------------
  194|   289k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   291k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 291k]
  ------------------
  196|   291k|        return answer;
  197|   291k|      }
  198|   325k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   325k|  }
  215|   107k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   107k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 47.6k, False: 59.4k]
  |  Branch (216:29): [True: 47.6k, False: 0]
  ------------------
  217|  47.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 12.4k, False: 35.2k]
  ------------------
  218|  12.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  12.4k|    }
  220|  47.6k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   107k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 12.4k, False: 94.6k]
  ------------------
  224|   107k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   107k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 104k, False: 2.55k]
  |  Branch (226:29): [True: 8.87k, False: 95.6k]
  |  Branch (226:49): [True: 702, False: 8.17k]
  |  Branch (226:68): [True: 2.90k, False: 103k]
  ------------------
  227|  3.61k|    answer.ec = std::errc::result_out_of_range;
  228|  3.61k|  }
  229|   107k|  return answer;
  230|   399k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   543k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   543k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   543k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   543k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   543k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   543k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   543k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   543k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 543k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   543k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   543k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 543k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   543k|  answer.ec = std::errc(); // be optimistic
  174|   543k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   543k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 527k, False: 16.6k]
  |  Branch (180:69): [True: 496k, False: 30.7k]
  |  Branch (180:131): [True: 432k, False: 63.5k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   432k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 432k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   432k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 422k, False: 9.93k]
  ------------------
  192|   422k|        value = T(pns.mantissa);
  193|   422k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 17.2k, False: 405k]
  ------------------
  194|   405k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   422k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 422k]
  ------------------
  196|   422k|        return answer;
  197|   422k|      }
  198|   432k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   432k|  }
  215|   120k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   120k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 77.5k, False: 43.3k]
  |  Branch (216:29): [True: 77.5k, False: 0]
  ------------------
  217|  77.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 23.8k, False: 53.7k]
  ------------------
  218|  23.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  23.8k|    }
  220|  77.5k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   120k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 23.8k, False: 97.0k]
  ------------------
  224|   120k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   120k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 118k, False: 2.56k]
  |  Branch (226:29): [True: 6.28k, False: 112k]
  |  Branch (226:49): [True: 345, False: 5.94k]
  |  Branch (226:68): [True: 1.92k, False: 118k]
  ------------------
  227|  2.26k|    answer.ec = std::errc::result_out_of_range;
  228|  2.26k|  }
  229|   120k|  return answer;
  230|   543k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   448k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   448k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   448k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   448k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   448k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   448k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   448k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   448k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 448k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   448k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   448k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 448k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   448k|  answer.ec = std::errc(); // be optimistic
  174|   448k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   448k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 437k, False: 11.1k]
  |  Branch (180:69): [True: 412k, False: 25.4k]
  |  Branch (180:131): [True: 364k, False: 48.2k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   364k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 364k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   364k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 355k, False: 8.37k]
  ------------------
  192|   355k|        value = T(pns.mantissa);
  193|   355k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 14.6k, False: 341k]
  ------------------
  194|   341k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   355k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 355k]
  ------------------
  196|   355k|        return answer;
  197|   355k|      }
  198|   364k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   364k|  }
  215|  93.2k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|  93.2k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 56.5k, False: 36.6k]
  |  Branch (216:29): [True: 56.5k, False: 0]
  ------------------
  217|  56.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 14.2k, False: 42.3k]
  ------------------
  218|  14.2k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  14.2k|    }
  220|  56.5k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|  93.2k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 14.2k, False: 79.0k]
  ------------------
  224|  93.2k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|  93.2k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 90.7k, False: 2.50k]
  |  Branch (226:29): [True: 5.78k, False: 84.9k]
  |  Branch (226:49): [True: 268, False: 5.51k]
  |  Branch (226:68): [True: 1.52k, False: 91.4k]
  ------------------
  227|  1.79k|    answer.ec = std::errc::result_out_of_range;
  228|  1.79k|  }
  229|  93.2k|  return answer;
  230|   448k|}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  1.16M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|   199k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   201k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   216k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   216k|  return idx < lenminusstep;
   70|   216k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  14.4k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  14.4k|  return &buf[idx];
   75|  14.4k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   216k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   216k|  idx += STEP_SIZE;
   88|   216k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   201k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   201k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 201k]
  ------------------
   80|   201k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   201k|  std::memcpy(dst, buf + idx, len - idx);
   82|   201k|  return len - idx;
   83|   201k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   201k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   201k|    size_t pos = 0;
   12|   201k|    size_t count = 0;
   13|   212k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 10.6k, False: 201k]
  ------------------
   14|  10.6k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  10.6k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  10.6k|      count += count_ones(utf8_continuation_mask);
   17|  10.6k|    }
   18|   201k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   201k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   761k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   661k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   661k|      size_t pos = 0;
  131|   661k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   661k|      size_t leading_byte = 0;
  139|   661k|      size_t margin = size;
  140|  1.49M|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 831k, False: 661k]
  |  Branch (140:27): [True: 831k, False: 0]
  ------------------
  141|   831k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   831k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   661k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   661k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 661k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   661k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 661k]
  ------------------
  195|   661k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 661k, False: 0]
  ------------------
  196|   661k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   661k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 58.8k, False: 603k]
  ------------------
  198|   603k|        utf32_output += howmany;
  199|   603k|      }
  200|   603k|      return utf32_output - start;
  201|   661k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   761k|    simdutf_really_inline bool errors() const {
  291|   761k|      return this->error.any_bits_set_anywhere();
  292|   761k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|  99.6k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|  99.6k|      size_t pos = 0;
  205|  99.6k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|  99.6k|      size_t leading_byte = 0;
  213|  99.6k|      size_t margin = size;
  214|   199k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 99.6k, False: 99.6k]
  |  Branch (214:27): [True: 99.6k, False: 0]
  ------------------
  215|  99.6k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|  99.6k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|  99.6k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|  99.6k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 99.6k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|  99.6k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 99.6k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|  99.6k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 99.6k, False: 0]
  ------------------
  279|  99.6k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|  99.6k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 99.6k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|  99.6k|        } else {    // In case of success, we want the number of word written
  284|  99.6k|          utf32_output += res.count;
  285|  99.6k|        }
  286|  99.6k|      }
  287|  99.6k|      return result(error_code::SUCCESS, utf32_output - start);
  288|  99.6k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  2.00k|    char32_t* utf32_output) noexcept {
   13|  2.00k|  size_t pos = 0;
   14|  2.00k|  char32_t* start{utf32_output};
   15|  2.00k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  12.5k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 10.5k, False: 2.00k]
  ------------------
   17|  10.5k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  10.5k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 9.41k, False: 1.12k]
  ------------------
   19|  9.41k|      in.store_ascii_as_utf32(utf32_output);
   20|  9.41k|      utf32_output += 64;
   21|  9.41k|      pos += 64;
   22|  9.41k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  1.12k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  1.12k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  1.12k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  1.12k|    size_t max_starting_point = (pos + 64) - 12;
   28|  8.29k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 7.16k, False: 1.12k]
  ------------------
   29|  7.16k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  7.16k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  7.16k|      pos += consumed;
   32|  7.16k|      utf8_end_of_code_point_mask >>= consumed;
   33|  7.16k|      }
   34|  1.12k|    }
   35|  10.5k|  }
   36|  2.00k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  2.00k|  return utf32_output - start;
   38|  2.00k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   216k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   216k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   216k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 214k, False: 1.90k]
  |  |  ------------------
  ------------------
  154|   214k|        this->error |= this->prev_incomplete;
  155|   214k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.90k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.90k|            "We support either two or four chunks per 64-byte block.");
  159|  1.90k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.90k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.90k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.90k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.90k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.90k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.90k|      }
  172|   216k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.81k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.81k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.81k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.81k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.81k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.81k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.81k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.81k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.81k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.81k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.81k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.81k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.81k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.81k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.81k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.81k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.81k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.81k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.81k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.81k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.81k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.81k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.81k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.81k|    );
   51|  3.81k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.81k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.81k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.81k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.81k|      CARRY,
   59|  3.81k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.81k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.81k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.81k|    );
   80|  3.81k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.81k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.81k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.81k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.81k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.81k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.81k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.81k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.81k|    );
   96|  3.81k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.81k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.81k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.81k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.81k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.81k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.81k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.81k|    return must23_80 ^ sc;
  105|  3.81k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.90k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.90k|    static const uint8_t max_array[32] = {
  115|  1.90k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.90k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.90k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.90k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.90k|    };
  120|  1.90k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.90k|    return input.gt_bits(max_value);
  122|  1.90k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   201k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   201k|      this->error |= this->prev_incomplete;
  150|   201k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   201k|    simdutf_really_inline bool errors() const {
  176|   201k|      return this->error.any_bits_set_anywhere();
  177|   201k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   201k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   201k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   201k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   201k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   201k|    checker c{};
   12|   201k|    buf_block_reader<64> reader(input, length);
   13|   216k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 14.4k, False: 201k]
  ------------------
   14|  14.4k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  14.4k|      c.check_next_input(in);
   16|  14.4k|      reader.advance();
   17|  14.4k|    }
   18|   201k|    uint8_t block[64]{};
   19|   201k|    reader.get_remainder(block);
   20|   201k|    simd::simd8x64<uint8_t> in(block);
   21|   201k|    c.check_next_input(in);
   22|   201k|    reader.advance();
   23|   201k|    c.check_eof();
   24|   201k|    return !c.errors();
   25|   201k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  7.16k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  7.16k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  7.16k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  7.16k|      utf8_end_of_code_point_mask & 0xfff;
   24|  7.16k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.73k, False: 5.43k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.73k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.73k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.73k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.73k|    return 16; // We consumed 16 bytes.
   30|  1.73k|  }
   31|  5.43k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 101, False: 5.33k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|    101|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|    101|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|    101|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|    101|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|    101|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|    101|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|    101|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|    101|    return 16;
   42|    101|  }
   43|  5.33k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 73, False: 5.26k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     73|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     73|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     73|    const __m128i ascii =
   49|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     73|    const __m128i middlebyte =
   51|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     73|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     73|    const __m128i highbyte =
   54|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     73|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     73|    const __m128i composed =
   57|     73|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     73|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     73|    utf32_output += 4;
   60|     73|    return 12;
   61|     73|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  5.26k|  const uint8_t idx =
   65|  5.26k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  5.26k|  const uint8_t consumed =
   67|  5.26k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  5.26k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 3.29k, False: 1.96k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  3.29k|    const __m128i sh =
   75|  3.29k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  3.29k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  3.29k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  3.29k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  3.29k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  3.29k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  3.29k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  3.29k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 694, False: 1.27k]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    694|    const __m128i sh =
   86|    694|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    694|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    694|    const __m128i ascii =
   89|    694|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    694|    const __m128i middlebyte =
   91|    694|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    694|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    694|    const __m128i highbyte =
   94|    694|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    694|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    694|    const __m128i composed =
   97|    694|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    694|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    694|    utf32_output += 4;
  100|  1.27k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 1.27k, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|  1.27k|    const __m128i sh =
  103|  1.27k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|  1.27k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|  1.27k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|  1.27k|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|  1.27k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|  1.27k|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|  1.27k|    const __m128i correct =
  111|  1.27k|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|  1.27k|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|  1.27k|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|  1.27k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|  1.27k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|  1.27k|    const __m128i composed =
  117|  1.27k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|  1.27k|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|  1.27k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|  1.27k|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|  1.27k|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  5.26k|  return consumed;
  125|  5.33k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|   201k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|   201k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|   201k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   661k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   661k|  utf8_to_utf32::validating_transcoder converter;
  276|   661k|  return converter.convert(buf, len, utf32_output);
  277|   661k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|  99.6k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|  99.6k|  utf8_to_utf32::validating_transcoder converter;
  281|  99.6k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|  99.6k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  2.00k|    char32_t* utf32_output) const noexcept {
  286|  2.00k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  2.00k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|   201k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|   201k|  return utf8::count_code_points(input, length);
  778|   201k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   216k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   216k|  return input.reduce_or().is_ascii();
   25|   216k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.81k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.81k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.81k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.81k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.81k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  1.16M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  1.16M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  1.16M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  1.16M|    return active_implementation;
  815|  1.16M|}
_ZN7simdutf13validate_utf8EPKcm:
  817|   201k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|   201k|  return get_active_implementation()->validate_utf8(buf, len);
  819|   201k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   661k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   661k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   661k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|  99.6k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|  99.6k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|  99.6k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  2.00k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  2.00k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  2.00k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|   201k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|   201k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|   201k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   201k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   201k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   201k|    size_t counter{0};
  171|   451k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 250k, False: 201k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   250k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 249k, False: 548]
  ------------------
  174|   250k|    }
  175|   201k|    return counter;
  176|   201k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   661k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   661k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   661k|  size_t pos = 0;
   12|   661k|  char32_t* start{utf32_output};
   13|  1.26M|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 661k, False: 603k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   661k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 661k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   661k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   661k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 552k, False: 109k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   552k|      *utf32_output++ = char32_t(leading_byte);
   34|   552k|      pos++;
   35|   552k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 70.6k, False: 38.6k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  70.6k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 70.6k]
  ------------------
   38|  70.6k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 27.1k, False: 43.4k]
  ------------------
   39|       |      // range check
   40|  43.4k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  43.4k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 723, False: 42.7k]
  |  Branch (41:32): [True: 0, False: 42.7k]
  ------------------
   42|  42.7k|      *utf32_output++ = char32_t(code_point);
   43|  42.7k|      pos += 2;
   44|  42.7k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 17.6k, False: 21.0k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  17.6k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 17.6k]
  ------------------
   47|       |
   48|  17.6k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 9.28k, False: 8.32k]
  ------------------
   49|  8.32k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.27k, False: 7.05k]
  ------------------
   50|       |      // range check
   51|  7.05k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  7.05k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  7.05k|                   (data[pos + 2] & 0b00111111);
   54|  7.05k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 727, False: 6.32k]
  |  Branch (54:33): [True: 0, False: 6.32k]
  ------------------
   55|  7.05k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 4.51k, False: 1.80k]
  |  Branch (55:35): [True: 1.42k, False: 3.09k]
  ------------------
   56|  2.14k|        return 0;
   57|  2.14k|      }
   58|  4.90k|      *utf32_output++ = char32_t(code_point);
   59|  4.90k|      pos += 3;
   60|  21.0k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 21.0k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  21.0k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 21.0k]
  ------------------
   63|  21.0k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 7.43k, False: 13.6k]
  ------------------
   64|  13.6k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 4.86k, False: 8.74k]
  ------------------
   65|  8.74k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 3.11k, False: 5.63k]
  ------------------
   66|       |
   67|       |      // range check
   68|  5.63k|      uint32_t code_point =
   69|  5.63k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  5.63k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  5.63k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 1.29k, False: 4.33k]
  |  Branch (71:35): [True: 1.51k, False: 2.82k]
  ------------------
   72|  2.82k|      *utf32_output++ = char32_t(code_point);
   73|  2.82k|      pos += 4;
   74|  2.82k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   661k|  }
   78|   603k|  return utf32_output - start;
   79|   661k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|  99.6k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|  99.6k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|  99.6k|  size_t pos = 0;
   84|  99.6k|  char32_t* start{utf32_output};
   85|   199k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 99.6k, False: 99.6k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|  99.6k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 99.6k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|  99.6k|    uint8_t leading_byte = data[pos]; // leading byte
  103|  99.6k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 99.6k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|  99.6k|      *utf32_output++ = char32_t(leading_byte);
  106|  99.6k|      pos++;
  107|  99.6k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|  99.6k|  }
  151|  99.6k|  return result(error_code::SUCCESS, utf32_output - start);
  152|  99.6k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|  99.6k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|  99.6k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|  99.6k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|  99.6k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 99.6k, False: 0]
  ------------------
  172|  99.6k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|  99.6k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 99.6k, False: 0]
  ------------------
  175|  99.6k|    unsigned char byte = buf[0-i];
  176|  99.6k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|  99.6k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 99.6k, False: 0]
  ------------------
  178|  99.6k|      buf -= i;
  179|  99.6k|      extra_len = i;
  180|  99.6k|      break;
  181|  99.6k|    }
  182|  99.6k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|  99.6k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 99.6k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|  99.6k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|  99.6k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 99.6k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|  99.6k|  return res;
  202|  99.6k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  2.00k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  2.00k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  2.00k|  size_t pos = 0;
   12|  2.00k|  char32_t* start{utf32_output};
   13|  17.7k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 15.7k, False: 2.00k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  15.7k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 8.84k, False: 6.88k]
  ------------------
   16|  8.84k|      uint64_t v;
   17|  8.84k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  8.84k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 7.57k, False: 1.26k]
  ------------------
   19|  7.57k|        size_t final_pos = pos + 8;
   20|  68.2k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 60.6k, False: 7.57k]
  ------------------
   21|  60.6k|          *utf32_output++ = char32_t(buf[pos]);
   22|  60.6k|          pos++;
   23|  60.6k|        }
   24|  7.57k|        continue;
   25|  7.57k|      }
   26|  8.84k|    }
   27|  8.15k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  8.15k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 7.62k, False: 524]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  7.62k|      *utf32_output++ = char32_t(leading_byte);
   31|  7.62k|      pos++;
   32|  7.62k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 356, False: 168]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    356|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 356]
  ------------------
   35|    356|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    356|      pos += 2;
   37|    356|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 115, False: 53]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    115|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 115]
  ------------------
   40|    115|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    115|      pos += 3;
   42|    115|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 53, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     53|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 53]
  ------------------
   45|     53|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     53|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     53|      *utf32_output++ = char32_t(code_word);
   48|     53|      pos += 4;
   49|     53|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  8.15k|  }
   54|  2.00k|  return utf32_output - start;
   55|  2.00k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  10.6k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  10.6k|  return _popcnt64(input_num);
   16|  10.6k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   605k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   605k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   605k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   605k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   216k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   434k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   434k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   434k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  1.94M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  1.94M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  1.94M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  1.94M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   216k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   216k|      return this->chunks[0] | this->chunks[1];
  297|   216k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|   640k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  3.55M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   216k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   420k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.81k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.81k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.81k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.62k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  11.4k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  11.4k|      return lookup_16(simd8<L>::repeat_16(
  140|  11.4k|        replace0,  replace1,  replace2,  replace3,
  141|  11.4k|        replace4,  replace5,  replace6,  replace7,
  142|  11.4k|        replace8,  replace9,  replace10, replace11,
  143|  11.4k|        replace12, replace13, replace14, replace15
  144|  11.4k|      ));
  145|  11.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  11.4k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  11.4k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  11.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  15.2k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  11.4k|    ) {
  218|  11.4k|      return simd8<uint8_t>(
  219|  11.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  11.4k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  11.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  11.4k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  11.4k|      );
  224|  11.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  11.4k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  22.8k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   784k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   784k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.81k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.81k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.81k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.81k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.81k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.81k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  9.53k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  72.4k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  72.4k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  72.4k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  72.4k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  25.1k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   161k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  27.4k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  27.4k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  27.4k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.81k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  15.6k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.81k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.81k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.90k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.90k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   963k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   963k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  21.2k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  42.4k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  42.4k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  42.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  10.5k|    simdutf_really_inline bool is_ascii() const {
  300|  10.5k|      return this->reduce_or().is_ascii();
  301|  10.5k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  10.5k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  10.5k|      return this->chunks[0] | this->chunks[1];
  297|  10.5k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  10.5k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  10.5k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  1.12k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  1.12k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  1.12k|      return  simd8x64<bool>(
  365|  1.12k|        this->chunks[0] < mask,
  366|  1.12k|        this->chunks[1] < mask
  367|  1.12k|      ).to_bitmask();
  368|  1.12k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  2.25k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  11.8k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  11.8k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  11.8k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  11.8k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  11.8k|      return r_lo | (r_hi << 32);
  287|  11.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  23.6k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  23.6k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  9.41k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  9.41k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  9.41k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  9.41k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  18.8k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  18.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  18.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  18.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  18.8k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  18.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  10.6k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  10.6k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  10.6k|      return  simd8x64<bool>(
  373|  10.6k|        this->chunks[0] > mask,
  374|  10.6k|        this->chunks[1] > mask
  375|  10.6k|      ).to_bitmask();
  376|  10.6k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   671k|{
  619|   671k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   671k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   671k|    static_cast<    \
  |  |  247|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   671k|}
_ZN3scn2v26detail20check_scan_arg_typesIJfEEEvv:
  386|  1.43M|{
  387|  1.43M|    static_assert(
  388|  1.43M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.43M|        "Scan argument types must be default constructible");
  390|  1.43M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.43M|                  "Scan argument types must be Destructible");
  392|  1.43M|    static_assert(
  393|  1.43M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.43M|        "Scan argument types must not be references");
  395|  1.43M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2EONSt3__15tupleIJfEEE:
  563|   671k|    {
  564|   671k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   671k|    {
  574|   671k|        return {
  575|   671k|            detail::make_arg<base::is_packed, Context,
  576|   671k|                             detail::mapped_type_constant<
  577|   671k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   671k|                args)...};
  579|   671k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|   671k|{
  415|   671k|    return make_value<Context>(value);
  416|   671k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
  371|   744k|{
  372|   744k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   744k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   744k|                                  needs_context_tag>) {
  376|   744k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   744k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   744k|    }
  378|   744k|    else {
  379|   744k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   744k|            value, context_tag<Context>{}));
  381|   744k|    }
  382|   744k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERf:
  216|   744k|    {                                                                        \
  217|   744k|        return val;                                                          \
  218|   744k|    }
_ZN3scn2v26detail15make_value_implIRfEEDaOT_:
  340|  1.43M|{
  341|  1.43M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.43M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.43M|    constexpr bool scannable_char =
  345|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.43M|    static_assert(scannable_char,
  347|  1.43M|                  "Cannot scan an argument of an unsupported character "
  348|  1.43M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.43M|    constexpr bool scannable_const =
  351|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.43M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.43M|    constexpr bool scannable_disabled =
  355|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.43M|    static_assert(scannable_disabled,
  357|  1.43M|                  "Cannot scan an argument that has been disabled by "
  358|  1.43M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.43M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.43M|    static_assert(
  362|  1.43M|        scannable,
  363|  1.43M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.43M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.43M|    return arg_value{arg};
  367|  1.43M|}
_ZN3scn2v26detail9arg_valueC2IfEERT_:
  159|  1.43M|    {
  160|  1.43M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   671k|    {
  647|   671k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  2.18M|    {
  694|  2.18M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
  553|   610k|    {
  554|   610k|        return m_args;
  555|   610k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  72.5k|{
  400|  72.5k|    check_scan_arg_types<T>();
  401|       |
  402|  72.5k|    basic_scan_arg<Context> arg;
  403|  72.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  72.5k|    arg.m_value = make_value<Context>(value);
  405|  72.5k|    return arg;
  406|  72.5k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  2.42M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  4.64M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   751k|{
  619|   751k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   751k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   751k|    static_cast<    \
  |  |  247|   751k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   751k|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  386|  1.59M|{
  387|  1.59M|    static_assert(
  388|  1.59M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.59M|        "Scan argument types must be default constructible");
  390|  1.59M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.59M|                  "Scan argument types must be Destructible");
  392|  1.59M|    static_assert(
  393|  1.59M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.59M|        "Scan argument types must not be references");
  395|  1.59M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  563|   751k|    {
  564|   751k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   751k|    {
  574|   751k|        return {
  575|   751k|            detail::make_arg<base::is_packed, Context,
  576|   751k|                             detail::mapped_type_constant<
  577|   751k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   751k|                args)...};
  579|   751k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|   751k|{
  415|   751k|    return make_value<Context>(value);
  416|   751k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  371|   834k|{
  372|   834k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   834k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   834k|                                  needs_context_tag>) {
  376|   834k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   834k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   834k|    }
  378|   834k|    else {
  379|   834k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   834k|            value, context_tag<Context>{}));
  381|   834k|    }
  382|   834k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  216|   834k|    {                                                                        \
  217|   834k|        return val;                                                          \
  218|   834k|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  340|  1.59M|{
  341|  1.59M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.59M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.59M|    constexpr bool scannable_char =
  345|  1.59M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.59M|    static_assert(scannable_char,
  347|  1.59M|                  "Cannot scan an argument of an unsupported character "
  348|  1.59M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.59M|    constexpr bool scannable_const =
  351|  1.59M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.59M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.59M|    constexpr bool scannable_disabled =
  355|  1.59M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.59M|    static_assert(scannable_disabled,
  357|  1.59M|                  "Cannot scan an argument that has been disabled by "
  358|  1.59M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.59M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.59M|    static_assert(
  362|  1.59M|        scannable,
  363|  1.59M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.59M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.59M|    return arg_value{arg};
  367|  1.59M|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  1.59M|    {
  160|  1.59M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   751k|    {
  647|   751k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
  553|   689k|    {
  554|   689k|        return m_args;
  555|   689k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  83.0k|{
  400|  83.0k|    check_scan_arg_types<T>();
  401|       |
  402|  83.0k|    basic_scan_arg<Context> arg;
  403|  83.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  83.0k|    arg.m_value = make_value<Context>(value);
  405|  83.0k|    return arg;
  406|  83.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   764k|{
  619|   764k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   764k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   764k|    static_cast<    \
  |  |  247|   764k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   764k|}
_ZN3scn2v26detail20check_scan_arg_typesIJeEEEvv:
  386|  1.62M|{
  387|  1.62M|    static_assert(
  388|  1.62M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.62M|        "Scan argument types must be default constructible");
  390|  1.62M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.62M|                  "Scan argument types must be Destructible");
  392|  1.62M|    static_assert(
  393|  1.62M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.62M|        "Scan argument types must not be references");
  395|  1.62M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2EONSt3__15tupleIJeEEE:
  563|   764k|    {
  564|   764k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   764k|    {
  574|   764k|        return {
  575|   764k|            detail::make_arg<base::is_packed, Context,
  576|   764k|                             detail::mapped_type_constant<
  577|   764k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   764k|                args)...};
  579|   764k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|   764k|{
  415|   764k|    return make_value<Context>(value);
  416|   764k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
  371|   849k|{
  372|   849k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   849k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   849k|                                  needs_context_tag>) {
  376|   849k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   849k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   849k|    }
  378|   849k|    else {
  379|   849k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   849k|            value, context_tag<Context>{}));
  381|   849k|    }
  382|   849k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERe:
  216|   849k|    {                                                                        \
  217|   849k|        return val;                                                          \
  218|   849k|    }
_ZN3scn2v26detail15make_value_implIReEEDaOT_:
  340|  1.62M|{
  341|  1.62M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.62M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.62M|    constexpr bool scannable_char =
  345|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.62M|    static_assert(scannable_char,
  347|  1.62M|                  "Cannot scan an argument of an unsupported character "
  348|  1.62M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.62M|    constexpr bool scannable_const =
  351|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.62M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.62M|    constexpr bool scannable_disabled =
  355|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.62M|    static_assert(scannable_disabled,
  357|  1.62M|                  "Cannot scan an argument that has been disabled by "
  358|  1.62M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.62M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.62M|    static_assert(
  362|  1.62M|        scannable,
  363|  1.62M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.62M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.62M|    return arg_value{arg};
  367|  1.62M|}
_ZN3scn2v26detail9arg_valueC2IeEERT_:
  159|  1.62M|    {
  160|  1.62M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   764k|    {
  647|   764k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
  553|   702k|    {
  554|   702k|        return m_args;
  555|   702k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  85.2k|{
  400|  85.2k|    check_scan_arg_types<T>();
  401|       |
  402|  85.2k|    basic_scan_arg<Context> arg;
  403|  85.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  85.2k|    arg.m_value = make_value<Context>(value);
  405|  85.2k|    return arg;
  406|  85.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   620k|{
  619|   620k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   620k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   620k|    static_cast<    \
  |  |  247|   620k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   620k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2EONSt3__15tupleIJfEEE:
  563|   620k|    {
  564|   620k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   620k|    {
  574|   620k|        return {
  575|   620k|            detail::make_arg<base::is_packed, Context,
  576|   620k|                             detail::mapped_type_constant<
  577|   620k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   620k|                args)...};
  579|   620k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|   620k|{
  415|   620k|    return make_value<Context>(value);
  416|   620k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
  371|   686k|{
  372|   686k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   686k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   686k|                                  needs_context_tag>) {
  376|   686k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   686k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   686k|    }
  378|   686k|    else {
  379|   686k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   686k|            value, context_tag<Context>{}));
  381|   686k|    }
  382|   686k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERf:
  216|   686k|    {                                                                        \
  217|   686k|        return val;                                                          \
  218|   686k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   620k|    {
  647|   620k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  2.00M|    {
  694|  2.00M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
  553|   511k|    {
  554|   511k|        return m_args;
  555|   511k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  65.7k|{
  400|  65.7k|    check_scan_arg_types<T>();
  401|       |
  402|  65.7k|    basic_scan_arg<Context> arg;
  403|  65.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  65.7k|    arg.m_value = make_value<Context>(value);
  405|  65.7k|    return arg;
  406|  65.7k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  2.21M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   684k|{
  619|   684k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   684k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   684k|    static_cast<    \
  |  |  247|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   684k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  563|   684k|    {
  564|   684k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   684k|    {
  574|   684k|        return {
  575|   684k|            detail::make_arg<base::is_packed, Context,
  576|   684k|                             detail::mapped_type_constant<
  577|   684k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   684k|                args)...};
  579|   684k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|   684k|{
  415|   684k|    return make_value<Context>(value);
  416|   684k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  371|   758k|{
  372|   758k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   758k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   758k|                                  needs_context_tag>) {
  376|   758k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   758k|    }
  378|   758k|    else {
  379|   758k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   758k|            value, context_tag<Context>{}));
  381|   758k|    }
  382|   758k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  216|   758k|    {                                                                        \
  217|   758k|        return val;                                                          \
  218|   758k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   684k|    {
  647|   684k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
  553|   575k|    {
  554|   575k|        return m_args;
  555|   575k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  74.2k|{
  400|  74.2k|    check_scan_arg_types<T>();
  401|       |
  402|  74.2k|    basic_scan_arg<Context> arg;
  403|  74.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  74.2k|    arg.m_value = make_value<Context>(value);
  405|  74.2k|    return arg;
  406|  74.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   695k|{
  619|   695k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   695k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   695k|    static_cast<    \
  |  |  247|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   695k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2EONSt3__15tupleIJeEEE:
  563|   695k|    {
  564|   695k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   695k|    {
  574|   695k|        return {
  575|   695k|            detail::make_arg<base::is_packed, Context,
  576|   695k|                             detail::mapped_type_constant<
  577|   695k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   695k|                args)...};
  579|   695k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|   695k|{
  415|   695k|    return make_value<Context>(value);
  416|   695k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
  371|   771k|{
  372|   771k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   771k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   771k|                                  needs_context_tag>) {
  376|   771k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   771k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   771k|    }
  378|   771k|    else {
  379|   771k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   771k|            value, context_tag<Context>{}));
  381|   771k|    }
  382|   771k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERe:
  216|   771k|    {                                                                        \
  217|   771k|        return val;                                                          \
  218|   771k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   695k|    {
  647|   695k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
  553|   585k|    {
  554|   585k|        return m_args;
  555|   585k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  75.9k|{
  400|  75.9k|    check_scan_arg_types<T>();
  401|       |
  402|  75.9k|    basic_scan_arg<Context> arg;
  403|  75.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  75.9k|    arg.m_value = make_value<Context>(value);
  405|  75.9k|    return arg;
  406|  75.9k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  2.18M|    {
  682|  2.18M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  2.18M|        return static_cast<std::size_t>(m_desc &
  687|  2.18M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  2.18M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  4.37M|    {
  702|  4.37M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  4.37M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  2.18M|    {
  655|  2.18M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  2.18M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  2.18M|        const auto t = type(id);
  667|  2.18M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  2.18M|        basic_scan_arg<Context> arg;
  672|  2.18M|        arg.m_type = t;
  673|  2.18M|        arg.m_value = m_values[id];
  674|  2.18M|        return arg;
  675|  2.18M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  2.18M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  2.18M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  2.18M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  2.18M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  2.18M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  4.13M|    {
  483|  4.13M|        return m_type != detail::arg_type::none_type;
  484|  4.13M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  3.40M|    {
  488|  3.40M|        return m_type;
  489|  3.40M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  2.00M|    {
  682|  2.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  2.00M|        return static_cast<std::size_t>(m_desc &
  687|  2.00M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  2.00M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  4.00M|    {
  702|  4.00M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  4.00M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  2.00M|    {
  655|  2.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  2.00M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  2.00M|        const auto t = type(id);
  667|  2.00M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  2.00M|        basic_scan_arg<Context> arg;
  672|  2.00M|        arg.m_type = t;
  673|  2.00M|        arg.m_value = m_values[id];
  674|  2.00M|        return arg;
  675|  2.00M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  2.00M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  2.00M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  2.00M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  2.00M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  2.00M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  3.78M|    {
  483|  3.78M|        return m_type != detail::arg_type::none_type;
  484|  3.78M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  3.13M|    {
  488|  3.13M|        return m_type;
  489|  3.13M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   240k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   215k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|  76.6k|    {
  109|  76.6k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  1.70M|    {
   60|  1.70M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   153k|    {
  124|   153k|        return m_current;
  125|   153k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  1.70M|    {
   43|  1.70M|        return m_args.get(id);
   44|  1.70M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  1.70M|    {
   53|  1.70M|        return m_locale;
   54|  1.70M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|  76.6k|    {
  132|  76.6k|        return ranges_std::default_sentinel;
  133|  76.6k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|  76.6k|    {
  140|  76.6k|        return ranges::subrange{begin(), end()};
  141|  76.6k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   136k|    {
  109|   136k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  1.56M|    {
   60|  1.56M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   273k|    {
  124|   273k|        return m_current;
  125|   273k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  1.56M|    {
   43|  1.56M|        return m_args.get(id);
   44|  1.56M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  1.56M|    {
   53|  1.56M|        return m_locale;
   54|  1.56M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   136k|    {
  132|   136k|        return ranges_std::default_sentinel;
  133|   136k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   136k|    {
  140|   136k|        return ranges::subrange{begin(), end()};
  141|   136k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  4.87M|    {
   69|  4.87M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  4.87M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  4.87M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  18.3M|    {
   75|  18.3M|        return m_code == good;
   76|  18.3M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   426k|    {
   86|   426k|        return m_code;
   87|   426k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   426k|{
  111|   426k|    return a.code() == b;
  112|   426k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   426k|{
  116|   426k|    return !(a == b);
  117|   426k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  11.7M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   640k|    {
  675|   640k|        return m_str;
  676|   640k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  2.18M|{
  385|  2.18M|    return s;
  386|  2.18M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  2.18M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   640k|    {
  671|   640k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   720k|    {
  675|   720k|        return m_str;
  676|   720k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   720k|    {
  671|   720k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   733k|    {
  675|   733k|        return m_str;
  676|   733k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   733k|    {
  671|   733k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  30.6k|    {
  675|  30.6k|        return m_str;
  676|  30.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  30.6k|    {
  671|  30.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  30.6k|    {
  675|  30.6k|        return m_str;
  676|  30.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  30.6k|    {
  671|  30.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  30.6k|    {
  675|  30.6k|        return m_str;
  676|  30.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  30.6k|    {
  671|  30.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   566k|    {
  675|   566k|        return m_str;
  676|   566k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  2.00M|{
  390|  2.00M|    return s;
  391|  2.00M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  2.00M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   566k|    {
  671|   566k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   630k|    {
  675|   630k|        return m_str;
  676|   630k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   630k|    {
  671|   630k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   640k|    {
  675|   640k|        return m_str;
  676|   640k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   640k|    {
  671|   640k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  54.6k|    {
  675|  54.6k|        return m_str;
  676|  54.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  54.6k|    {
  671|  54.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  54.6k|    {
  675|  54.6k|        return m_str;
  676|  54.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  54.6k|    {
  671|  54.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  54.6k|    {
  675|  54.6k|        return m_str;
  676|  54.6k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  54.6k|    {
  671|  54.6k|    }

_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  3.27M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|   913k|    {
  245|   913k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|   913k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|   913k|            m_specs.localized = true;
  247|   913k|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|   913k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  2.36M|    {
  260|  2.36M|        m_specs.type = type;
  261|  2.36M|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  3.27M|    {
  333|  3.27M|        return static_cast<bool>(m_error);
  334|  3.27M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|   913k|{
  987|   913k|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 913k]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 0, False: 913k]
  ------------------
  992|      0|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 913k]
  ------------------
  993|      0|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 913k]
  ------------------
  994|      0|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 913k]
  ------------------
  995|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 913k]
  ------------------
  996|      0|            return arg_type_category::integer;
  997|       |
  998|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 0, False: 913k]
  ------------------
  999|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 913k]
  ------------------
 1000|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 0, False: 913k]
  ------------------
 1001|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 913k]
  ------------------
 1002|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 0, False: 913k]
  ------------------
 1003|      0|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 913k]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 913k]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 913k]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 913k]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 913k]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|   276k|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 276k, False: 636k]
  ------------------
 1015|   591k|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 314k, False: 598k]
  ------------------
 1016|   913k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 322k, False: 591k]
  ------------------
 1017|   913k|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 913k]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 913k]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 913k]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 913k]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 913k]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 913k]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|   913k|            SCN_CLANG_POP
 1034|   913k|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|   913k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.62M|{
  968|  1.62M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.62M|    handler.check_args_exhausted();
  970|  1.62M|    return handler.get_error();
  971|  1.62M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.62M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.62M|    auto begin = format.data();
  937|  1.62M|    auto it = begin;
  938|  1.62M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.17M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.62M, False: 1.55M]
  ------------------
  941|  1.62M|        const auto ch = *it++;
  942|  1.62M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.62M, False: 0]
  ------------------
  943|  1.62M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.62M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.62M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 76.6k, False: 1.55M]
  ------------------
  947|  76.6k|                return;
  948|  76.6k|            }
  949|  1.62M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.62M|    }
  960|       |
  961|  1.55M|    handler.on_literal_text(begin, end);
  962|  1.55M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  1.62M|{
  866|  1.62M|    struct id_adapter {
  867|  1.62M|        constexpr void operator()()
  868|  1.62M|        {
  869|  1.62M|            arg_id = handler.on_arg_id();
  870|  1.62M|        }
  871|  1.62M|        constexpr void operator()(std::size_t id)
  872|  1.62M|        {
  873|  1.62M|            arg_id = handler.on_arg_id(id);
  874|  1.62M|        }
  875|       |
  876|  1.62M|        constexpr void on_error(const char* msg)
  877|  1.62M|        {
  878|  1.62M|            SCN_UNLIKELY_ATTR
  879|  1.62M|            handler.on_error(msg);
  880|  1.62M|        }
  881|       |
  882|  1.62M|        Handler& handler;
  883|  1.62M|        std::size_t arg_id;
  884|  1.62M|    };
  885|       |
  886|  1.62M|    ++begin;
  887|  1.62M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.62M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.62M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.62M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.62M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.62M|    else {
  899|  1.62M|        auto adapter = id_adapter{handler, 0};
  900|  1.62M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.62M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.62M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.62M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.62M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.62M, False: 0]
  ------------------
  911|  1.62M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.62M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.62M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  3.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.62M]
  |  |  |  Branch (153:45): [True: 0, False: 1.62M]
  |  |  |  Branch (153:45): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.62M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.62M|    }
  927|  1.62M|    return begin + 1;
  928|  1.62M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.62M|{
  400|  1.62M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.62M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.62M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.62M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.62M|    handler();
  406|  1.62M|    return begin;
  407|  1.62M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.62M|        {
  869|  1.62M|            arg_id = handler.on_arg_id();
  870|  1.62M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.62M|    {
 1046|  1.62M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.62M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.62M|{
  795|  1.62M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.62M|        if (*begin == CharT{'['}) {
  797|  1.62M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.62M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.62M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.62M|                return begin;
  803|  1.62M|            }
  804|  1.62M|            handler.on_character_set_string(set);
  805|  1.62M|            return begin;
  806|  1.62M|        }
  807|  1.62M|        if (*begin == CharT{'/'}) {
  808|  1.62M|            return parse_presentation_regex(begin, end, handler);
  809|  1.62M|        }
  810|  1.62M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.62M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.62M|            handler.on_error("Invalid type specifier in format string");
  813|  1.62M|            return begin;
  814|  1.62M|        }
  815|  1.62M|        handler.on_type(type);
  816|  1.62M|        return begin;
  817|  1.62M|    };
  818|       |
  819|  1.62M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.62M, False: 0]
  |  Branch (819:28): [True: 1.62M, False: 0]
  ------------------
  820|  1.62M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.62M, False: 0]
  |  Branch (820:36): [True: 1.16M, False: 466k]
  ------------------
  821|  1.16M|        return do_presentation();
  822|  1.16M|    }
  823|       |
  824|   466k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   466k|    begin = parse_align(begin, end, handler);
  830|   466k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   466k|    begin = parse_width(begin, end, handler);
  836|   466k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   466k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 466k, False: 0]
  ------------------
  842|   466k|        handler.on_localized();
  843|   466k|        ++begin;
  844|   466k|    }
  845|   466k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   466k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 466k, False: 0]
  |  Branch (850:25): [True: 0, False: 466k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   466k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   466k|    return begin;
  859|   466k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  1.70M|{
  464|  1.70M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.22M, False: 481k]
  |  Branch (464:33): [True: 1.22M, False: 0]
  ------------------
  465|  1.70M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 481k, False: 0]
  |  Branch (465:33): [True: 481k, False: 0]
  ------------------
  466|  1.70M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.16M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.16M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.16M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.16M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.16M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.16M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.16M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.16M|        handler.on_type(type);
  816|  1.16M|        return begin;
  817|  1.16M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  1.22M|{
  412|  1.22M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.22M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.22M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.22M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.22M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.22M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.22M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.22M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.22M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.22M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.22M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   535k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 535k, False: 687k]
  ------------------
  431|   535k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.22M]
  ------------------
  432|   535k|            return presentation_type::float_hex;
  433|  42.1k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 42.1k, False: 1.18M]
  ------------------
  434|  42.1k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.22M]
  ------------------
  435|  42.1k|            return presentation_type::float_scientific;
  436|   232k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 232k, False: 990k]
  ------------------
  437|   232k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.22M]
  ------------------
  438|   232k|            return presentation_type::float_fixed;
  439|   413k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 413k, False: 809k]
  ------------------
  440|   413k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.22M]
  ------------------
  441|   413k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.22M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.22M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.22M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.22M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.22M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.22M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.22M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.22M|    }
  459|  1.22M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   466k|{
  489|   466k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   466k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   466k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   466k|        switch (ch) {
  493|   466k|            case L'<':
  494|   466k|                return align_type::left;
  495|   466k|            case L'>':
  496|   466k|                return align_type::right;
  497|   466k|            case L'^':
  498|   466k|                return align_type::center;
  499|   466k|            default:
  500|   466k|                return align_type::none;
  501|   466k|        }
  502|   466k|    };
  503|       |
  504|   466k|    auto potential_fill_len = code_point_length(begin, end);
  505|   466k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   932k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  |  Branch (153:45): [True: 0, False: 466k]
  |  |  |  Branch (153:45): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  506|   466k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   466k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   466k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   466k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   466k|    const auto begin_before_fill = begin;
  516|   466k|    begin += potential_fill_len;
  517|       |
  518|   466k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 466k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   466k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   466k|    const auto begin_after_fill = begin;
  524|   466k|    ++begin;
  525|       |
  526|   466k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 466k, False: 0]
  ------------------
  527|   466k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   466k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 466k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   466k|    }
  535|       |
  536|   466k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 466k, False: 0]
  ------------------
  537|   466k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 466k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   466k|        return begin_before_fill;
  542|   466k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   466k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   481k|{
  471|   481k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   481k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   481k|        return 1;
  474|   481k|    }
  475|   481k|    else {
  476|   481k|        const auto lengths =
  477|   481k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   481k|            "\3\4";
  479|   481k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   481k|        return len;
  481|   481k|    }
  482|   481k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   932k|    auto check_align = [](wchar_t ch) {
  492|   932k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 932k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 932k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 932k]
  ------------------
  498|      0|                return align_type::center;
  499|   932k|            default:
  ------------------
  |  Branch (499:13): [True: 932k, False: 0]
  ------------------
  500|   932k|                return align_type::none;
  501|   932k|        }
  502|   932k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   466k|{
  554|   466k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   466k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   466k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   466k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 466k, False: 0]
  |  Branch (556:33): [True: 0, False: 466k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   466k|    return begin;
  567|   466k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   466k|    {
 1051|   466k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   466k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 466k, False: 0]
  ------------------
 1053|   466k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 466k, False: 0]
  ------------------
 1054|   466k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 466k]
  ------------------
 1055|   466k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   466k|        Handler::on_localized();
 1063|   466k|    }
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1116|  3.27M|{
 1117|  3.27M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1117:9): [True: 2.36M, False: 913k]
  ------------------
 1118|  3.27M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1118:10): [True: 0, False: 2.36M]
  ------------------
 1119|  2.36M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1119:10): [True: 0, False: 2.36M]
  ------------------
 1120|      0|        SCN_UNLIKELY_ATTR
 1121|      0|        return handler.on_error("Invalid type specifier for float type");
 1122|      0|    }
 1123|  3.27M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  76.6k|{
  968|  76.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  76.6k|    handler.check_args_exhausted();
  970|  76.6k|    return handler.get_error();
  971|  76.6k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  76.6k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  76.6k|    auto begin = format.data();
  937|  76.6k|    auto it = begin;
  938|  76.6k|    const auto end = format.data() + format.size();
  939|       |
  940|  76.6k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 76.6k, False: 0]
  ------------------
  941|  76.6k|        const auto ch = *it++;
  942|  76.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 76.6k, False: 0]
  ------------------
  943|  76.6k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  76.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  76.6k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 76.6k, False: 0]
  ------------------
  947|  76.6k|                return;
  948|  76.6k|            }
  949|  76.6k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  76.6k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|  76.6k|{
  866|  76.6k|    struct id_adapter {
  867|  76.6k|        constexpr void operator()()
  868|  76.6k|        {
  869|  76.6k|            arg_id = handler.on_arg_id();
  870|  76.6k|        }
  871|  76.6k|        constexpr void operator()(std::size_t id)
  872|  76.6k|        {
  873|  76.6k|            arg_id = handler.on_arg_id(id);
  874|  76.6k|        }
  875|       |
  876|  76.6k|        constexpr void on_error(const char* msg)
  877|  76.6k|        {
  878|  76.6k|            SCN_UNLIKELY_ATTR
  879|  76.6k|            handler.on_error(msg);
  880|  76.6k|        }
  881|       |
  882|  76.6k|        Handler& handler;
  883|  76.6k|        std::size_t arg_id;
  884|  76.6k|    };
  885|       |
  886|  76.6k|    ++begin;
  887|  76.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  76.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 76.6k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  76.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 76.6k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  76.6k|    else {
  899|  76.6k|        auto adapter = id_adapter{handler, 0};
  900|  76.6k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  76.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  76.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 76.6k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  76.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 76.6k, False: 0]
  ------------------
  911|  76.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  76.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  76.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 76.6k]
  |  |  |  Branch (153:45): [True: 0, False: 76.6k]
  |  |  |  Branch (153:45): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  76.6k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  76.6k|    }
  927|  76.6k|    return begin + 1;
  928|  76.6k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  76.6k|{
  400|  76.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  76.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  76.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  76.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 76.6k, False: 0]
  |  Branch (401:26): [True: 0, False: 76.6k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  76.6k|    handler();
  406|  76.6k|    return begin;
  407|  76.6k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  76.6k|        {
  869|  76.6k|            arg_id = handler.on_arg_id();
  870|  76.6k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|  76.6k|    {
 1046|  76.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  76.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  76.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  76.6k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|  76.6k|{
  795|  76.6k|    auto do_presentation = [&]() -> const CharT* {
  796|  76.6k|        if (*begin == CharT{'['}) {
  797|  76.6k|            auto set = parse_presentation_set(begin, end, handler);
  798|  76.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  76.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  76.6k|                return begin;
  803|  76.6k|            }
  804|  76.6k|            handler.on_character_set_string(set);
  805|  76.6k|            return begin;
  806|  76.6k|        }
  807|  76.6k|        if (*begin == CharT{'/'}) {
  808|  76.6k|            return parse_presentation_regex(begin, end, handler);
  809|  76.6k|        }
  810|  76.6k|        presentation_type type = parse_presentation_type(*begin++);
  811|  76.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  76.6k|            handler.on_error("Invalid type specifier in format string");
  813|  76.6k|            return begin;
  814|  76.6k|        }
  815|  76.6k|        handler.on_type(type);
  816|  76.6k|        return begin;
  817|  76.6k|    };
  818|       |
  819|  76.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 76.6k, False: 0]
  |  Branch (819:28): [True: 76.6k, False: 0]
  ------------------
  820|  76.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 76.6k, False: 0]
  |  Branch (820:36): [True: 61.3k, False: 15.3k]
  ------------------
  821|  61.3k|        return do_presentation();
  822|  61.3k|    }
  823|       |
  824|  15.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  15.3k|    begin = parse_align(begin, end, handler);
  830|  15.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  15.3k|    begin = parse_width(begin, end, handler);
  836|  15.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  15.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 15.3k, False: 0]
  ------------------
  842|  15.3k|        handler.on_localized();
  843|  15.3k|        ++begin;
  844|  15.3k|    }
  845|  15.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  15.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 15.3k, False: 0]
  |  Branch (850:25): [True: 0, False: 15.3k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  15.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  15.3k|    return begin;
  859|  15.3k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|  61.3k|    auto do_presentation = [&]() -> const CharT* {
  796|  61.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 61.3k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  61.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 61.3k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  61.3k|        presentation_type type = parse_presentation_type(*begin++);
  811|  61.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 61.3k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  61.3k|        handler.on_type(type);
  816|  61.3k|        return begin;
  817|  61.3k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  15.3k|{
  489|  15.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  15.3k|        switch (ch) {
  493|  15.3k|            case L'<':
  494|  15.3k|                return align_type::left;
  495|  15.3k|            case L'>':
  496|  15.3k|                return align_type::right;
  497|  15.3k|            case L'^':
  498|  15.3k|                return align_type::center;
  499|  15.3k|            default:
  500|  15.3k|                return align_type::none;
  501|  15.3k|        }
  502|  15.3k|    };
  503|       |
  504|  15.3k|    auto potential_fill_len = code_point_length(begin, end);
  505|  15.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  |  Branch (153:45): [True: 0, False: 15.3k]
  |  |  |  Branch (153:45): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  506|  15.3k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  15.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  15.3k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  15.3k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  15.3k|    const auto begin_before_fill = begin;
  516|  15.3k|    begin += potential_fill_len;
  517|       |
  518|  15.3k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 15.3k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  15.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  15.3k|    const auto begin_after_fill = begin;
  524|  15.3k|    ++begin;
  525|       |
  526|  15.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 15.3k, False: 0]
  ------------------
  527|  15.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  15.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 15.3k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  15.3k|    }
  535|       |
  536|  15.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 15.3k, False: 0]
  ------------------
  537|  15.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 15.3k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  15.3k|        return begin_before_fill;
  542|  15.3k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  15.3k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  30.6k|    auto check_align = [](wchar_t ch) {
  492|  30.6k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 30.6k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 30.6k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 30.6k]
  ------------------
  498|      0|                return align_type::center;
  499|  30.6k|            default:
  ------------------
  |  Branch (499:13): [True: 30.6k, False: 0]
  ------------------
  500|  30.6k|                return align_type::none;
  501|  30.6k|        }
  502|  30.6k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  15.3k|{
  554|  15.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  15.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 15.3k, False: 0]
  |  Branch (556:33): [True: 0, False: 15.3k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  15.3k|    return begin;
  567|  15.3k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  15.3k|    {
 1051|  15.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  15.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 15.3k, False: 0]
  ------------------
 1053|  15.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 15.3k, False: 0]
  ------------------
 1054|  15.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 15.3k]
  ------------------
 1055|  15.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  15.3k|        Handler::on_localized();
 1063|  15.3k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.43M|{
  968|  1.43M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.43M|    handler.check_args_exhausted();
  970|  1.43M|    return handler.get_error();
  971|  1.43M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.43M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.43M|    auto begin = format.data();
  937|  1.43M|    auto it = begin;
  938|  1.43M|    const auto end = format.data() + format.size();
  939|       |
  940|  2.72M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.43M, False: 1.29M]
  ------------------
  941|  1.43M|        const auto ch = *it++;
  942|  1.43M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.43M, False: 0]
  ------------------
  943|  1.43M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.43M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.43M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 136k, False: 1.29M]
  ------------------
  947|   136k|                return;
  948|   136k|            }
  949|  1.43M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.43M|    }
  960|       |
  961|  1.29M|    handler.on_literal_text(begin, end);
  962|  1.29M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  1.43M|{
  866|  1.43M|    struct id_adapter {
  867|  1.43M|        constexpr void operator()()
  868|  1.43M|        {
  869|  1.43M|            arg_id = handler.on_arg_id();
  870|  1.43M|        }
  871|  1.43M|        constexpr void operator()(std::size_t id)
  872|  1.43M|        {
  873|  1.43M|            arg_id = handler.on_arg_id(id);
  874|  1.43M|        }
  875|       |
  876|  1.43M|        constexpr void on_error(const char* msg)
  877|  1.43M|        {
  878|  1.43M|            SCN_UNLIKELY_ATTR
  879|  1.43M|            handler.on_error(msg);
  880|  1.43M|        }
  881|       |
  882|  1.43M|        Handler& handler;
  883|  1.43M|        std::size_t arg_id;
  884|  1.43M|    };
  885|       |
  886|  1.43M|    ++begin;
  887|  1.43M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.43M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.43M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.43M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.43M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.43M|    else {
  899|  1.43M|        auto adapter = id_adapter{handler, 0};
  900|  1.43M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.43M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.43M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.43M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.43M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.43M, False: 0]
  ------------------
  911|  1.43M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.43M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.43M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  2.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.43M]
  |  |  |  Branch (153:45): [True: 0, False: 1.43M]
  |  |  |  Branch (153:45): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.43M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.43M|    }
  927|  1.43M|    return begin + 1;
  928|  1.43M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.43M|{
  400|  1.43M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.43M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.43M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.43M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.43M|    handler();
  406|  1.43M|    return begin;
  407|  1.43M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.43M|        {
  869|  1.43M|            arg_id = handler.on_arg_id();
  870|  1.43M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.43M|    {
 1046|  1.43M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.43M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.43M|{
  795|  1.43M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.43M|        if (*begin == CharT{'['}) {
  797|  1.43M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.43M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.43M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.43M|                return begin;
  803|  1.43M|            }
  804|  1.43M|            handler.on_character_set_string(set);
  805|  1.43M|            return begin;
  806|  1.43M|        }
  807|  1.43M|        if (*begin == CharT{'/'}) {
  808|  1.43M|            return parse_presentation_regex(begin, end, handler);
  809|  1.43M|        }
  810|  1.43M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.43M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.43M|            handler.on_error("Invalid type specifier in format string");
  813|  1.43M|            return begin;
  814|  1.43M|        }
  815|  1.43M|        handler.on_type(type);
  816|  1.43M|        return begin;
  817|  1.43M|    };
  818|       |
  819|  1.43M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.43M, False: 0]
  |  Branch (819:28): [True: 1.43M, False: 0]
  ------------------
  820|  1.43M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.43M, False: 0]
  |  Branch (820:36): [True: 1.02M, False: 404k]
  ------------------
  821|  1.02M|        return do_presentation();
  822|  1.02M|    }
  823|       |
  824|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   404k|    begin = parse_align(begin, end, handler);
  830|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   404k|    begin = parse_width(begin, end, handler);
  836|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   404k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 404k, False: 0]
  ------------------
  842|   404k|        handler.on_localized();
  843|   404k|        ++begin;
  844|   404k|    }
  845|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   404k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 404k, False: 0]
  |  Branch (850:25): [True: 0, False: 404k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   404k|    return begin;
  859|   404k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  1.56M|{
  464|  1.56M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.13M, False: 431k]
  |  Branch (464:33): [True: 1.13M, False: 0]
  ------------------
  465|  1.56M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 431k, False: 0]
  |  Branch (465:33): [True: 431k, False: 0]
  ------------------
  466|  1.56M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.02M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.02M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.02M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.02M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.02M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.02M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.02M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.02M|        handler.on_type(type);
  816|  1.02M|        return begin;
  817|  1.02M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  1.13M|{
  412|  1.13M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.13M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.13M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.13M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.13M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.13M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.13M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.13M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.13M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.13M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.13M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   480k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 480k, False: 656k]
  ------------------
  431|   480k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.13M]
  ------------------
  432|   480k|            return presentation_type::float_hex;
  433|  63.8k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 63.8k, False: 1.07M]
  ------------------
  434|  63.8k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.13M]
  ------------------
  435|  63.8k|            return presentation_type::float_scientific;
  436|   217k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 217k, False: 919k]
  ------------------
  437|   217k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.13M]
  ------------------
  438|   217k|            return presentation_type::float_fixed;
  439|   375k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 375k, False: 762k]
  ------------------
  440|   375k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.13M]
  ------------------
  441|   375k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.13M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.13M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.13M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.13M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.13M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.13M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.13M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.13M|    }
  459|  1.13M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   404k|{
  489|   404k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   404k|        switch (ch) {
  493|   404k|            case L'<':
  494|   404k|                return align_type::left;
  495|   404k|            case L'>':
  496|   404k|                return align_type::right;
  497|   404k|            case L'^':
  498|   404k|                return align_type::center;
  499|   404k|            default:
  500|   404k|                return align_type::none;
  501|   404k|        }
  502|   404k|    };
  503|       |
  504|   404k|    auto potential_fill_len = code_point_length(begin, end);
  505|   404k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   808k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 404k]
  |  |  |  Branch (153:45): [True: 0, False: 404k]
  |  |  |  Branch (153:45): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
  506|   404k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   404k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   404k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   404k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   404k|    const auto begin_before_fill = begin;
  516|   404k|    begin += potential_fill_len;
  517|       |
  518|   404k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 404k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   404k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   404k|    const auto begin_after_fill = begin;
  524|   404k|    ++begin;
  525|       |
  526|   404k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 404k, False: 0]
  ------------------
  527|   404k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   404k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 404k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   404k|    }
  535|       |
  536|   404k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 404k, False: 0]
  ------------------
  537|   404k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 404k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   404k|        return begin_before_fill;
  542|   404k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   404k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   431k|{
  471|   431k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   431k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   431k|        return 1;
  474|   431k|    }
  475|   431k|    else {
  476|   431k|        const auto lengths =
  477|   431k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   431k|            "\3\4";
  479|   431k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   431k|        return len;
  481|   431k|    }
  482|   431k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   808k|    auto check_align = [](wchar_t ch) {
  492|   808k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 808k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 808k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 808k]
  ------------------
  498|      0|                return align_type::center;
  499|   808k|            default:
  ------------------
  |  Branch (499:13): [True: 808k, False: 0]
  ------------------
  500|   808k|                return align_type::none;
  501|   808k|        }
  502|   808k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   404k|{
  554|   404k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   404k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 404k, False: 0]
  |  Branch (556:33): [True: 0, False: 404k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   404k|    return begin;
  567|   404k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   404k|    {
 1051|   404k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   404k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 404k, False: 0]
  ------------------
 1053|   404k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 404k, False: 0]
  ------------------
 1054|   404k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 404k]
  ------------------
 1055|   404k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   404k|        Handler::on_localized();
 1063|   404k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   136k|{
  968|   136k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   136k|    handler.check_args_exhausted();
  970|   136k|    return handler.get_error();
  971|   136k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   136k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   136k|    auto begin = format.data();
  937|   136k|    auto it = begin;
  938|   136k|    const auto end = format.data() + format.size();
  939|       |
  940|   136k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 136k, False: 0]
  ------------------
  941|   136k|        const auto ch = *it++;
  942|   136k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 136k, False: 0]
  ------------------
  943|   136k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   136k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   136k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 136k, False: 0]
  ------------------
  947|   136k|                return;
  948|   136k|            }
  949|   136k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   136k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   136k|{
  866|   136k|    struct id_adapter {
  867|   136k|        constexpr void operator()()
  868|   136k|        {
  869|   136k|            arg_id = handler.on_arg_id();
  870|   136k|        }
  871|   136k|        constexpr void operator()(std::size_t id)
  872|   136k|        {
  873|   136k|            arg_id = handler.on_arg_id(id);
  874|   136k|        }
  875|       |
  876|   136k|        constexpr void on_error(const char* msg)
  877|   136k|        {
  878|   136k|            SCN_UNLIKELY_ATTR
  879|   136k|            handler.on_error(msg);
  880|   136k|        }
  881|       |
  882|   136k|        Handler& handler;
  883|   136k|        std::size_t arg_id;
  884|   136k|    };
  885|       |
  886|   136k|    ++begin;
  887|   136k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   136k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 136k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   136k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 136k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   136k|    else {
  899|   136k|        auto adapter = id_adapter{handler, 0};
  900|   136k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   136k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   136k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 136k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   136k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 136k, False: 0]
  ------------------
  911|   136k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   136k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   136k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136k]
  |  |  |  Branch (153:45): [True: 0, False: 136k]
  |  |  |  Branch (153:45): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|   136k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   136k|    }
  927|   136k|    return begin + 1;
  928|   136k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   136k|{
  400|   136k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   136k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 136k, False: 0]
  |  Branch (401:26): [True: 0, False: 136k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   136k|    handler();
  406|   136k|    return begin;
  407|   136k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   136k|        {
  869|   136k|            arg_id = handler.on_arg_id();
  870|   136k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   136k|    {
 1046|   136k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   136k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   136k|{
  795|   136k|    auto do_presentation = [&]() -> const CharT* {
  796|   136k|        if (*begin == CharT{'['}) {
  797|   136k|            auto set = parse_presentation_set(begin, end, handler);
  798|   136k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   136k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   136k|                return begin;
  803|   136k|            }
  804|   136k|            handler.on_character_set_string(set);
  805|   136k|            return begin;
  806|   136k|        }
  807|   136k|        if (*begin == CharT{'/'}) {
  808|   136k|            return parse_presentation_regex(begin, end, handler);
  809|   136k|        }
  810|   136k|        presentation_type type = parse_presentation_type(*begin++);
  811|   136k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   136k|            handler.on_error("Invalid type specifier in format string");
  813|   136k|            return begin;
  814|   136k|        }
  815|   136k|        handler.on_type(type);
  816|   136k|        return begin;
  817|   136k|    };
  818|       |
  819|   136k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 136k, False: 0]
  |  Branch (819:28): [True: 136k, False: 0]
  ------------------
  820|   136k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 136k, False: 0]
  |  Branch (820:36): [True: 109k, False: 27.3k]
  ------------------
  821|   109k|        return do_presentation();
  822|   109k|    }
  823|       |
  824|  27.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  27.3k|    begin = parse_align(begin, end, handler);
  830|  27.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  27.3k|    begin = parse_width(begin, end, handler);
  836|  27.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  27.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 27.3k, False: 0]
  ------------------
  842|  27.3k|        handler.on_localized();
  843|  27.3k|        ++begin;
  844|  27.3k|    }
  845|  27.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  27.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 27.3k, False: 0]
  |  Branch (850:25): [True: 0, False: 27.3k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  27.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  27.3k|    return begin;
  859|  27.3k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   109k|    auto do_presentation = [&]() -> const CharT* {
  796|   109k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 109k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   109k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 109k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   109k|        presentation_type type = parse_presentation_type(*begin++);
  811|   109k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|   109k|        handler.on_type(type);
  816|   109k|        return begin;
  817|   109k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|  27.3k|{
  489|  27.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  27.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  27.3k|        switch (ch) {
  493|  27.3k|            case L'<':
  494|  27.3k|                return align_type::left;
  495|  27.3k|            case L'>':
  496|  27.3k|                return align_type::right;
  497|  27.3k|            case L'^':
  498|  27.3k|                return align_type::center;
  499|  27.3k|            default:
  500|  27.3k|                return align_type::none;
  501|  27.3k|        }
  502|  27.3k|    };
  503|       |
  504|  27.3k|    auto potential_fill_len = code_point_length(begin, end);
  505|  27.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  |  Branch (153:45): [True: 0, False: 27.3k]
  |  |  |  Branch (153:45): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
  506|  27.3k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  27.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  27.3k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  27.3k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  27.3k|    const auto begin_before_fill = begin;
  516|  27.3k|    begin += potential_fill_len;
  517|       |
  518|  27.3k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 27.3k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  27.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  27.3k|    const auto begin_after_fill = begin;
  524|  27.3k|    ++begin;
  525|       |
  526|  27.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 27.3k, False: 0]
  ------------------
  527|  27.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  27.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 27.3k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  27.3k|    }
  535|       |
  536|  27.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 27.3k, False: 0]
  ------------------
  537|  27.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 27.3k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  27.3k|        return begin_before_fill;
  542|  27.3k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  27.3k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  54.6k|    auto check_align = [](wchar_t ch) {
  492|  54.6k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 54.6k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 54.6k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 54.6k]
  ------------------
  498|      0|                return align_type::center;
  499|  54.6k|            default:
  ------------------
  |  Branch (499:13): [True: 54.6k, False: 0]
  ------------------
  500|  54.6k|                return align_type::none;
  501|  54.6k|        }
  502|  54.6k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|  27.3k|{
  554|  27.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  27.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  27.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 27.3k, False: 0]
  |  Branch (556:33): [True: 0, False: 27.3k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  27.3k|    return begin;
  567|  27.3k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  27.3k|    {
 1051|  27.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  27.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 27.3k, False: 0]
  ------------------
 1053|  27.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 27.3k, False: 0]
  ------------------
 1054|  27.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 27.3k]
  ------------------
 1055|  27.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  27.3k|        Handler::on_localized();
 1063|  27.3k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.32M|{
  226|  2.32M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.32M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.32M|                  "\n"
  230|  2.32M|                  "Unsupported range type given as input to a scanning "
  231|  2.32M|                  "function.\n"
  232|  2.32M|                  "A range needs to have a character type (value type) "
  233|  2.32M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.32M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.32M|                  "to be included.\n"
  236|  2.32M|                  "See the scnlib documentation for more details.");
  237|  2.32M|    static_assert(
  238|  2.32M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.32M|        "\n"
  240|  2.32M|        "Unsupported range type given as input to a scanning "
  241|  2.32M|        "function.\n"
  242|  2.32M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.32M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.32M|        "not supported.");
  245|  2.32M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.32M|                  "\n"
  247|  2.32M|                  "Unsupported range type given as input to a scanning "
  248|  2.32M|                  "function.\n"
  249|  2.32M|                  "file_marker_found cannot be used as an "
  250|  2.32M|                  "source range type to scn::scan.\n"
  251|  2.32M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.32M|                  "and do not provide an explicit source range, "
  253|  2.32M|                  "or use scn::scan with a FILE* directly.");
  254|  2.32M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.32M|                  "\n"
  256|  2.32M|                  "Unsupported range type given as input to a scanning "
  257|  2.32M|                  "function.\n"
  258|  2.32M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.32M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.32M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.32M|                  "\n"
  262|  2.32M|                  "Unsupported range type given as input to a scanning "
  263|  2.32M|                  "function.\n"
  264|  2.32M|                  "A range needs to model forward_range and have a valid "
  265|  2.32M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.32M|                  "Examples of scannable ranges are std::string, "
  267|  2.32M|                  "std::string_view, "
  268|  2.32M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.32M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.32M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.32M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.32M|{
  153|  2.32M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.32M|        return std::basic_string_view{ranges::data(r),
  155|  2.32M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.32M|    }
  162|  2.32M|    else {
  163|  2.32M|        return invalid_char_type{};
  164|  2.32M|    }
  165|  2.32M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  99.6k|{
  226|  99.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  99.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  99.6k|                  "\n"
  230|  99.6k|                  "Unsupported range type given as input to a scanning "
  231|  99.6k|                  "function.\n"
  232|  99.6k|                  "A range needs to have a character type (value type) "
  233|  99.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  99.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  99.6k|                  "to be included.\n"
  236|  99.6k|                  "See the scnlib documentation for more details.");
  237|  99.6k|    static_assert(
  238|  99.6k|        !std::is_same_v<T, custom_char_traits>,
  239|  99.6k|        "\n"
  240|  99.6k|        "Unsupported range type given as input to a scanning "
  241|  99.6k|        "function.\n"
  242|  99.6k|        "String types (std::basic_string, and std::basic_string_view) "
  243|  99.6k|        "need to use std::char_traits. Strings with custom Traits are "
  244|  99.6k|        "not supported.");
  245|  99.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  99.6k|                  "\n"
  247|  99.6k|                  "Unsupported range type given as input to a scanning "
  248|  99.6k|                  "function.\n"
  249|  99.6k|                  "file_marker_found cannot be used as an "
  250|  99.6k|                  "source range type to scn::scan.\n"
  251|  99.6k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  99.6k|                  "and do not provide an explicit source range, "
  253|  99.6k|                  "or use scn::scan with a FILE* directly.");
  254|  99.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  99.6k|                  "\n"
  256|  99.6k|                  "Unsupported range type given as input to a scanning "
  257|  99.6k|                  "function.\n"
  258|  99.6k|                  "In order to be scannable, a range needs to satisfy "
  259|  99.6k|                  "`forward_range`. `input_range` is not sufficient.");
  260|  99.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  99.6k|                  "\n"
  262|  99.6k|                  "Unsupported range type given as input to a scanning "
  263|  99.6k|                  "function.\n"
  264|  99.6k|                  "A range needs to model forward_range and have a valid "
  265|  99.6k|                  "character type (char or wchar_t) to be scannable.\n"
  266|  99.6k|                  "Examples of scannable ranges are std::string, "
  267|  99.6k|                  "std::string_view, "
  268|  99.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  99.6k|                  "See the scnlib documentation for more details.");
  270|       |
  271|  99.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  99.6k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|  99.6k|{
  196|  99.6k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|  99.6k|        return file_marker_found{};
  198|  99.6k|    }
  199|  99.6k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|  99.6k|        if constexpr (ranges::input_range<Range>) {
  201|  99.6k|            return insufficient_range{};
  202|  99.6k|        }
  203|  99.6k|        else {
  204|  99.6k|            return invalid_input_range{};
  205|  99.6k|        }
  206|  99.6k|    }
  207|  99.6k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|  99.6k|        return invalid_char_type{};
  209|  99.6k|    }
  210|  99.6k|    else {
  211|  99.6k|        return make_forward_scan_buffer(r);
  212|  99.6k|    }
  213|  99.6k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.03M|{
  226|  2.03M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.03M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.03M|                  "\n"
  230|  2.03M|                  "Unsupported range type given as input to a scanning "
  231|  2.03M|                  "function.\n"
  232|  2.03M|                  "A range needs to have a character type (value type) "
  233|  2.03M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.03M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.03M|                  "to be included.\n"
  236|  2.03M|                  "See the scnlib documentation for more details.");
  237|  2.03M|    static_assert(
  238|  2.03M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.03M|        "\n"
  240|  2.03M|        "Unsupported range type given as input to a scanning "
  241|  2.03M|        "function.\n"
  242|  2.03M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.03M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.03M|        "not supported.");
  245|  2.03M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.03M|                  "\n"
  247|  2.03M|                  "Unsupported range type given as input to a scanning "
  248|  2.03M|                  "function.\n"
  249|  2.03M|                  "file_marker_found cannot be used as an "
  250|  2.03M|                  "source range type to scn::scan.\n"
  251|  2.03M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.03M|                  "and do not provide an explicit source range, "
  253|  2.03M|                  "or use scn::scan with a FILE* directly.");
  254|  2.03M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.03M|                  "\n"
  256|  2.03M|                  "Unsupported range type given as input to a scanning "
  257|  2.03M|                  "function.\n"
  258|  2.03M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.03M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.03M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.03M|                  "\n"
  262|  2.03M|                  "Unsupported range type given as input to a scanning "
  263|  2.03M|                  "function.\n"
  264|  2.03M|                  "A range needs to model forward_range and have a valid "
  265|  2.03M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.03M|                  "Examples of scannable ranges are std::string, "
  267|  2.03M|                  "std::string_view, "
  268|  2.03M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.03M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.03M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.03M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.03M|{
  153|  2.03M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.03M|        return std::basic_string_view{ranges::data(r),
  155|  2.03M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.03M|    }
  162|  2.03M|    else {
  163|  2.03M|        return invalid_char_type{};
  164|  2.03M|    }
  165|  2.03M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   177k|{
  226|   177k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   177k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   177k|                  "\n"
  230|   177k|                  "Unsupported range type given as input to a scanning "
  231|   177k|                  "function.\n"
  232|   177k|                  "A range needs to have a character type (value type) "
  233|   177k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   177k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   177k|                  "to be included.\n"
  236|   177k|                  "See the scnlib documentation for more details.");
  237|   177k|    static_assert(
  238|   177k|        !std::is_same_v<T, custom_char_traits>,
  239|   177k|        "\n"
  240|   177k|        "Unsupported range type given as input to a scanning "
  241|   177k|        "function.\n"
  242|   177k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   177k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   177k|        "not supported.");
  245|   177k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   177k|                  "\n"
  247|   177k|                  "Unsupported range type given as input to a scanning "
  248|   177k|                  "function.\n"
  249|   177k|                  "file_marker_found cannot be used as an "
  250|   177k|                  "source range type to scn::scan.\n"
  251|   177k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   177k|                  "and do not provide an explicit source range, "
  253|   177k|                  "or use scn::scan with a FILE* directly.");
  254|   177k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   177k|                  "\n"
  256|   177k|                  "Unsupported range type given as input to a scanning "
  257|   177k|                  "function.\n"
  258|   177k|                  "In order to be scannable, a range needs to satisfy "
  259|   177k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   177k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   177k|                  "\n"
  262|   177k|                  "Unsupported range type given as input to a scanning "
  263|   177k|                  "function.\n"
  264|   177k|                  "A range needs to model forward_range and have a valid "
  265|   177k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   177k|                  "Examples of scannable ranges are std::string, "
  267|   177k|                  "std::string_view, "
  268|   177k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   177k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   177k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   177k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   177k|{
  196|   177k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   177k|        return file_marker_found{};
  198|   177k|    }
  199|   177k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   177k|        if constexpr (ranges::input_range<Range>) {
  201|   177k|            return insufficient_range{};
  202|   177k|        }
  203|   177k|        else {
  204|   177k|            return invalid_input_range{};
  205|   177k|        }
  206|   177k|    }
  207|   177k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   177k|        return invalid_char_type{};
  209|   177k|    }
  210|   177k|    else {
  211|   177k|        return make_forward_scan_buffer(r);
  212|   177k|    }
  213|   177k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  7.15M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  1.70M|    {
   45|  1.70M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  1.70M|    {
   66|  1.70M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.70M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.70M|        do_check_arg_id(id);
   74|  1.70M|        return id;
   75|  1.70M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  1.70M|{
  210|  1.70M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.70M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.70M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  1.70M|    {
   61|  1.70M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.70M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  3.40M|    {
   50|  3.40M|        return m_format.data();
   51|  3.40M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  1.56M|    {
   45|  1.56M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  1.56M|    {
   66|  1.56M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.56M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.56M|        do_check_arg_id(id);
   74|  1.56M|        return id;
   75|  1.56M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  1.56M|{
  210|  1.56M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.56M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.56M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  1.56M|    {
   61|  1.56M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.56M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  3.13M|    {
   50|  3.13M|        return m_format.data();
   51|  3.13M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  6.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.63M|    {
  482|  4.63M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.63M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  4.63M|    {
  473|  4.63M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.63M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.03M|    {
  482|  2.03M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.03M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  2.03M|    {
  473|  2.03M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.03M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.13M|    {
  482|  2.13M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.13M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.13M|    {
  473|  2.13M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.13M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.55M|    {
  549|  1.55M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.55M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.55M|    {
  541|  1.55M|        return ranges::distance(lhs, rhs);
  542|  1.55M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   252k|    {
  513|   252k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   252k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   252k|    {
  498|   252k|        it.batch_advance(n);
  499|   252k|        return it;
  500|   252k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.81M|    {
  482|  1.81M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.81M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  1.81M|    {
  473|  1.81M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.81M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.29M|    {
  549|  1.29M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.29M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.29M|    {
  541|  1.29M|        return ranges::distance(lhs, rhs);
  542|  1.29M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   273k|    {
  513|   273k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   273k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   273k|    {
  498|   273k|        it.batch_advance(n);
  499|   273k|        return it;
  500|   273k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.07M|    {
  482|  1.07M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.07M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSC_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISO_E4typeEE4typeE_EEOSH_:
  472|  1.07M|    {
  473|  1.07M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.07M|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.22M|{
  343|  2.22M|    return {ranges::next(ranges::begin(source), n),
  344|  2.22M|            make_vscan_result_range_end(source)};
  345|  2.22M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.22M|{
  330|  2.22M|    return ranges::end(source);
  331|  2.22M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   677k|    {
  253|   677k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.22M|    {
  104|  2.22M|    }
_ZN3scn2v26detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
   38|  1.24M|    {
   39|  1.24M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.22M|    {
  121|  2.22M|        return ranges::begin(m_range);
  122|  2.22M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   767k|    {
  253|   767k|    }
_ZN3scn2v26detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
   38|  1.40M|    {
   39|  1.40M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   782k|    {
  253|   782k|    }
_ZN3scn2v26detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
   38|  1.43M|    {
   39|  1.43M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  1.86M|{
  343|  1.86M|    return {ranges::next(ranges::begin(source), n),
  344|  1.86M|            make_vscan_result_range_end(source)};
  345|  1.86M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  1.86M|{
  330|  1.86M|    return ranges::end(source);
  331|  1.86M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   568k|    {
  253|   568k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  1.86M|    {
  104|  1.86M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  1.86M|    {
  121|  1.86M|        return ranges::begin(m_range);
  122|  1.86M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   640k|    {
  253|   640k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   652k|    {
  253|   652k|    }

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   320k|{
  117|   320k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   320k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   320k|{
   77|   320k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   320k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   320k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   320k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   320k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   640k|{
   55|   640k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.6k, False: 610k]
  |  |  ------------------
  ------------------
   56|  30.6k|        return unexpected(result.error());
   57|  30.6k|    }
   58|   610k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   610k|    static_cast<    \
  |  |  247|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   610k|    static_cast<    \
  |  |  247|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   640k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   320k|{
  201|   320k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   320k|                                                      format, {});
  203|   320k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   320k|{
  163|   320k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   320k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   320k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   320k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   320k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  70.0k|{
  248|  70.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  70.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  70.0k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  70.0k|{
  229|  70.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  70.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 67.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  67.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  67.4k|    static_cast<    \
  |  |  247|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  67.4k|    static_cast<    \
  |  |  247|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  70.0k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   360k|{
  117|   360k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   360k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   360k|{
   77|   360k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   360k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   360k|    static_cast<    \
  |  |  247|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   360k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   360k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   360k|    static_cast<    \
  |  |  247|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   360k|    static_cast<    \
  |  |  247|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   360k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   720k|{
   55|   720k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.6k, False: 689k]
  |  |  ------------------
  ------------------
   56|  30.6k|        return unexpected(result.error());
   57|  30.6k|    }
   58|   689k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   689k|    static_cast<    \
  |  |  247|   689k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   689k|    static_cast<    \
  |  |  247|   689k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   720k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   360k|{
  201|   360k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   360k|                                                      format, {});
  203|   360k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   360k|{
  163|   360k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   360k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   360k|    static_cast<    \
  |  |  247|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   360k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   360k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   360k|    static_cast<    \
  |  |  247|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   360k|    static_cast<    \
  |  |  247|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   360k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  80.5k|{
  248|  80.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  80.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  80.5k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  80.5k|{
  229|  80.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  80.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  80.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 77.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|  80.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  77.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  77.9k|    static_cast<    \
  |  |  247|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  77.9k|    static_cast<    \
  |  |  247|  77.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  80.5k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   366k|{
  117|   366k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   366k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   366k|{
   77|   366k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   366k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   366k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   366k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   733k|{
   55|   733k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.6k, False: 702k]
  |  |  ------------------
  ------------------
   56|  30.6k|        return unexpected(result.error());
   57|  30.6k|    }
   58|   702k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   702k|    static_cast<    \
  |  |  247|   702k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   702k|    static_cast<    \
  |  |  247|   702k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   733k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   366k|{
  201|   366k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   366k|                                                      format, {});
  203|   366k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   366k|{
  163|   366k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   366k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   366k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   366k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  82.6k|{
  248|  82.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  82.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  82.6k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  82.6k|{
  229|  82.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  82.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  82.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|  82.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  80.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  80.1k|    static_cast<    \
  |  |  247|  80.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  80.1k|    static_cast<    \
  |  |  247|  80.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  82.6k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.3k|{
  117|  15.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.3k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.3k|{
   77|  15.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  30.6k|{
   55|  30.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  30.6k|        return unexpected(result.error());
   57|  30.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  30.6k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.3k|{
  201|  15.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.3k|                                                      format, {});
  203|  15.3k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.3k|{
  163|  15.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.3k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.55k|{
  248|  2.55k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.55k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.55k|{
  229|  2.55k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.55k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|  2.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.55k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.3k|{
  117|  15.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.3k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.3k|{
   77|  15.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  30.6k|{
   55|  30.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  30.6k|        return unexpected(result.error());
   57|  30.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  30.6k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.3k|{
  201|  15.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.3k|                                                      format, {});
  203|  15.3k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.3k|{
  163|  15.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.3k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.55k|{
  248|  2.55k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.55k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.55k|{
  229|  2.55k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.55k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|  2.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.55k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.3k|{
  117|  15.3k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.3k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.3k|{
   77|  15.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  30.6k|{
   55|  30.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  30.6k|        return unexpected(result.error());
   57|  30.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  30.6k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.3k|{
  201|  15.3k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.3k|                                                      format, {});
  203|  15.3k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.3k|{
  163|  15.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.3k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.55k|{
  248|  2.55k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.55k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.55k|{
  229|  2.55k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.55k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|  2.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.55k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   283k|{
   77|   283k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   283k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   283k|    static_cast<    \
  |  |  247|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   283k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   283k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   283k|    static_cast<    \
  |  |  247|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   283k|    static_cast<    \
  |  |  247|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   283k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   566k|{
   55|   566k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.6k, False: 511k]
  |  |  ------------------
  ------------------
   56|  54.6k|        return unexpected(result.error());
   57|  54.6k|    }
   58|   511k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   511k|    static_cast<    \
  |  |  247|   511k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   511k|    static_cast<    \
  |  |  247|   511k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   566k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   283k|{
  163|   283k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   283k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   283k|    static_cast<    \
  |  |  247|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   283k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   283k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   283k|    static_cast<    \
  |  |  247|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   283k|    static_cast<    \
  |  |  247|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   283k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  61.1k|{
  229|  61.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  61.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  61.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.55k, False: 56.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.55k|    }                                                  \
  |  |  |  |   70|  61.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  56.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.6k|    static_cast<    \
  |  |  247|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.6k|    static_cast<    \
  |  |  247|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  61.1k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   315k|{
   77|   315k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   315k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   315k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   315k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   315k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   630k|{
   55|   630k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.6k, False: 575k]
  |  |  ------------------
  ------------------
   56|  54.6k|        return unexpected(result.error());
   57|  54.6k|    }
   58|   575k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   575k|    static_cast<    \
  |  |  247|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   575k|    static_cast<    \
  |  |  247|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   630k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   315k|{
  163|   315k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   315k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   315k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   315k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   315k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  69.6k|{
  229|  69.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  69.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  69.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.55k, False: 65.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.55k|    }                                                  \
  |  |  |  |   70|  69.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  65.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  65.0k|    static_cast<    \
  |  |  247|  65.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  65.0k|    static_cast<    \
  |  |  247|  65.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  69.6k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   320k|{
   77|   320k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   320k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   320k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   320k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   320k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   640k|{
   55|   640k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.6k, False: 585k]
  |  |  ------------------
  ------------------
   56|  54.6k|        return unexpected(result.error());
   57|  54.6k|    }
   58|   585k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   585k|    static_cast<    \
  |  |  247|   585k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   585k|    static_cast<    \
  |  |  247|   585k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   640k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   320k|{
  163|   320k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   320k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   320k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   320k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   320k|    static_cast<    \
  |  |  247|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   320k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  71.3k|{
  229|  71.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  71.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  71.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.55k, False: 66.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.55k|    }                                                  \
  |  |  |  |   70|  71.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  66.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  66.8k|    static_cast<    \
  |  |  247|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  66.8k|    static_cast<    \
  |  |  247|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  71.3k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  27.3k|{
   77|  27.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  27.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  27.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  27.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  27.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  54.6k|{
   55|  54.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  54.6k|        return unexpected(result.error());
   57|  54.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  54.6k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  27.3k|{
  163|  27.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  27.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  27.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  27.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  27.3k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.55k|{
  229|  4.55k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.55k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.55k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.55k|    }                                                  \
  |  |  |  |   70|  4.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.55k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  27.3k|{
   77|  27.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  27.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  27.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  27.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  27.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  54.6k|{
   55|  54.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  54.6k|        return unexpected(result.error());
   57|  54.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  54.6k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  27.3k|{
  163|  27.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  27.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  27.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  27.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  27.3k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.55k|{
  229|  4.55k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.55k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.55k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.55k|    }                                                  \
  |  |  |  |   70|  4.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.55k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  27.3k|{
   77|  27.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  27.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  27.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  27.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  27.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  54.6k|{
   55|  54.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.6k, False: 0]
  |  |  ------------------
  ------------------
   56|  54.6k|        return unexpected(result.error());
   57|  54.6k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  54.6k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  27.3k|{
  163|  27.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  27.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  27.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  27.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  27.3k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.55k|{
  229|  4.55k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.55k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.55k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.55k|    }                                                  \
  |  |  |  |   70|  4.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.55k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|  99.6k|{
  486|  99.6k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|  99.6k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|  99.6k|    {
  378|  99.6k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|  99.6k|    {
  360|  99.6k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|  99.6k|    {
  129|  99.6k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|  99.6k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   498k|    {
  382|   498k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 588, False: 498k]
  ------------------
  383|    588|            return false;
  384|    588|        }
  385|   498k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 398k, False: 99.6k]
  ------------------
  386|   398k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   398k|                                          this->m_current_view.begin(),
  388|   398k|                                          this->m_current_view.end());
  389|   398k|        }
  390|   498k|        m_latest = *m_cursor;
  391|   498k|        ++m_cursor;
  392|   498k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   498k|        return true;
  394|   498k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|  99.6k|    {
   49|  99.6k|        SCN_UNUSED(position);
  ------------------
  |  |  227|  99.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|  99.6k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   177k|{
  486|   177k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   177k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   177k|    {
  378|   177k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   177k|    {
  360|   177k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   177k|    {
  129|   177k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   177k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.06M|    {
  382|  1.06M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 705, False: 1.06M]
  ------------------
  383|    705|            return false;
  384|    705|        }
  385|  1.06M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 887k, False: 177k]
  ------------------
  386|   887k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   887k|                                          this->m_current_view.begin(),
  388|   887k|                                          this->m_current_view.end());
  389|   887k|        }
  390|  1.06M|        m_latest = *m_cursor;
  391|  1.06M|        ++m_cursor;
  392|  1.06M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.06M|        return true;
  394|  1.06M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   177k|    {
   49|   177k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   177k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   177k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  10.9M|    {
  173|  10.9M|        return m_end == nullptr;
  174|  10.9M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   697k|    {
  189|   697k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 697k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   697k|        return parent()->get_segment_starting_at(position());
  195|   697k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  5.98M|    {
  183|  5.98M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  5.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  5.98M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   697k|    {
   79|   697k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 199k, False: 498k]
  |  |  ------------------
  ------------------
   80|   697k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   199k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   199k|        }
   83|   498k|        const auto start = pos - m_putback_buffer.size();
   84|   498k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   697k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   252k|    {
  178|   252k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   252k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  1.34M|    {
  168|  1.34M|        return m_position;
  169|  1.34M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   299k|    {
  101|   299k|        return m_is_contiguous;
  102|   299k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  23.3M|    {
  173|  23.3M|        return m_end == nullptr;
  174|  23.3M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.42M|    {
  189|  1.42M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.42M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.42M|        return parent()->get_segment_starting_at(position());
  195|  1.42M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  12.8M|    {
  183|  12.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  12.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  12.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.42M|    {
   79|  1.42M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 532k, False: 888k]
  |  |  ------------------
  ------------------
   80|  1.42M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   532k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   532k|        }
   83|   888k|        const auto start = pos - m_putback_buffer.size();
   84|   888k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   888k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   888k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.42M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   450k|    {
  178|   450k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   450k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  2.93M|    {
  168|  2.93M|        return m_position;
  169|  2.93M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|   533k|    {
  101|   533k|        return m_is_contiguous;
  102|   533k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|  99.6k|{
  322|  99.6k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 99.6k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|  99.6k|    return ranges::subrange{forward_iterator{this, 0},
  327|  99.6k|                            ranges_std::default_sentinel};
  328|  99.6k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|  99.6k|    {
  155|  99.6k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  99.6k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  99.6k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   598k|    {
  258|   598k|        return x.is_at_end();
  259|   598k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.09M|    {
  302|  1.09M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.09M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.09M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.09M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.09M|        return !read_at_position();
  309|  1.09M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  2.84M|    {
  282|  2.84M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  2.84M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 2.84M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  2.84M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  2.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.34M, False: 498k]
  |  |  ------------------
  ------------------
  289|  2.34M|            return true;
  290|  2.34M|        }
  291|       |
  292|   996k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 498k, False: 498k]
  ------------------
  293|   498k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 588, False: 498k]
  ------------------
  294|    588|                return false;
  295|    588|            }
  296|   498k|        }
  297|   498k|        return true;
  298|   498k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  4.09M|    {
   59|  4.09M|        return m_putback_buffer.size() + m_current_view.size();
   60|  4.09M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   498k|    {
  269|   498k|        return !x.is_at_end();
  270|   498k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|   950k|    {
  217|   950k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|   950k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   950k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|   950k|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 950k]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|   950k|        auto res = read_at_position();
  226|   950k|        SCN_EXPECT(res);
  ------------------
  |  |  242|   950k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   950k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|   950k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|   950k|    {
   90|   950k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 750k, False: 199k]
  |  |  ------------------
  ------------------
   91|   950k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|   750k|            return m_putback_buffer[pos];
   93|   750k|        }
   94|   199k|        const auto start = pos - m_putback_buffer.size();
   95|   199k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|   950k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   797k|    {
  203|   797k|        ++m_position;
  204|   797k|        std::ignore = read_at_position();
  205|   797k|        return *this;
  206|   797k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   651k|    {
  252|   651k|        return !(lhs == rhs);
  253|   651k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   750k|    {
  247|   750k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 750k, False: 0]
  |  Branch (247:46): [True: 298k, False: 452k]
  ------------------
  248|   750k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   252k|    {
  232|   252k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   252k|        return *this;
  235|   252k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|  99.6k|    {
   54|  99.6k|        sync(0);
   55|  99.6k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   177k|{
  322|   177k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 177k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   177k|    return ranges::subrange{forward_iterator{this, 0},
  327|   177k|                            ranges_std::default_sentinel};
  328|   177k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   177k|    {
  155|   177k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   177k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   177k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.06M|    {
  258|  1.06M|        return x.is_at_end();
  259|  1.06M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  2.30M|    {
  302|  2.30M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.30M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.30M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.30M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.30M|        return !read_at_position();
  309|  2.30M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  6.13M|    {
  282|  6.13M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  6.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  6.13M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 6.13M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  6.13M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  6.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.06M, False: 1.06M]
  |  |  ------------------
  ------------------
  289|  5.06M|            return true;
  290|  5.06M|        }
  291|       |
  292|  2.13M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.06M, False: 1.06M]
  ------------------
  293|  1.06M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 705, False: 1.06M]
  ------------------
  294|    705|                return false;
  295|    705|            }
  296|  1.06M|        }
  297|  1.06M|        return true;
  298|  1.06M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  8.71M|    {
   59|  8.71M|        return m_putback_buffer.size() + m_current_view.size();
   60|  8.71M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.24M|    {
  269|  1.24M|        return !x.is_at_end();
  270|  1.24M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  2.04M|    {
  217|  2.04M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.04M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.04M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.04M|        auto res = read_at_position();
  226|  2.04M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.04M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  2.04M|    {
   90|  2.04M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.51M, False: 533k]
  |  |  ------------------
  ------------------
   91|  2.04M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.51M|            return m_putback_buffer[pos];
   93|  1.51M|        }
   94|   533k|        const auto start = pos - m_putback_buffer.size();
   95|   533k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   533k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   533k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.04M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  1.77M|    {
  203|  1.77M|        ++m_position;
  204|  1.77M|        std::ignore = read_at_position();
  205|  1.77M|        return *this;
  206|  1.77M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.51M|    {
  252|  1.51M|        return !(lhs == rhs);
  253|  1.51M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  1.69M|    {
  247|  1.69M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.69M, False: 0]
  |  Branch (247:46): [True: 710k, False: 983k]
  ------------------
  248|  1.69M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   273k|    {
  232|   273k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   273k|        return *this;
  235|   273k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   177k|    {
   54|   177k|        sync(0);
   55|   177k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  1.13M|{
   72|  1.13M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  1.13M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  1.13M|    }
   75|  1.13M|    else if constexpr (sizeof(U) == 2) {
   76|  1.13M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  1.13M|    }
   78|  1.13M|    else {
   79|       |        // utf-32
   80|  1.13M|        static_assert(sizeof(U) == 4);
   81|  1.13M|        SCN_UNUSED(ch);
   82|  1.13M|        return 1;
   83|  1.13M|    }
   84|  1.13M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  1.13M|{
   36|  1.13M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  1.13M|    SCN_GCC_COMPAT_PUSH
   39|  1.13M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  1.13M|    constexpr char lengths[] =
   41|  1.13M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  1.13M|        "\1\1\1\1\1\1\1\1"
   43|  1.13M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  1.13M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  1.13M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  1.13M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  1.13M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  1.13M|    SCN_GCC_COMPAT_POP
   50|  1.13M|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  73.5M|{
   72|  73.5M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  73.5M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  73.5M|    }
   75|  73.5M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  73.5M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  73.5M|    }
   78|  73.5M|    else {
   79|       |        // utf-32
   80|  73.5M|        static_assert(sizeof(U) == 4);
   81|  73.5M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  73.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  73.5M|        return 1;
   83|  73.5M|    }
   84|  73.5M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   699k|{
   36|   699k|#define SCN_VISIT(Type)                                         \
   37|   699k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   699k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   699k|    }                                                           \
   40|   699k|    else {                                                      \
   41|   699k|        return vis(monostate_val);                              \
   42|   699k|    }
   43|       |
   44|   699k|    monostate monostate_val{};
   45|       |
   46|   699k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 699k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 699k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 699k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 699k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 699k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 699k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 699k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 699k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 699k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 699k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 699k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 699k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 699k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 699k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 699k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   210k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 210k, False: 489k]
  ------------------
   78|   210k|            SCN_VISIT(float);
  ------------------
  |  |   37|   210k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   210k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   210k|    }                                                           \
  |  |   40|   210k|    else {                                                      \
  |  |   41|   210k|        return vis(monostate_val);                              \
  |  |   42|   210k|    }
  ------------------
   79|   241k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 241k, False: 458k]
  ------------------
   80|   241k|            SCN_VISIT(double);
  ------------------
  |  |   37|   241k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   241k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   241k|    }                                                           \
  |  |   40|   241k|    else {                                                      \
  |  |   41|   241k|        return vis(monostate_val);                              \
  |  |   42|   241k|    }
  ------------------
   81|   248k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 248k, False: 451k]
  ------------------
   82|   248k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   248k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   248k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   248k|    }                                                           \
  |  |   40|   248k|    else {                                                      \
  |  |   41|   248k|        return vis(monostate_val);                              \
  |  |   42|   248k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 699k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 699k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 699k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 699k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 699k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 699k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 699k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 699k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 699k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   699k|            SCN_CLANG_POP
  114|   699k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   699k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  23.0k|{
   36|  23.0k|#define SCN_VISIT(Type)                                         \
   37|  23.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  23.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  23.0k|    }                                                           \
   40|  23.0k|    else {                                                      \
   41|  23.0k|        return vis(monostate_val);                              \
   42|  23.0k|    }
   43|       |
   44|  23.0k|    monostate monostate_val{};
   45|       |
   46|  23.0k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 23.0k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 23.0k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 23.0k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 23.0k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 23.0k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 23.0k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 23.0k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 23.0k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 23.0k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 23.0k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 23.0k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 23.0k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 23.0k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 23.0k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 23.0k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  7.66k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 7.66k, False: 15.3k]
  ------------------
   78|  7.66k|            SCN_VISIT(float);
  ------------------
  |  |   37|  7.66k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.66k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.66k|    }                                                           \
  |  |   40|  7.66k|    else {                                                      \
  |  |   41|  7.66k|        return vis(monostate_val);                              \
  |  |   42|  7.66k|    }
  ------------------
   79|  7.66k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 7.66k, False: 15.3k]
  ------------------
   80|  7.66k|            SCN_VISIT(double);
  ------------------
  |  |   37|  7.66k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.66k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.66k|    }                                                           \
  |  |   40|  7.66k|    else {                                                      \
  |  |   41|  7.66k|        return vis(monostate_val);                              \
  |  |   42|  7.66k|    }
  ------------------
   81|  7.66k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 7.66k, False: 15.3k]
  ------------------
   82|  7.66k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  7.66k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.66k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.66k|    }                                                           \
  |  |   40|  7.66k|    else {                                                      \
  |  |   41|  7.66k|        return vis(monostate_val);                              \
  |  |   42|  7.66k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 23.0k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 23.0k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 23.0k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 23.0k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 23.0k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 23.0k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 23.0k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 23.0k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 23.0k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  23.0k|            SCN_CLANG_POP
  114|  23.0k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  23.0k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.62M|{
   36|  1.62M|#define SCN_VISIT(Type)                                         \
   37|  1.62M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.62M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.62M|    }                                                           \
   40|  1.62M|    else {                                                      \
   41|  1.62M|        return vis(monostate_val);                              \
   42|  1.62M|    }
   43|       |
   44|  1.62M|    monostate monostate_val{};
   45|       |
   46|  1.62M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.62M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.62M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.62M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.62M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.62M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.62M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.62M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.62M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.62M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.62M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.62M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.62M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.62M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.62M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.62M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   500k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 500k, False: 1.12M]
  ------------------
   78|   500k|            SCN_VISIT(float);
  ------------------
  |  |   37|   500k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   500k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   500k|    }                                                           \
  |  |   40|   500k|    else {                                                      \
  |  |   41|   500k|        return vis(monostate_val);                              \
  |  |   42|   500k|    }
  ------------------
   79|   559k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 559k, False: 1.06M]
  ------------------
   80|   559k|            SCN_VISIT(double);
  ------------------
  |  |   37|   559k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   559k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   559k|    }                                                           \
  |  |   40|   559k|    else {                                                      \
  |  |   41|   559k|        return vis(monostate_val);                              \
  |  |   42|   559k|    }
  ------------------
   81|   568k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 568k, False: 1.06M]
  ------------------
   82|   568k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   568k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   568k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   568k|    }                                                           \
  |  |   40|   568k|    else {                                                      \
  |  |   41|   568k|        return vis(monostate_val);                              \
  |  |   42|   568k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.62M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.62M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.62M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.62M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.62M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.62M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.62M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.62M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.62M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.62M|            SCN_CLANG_POP
  114|  1.62M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.62M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  76.6k|{
   36|  76.6k|#define SCN_VISIT(Type)                                         \
   37|  76.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  76.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  76.6k|    }                                                           \
   40|  76.6k|    else {                                                      \
   41|  76.6k|        return vis(monostate_val);                              \
   42|  76.6k|    }
   43|       |
   44|  76.6k|    monostate monostate_val{};
   45|       |
   46|  76.6k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 76.6k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 76.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 76.6k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 76.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 76.6k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 76.6k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 76.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 76.6k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 76.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 76.6k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 76.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 76.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 76.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 76.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 76.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  25.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 25.5k, False: 51.1k]
  ------------------
   78|  25.5k|            SCN_VISIT(float);
  ------------------
  |  |   37|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  25.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  25.5k|    }                                                           \
  |  |   40|  25.5k|    else {                                                      \
  |  |   41|  25.5k|        return vis(monostate_val);                              \
  |  |   42|  25.5k|    }
  ------------------
   79|  25.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 25.5k, False: 51.1k]
  ------------------
   80|  25.5k|            SCN_VISIT(double);
  ------------------
  |  |   37|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  25.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  25.5k|    }                                                           \
  |  |   40|  25.5k|    else {                                                      \
  |  |   41|  25.5k|        return vis(monostate_val);                              \
  |  |   42|  25.5k|    }
  ------------------
   81|  25.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 25.5k, False: 51.1k]
  ------------------
   82|  25.5k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  25.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  25.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  25.5k|    }                                                           \
  |  |   40|  25.5k|    else {                                                      \
  |  |   41|  25.5k|        return vis(monostate_val);                              \
  |  |   42|  25.5k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 76.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 76.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 76.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 76.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 76.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 76.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 76.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 76.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 76.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  76.6k|            SCN_CLANG_POP
  114|  76.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  76.6k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   606k|{
   36|   606k|#define SCN_VISIT(Type)                                         \
   37|   606k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   606k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   606k|    }                                                           \
   40|   606k|    else {                                                      \
   41|   606k|        return vis(monostate_val);                              \
   42|   606k|    }
   43|       |
   44|   606k|    monostate monostate_val{};
   45|       |
   46|   606k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 606k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 606k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 606k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 606k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 606k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 606k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 606k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 606k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 606k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 606k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 606k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 606k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 606k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 606k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 606k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   183k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 183k, False: 423k]
  ------------------
   78|   183k|            SCN_VISIT(float);
  ------------------
  |  |   37|   183k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   183k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   183k|    }                                                           \
  |  |   40|   183k|    else {                                                      \
  |  |   41|   183k|        return vis(monostate_val);                              \
  |  |   42|   183k|    }
  ------------------
   79|   208k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 208k, False: 397k]
  ------------------
   80|   208k|            SCN_VISIT(double);
  ------------------
  |  |   37|   208k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   208k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   208k|    }                                                           \
  |  |   40|   208k|    else {                                                      \
  |  |   41|   208k|        return vis(monostate_val);                              \
  |  |   42|   208k|    }
  ------------------
   81|   214k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 214k, False: 392k]
  ------------------
   82|   214k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   214k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   214k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   214k|    }                                                           \
  |  |   40|   214k|    else {                                                      \
  |  |   41|   214k|        return vis(monostate_val);                              \
  |  |   42|   214k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 606k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 606k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 606k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 606k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 606k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 606k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 606k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 606k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 606k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   606k|            SCN_CLANG_POP
  114|   606k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   606k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.43M|{
   36|  1.43M|#define SCN_VISIT(Type)                                         \
   37|  1.43M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.43M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.43M|    }                                                           \
   40|  1.43M|    else {                                                      \
   41|  1.43M|        return vis(monostate_val);                              \
   42|  1.43M|    }
   43|       |
   44|  1.43M|    monostate monostate_val{};
   45|       |
   46|  1.43M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.43M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.43M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.43M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.43M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.43M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.43M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.43M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.43M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.43M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.43M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.43M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.43M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.43M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.43M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.43M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   443k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 443k, False: 988k]
  ------------------
   78|   443k|            SCN_VISIT(float);
  ------------------
  |  |   37|   443k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   443k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   443k|    }                                                           \
  |  |   40|   443k|    else {                                                      \
  |  |   41|   443k|        return vis(monostate_val);                              \
  |  |   42|   443k|    }
  ------------------
   79|   490k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 490k, False: 941k]
  ------------------
   80|   490k|            SCN_VISIT(double);
  ------------------
  |  |   37|   490k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   490k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   490k|    }                                                           \
  |  |   40|   490k|    else {                                                      \
  |  |   41|   490k|        return vis(monostate_val);                              \
  |  |   42|   490k|    }
  ------------------
   81|   497k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 497k, False: 934k]
  ------------------
   82|   497k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   497k|    }                                                           \
  |  |   40|   497k|    else {                                                      \
  |  |   41|   497k|        return vis(monostate_val);                              \
  |  |   42|   497k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.43M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.43M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.43M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.43M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.43M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.43M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.43M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.43M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.43M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.43M|            SCN_CLANG_POP
  114|  1.43M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.43M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  41.0k|{
   36|  41.0k|#define SCN_VISIT(Type)                                         \
   37|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  41.0k|    }                                                           \
   40|  41.0k|    else {                                                      \
   41|  41.0k|        return vis(monostate_val);                              \
   42|  41.0k|    }
   43|       |
   44|  41.0k|    monostate monostate_val{};
   45|       |
   46|  41.0k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 41.0k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 41.0k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 41.0k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 41.0k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 41.0k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 41.0k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 41.0k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 41.0k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 41.0k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 41.0k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 41.0k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 41.0k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 41.0k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 41.0k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 41.0k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  13.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 13.6k, False: 27.3k]
  ------------------
   78|  13.6k|            SCN_VISIT(float);
  ------------------
  |  |   37|  13.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.6k|    }                                                           \
  |  |   40|  13.6k|    else {                                                      \
  |  |   41|  13.6k|        return vis(monostate_val);                              \
  |  |   42|  13.6k|    }
  ------------------
   79|  13.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 13.6k, False: 27.3k]
  ------------------
   80|  13.6k|            SCN_VISIT(double);
  ------------------
  |  |   37|  13.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.6k|    }                                                           \
  |  |   40|  13.6k|    else {                                                      \
  |  |   41|  13.6k|        return vis(monostate_val);                              \
  |  |   42|  13.6k|    }
  ------------------
   81|  13.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 13.6k, False: 27.3k]
  ------------------
   82|  13.6k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  13.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  13.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  13.6k|    }                                                           \
  |  |   40|  13.6k|    else {                                                      \
  |  |   41|  13.6k|        return vis(monostate_val);                              \
  |  |   42|  13.6k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 41.0k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 41.0k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 41.0k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 41.0k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 41.0k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 41.0k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 41.0k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 41.0k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 41.0k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  41.0k|            SCN_CLANG_POP
  114|  41.0k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  41.0k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   136k|{
   36|   136k|#define SCN_VISIT(Type)                                         \
   37|   136k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   136k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   136k|    }                                                           \
   40|   136k|    else {                                                      \
   41|   136k|        return vis(monostate_val);                              \
   42|   136k|    }
   43|       |
   44|   136k|    monostate monostate_val{};
   45|       |
   46|   136k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 136k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 136k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 136k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 136k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 136k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 136k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 136k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 136k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 136k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 136k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 136k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 136k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 136k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 136k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 136k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  45.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 45.5k, False: 91.1k]
  ------------------
   78|  45.5k|            SCN_VISIT(float);
  ------------------
  |  |   37|  45.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.5k|    }                                                           \
  |  |   40|  45.5k|    else {                                                      \
  |  |   41|  45.5k|        return vis(monostate_val);                              \
  |  |   42|  45.5k|    }
  ------------------
   79|  45.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 45.5k, False: 91.1k]
  ------------------
   80|  45.5k|            SCN_VISIT(double);
  ------------------
  |  |   37|  45.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.5k|    }                                                           \
  |  |   40|  45.5k|    else {                                                      \
  |  |   41|  45.5k|        return vis(monostate_val);                              \
  |  |   42|  45.5k|    }
  ------------------
   81|  45.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 45.5k, False: 91.1k]
  ------------------
   82|  45.5k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  45.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.5k|    }                                                           \
  |  |   40|  45.5k|    else {                                                      \
  |  |   41|  45.5k|        return vis(monostate_val);                              \
  |  |   42|  45.5k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 136k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 136k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 136k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 136k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 136k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 136k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 136k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 136k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 136k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   136k|            SCN_CLANG_POP
  114|   136k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   136k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.04M|{
  174|  1.04M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.04M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.04M|{
  111|  1.04M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.04M|    auto result = vscan_impl(buffer, format, args);
  114|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.0k, False: 1.00M]
  |  |  ------------------
  ------------------
  115|  46.0k|        return unexpected(result.error());
  116|  46.0k|    }
  117|  1.00M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.04M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.04M|{
  192|  1.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.04M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.04M|{
  127|  1.04M|#if !SCN_DISABLE_LOCALE
  128|  1.04M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.0k, False: 1.00M]
  |  |  ------------------
  ------------------
  135|  46.0k|        return unexpected(result.error());
  136|  46.0k|    }
  137|  1.00M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.04M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   233k|{
  205|   233k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   233k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   233k|{
  151|   233k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   233k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   233k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.66k, False: 225k]
  |  |  ------------------
  ------------------
  155|  7.66k|        return unexpected(result.error());
  156|  7.66k|    }
  157|   225k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   233k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  46.0k|{
  174|  46.0k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  46.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  46.0k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|  46.0k|{
  111|  46.0k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  46.0k|    auto result = vscan_impl(buffer, format, args);
  114|  46.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.0k, False: 0]
  |  |  ------------------
  ------------------
  115|  46.0k|        return unexpected(result.error());
  116|  46.0k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  46.0k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  46.0k|{
  192|  46.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  46.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  46.0k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|  46.0k|{
  127|  46.0k|#if !SCN_DISABLE_LOCALE
  128|  46.0k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  46.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  46.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  46.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  46.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46.0k, False: 0]
  |  |  ------------------
  ------------------
  135|  46.0k|        return unexpected(result.error());
  136|  46.0k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  46.0k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  7.66k|{
  205|  7.66k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  7.66k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  7.66k|{
  151|  7.66k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  7.66k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  7.66k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.66k, False: 0]
  |  |  ------------------
  ------------------
  155|  7.66k|        return unexpected(result.error());
  156|  7.66k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  7.66k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|   918k|{
  111|   918k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   918k|    auto result = vscan_impl(buffer, format, args);
  114|   918k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.0k, False: 836k]
  |  |  ------------------
  ------------------
  115|  82.0k|        return unexpected(result.error());
  116|  82.0k|    }
  117|   836k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   918k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|   918k|{
  127|   918k|#if !SCN_DISABLE_LOCALE
  128|   918k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   918k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   918k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   918k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   918k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.0k, False: 836k]
  |  |  ------------------
  ------------------
  135|  82.0k|        return unexpected(result.error());
  136|  82.0k|    }
  137|   836k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   918k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   202k|{
  151|   202k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   202k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   202k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.6k, False: 188k]
  |  |  ------------------
  ------------------
  155|  13.6k|        return unexpected(result.error());
  156|  13.6k|    }
  157|   188k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   202k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|  82.0k|{
  111|  82.0k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  82.0k|    auto result = vscan_impl(buffer, format, args);
  114|  82.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.0k, False: 0]
  |  |  ------------------
  ------------------
  115|  82.0k|        return unexpected(result.error());
  116|  82.0k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  82.0k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|  82.0k|{
  127|  82.0k|#if !SCN_DISABLE_LOCALE
  128|  82.0k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  82.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  82.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  82.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  82.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  82.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 82.0k, False: 0]
  |  |  ------------------
  ------------------
  135|  82.0k|        return unexpected(result.error());
  136|  82.0k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  82.0k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  13.6k|{
  151|  13.6k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  13.6k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  13.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.6k, False: 0]
  |  |  ------------------
  ------------------
  155|  13.6k|        return unexpected(result.error());
  156|  13.6k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  13.6k|}

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   283k|{
   90|   283k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   283k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   918k|{
   45|   918k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   918k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   283k|{
  125|   283k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   283k|                                                         format, {});
  127|   283k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   918k|{
   61|   918k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   918k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  61.1k|{
  159|  61.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  61.1k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   202k|{
   73|   202k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   202k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   315k|{
   90|   315k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   315k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   315k|{
  125|   315k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   315k|                                                         format, {});
  127|   315k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  69.6k|{
  159|  69.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  69.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  69.6k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   320k|{
   90|   320k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   320k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   320k|{
  125|   320k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   320k|                                                         format, {});
  127|   320k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  71.3k|{
  159|  71.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  71.3k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  27.3k|{
   90|  27.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  27.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  82.0k|{
   45|  82.0k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  82.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  82.0k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  27.3k|{
  125|  27.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  27.3k|                                                         format, {});
  127|  27.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  82.0k|{
   61|  82.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  82.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  82.0k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  4.55k|{
  159|  4.55k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  4.55k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  13.6k|{
   73|  13.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  13.6k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  27.3k|{
   90|  27.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  27.3k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  27.3k|{
  125|  27.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  27.3k|                                                         format, {});
  127|  27.3k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  4.55k|{
  159|  4.55k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  4.55k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  27.3k|{
   90|  27.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  27.3k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  27.3k|{
  125|  27.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  27.3k|                                                         format, {});
  127|  27.3k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  4.55k|{
  159|  4.55k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  4.55k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  9.54M|            {
 2693|  9.54M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.54M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  9.54M|            {
 2672|  9.54M|                return decay_copy(t.begin());
 2673|  9.54M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|  96.8M|    {
 2606|  96.8M|        return std::forward<T>(t);
 2607|  96.8M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.63M|            {
 3178|  4.63M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.63M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.63M|            {
 3158|  4.63M|                return t.data();
 3159|  4.63M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  4.63M|    {
 6095|  4.63M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 19.3k, False: 4.61M]
  ------------------
 6096|  4.63M|                   ? nullptr
 6097|  4.63M|                   : std::addressof(*ranges::begin(derived()));
 6098|  4.63M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  4.63M|            {
 3127|  4.63M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.63M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  4.63M|            {
 3098|  4.63M|                return bool((std::forward<T>(t).empty()));
 3099|  4.63M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  12.8M|        {
 6454|  12.8M|            return data_.begin_ == data_.end_;
 6455|  12.8M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  9.25M|    {
 6049|  9.25M|        return static_cast<const D&>(*this);
 6050|  9.25M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  17.2M|            {
 2693|  17.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  17.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  17.2M|            {
 2672|  17.2M|                return decay_copy(t.begin());
 2673|  17.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  54.9M|        {
 6444|  54.9M|            return data_.begin_;
 6445|  54.9M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.63M|            {
 3038|  4.63M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.63M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  4.63M|            {
 3000|  4.63M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.63M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  22.1M|    {
 2606|  22.1M|        return std::forward<T>(t);
 2607|  22.1M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  12.9M|        {
 6462|  12.9M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  12.9M|                return data_.size_;
 6464|  12.9M|            }
 6465|  12.9M|            else {
 6466|  12.9M|                return data_.end_ - data_.begin_;
 6467|  12.9M|            }
 6468|  12.9M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  8.06M|            {
 3788|  8.06M|                ranges::advance(x, n);
 3789|  8.06M|                return x;
 3790|  8.06M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  8.06M|            {
 3678|  8.06M|                fn::impl(i, n);
 3679|  8.06M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  8.06M|            {
 3562|  8.06M|                r += n;
 3563|  8.06M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  36.1M|            {
 2693|  36.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  36.1M|            {
 2672|  36.1M|                return decay_copy(t.begin());
 2673|  36.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  10.2M|            {
 2759|  10.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.2M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.2M|            {
 2739|  10.2M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  26.1M|        {
 6449|  26.1M|            return data_.end_;
 6450|  26.1M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  10.9M|            {
 2759|  10.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.9M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.9M|            {
 2739|  10.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.9M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  20.4M|        {
 6375|  20.4M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  20.4M|        {
 6294|  20.4M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  99.6k|            {
 2693|  99.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  99.6k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|  99.6k|            {
 2672|  99.6k|                return decay_copy(t.begin());
 2673|  99.6k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|   797k|    {
 2606|   797k|        return std::forward<T>(t);
 2607|   797k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  99.6k|            {
 2693|  99.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  99.6k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  99.6k|            {
 2672|  99.6k|                return decay_copy(t.begin());
 2673|  99.6k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  99.6k|        {
 6444|  99.6k|            return data_.begin_;
 6445|  99.6k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   498k|            {
 2759|   498k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   498k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   498k|            {
 2739|   498k|                return decay_copy(std::forward<T>(t).end());
 2740|   498k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   498k|        {
 6449|   498k|            return data_.end_;
 6450|   498k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  99.6k|            {
 2759|  99.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  99.6k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  99.6k|            {
 2739|  99.6k|                return decay_copy(std::forward<T>(t).end());
 2740|  99.6k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  99.6k|        {
 6375|  99.6k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|  99.6k|        {
 6294|  99.6k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.25M|            {
 2693|  1.25M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.25M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.25M|            {
 2672|  1.25M|                return decay_copy(t.begin());
 2673|  1.25M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   154M|    {
 2606|   154M|        return std::forward<T>(t);
 2607|   154M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  2.03M|            {
 3178|  2.03M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.03M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.03M|            {
 3158|  2.03M|                return t.data();
 3159|  2.03M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  2.03M|    {
 6095|  2.03M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 19.6k, False: 2.01M]
  ------------------
 6096|  2.03M|                   ? nullptr
 6097|  2.03M|                   : std::addressof(*ranges::begin(derived()));
 6098|  2.03M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  2.03M|            {
 3127|  2.03M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.03M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  2.03M|            {
 3098|  2.03M|                return bool((std::forward<T>(t).empty()));
 3099|  2.03M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  3.85M|        {
 6454|  3.85M|            return data_.begin_ == data_.end_;
 6455|  3.85M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  4.05M|    {
 6049|  4.05M|        return static_cast<const D&>(*this);
 6050|  4.05M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  14.9M|            {
 2693|  14.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  14.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  14.9M|            {
 2672|  14.9M|                return decay_copy(t.begin());
 2673|  14.9M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  53.5M|        {
 6444|  53.5M|            return data_.begin_;
 6445|  53.5M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.03M|            {
 3038|  2.03M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.03M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  2.03M|            {
 3000|  2.03M|                return decay_copy(std::forward<T>(t).size());
 3001|  2.03M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  9.23M|        {
 6462|  9.23M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  9.23M|                return data_.size_;
 6464|  9.23M|            }
 6465|  9.23M|            else {
 6466|  9.23M|                return data_.end_ - data_.begin_;
 6467|  9.23M|            }
 6468|  9.23M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  9.01M|            {
 3788|  9.01M|                ranges::advance(x, n);
 3789|  9.01M|                return x;
 3790|  9.01M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  9.01M|            {
 3678|  9.01M|                fn::impl(i, n);
 3679|  9.01M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  9.01M|            {
 3562|  9.01M|                r += n;
 3563|  9.01M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  37.1M|            {
 2693|  37.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  37.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  37.1M|            {
 2672|  37.1M|                return decay_copy(t.begin());
 2673|  37.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  53.4M|            {
 2759|  53.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  53.4M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  53.4M|            {
 2739|  53.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  53.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   100M|        {
 6449|   100M|            return data_.end_;
 6450|   100M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  3.65M|            {
 2759|  3.65M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.65M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  3.65M|            {
 2739|  3.65M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.65M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  18.6M|        {
 6375|  18.6M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  18.6M|        {
 6294|  18.6M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   177k|            {
 2693|   177k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   177k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   177k|            {
 2672|   177k|                return decay_copy(t.begin());
 2673|   177k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.59M|    {
 2606|  1.59M|        return std::forward<T>(t);
 2607|  1.59M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   177k|            {
 2693|   177k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   177k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   177k|            {
 2672|   177k|                return decay_copy(t.begin());
 2673|   177k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   177k|        {
 6444|   177k|            return data_.begin_;
 6445|   177k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.06M|            {
 2759|  1.06M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.06M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.06M|            {
 2739|  1.06M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.06M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.06M|        {
 6449|  1.06M|            return data_.end_;
 6450|  1.06M|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   177k|            {
 2759|   177k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   177k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   177k|            {
 2739|   177k|                return decay_copy(std::forward<T>(t).end());
 2740|   177k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   177k|        {
 6375|   177k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   177k|        {
 6294|   177k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  3.64M|        {
 6444|  3.64M|            return data_.begin_;
 6445|  3.64M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  6.85M|        {
 6444|  6.85M|            return data_.begin_;
 6445|  6.85M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  16.5M|    {
 6044|  16.5M|        return static_cast<D&>(*this);
 6045|  16.5M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  8.25M|            {
 3098|  8.25M|                return bool((std::forward<T>(t).empty()));
 3099|  8.25M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  8.25M|            {
 3127|  8.25M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  8.25M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  8.25M|    {
 6085|  8.25M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 4.24k, False: 8.24M]
  ------------------
 6086|  8.25M|                   ? nullptr
 6087|  8.25M|                   : std::addressof(*ranges::begin(derived()));
 6088|  8.25M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  12.6M|            {
 2739|  12.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  12.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  12.6M|            {
 2759|  12.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  12.6M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  3.62M|    {
 6044|  3.62M|        return static_cast<D&>(*this);
 6045|  3.62M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  1.81M|            {
 3098|  1.81M|                return bool((std::forward<T>(t).empty()));
 3099|  1.81M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  1.81M|            {
 3127|  1.81M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.81M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  1.81M|    {
 6085|  1.81M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 4.18k, False: 1.81M]
  ------------------
 6086|  1.81M|                   ? nullptr
 6087|  1.81M|                   : std::addressof(*ranges::begin(derived()));
 6088|  1.81M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  44.1M|            {
 2739|  44.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  44.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  44.1M|            {
 2759|  44.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  44.1M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.42M|            {
 3780|  3.42M|                ++x;
 3781|  3.42M|                return x;
 3782|  3.42M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  8.30M|            {
 3038|  8.30M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.30M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  8.30M|            {
 3000|  8.30M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.30M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  8.25M|            {
 3178|  8.25M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  8.25M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  8.25M|            {
 3158|  8.25M|                return t.data();
 3159|  8.25M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  11.2M|    {
 2606|  11.2M|        return std::forward<T>(t);
 2607|  11.2M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  6.08M|            {
 3077|  6.08M|                return fn::impl(std::forward<T>(t));
 3078|  6.08M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  6.08M|            {
 3067|  6.08M|                return static_cast<ssize_return_t<T>>(
 3068|  6.08M|                    ranges::size(std::forward<T>(t)));
 3069|  6.08M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  7.16M|            {
 3038|  7.16M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.16M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  7.16M|            {
 3000|  7.16M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.16M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.56M|            {
 3597|  1.56M|                i = std::move(bound);
 3598|  1.56M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3076|  4.08M|            {
 3077|  4.08M|                return fn::impl(std::forward<T>(t));
 3078|  4.08M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISE_EENS0_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3066|  4.08M|            {
 3067|  4.08M|                return static_cast<ssize_return_t<T>>(
 3068|  4.08M|                    ranges::size(std::forward<T>(t)));
 3069|  4.08M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.08M|            {
 3038|  4.08M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.08M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  4.08M|            {
 3000|  4.08M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.08M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.24M|        {
 6793|  1.24M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.24M|                                    proj);
 6795|  1.24M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.24M|        {
 6761|  7.21M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.20M, False: 9.87k]
  ------------------
 6762|  7.20M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.23M, False: 5.96M]
  ------------------
 6763|  1.23M|                    return first;
 6764|  1.23M|                }
 6765|  5.96M|                ++first;
 6766|  5.96M|            }
 6767|  9.87k|            return first;
 6768|  1.24M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  7.20M|            {
 1300|  7.20M|                return fn::impl(std::forward<F>(f),
 1301|  7.20M|                                std::forward<Args>(args)...);
 1302|  7.20M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  7.20M|            {
 1289|  7.20M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.20M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  53.9M|            {
 1300|  53.9M|                return fn::impl(std::forward<F>(f),
 1301|  53.9M|                                std::forward<Args>(args)...);
 1302|  53.9M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  53.9M|            {
 1289|  53.9M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  53.9M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  53.9M|    {
 1142|  53.9M|        return std::forward<T>(t);
 1143|  53.9M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.56M|            {
 3798|  1.56M|                ranges::advance(x, bound);
 3799|  1.56M|                return x;
 3800|  1.56M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.56M|            {
 3686|  1.56M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.56M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  6.64M|            {
 3756|  6.64M|                return fn::impl(std::move(first), std::move(last));
 3757|  6.64M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  6.64M|            {
 3716|  6.64M|                return s - i;
 3717|  6.64M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|   789k|        {
 6375|   789k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|   789k|        {
 6294|   789k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.55M|            {
 2693|  1.55M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.55M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  1.55M|            {
 2672|  1.55M|                return decay_copy(t.begin());
 2673|  1.55M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  3.57M|    {
 2606|  3.57M|        return std::forward<T>(t);
 2607|  3.57M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   812k|            {
 2759|   812k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   812k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   812k|            {
 2739|   812k|                return decay_copy(std::forward<T>(t).end());
 2740|   812k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  5.29M|    {
 2606|  5.29M|        return std::forward<T>(t);
 2607|  5.29M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  1.70M|        {
 6449|  1.70M|            return data_.end_;
 6450|  1.70M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   597k|        {
 6444|   597k|            return data_.begin_;
 6445|   597k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   597k|        {
 6449|   597k|            return data_.end_;
 6450|   597k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   199k|        {
 6375|   199k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   199k|        {
 6294|   199k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  99.6k|            {
 3780|  99.6k|                ++x;
 3781|  99.6k|                return x;
 3782|  99.6k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|  99.6k|        {
 6793|  99.6k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  99.6k|                                    proj);
 6795|  99.6k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  99.6k|        {
 6761|  99.6k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 99.6k, False: 0]
  ------------------
 6762|  99.6k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 99.6k, False: 0]
  ------------------
 6763|  99.6k|                    return first;
 6764|  99.6k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|  99.6k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  99.6k|            {
 1300|  99.6k|                return fn::impl(std::forward<F>(f),
 1301|  99.6k|                                std::forward<Args>(args)...);
 1302|  99.6k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  99.6k|            {
 1289|  99.6k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  99.6k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  99.6k|            {
 1300|  99.6k|                return fn::impl(std::forward<F>(f),
 1301|  99.6k|                                std::forward<Args>(args)...);
 1302|  99.6k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  99.6k|            {
 1289|  99.6k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  99.6k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|  99.6k|    {
 1142|  99.6k|        return std::forward<T>(t);
 1143|  99.6k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   897k|            {
 2759|   897k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   897k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   897k|            {
 2739|   897k|                return decay_copy(std::forward<T>(t).end());
 2740|   897k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.01M|            {
 2693|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.01M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.01M|            {
 2672|  2.01M|                return decay_copy(t.begin());
 2673|  2.01M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  1.81M|            {
 3178|  1.81M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.81M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.81M|            {
 3158|  1.81M|                return t.data();
 3159|  1.81M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  7.19M|            {
 3038|  7.19M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.19M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  7.19M|            {
 3000|  7.19M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.19M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.35M|            {
 3597|  1.35M|                i = std::move(bound);
 3598|  1.35M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  2.95M|            {
 3780|  2.95M|                ++x;
 3781|  2.95M|                return x;
 3782|  2.95M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  5.37M|            {
 3077|  5.37M|                return fn::impl(std::forward<T>(t));
 3078|  5.37M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  5.37M|            {
 3067|  5.37M|                return static_cast<ssize_return_t<T>>(
 3068|  5.37M|                    ranges::size(std::forward<T>(t)));
 3069|  5.37M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.07M|        {
 6793|  1.07M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.07M|                                    proj);
 6795|  1.07M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.07M|        {
 6761|  5.33M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 5.32M, False: 10.2k]
  ------------------
 6762|  5.32M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.06M, False: 4.26M]
  ------------------
 6763|  1.06M|                    return first;
 6764|  1.06M|                }
 6765|  4.26M|                ++first;
 6766|  4.26M|            }
 6767|  10.2k|            return first;
 6768|  1.07M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  5.32M|            {
 1300|  5.32M|                return fn::impl(std::forward<F>(f),
 1301|  5.32M|                                std::forward<Args>(args)...);
 1302|  5.32M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  5.32M|            {
 1289|  5.32M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.32M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  5.32M|            {
 1300|  5.32M|                return fn::impl(std::forward<F>(f),
 1301|  5.32M|                                std::forward<Args>(args)...);
 1302|  5.32M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  5.32M|            {
 1289|  5.32M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.32M|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  5.32M|    {
 1142|  5.32M|        return std::forward<T>(t);
 1143|  5.32M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.35M|            {
 3798|  1.35M|                ranges::advance(x, bound);
 3799|  1.35M|                return x;
 3800|  1.35M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.35M|            {
 3686|  1.35M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.35M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  2.38M|            {
 3756|  2.38M|                return fn::impl(std::move(first), std::move(last));
 3757|  2.38M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  2.38M|            {
 3716|  2.38M|                return s - i;
 3717|  2.38M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.58M|        {
 6375|  1.58M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.58M|        {
 6294|  1.58M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.59M|            {
 2693|  2.59M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.59M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.59M|            {
 2672|  2.59M|                return decay_copy(t.begin());
 2673|  2.59M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  6.72M|    {
 2606|  6.72M|        return std::forward<T>(t);
 2607|  6.72M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.62M|            {
 2759|  1.62M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.62M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.62M|            {
 2739|  1.62M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.62M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.58M|        {
 6449|  3.58M|            return data_.end_;
 6450|  3.58M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  1.59M|        {
 6444|  1.59M|            return data_.begin_;
 6445|  1.59M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  1.59M|        {
 6449|  1.59M|            return data_.end_;
 6450|  1.59M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   532k|        {
 6375|   532k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   532k|        {
 6294|   532k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   177k|            {
 3780|   177k|                ++x;
 3781|   177k|                return x;
 3782|   177k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   177k|        {
 6793|   177k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   177k|                                    proj);
 6795|   177k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   177k|        {
 6761|   177k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 177k, False: 0]
  ------------------
 6762|   177k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 177k, False: 0]
  ------------------
 6763|   177k|                    return first;
 6764|   177k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|   177k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   177k|            {
 1300|   177k|                return fn::impl(std::forward<F>(f),
 1301|   177k|                                std::forward<Args>(args)...);
 1302|   177k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   177k|            {
 1289|   177k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   177k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   177k|            {
 1300|   177k|                return fn::impl(std::forward<F>(f),
 1301|   177k|                                std::forward<Args>(args)...);
 1302|   177k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   177k|            {
 1289|   177k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   177k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   177k|    {
 1142|   177k|        return std::forward<T>(t);
 1143|   177k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.95M|            {
 2759|  1.95M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.95M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.95M|            {
 2739|  1.95M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.95M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  4.12M|            {
 2693|  4.12M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.12M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  4.12M|            {
 2672|  4.12M|                return decay_copy(t.begin());
 2673|  4.12M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSB_:
 3177|  1.07M|            {
 3178|  1.07M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.07M|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.07M|            {
 3158|  1.07M|                return t.data();
 3159|  1.07M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.91M|        {
 6793|  5.91M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.91M|                                    proj);
 6795|  5.91M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.91M|        {
 6761|  47.6M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 42.5M, False: 5.13M]
  ------------------
 6762|  42.5M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 775k, False: 41.7M]
  ------------------
 6763|   775k|                    return first;
 6764|   775k|                }
 6765|  41.7M|                ++first;
 6766|  41.7M|            }
 6767|  5.13M|            return first;
 6768|  5.91M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  42.5M|            {
 1300|  42.5M|                return fn::impl(std::forward<F>(f),
 1301|  42.5M|                                std::forward<Args>(args)...);
 1302|  42.5M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  42.5M|            {
 1289|  42.5M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  42.5M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  2.35M|        {
 6793|  2.35M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.35M|                                    proj);
 6795|  2.35M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  2.35M|        {
 6761|  4.31M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.19M, False: 120k]
  ------------------
 6762|  4.19M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.23M, False: 1.96M]
  ------------------
 6763|  2.23M|                    return first;
 6764|  2.23M|                }
 6765|  1.96M|                ++first;
 6766|  1.96M|            }
 6767|   120k|            return first;
 6768|  2.35M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  4.19M|            {
 1300|  4.19M|                return fn::impl(std::forward<F>(f),
 1301|  4.19M|                                std::forward<Args>(args)...);
 1302|  4.19M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  4.19M|            {
 1289|  4.19M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  4.19M|            }

_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  2.18M|    {
   44|  2.18M|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  3.07k|{
   50|  3.07k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  3.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  3.07k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
   49|  23.7k|{
   50|  23.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  23.7k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
   49|  2.11k|{
   50|  2.11k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  2.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.11k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   199k|    {
   44|   199k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  15.3k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|  38.3k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  1.94M|    {
   44|  1.94M|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   355k|    {
   44|   355k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  27.3k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|  68.3k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|  98.9k|{
   50|  98.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  98.9k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  13.3M|    {
 1191|  13.3M|        return has_value();
 1192|  13.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  26.3M|    {
  189|  26.3M|        return m_has_value;
  190|  26.3M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|   784k|    {
 1197|   784k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   784k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   784k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   784k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   784k|    {
  172|   784k|        return m_unexpected;
  173|   784k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  5.59M|    {
   72|  5.59M|        return m_unexpected;
   73|  5.59M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  2.74M|    {
   58|  2.74M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  2.74M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  2.74M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  99.6k|    {
 1078|  99.6k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  99.6k|    {
  151|  99.6k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  7.60M|    {
   67|  7.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  7.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  7.60M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.32M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  4.08M|    {
 1251|  4.08M|        return value();
 1252|  4.08M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  12.2M|    {
 1221|  12.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  12.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  12.2M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  12.2M|    {
  155|  12.2M|        return m_value;
  156|  12.2M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.22M|    {
 1034|  2.22M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.22M|    {
  142|  2.22M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.32M|    {
 1191|  2.32M|        return has_value();
 1192|  2.32M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.65M|    {
  189|  4.65M|        return m_has_value;
  190|  4.65M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  99.6k|    {
 1197|  99.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  99.6k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  99.6k|    {
  172|  99.6k|        return m_unexpected;
  173|  99.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  33.2k|    {
 1078|  33.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  33.2k|    {
  151|  33.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   710k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.00M|    {
 1251|  2.00M|        return value();
 1252|  2.00M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.22M|    {
 1221|  2.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.22M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.22M|    {
  155|  2.22M|        return m_value;
  156|  2.22M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   677k|    {
 1034|   677k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   677k|    {
  142|   677k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   710k|    {
 1191|   710k|        return has_value();
 1192|   710k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.38M|    {
  189|  1.38M|        return m_has_value;
  190|  1.38M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   677k|    {
 1274|   677k|        return std::addressof(value());
 1275|   677k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   677k|    {
 1221|   677k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   677k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   677k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   677k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   677k|    {
  155|   677k|        return m_value;
  156|   677k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   225k|    {
 1263|   225k|        return std::move(value());
 1264|   225k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  33.2k|    {
 1078|  33.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  33.2k|    {
  151|  33.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   800k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   767k|    {
 1034|   767k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   767k|    {
  142|   767k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   800k|    {
 1191|   800k|        return has_value();
 1192|   800k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.56M|    {
  189|  1.56M|        return m_has_value;
  190|  1.56M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   767k|    {
 1274|   767k|        return std::addressof(value());
 1275|   767k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   767k|    {
 1221|   767k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   767k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   767k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   767k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   767k|    {
  155|   767k|        return m_value;
  156|   767k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  33.2k|    {
 1078|  33.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  33.2k|    {
  151|  33.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   816k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   782k|    {
 1034|   782k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   782k|    {
  142|   782k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   816k|    {
 1191|   816k|        return has_value();
 1192|   816k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.59M|    {
  189|  1.59M|        return m_has_value;
  190|  1.59M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   782k|    {
 1274|   782k|        return std::addressof(value());
 1275|   782k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   782k|    {
 1221|   782k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   782k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   782k|    {
  155|   782k|        return m_value;
  156|   782k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  99.6k|    {
 1078|  99.6k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|  99.6k|    {
  151|  99.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  99.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  99.6k|    {
 1191|  99.6k|        return has_value();
 1192|  99.6k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   199k|    {
  189|   199k|        return m_has_value;
  190|   199k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  99.6k|    {
 1197|  99.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  99.6k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  99.6k|    {
  172|  99.6k|        return m_unexpected;
  173|  99.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  33.2k|    {
 1078|  33.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  33.2k|    {
  151|  33.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  33.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  33.2k|    {
 1191|  33.2k|        return has_value();
 1192|  33.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  33.2k|    {
  189|  33.2k|        return m_has_value;
  190|  33.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  33.2k|    {
 1078|  33.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  33.2k|    {
  151|  33.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  33.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  33.2k|    {
 1191|  33.2k|        return has_value();
 1192|  33.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  33.2k|    {
  189|  33.2k|        return m_has_value;
  190|  33.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  33.2k|    {
 1078|  33.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  33.2k|    {
  151|  33.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  33.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  33.2k|    {
 1191|  33.2k|        return has_value();
 1192|  33.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  33.2k|    {
  189|  33.2k|        return m_has_value;
  190|  33.2k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   177k|    {
 1078|   177k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   177k|    {
  151|   177k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.03M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  1.86M|    {
 1034|  1.86M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  1.86M|    {
  142|  1.86M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.03M|    {
 1191|  2.03M|        return has_value();
 1192|  2.03M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.07M|    {
  189|  4.07M|        return m_has_value;
  190|  4.07M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   177k|    {
 1197|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   177k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   177k|    {
  172|   177k|        return m_unexpected;
  173|   177k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  59.2k|    {
 1078|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  59.2k|    {
  151|  59.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   627k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.67M|    {
 1251|  1.67M|        return value();
 1252|  1.67M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  1.86M|    {
 1221|  1.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.86M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.86M|    {
  155|  1.86M|        return m_value;
  156|  1.86M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   568k|    {
 1034|   568k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   568k|    {
  142|   568k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   627k|    {
 1191|   627k|        return has_value();
 1192|   627k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.19M|    {
  189|  1.19M|        return m_has_value;
  190|  1.19M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   568k|    {
 1274|   568k|        return std::addressof(value());
 1275|   568k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   568k|    {
 1221|   568k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   568k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   568k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   568k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   568k|    {
  155|   568k|        return m_value;
  156|   568k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   188k|    {
 1263|   188k|        return std::move(value());
 1264|   188k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  59.2k|    {
 1078|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  59.2k|    {
  151|  59.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   699k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   640k|    {
 1034|   640k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   640k|    {
  142|   640k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   699k|    {
 1191|   699k|        return has_value();
 1192|   699k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.34M|    {
  189|  1.34M|        return m_has_value;
  190|  1.34M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   640k|    {
 1274|   640k|        return std::addressof(value());
 1275|   640k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   640k|    {
 1221|   640k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   640k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   640k|    {
  155|   640k|        return m_value;
  156|   640k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  59.2k|    {
 1078|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  59.2k|    {
  151|  59.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   712k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   652k|    {
 1034|   652k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   652k|    {
  142|   652k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   712k|    {
 1191|   712k|        return has_value();
 1192|   712k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.36M|    {
  189|  1.36M|        return m_has_value;
  190|  1.36M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   652k|    {
 1274|   652k|        return std::addressof(value());
 1275|   652k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   652k|    {
 1221|   652k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   652k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   652k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   652k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   652k|    {
  155|   652k|        return m_value;
  156|   652k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   177k|    {
 1078|   177k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   177k|    {
  151|   177k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   177k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   177k|    {
 1191|   177k|        return has_value();
 1192|   177k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   355k|    {
  189|   355k|        return m_has_value;
  190|   355k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   177k|    {
 1197|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   177k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   177k|    {
  172|   177k|        return m_unexpected;
  173|   177k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  59.2k|    {
 1078|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  59.2k|    {
  151|  59.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  59.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  59.2k|    {
 1191|  59.2k|        return has_value();
 1192|  59.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  59.2k|    {
  189|  59.2k|        return m_has_value;
  190|  59.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  59.2k|    {
 1078|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  59.2k|    {
  151|  59.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  59.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  59.2k|    {
 1191|  59.2k|        return has_value();
 1192|  59.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  59.2k|    {
  189|  59.2k|        return m_has_value;
  190|  59.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  59.2k|    {
 1078|  59.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  59.2k|    {
  151|  59.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  59.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  59.2k|    {
 1191|  59.2k|        return has_value();
 1192|  59.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  59.2k|    {
  189|  59.2k|        return m_has_value;
  190|  59.2k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.32M|    {
 1405|  2.32M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.32M|                                            std::forward<F>(f));
 1407|  2.32M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.32M|{
  927|  2.32M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.32M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.32M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.32M|            return result(*std::forward<Exp>(exp));
  931|  2.32M|        }
  932|       |
  933|  2.32M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.32M|        return result(unexpect, monostate{});
  935|  2.32M|    }
  936|  2.32M|    else {
  937|  2.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.30M, False: 23.5k]
  |  |  ------------------
  ------------------
  939|  2.32M|                   ? result(*std::forward<Exp>(exp))
  940|  2.32M|                   : result(unexpect,
  941|  23.5k|                            std::invoke(std::forward<F>(f),
  942|  23.5k|                                        std::forward<Exp>(exp).error()));
  943|  2.32M|    }
  944|  2.32M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  8.90M|    {
  189|  8.90M|        return m_has_value;
  190|  8.90M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.30M|    {
 1263|  2.30M|        return std::move(value());
 1264|  2.30M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.11M|    {
 1221|  3.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.11M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  3.11M|    {
  155|  3.11M|        return m_value;
  156|  3.11M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  9.01M|    {
 1034|  9.01M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  9.01M|    {
  142|  9.01M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  23.5k|    {
 1207|  23.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  23.5k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  29.9k|    {
  172|  29.9k|        return m_unexpected;
  173|  29.9k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   301k|    {
   72|   301k|        return m_unexpected;
   73|   301k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  2.20M|    {
 1088|  2.20M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.36M|    {
  151|  2.36M|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  13.7M|    {
 1191|  13.7M|        return has_value();
 1192|  13.7M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  20.8M|    {
  189|  20.8M|        return m_has_value;
  190|  20.8M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   202k|    {
 1197|   202k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   202k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   202k|    {
  172|   202k|        return m_unexpected;
  173|   202k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   155k|    {
 1078|   155k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.24M|    {
 1263|  5.24M|        return std::move(value());
 1264|  5.24M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  6.89M|    {
 1221|  6.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.89M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  6.89M|    {
  155|  6.89M|        return m_value;
  156|  6.89M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   127k|    {
   58|   127k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   127k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   127k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|   784k|    {
 1078|   784k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|   784k|    {
  151|   784k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  62.0k|    {
   58|  62.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  62.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  62.0k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  29.9k|    {
 1078|  29.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  29.9k|    {
  151|  29.9k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   150k|    {
   67|   150k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   150k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   150k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.76M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  5.73M|    {
 1034|  5.73M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  5.73M|    {
  142|  5.73M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  3.43M|    {
 1191|  3.43M|        return has_value();
 1192|  3.43M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  6.38k|    {
 1197|  6.38k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.38k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  63.6k|    {
   58|  63.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  63.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  63.6k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.31M|    {
 1078|  2.31M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  17.5M|    {
   72|  17.5M|        return m_unexpected;
   73|  17.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.31M|    {
  151|  2.31M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  4.76M|    {
   67|  4.76M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  4.76M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  4.76M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   805k|    {
 1251|   805k|        return value();
 1252|   805k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   824k|    {
 1034|   824k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   824k|    {
  142|   824k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  18.1M|    {
   58|  18.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  18.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  18.1M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  9.05M|    {
 1078|  9.05M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  18.1M|    {
   72|  18.1M|        return m_unexpected;
   73|  18.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  9.05M|    {
  151|  9.05M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  18.1M|    {
   67|  18.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  18.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  18.1M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  15.4M|    {
 1191|  15.4M|        return has_value();
 1192|  15.4M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  26.2M|    {
  189|  26.2M|        return m_has_value;
  190|  26.2M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  6.17M|    {
 1197|  6.17M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.17M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.17M|    {
  172|  6.17M|        return m_unexpected;
  173|  6.17M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.37M|    {
 1034|  2.37M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.37M|    {
  142|  2.37M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.37M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|  88.8k|    {
   58|  88.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  88.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  88.8k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    212|    {
 1078|    212|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    212|    {
  151|    212|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.42M|    {
 1251|  2.42M|        return value();
 1252|  2.42M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.42M|    {
 1221|  2.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.42M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.42M|    {
  155|  2.42M|        return m_value;
  156|  2.42M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  66.5k|    {
 1191|  66.5k|        return has_value();
 1192|  66.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.74M|    {
  189|  4.74M|        return m_has_value;
  190|  4.74M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.30M|    {
 1263|  2.30M|        return std::move(value());
 1264|  2.30M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.37M|    {
 1221|  2.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.37M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.37M|    {
  155|  2.37M|        return m_value;
  156|  2.37M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|   952k|    {
 1034|   952k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   952k|    {
  142|   952k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.65M|    {
 1251|  1.65M|        return value();
 1252|  1.65M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   143k|    {
 1034|   143k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   143k|    {
  142|   143k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  4.60M|    {
   58|  4.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  4.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  4.60M|    }
_ZNO3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1262|  8.17M|    {
 1263|  8.17M|        return std::move(value());
 1264|  8.17M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.30M|    {
 1405|  2.30M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.30M|                                            std::forward<F>(f));
 1407|  2.30M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.30M|{
  927|  2.30M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.30M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.30M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.30M|            return result(*std::forward<Exp>(exp));
  931|  2.30M|        }
  932|       |
  933|  2.30M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.30M|        return result(unexpect, monostate{});
  935|  2.30M|    }
  936|  2.30M|    else {
  937|  2.30M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.30M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.30M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.30M|                   ? result(*std::forward<Exp>(exp))
  940|  2.30M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.30M|    }
  944|  2.30M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.30M|    {
 1034|  2.30M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.30M|    {
  142|  2.30M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.30M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.30M|    {
 1191|  2.30M|        return has_value();
 1192|  2.30M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.60M|    {
  189|  4.60M|        return m_has_value;
  190|  4.60M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.30M|    {
 1263|  2.30M|        return std::move(value());
 1264|  2.30M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.30M|    {
 1221|  2.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.30M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.30M|    {
  155|  2.30M|        return m_value;
  156|  2.30M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  2.18M|    {
 1395|  2.18M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  2.18M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  2.18M|{
  927|  2.18M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.18M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.18M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.18M|            return result(*std::forward<Exp>(exp));
  931|  2.18M|        }
  932|       |
  933|  2.18M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.18M|        return result(unexpect, monostate{});
  935|  2.18M|    }
  936|  2.18M|    else {
  937|  2.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
  939|  2.18M|                   ? result(*std::forward<Exp>(exp))
  940|  2.18M|                   : result(unexpect,
  941|  2.18M|                            std::invoke(std::forward<F>(f),
  942|  2.18M|                                        std::forward<Exp>(exp).error()));
  943|  2.18M|    }
  944|  2.18M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  66.2k|    {
 1274|  66.2k|        return std::addressof(value());
 1275|  66.2k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  12.0M|    {
 1034|  12.0M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  12.0M|    {
  142|  12.0M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    216|    {
 1078|    216|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    216|    {
  151|    216|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   452k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   452k|    {
 1034|   452k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   452k|    {
  142|   452k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  99.6k|    {
 1405|  99.6k|        return detail::transform_error_impl(std::move(*this),
 1406|  99.6k|                                            std::forward<F>(f));
 1407|  99.6k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  99.6k|{
  927|  99.6k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  99.6k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  99.6k|        if (SCN_LIKELY(exp.has_value())) {
  930|  99.6k|            return result(*std::forward<Exp>(exp));
  931|  99.6k|        }
  932|       |
  933|  99.6k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  99.6k|        return result(unexpect, monostate{});
  935|  99.6k|    }
  936|  99.6k|    else {
  937|  99.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  99.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  99.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 99.6k, False: 39]
  |  |  ------------------
  ------------------
  939|  99.6k|                   ? result(*std::forward<Exp>(exp))
  940|  99.6k|                   : result(unexpect,
  941|     39|                            std::invoke(std::forward<F>(f),
  942|     39|                                        std::forward<Exp>(exp).error()));
  943|  99.6k|    }
  944|  99.6k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   804k|    {
  189|   804k|        return m_has_value;
  190|   804k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   352k|    {
 1263|   352k|        return std::move(value());
 1264|   352k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   352k|    {
 1221|   352k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   352k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   352k|    {
  155|   352k|        return m_value;
  156|   352k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  99.6k|    {
 1034|  99.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  99.6k|    {
  142|  99.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   498k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    216|    {
 1207|    216|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    216|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    216|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    216|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    216|    {
  172|    216|        return m_unexpected;
  173|    216|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   199k|    {
 1088|   199k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   398k|    {
  151|   398k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  99.6k|    {
 1191|  99.6k|        return has_value();
 1192|  99.6k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|  99.8k|    {
 1078|  99.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|  99.9k|    {
  151|  99.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   804k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   452k|    {
 1078|   452k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   452k|    {
  151|   452k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|   904k|    {
 1191|   904k|        return has_value();
 1192|   904k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  1.75M|    {
  189|  1.75M|        return m_has_value;
  190|  1.75M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   398k|    {
 1197|   398k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   398k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   398k|    {
  172|   398k|        return m_unexpected;
  173|   398k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|  99.6k|    {
 1034|  99.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|  99.6k|    {
  142|  99.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  99.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   252k|    {
 1221|   252k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   252k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   252k|    {
  155|   252k|        return m_value;
  156|   252k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   199k|    {
  189|   199k|        return m_has_value;
  190|   199k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|  99.6k|    {
 1263|  99.6k|        return std::move(value());
 1264|  99.6k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|  99.6k|    {
 1221|  99.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  99.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|  99.6k|    {
  155|  99.6k|        return m_value;
  156|  99.6k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   252k|    {
 1405|   252k|        return detail::transform_error_impl(std::move(*this),
 1406|   252k|                                            std::forward<F>(f));
 1407|   252k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   252k|{
  927|   252k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   252k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   252k|        if (SCN_LIKELY(exp.has_value())) {
  930|   252k|            return result(*std::forward<Exp>(exp));
  931|   252k|        }
  932|       |
  933|   252k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   252k|        return result(unexpect, monostate{});
  935|   252k|    }
  936|   252k|    else {
  937|   252k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   252k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 252k, False: 177]
  |  |  ------------------
  ------------------
  939|   252k|                   ? result(*std::forward<Exp>(exp))
  940|   252k|                   : result(unexpect,
  941|    177|                            std::invoke(std::forward<F>(f),
  942|    177|                                        std::forward<Exp>(exp).error()));
  943|   252k|    }
  944|   252k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   252k|    {
 1034|   252k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   252k|    {
  142|   252k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    177|    {
 1088|    177|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   252k|    {
 1263|   252k|        return std::move(value());
 1264|   252k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   199k|    {
 1078|   199k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  99.6k|    {
 1221|  99.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  99.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|   996k|    {
  189|   996k|        return m_has_value;
  190|   996k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  99.6k|    {
  155|  99.6k|        return m_value;
  156|  99.6k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|  99.6k|    {
 1405|  99.6k|        return detail::transform_error_impl(std::move(*this),
 1406|  99.6k|                                            std::forward<F>(f));
 1407|  99.6k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|  99.6k|{
  927|  99.6k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  99.6k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  99.6k|        if (SCN_LIKELY(exp.has_value())) {
  930|  99.6k|            return result(*std::forward<Exp>(exp));
  931|  99.6k|        }
  932|       |
  933|  99.6k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  99.6k|        return result(unexpect, monostate{});
  935|  99.6k|    }
  936|  99.6k|    else {
  937|  99.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  99.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  99.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 99.6k, False: 0]
  |  |  ------------------
  ------------------
  939|  99.6k|                   ? result(*std::forward<Exp>(exp))
  940|  99.6k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  99.6k|    }
  944|  99.6k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|  99.6k|    {
 1034|  99.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|  99.6k|    {
  142|  99.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  99.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  99.6k|    {
 1191|  99.6k|        return has_value();
 1192|  99.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   199k|    {
  189|   199k|        return m_has_value;
  190|   199k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|  99.6k|    {
 1263|  99.6k|        return std::move(value());
 1264|  99.6k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|  99.6k|    {
 1221|  99.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  99.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  99.6k|    {
  155|  99.6k|        return m_value;
  156|  99.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   199k|    {
 1395|   199k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   199k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   199k|{
  927|   199k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   199k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   199k|        if (SCN_LIKELY(exp.has_value())) {
  930|   199k|            return result(*std::forward<Exp>(exp));
  931|   199k|        }
  932|       |
  933|   199k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   199k|        return result(unexpect, monostate{});
  935|   199k|    }
  936|   199k|    else {
  937|   199k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   199k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   199k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
  939|   199k|                   ? result(*std::forward<Exp>(exp))
  940|   199k|                   : result(unexpect,
  941|   199k|                            std::invoke(std::forward<F>(f),
  942|   199k|                                        std::forward<Exp>(exp).error()));
  943|   199k|    }
  944|   199k|}
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   597k|    {
 1191|   597k|        return has_value();
 1192|   597k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   299k|    {
 1197|   299k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   299k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   299k|    {
  172|   299k|        return m_unexpected;
  173|   299k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|  99.6k|    {
 1263|  99.6k|        return std::move(value());
 1264|  99.6k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   119k|    {
 1078|   119k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   119k|    {
  151|   119k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  10.2M|    {
 1034|  10.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  10.2M|    {
  142|  10.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.03M|    {
 1405|  2.03M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.03M|                                            std::forward<F>(f));
 1407|  2.03M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.03M|{
  927|  2.03M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.03M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.03M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.03M|            return result(*std::forward<Exp>(exp));
  931|  2.03M|        }
  932|       |
  933|  2.03M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.03M|        return result(unexpect, monostate{});
  935|  2.03M|    }
  936|  2.03M|    else {
  937|  2.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.01M, False: 25.3k]
  |  |  ------------------
  ------------------
  939|  2.03M|                   ? result(*std::forward<Exp>(exp))
  940|  2.03M|                   : result(unexpect,
  941|  25.3k|                            std::invoke(std::forward<F>(f),
  942|  25.3k|                                        std::forward<Exp>(exp).error()));
  943|  2.03M|    }
  944|  2.03M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  18.4M|    {
  189|  18.4M|        return m_has_value;
  190|  18.4M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  7.30M|    {
 1263|  7.30M|        return std::move(value());
 1264|  7.30M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.97M|    {
 1221|  7.97M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.97M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  7.97M|    {
  155|  7.97M|        return m_value;
  156|  7.97M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  7.71M|    {
 1034|  7.71M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  7.71M|    {
  142|  7.71M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   113k|    {
 1207|   113k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   113k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   119k|    {
  172|   119k|        return m_unexpected;
  173|   119k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.97M|    {
 1088|  1.97M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.23M|    {
  151|  2.23M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   267k|    {
 1078|   267k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  2.96M|    {
 1191|  2.96M|        return has_value();
 1192|  2.96M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  6.60k|    {
 1197|  6.60k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.60k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.07M|    {
 1078|  2.07M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.16M|    {
  151|  2.16M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  16.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   672k|    {
 1251|   672k|        return value();
 1252|   672k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   689k|    {
 1034|   689k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   689k|    {
  142|   689k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  7.86M|    {
 1078|  7.86M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  7.86M|    {
  151|  7.86M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  18.8M|    {
 1191|  18.8M|        return has_value();
 1192|  18.8M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  33.5M|    {
  189|  33.5M|        return m_has_value;
  190|  33.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  5.54M|    {
 1197|  5.54M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  5.54M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  5.54M|    {
  172|  5.54M|        return m_unexpected;
  173|  5.54M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.07M|    {
 1034|  2.07M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.07M|    {
  142|  2.07M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.07M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    224|    {
 1078|    224|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    224|    {
  151|    224|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.00M|    {
 1251|  2.00M|        return value();
 1252|  2.00M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.29M|    {
 1221|  7.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.29M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  7.29M|    {
  155|  7.29M|        return m_value;
  156|  7.29M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  57.5k|    {
 1191|  57.5k|        return has_value();
 1192|  57.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.14M|    {
  189|  4.14M|        return m_has_value;
  190|  4.14M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.01M|    {
 1263|  2.01M|        return std::move(value());
 1264|  2.01M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.07M|    {
 1221|  2.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.07M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.07M|    {
  155|  2.07M|        return m_value;
  156|  2.07M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  5.37M|    {
 1405|  5.37M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.37M|                                            std::forward<F>(f));
 1407|  5.37M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.37M|{
  927|  5.37M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.37M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.37M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.37M|            return result(*std::forward<Exp>(exp));
  931|  5.37M|        }
  932|       |
  933|  5.37M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.37M|        return result(unexpect, monostate{});
  935|  5.37M|    }
  936|  5.37M|    else {
  937|  5.37M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.37M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.28M, False: 88.0k]
  |  |  ------------------
  ------------------
  939|  5.37M|                   ? result(*std::forward<Exp>(exp))
  940|  5.37M|                   : result(unexpect,
  941|  88.0k|                            std::invoke(std::forward<F>(f),
  942|  88.0k|                                        std::forward<Exp>(exp).error()));
  943|  5.37M|    }
  944|  5.37M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.08M|    {
 1034|  6.08M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.08M|    {
  142|  6.08M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|  88.0k|    {
 1088|  88.0k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.28M|    {
 1263|  5.28M|        return std::move(value());
 1264|  5.28M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.38M|    {
 1251|  1.38M|        return value();
 1252|  1.38M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.90M|    {
 1221|  5.90M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.90M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  18.3M|    {
  189|  18.3M|        return m_has_value;
  190|  18.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  5.90M|    {
  155|  5.90M|        return m_value;
  156|  5.90M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   131k|    {
 1034|   131k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   131k|    {
  142|   131k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.01M|    {
 1405|  2.01M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.01M|                                            std::forward<F>(f));
 1407|  2.01M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.01M|{
  927|  2.01M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.01M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.01M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.01M|            return result(*std::forward<Exp>(exp));
  931|  2.01M|        }
  932|       |
  933|  2.01M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.01M|        return result(unexpect, monostate{});
  935|  2.01M|    }
  936|  2.01M|    else {
  937|  2.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.01M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.01M|                   ? result(*std::forward<Exp>(exp))
  940|  2.01M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.01M|    }
  944|  2.01M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.01M|    {
 1034|  2.01M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.01M|    {
  142|  2.01M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.01M|    {
 1191|  2.01M|        return has_value();
 1192|  2.01M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.02M|    {
  189|  4.02M|        return m_has_value;
  190|  4.02M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.01M|    {
 1263|  2.01M|        return std::move(value());
 1264|  2.01M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.01M|    {
 1221|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.01M|    {
  155|  2.01M|        return m_value;
  156|  2.01M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  1.94M|    {
 1395|  1.94M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  1.94M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  1.94M|{
  927|  1.94M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.94M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.94M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.94M|            return result(*std::forward<Exp>(exp));
  931|  1.94M|        }
  932|       |
  933|  1.94M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.94M|        return result(unexpect, monostate{});
  935|  1.94M|    }
  936|  1.94M|    else {
  937|  1.94M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.94M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.94M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
  939|  1.94M|                   ? result(*std::forward<Exp>(exp))
  940|  1.94M|                   : result(unexpect,
  941|  1.94M|                            std::invoke(std::forward<F>(f),
  942|  1.94M|                                        std::forward<Exp>(exp).error()));
  943|  1.94M|    }
  944|  1.94M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  57.3k|    {
 1274|  57.3k|        return std::addressof(value());
 1275|  57.3k|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  12.0M|    {
 1191|  12.0M|        return has_value();
 1192|  12.0M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   354k|    {
 1197|   354k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   354k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   354k|    {
  172|   354k|        return m_unexpected;
  173|   354k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.51M|    {
 1263|  4.51M|        return std::move(value());
 1264|  4.51M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   355k|    {
 1078|   355k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   710k|    {
  151|   710k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   888k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   177k|    {
 1034|   177k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   177k|    {
  142|   177k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.06M|    {
 1191|  1.06M|        return has_value();
 1192|  1.06M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.77M|    {
  189|  1.77M|        return m_has_value;
  190|  1.77M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   532k|    {
 1197|   532k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   532k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   532k|    {
  172|   532k|        return m_unexpected;
  173|   532k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   177k|    {
 1221|   177k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   177k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   177k|    {
  155|   177k|        return m_value;
  156|   177k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    255|    {
 1078|    255|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    255|    {
  151|    255|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   806k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   805k|    {
 1034|   805k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   805k|    {
  142|   805k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   177k|    {
 1405|   177k|        return detail::transform_error_impl(std::move(*this),
 1406|   177k|                                            std::forward<F>(f));
 1407|   177k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   177k|{
  927|   177k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   177k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   177k|        if (SCN_LIKELY(exp.has_value())) {
  930|   177k|            return result(*std::forward<Exp>(exp));
  931|   177k|        }
  932|       |
  933|   177k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   177k|        return result(unexpect, monostate{});
  935|   177k|    }
  936|   177k|    else {
  937|   177k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   177k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   177k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 177k, False: 78]
  |  |  ------------------
  ------------------
  939|   177k|                   ? result(*std::forward<Exp>(exp))
  940|   177k|                   : result(unexpect,
  941|     78|                            std::invoke(std::forward<F>(f),
  942|     78|                                        std::forward<Exp>(exp).error()));
  943|   177k|    }
  944|   177k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.43M|    {
  189|  1.43M|        return m_has_value;
  190|  1.43M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   628k|    {
 1263|   628k|        return std::move(value());
 1264|   628k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   628k|    {
 1221|   628k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   628k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   628k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   628k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   628k|    {
  155|   628k|        return m_value;
  156|   628k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    255|    {
 1207|    255|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    255|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    255|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    255|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    255|    {
  172|    255|        return m_unexpected;
  173|    255|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   355k|    {
 1088|   355k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   177k|    {
 1191|   177k|        return has_value();
 1192|   177k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   177k|    {
 1078|   177k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   177k|    {
  151|   177k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.43M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   805k|    {
 1078|   805k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   805k|    {
  151|   805k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.61M|    {
 1191|  1.61M|        return has_value();
 1192|  1.61M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.12M|    {
  189|  3.12M|        return m_has_value;
  190|  3.12M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   710k|    {
 1197|   710k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   710k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   710k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   710k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   710k|    {
  172|   710k|        return m_unexpected;
  173|   710k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   177k|    {
 1034|   177k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   177k|    {
  142|   177k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   177k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   450k|    {
 1221|   450k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   450k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   450k|    {
  155|   450k|        return m_value;
  156|   450k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   355k|    {
  189|   355k|        return m_has_value;
  190|   355k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   177k|    {
 1263|   177k|        return std::move(value());
 1264|   177k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   177k|    {
 1221|   177k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   177k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   177k|    {
  155|   177k|        return m_value;
  156|   177k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   450k|    {
 1405|   450k|        return detail::transform_error_impl(std::move(*this),
 1406|   450k|                                            std::forward<F>(f));
 1407|   450k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   450k|{
  927|   450k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   450k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   450k|        if (SCN_LIKELY(exp.has_value())) {
  930|   450k|            return result(*std::forward<Exp>(exp));
  931|   450k|        }
  932|       |
  933|   450k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   450k|        return result(unexpect, monostate{});
  935|   450k|    }
  936|   450k|    else {
  937|   450k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   450k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   450k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 450k, False: 177]
  |  |  ------------------
  ------------------
  939|   450k|                   ? result(*std::forward<Exp>(exp))
  940|   450k|                   : result(unexpect,
  941|    177|                            std::invoke(std::forward<F>(f),
  942|    177|                                        std::forward<Exp>(exp).error()));
  943|   450k|    }
  944|   450k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   450k|    {
 1034|   450k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   450k|    {
  142|   450k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    177|    {
 1088|    177|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   450k|    {
 1263|   450k|        return std::move(value());
 1264|   450k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   177k|    {
 1405|   177k|        return detail::transform_error_impl(std::move(*this),
 1406|   177k|                                            std::forward<F>(f));
 1407|   177k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   177k|{
  927|   177k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   177k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   177k|        if (SCN_LIKELY(exp.has_value())) {
  930|   177k|            return result(*std::forward<Exp>(exp));
  931|   177k|        }
  932|       |
  933|   177k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   177k|        return result(unexpect, monostate{});
  935|   177k|    }
  936|   177k|    else {
  937|   177k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   177k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   177k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 177k, False: 0]
  |  |  ------------------
  ------------------
  939|   177k|                   ? result(*std::forward<Exp>(exp))
  940|   177k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   177k|    }
  944|   177k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   177k|    {
 1034|   177k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   177k|    {
  142|   177k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   177k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   177k|    {
 1191|   177k|        return has_value();
 1192|   177k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   355k|    {
  189|   355k|        return m_has_value;
  190|   355k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   177k|    {
 1263|   177k|        return std::move(value());
 1264|   177k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   177k|    {
 1221|   177k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   177k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   177k|    {
  155|   177k|        return m_value;
  156|   177k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   355k|    {
 1395|   355k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   355k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   355k|{
  927|   355k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   355k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   355k|        if (SCN_LIKELY(exp.has_value())) {
  930|   355k|            return result(*std::forward<Exp>(exp));
  931|   355k|        }
  932|       |
  933|   355k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   355k|        return result(unexpect, monostate{});
  935|   355k|    }
  936|   355k|    else {
  937|   355k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   355k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   355k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
  939|   355k|                   ? result(*std::forward<Exp>(exp))
  940|   355k|                   : result(unexpect,
  941|   355k|                            std::invoke(std::forward<F>(f),
  942|   355k|                                        std::forward<Exp>(exp).error()));
  943|   355k|    }
  944|   355k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   177k|    {
 1263|   177k|        return std::move(value());
 1264|   177k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1033|   259k|    {
 1034|   259k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  141|   259k|    {
  142|   259k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.11k|{
  200|  5.11k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.11k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.11k|{
  180|  5.11k|    return p;
  181|  5.11k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.11k|{
  200|  5.11k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.11k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.11k|{
  180|  5.11k|    return p;
  181|  5.11k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.11k|{
  200|  5.11k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.11k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  5.11k|{
  180|  5.11k|    return p;
  181|  5.11k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  27.3M|{
  200|  27.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  27.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  27.3M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  27.7M|{
  180|  27.7M|    return p;
  181|  27.7M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  10.1M|{
  200|  10.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  10.1M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  10.1M|{
  180|  10.1M|    return p;
  181|  10.1M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   398k|{
  200|   398k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   398k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  9.91M|{
  200|  9.91M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  9.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  9.91M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  10.9M|{
  180|  10.9M|    return p;
  181|  10.9M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.06M|{
  200|  1.06M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.06M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  17.8k|    {
  242|  17.8k|        return static_cast<size_type>(m_end - m_ptr);
  243|  17.8k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.55k|    {
  181|  2.55k|        return m_ptr;
  182|  2.55k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.55k|    {
  185|  2.55k|        return m_end;
  186|  2.55k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.55k|    {
  238|  2.55k|        return m_ptr;
  239|  2.55k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.55k|    {
  120|  2.55k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  30.6k|    {
  181|  30.6k|        return m_ptr;
  182|  30.6k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  30.6k|    {
  185|  30.6k|        return m_end;
  186|  30.6k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.55k|    {
  120|  2.55k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  54.6k|    {
  181|  54.6k|        return m_ptr;
  182|  54.6k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  54.6k|    {
  185|  54.6k|        return m_end;
  186|  54.6k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.55k|    {
  120|  2.55k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  5.05M|    {
  120|  5.05M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  5.05M|    {
  238|  5.05M|        return m_ptr;
  239|  5.05M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  5.05M|    {
  242|  5.05M|        return static_cast<size_type>(m_end - m_ptr);
  243|  5.05M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  99.7k|{
   60|  99.7k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  99.7k|                                          const CharT*, const CharT*>) {
   62|  99.7k|        return {first, last};
   63|  99.7k|    }
   64|  99.7k|    else {
   65|  99.7k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  99.7k|    }
   67|  99.7k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  4.95M|{
   60|  4.95M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  4.95M|                                          const CharT*, const CharT*>) {
   62|  4.95M|        return {first, last};
   63|  4.95M|    }
   64|  4.95M|    else {
   65|  4.95M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  4.95M|    }
   67|  4.95M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  8.93M|{
   44|  8.93M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  8.93M|                                          decltype(first), decltype(last)> &&
   46|  8.93M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  8.93M|        return {first, last};
   48|  8.93M|    }
   49|  8.93M|    else {
   50|  8.93M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  8.93M|                                       to_address(first), to_address(last)))};
   52|  8.93M|    }
   53|  8.93M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  12.0M|{
   75|  12.0M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  12.0M|                      typename std::basic_string_view<CharT>::iterator,
   77|  12.0M|                      decltype(it)> &&
   78|  12.0M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  12.0M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  12.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  12.0M|        return it;
   81|  12.0M|    }
   82|  12.0M|    else {
   83|  12.0M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  12.0M|    }
   85|  12.0M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|  99.6k|{
   54|  99.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  99.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  99.6k|        return true;
   57|  99.6k|    }
   58|  99.6k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|  99.6k|                           ranges::iterator_t<Range>,
   60|  99.6k|                           typename detail::basic_scan_buffer<
   61|  99.6k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  99.6k|        auto beg = ranges::begin(r);
   63|  99.6k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 99.6k, False: 0]
  ------------------
   64|  99.6k|            return false;
   65|  99.6k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|  99.6k|    else {
   79|  99.6k|        return false;
   80|  99.6k|    }
   81|  99.6k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   199k|{
  112|   199k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   199k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   199k|        return r;
  115|   199k|    }
  116|   199k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   199k|                           ranges::iterator_t<Range>,
  118|   199k|                           typename detail::basic_scan_buffer<
  119|   199k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   199k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   199k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   199k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   199k|                ranges::begin(r), ranges::end(r)));
  124|   199k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   199k|        }
  126|   199k|        else {
  127|   199k|            return ranges::begin(r).contiguous_segment();
  128|   199k|        }
  129|   199k|    }
  130|   199k|    else {
  131|   199k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   199k|    }
  133|   199k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   252k|{
  166|   252k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   252k|        return ranges_polyfill::usize(r);
  168|   252k|    }
  169|   252k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   252k|                           ranges::iterator_t<Range>,
  171|   252k|                           typename detail::basic_scan_buffer<
  172|   252k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   252k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   252k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   252k|                                       ranges::begin(r).position());
  176|   252k|        }
  177|   252k|        else {
  178|   252k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 252k, False: 0]
  ------------------
  179|   252k|                return static_cast<size_t>(
  180|   252k|                    ranges::begin(r).parent()->chars_available() -
  181|   252k|                    ranges::begin(r).position());
  182|   252k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   252k|        }
  185|   252k|    }
  186|   252k|    else {
  187|   252k|        return 0;
  188|   252k|    }
  189|   252k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   177k|{
   54|   177k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   177k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   177k|        return true;
   57|   177k|    }
   58|   177k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   177k|                           ranges::iterator_t<Range>,
   60|   177k|                           typename detail::basic_scan_buffer<
   61|   177k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   177k|        auto beg = ranges::begin(r);
   63|   177k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 177k, False: 0]
  ------------------
   64|   177k|            return false;
   65|   177k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   177k|    else {
   79|   177k|        return false;
   80|   177k|    }
   81|   177k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   177k|{
  112|   177k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   177k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   177k|        return r;
  115|   177k|    }
  116|   177k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   177k|                           ranges::iterator_t<Range>,
  118|   177k|                           typename detail::basic_scan_buffer<
  119|   177k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   177k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   177k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   177k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   177k|                ranges::begin(r), ranges::end(r)));
  124|   177k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   177k|        }
  126|   177k|        else {
  127|   177k|            return ranges::begin(r).contiguous_segment();
  128|   177k|        }
  129|   177k|    }
  130|   177k|    else {
  131|   177k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   177k|    }
  133|   177k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   450k|{
  166|   450k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   450k|        return ranges_polyfill::usize(r);
  168|   450k|    }
  169|   450k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   450k|                           ranges::iterator_t<Range>,
  171|   450k|                           typename detail::basic_scan_buffer<
  172|   450k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   450k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   450k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   450k|                                       ranges::begin(r).position());
  176|   450k|        }
  177|   450k|        else {
  178|   450k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 450k, False: 0]
  ------------------
  179|   450k|                return static_cast<size_t>(
  180|   450k|                    ranges::begin(r).parent()->chars_available() -
  181|   450k|                    ranges::begin(r).position());
  182|   450k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   450k|        }
  185|   450k|    }
  186|   450k|    else {
  187|   450k|        return 0;
  188|   450k|    }
  189|   450k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.30M|{
  235|  2.30M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.30M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.30M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.30M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.30M|    }
  240|  2.30M|    else {
  241|  2.30M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.30M|    }
  243|  2.30M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.30M|    {
   50|  2.30M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  6.77M|    {
   63|  6.77M|        return sv;
   64|  6.77M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  8.09M|    {
  142|  8.09M|        return m_view;
  143|  8.09M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  5.00M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  4.80M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  2.13M|    {
  137|  2.13M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  2.13M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  2.13M|    {
  181|  2.13M|        using value_t = ranges::range_value_t<Range>;
  182|  2.13M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.13M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.13M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.13M|            m_storage.reset();
  186|  2.13M|            m_view = string_view_type{ranges::data(range),
  187|  2.13M|                                      ranges_polyfill::usize(range)};
  188|  2.13M|        }
  189|  2.13M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  2.13M|                                          std::basic_string<CharT>>) {
  191|  2.13M|            m_storage.emplace(SCN_FWD(range));
  192|  2.13M|            m_view = string_view_type{*m_storage};
  193|  2.13M|        }
  194|  2.13M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  2.13M|                                          typename detail::basic_scan_buffer<
  196|  2.13M|                                              value_t>::forward_iterator> &&
  197|  2.13M|                           ranges::common_range<Range>) {
  198|  2.13M|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.13M|            auto end_seg = range.end().contiguous_segment();
  200|  2.13M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.13M|                             detail::to_address(end_seg.end()))) {
  202|  2.13M|                auto& str = m_storage.emplace();
  203|  2.13M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.13M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.13M|                m_view = string_view_type{str};
  206|  2.13M|                return;
  207|  2.13M|            }
  208|       |
  209|  2.13M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.13M|                                                            end_seg.data());
  211|  2.13M|            m_storage.reset();
  212|  2.13M|        }
  213|  2.13M|        else {
  214|  2.13M|            auto& str = m_storage.emplace();
  215|  2.13M|            if constexpr (ranges::sized_range<Range>) {
  216|  2.13M|                str.reserve(ranges_polyfill::usize(range));
  217|  2.13M|            }
  218|  2.13M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.13M|                      std::back_inserter(str));
  220|  2.13M|            m_view = string_view_type{str};
  221|  2.13M|        }
  222|  2.13M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|  2.61M|    {
  147|  2.61M|        return m_storage.has_value();
  148|  2.61M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|  1.53M|    {
  152|  1.53M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  1.53M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   199k|{
  235|   199k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   199k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   199k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   199k|        return string_view_wrapper{SCN_FWD(range)};
  239|   199k|    }
  240|   199k|    else {
  241|   199k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   199k|    }
  243|   199k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   199k|    {
   97|   199k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   199k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   199k|    {
  181|   199k|        using value_t = ranges::range_value_t<Range>;
  182|   199k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   199k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   199k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   199k|            m_storage.reset();
  186|   199k|            m_view = string_view_type{ranges::data(range),
  187|   199k|                                      ranges_polyfill::usize(range)};
  188|   199k|        }
  189|   199k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   199k|                                          std::basic_string<CharT>>) {
  191|   199k|            m_storage.emplace(SCN_FWD(range));
  192|   199k|            m_view = string_view_type{*m_storage};
  193|   199k|        }
  194|   199k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   199k|                                          typename detail::basic_scan_buffer<
  196|   199k|                                              value_t>::forward_iterator> &&
  197|   199k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   199k|            auto beg_seg = range.begin().contiguous_segment();
  199|   199k|            auto end_seg = range.end().contiguous_segment();
  200|   199k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 199k, False: 78]
  |  |  ------------------
  ------------------
  201|   199k|                             detail::to_address(end_seg.end()))) {
  202|   199k|                auto& str = m_storage.emplace();
  203|   199k|                str.reserve(range.end().position() - range.begin().position());
  204|   199k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   199k|                m_view = string_view_type{str};
  206|   199k|                return;
  207|   199k|            }
  208|       |
  209|     78|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     78|                                                            end_seg.data());
  211|     78|            m_storage.reset();
  212|     78|        }
  213|   199k|        else {
  214|   199k|            auto& str = m_storage.emplace();
  215|   199k|            if constexpr (ranges::sized_range<Range>) {
  216|   199k|                str.reserve(ranges_polyfill::usize(range));
  217|   199k|            }
  218|   199k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   199k|                      std::back_inserter(str));
  220|   199k|            m_view = string_view_type{str};
  221|   199k|        }
  222|   199k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  8.03M|    {
  142|  8.03M|        return m_view;
  143|  8.03M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  4.91M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  4.38M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.81M|    {
  137|  1.81M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.81M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.81M|    {
  181|  1.81M|        using value_t = ranges::range_value_t<Range>;
  182|  1.81M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.81M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.81M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.81M|            m_storage.reset();
  186|  1.81M|            m_view = string_view_type{ranges::data(range),
  187|  1.81M|                                      ranges_polyfill::usize(range)};
  188|  1.81M|        }
  189|  1.81M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.81M|                                          std::basic_string<CharT>>) {
  191|  1.81M|            m_storage.emplace(SCN_FWD(range));
  192|  1.81M|            m_view = string_view_type{*m_storage};
  193|  1.81M|        }
  194|  1.81M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.81M|                                          typename detail::basic_scan_buffer<
  196|  1.81M|                                              value_t>::forward_iterator> &&
  197|  1.81M|                           ranges::common_range<Range>) {
  198|  1.81M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.81M|            auto end_seg = range.end().contiguous_segment();
  200|  1.81M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.81M|                             detail::to_address(end_seg.end()))) {
  202|  1.81M|                auto& str = m_storage.emplace();
  203|  1.81M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.81M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.81M|                m_view = string_view_type{str};
  206|  1.81M|                return;
  207|  1.81M|            }
  208|       |
  209|  1.81M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.81M|                                                            end_seg.data());
  211|  1.81M|            m_storage.reset();
  212|  1.81M|        }
  213|  1.81M|        else {
  214|  1.81M|            auto& str = m_storage.emplace();
  215|  1.81M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.81M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.81M|            }
  218|  1.81M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.81M|                      std::back_inserter(str));
  220|  1.81M|            m_view = string_view_type{str};
  221|  1.81M|        }
  222|  1.81M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|  2.18M|    {
  147|  2.18M|        return m_storage.has_value();
  148|  2.18M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|  1.28M|    {
  152|  1.28M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  1.28M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   532k|{
  235|   532k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   532k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   532k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   532k|        return string_view_wrapper{SCN_FWD(range)};
  239|   532k|    }
  240|   532k|    else {
  241|   532k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   532k|    }
  243|   532k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   532k|    {
   97|   532k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   532k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   532k|    {
  181|   532k|        using value_t = ranges::range_value_t<Range>;
  182|   532k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   532k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   532k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   532k|            m_storage.reset();
  186|   532k|            m_view = string_view_type{ranges::data(range),
  187|   532k|                                      ranges_polyfill::usize(range)};
  188|   532k|        }
  189|   532k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   532k|                                          std::basic_string<CharT>>) {
  191|   532k|            m_storage.emplace(SCN_FWD(range));
  192|   532k|            m_view = string_view_type{*m_storage};
  193|   532k|        }
  194|   532k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   532k|                                          typename detail::basic_scan_buffer<
  196|   532k|                                              value_t>::forward_iterator> &&
  197|   532k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   532k|            auto beg_seg = range.begin().contiguous_segment();
  199|   532k|            auto end_seg = range.end().contiguous_segment();
  200|   532k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 532k, False: 117]
  |  |  ------------------
  ------------------
  201|   532k|                             detail::to_address(end_seg.end()))) {
  202|   532k|                auto& str = m_storage.emplace();
  203|   532k|                str.reserve(range.end().position() - range.begin().position());
  204|   532k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   532k|                m_view = string_view_type{str};
  206|   532k|                return;
  207|   532k|            }
  208|       |
  209|    117|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    117|                                                            end_seg.data());
  211|    117|            m_storage.reset();
  212|    117|        }
  213|   532k|        else {
  214|   532k|            auto& str = m_storage.emplace();
  215|   532k|            if constexpr (ranges::sized_range<Range>) {
  216|   532k|                str.reserve(ranges_polyfill::usize(range));
  217|   532k|            }
  218|   532k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   532k|                      std::back_inserter(str));
  220|   532k|            m_view = string_view_type{str};
  221|   532k|        }
  222|   532k|    }
_ZN3scn2v24impl22make_contiguous_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  234|  1.07M|{
  235|  1.07M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.07M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.07M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.07M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.07M|    }
  240|  1.07M|    else {
  241|  1.07M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.07M|    }
  243|  1.07M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2INSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
   49|  1.07M|    {
   50|  1.07M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
  136|  1.07M|    {
  137|  1.07M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.07M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
  180|  1.07M|    {
  181|  1.07M|        using value_t = ranges::range_value_t<Range>;
  182|  1.07M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.07M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.07M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.07M|            m_storage.reset();
  186|  1.07M|            m_view = string_view_type{ranges::data(range),
  187|  1.07M|                                      ranges_polyfill::usize(range)};
  188|  1.07M|        }
  189|  1.07M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.07M|                                          std::basic_string<CharT>>) {
  191|  1.07M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.07M|            m_view = string_view_type{*m_storage};
  193|  1.07M|        }
  194|  1.07M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.07M|                                          typename detail::basic_scan_buffer<
  196|  1.07M|                                              value_t>::forward_iterator> &&
  197|  1.07M|                           ranges::common_range<Range>) {
  198|  1.07M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.07M|            auto end_seg = range.end().contiguous_segment();
  200|  1.07M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.07M|                             detail::to_address(end_seg.end()))) {
  202|  1.07M|                auto& str = m_storage.emplace();
  203|  1.07M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.07M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.07M|                m_view = string_view_type{str};
  206|  1.07M|                return;
  207|  1.07M|            }
  208|       |
  209|  1.07M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.07M|                                                            end_seg.data());
  211|  1.07M|            m_storage.reset();
  212|  1.07M|        }
  213|  1.07M|        else {
  214|  1.07M|            auto& str = m_storage.emplace();
  215|  1.07M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.07M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.07M|            }
  218|  1.07M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.07M|                      std::back_inserter(str));
  220|  1.07M|            m_view = string_view_type{str};
  221|  1.07M|        }
  222|  1.07M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
  136|   898k|    {
  137|   898k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|   898k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
  180|   898k|    {
  181|   898k|        using value_t = ranges::range_value_t<Range>;
  182|   898k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   898k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   898k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   898k|            m_storage.reset();
  186|   898k|            m_view = string_view_type{ranges::data(range),
  187|   898k|                                      ranges_polyfill::usize(range)};
  188|   898k|        }
  189|   898k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   898k|                                          std::basic_string<CharT>>) {
  191|   898k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|   898k|            m_view = string_view_type{*m_storage};
  193|   898k|        }
  194|   898k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|   898k|                                          typename detail::basic_scan_buffer<
  196|   898k|                                              value_t>::forward_iterator> &&
  197|   898k|                           ranges::common_range<Range>) {
  198|   898k|            auto beg_seg = range.begin().contiguous_segment();
  199|   898k|            auto end_seg = range.end().contiguous_segment();
  200|   898k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|   898k|                             detail::to_address(end_seg.end()))) {
  202|   898k|                auto& str = m_storage.emplace();
  203|   898k|                str.reserve(range.end().position() - range.begin().position());
  204|   898k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   898k|                m_view = string_view_type{str};
  206|   898k|                return;
  207|   898k|            }
  208|       |
  209|   898k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|   898k|                                                            end_seg.data());
  211|   898k|            m_storage.reset();
  212|   898k|        }
  213|   898k|        else {
  214|   898k|            auto& str = m_storage.emplace();
  215|   898k|            if constexpr (ranges::sized_range<Range>) {
  216|   898k|                str.reserve(ranges_polyfill::usize(range));
  217|   898k|            }
  218|   898k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   898k|                      std::back_inserter(str));
  220|   898k|            m_view = string_view_type{str};
  221|   898k|        }
  222|   898k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  8.07M|{
   97|  8.07M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  8.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.9k, False: 8.04M]
  |  |  ------------------
  ------------------
   98|  29.9k|        return eof_error::eof;
   99|  29.9k|    }
  100|  8.04M|    return eof_error::good;
  101|  8.07M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  8.07M|{
   91|  8.07M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  8.07M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  8.07M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  8.07M|    {
   84|  8.07M|        return begin == end;
   85|  8.07M|    }
   86|  8.07M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   299k|{
   97|   299k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39, False: 298k]
  |  |  ------------------
  ------------------
   98|     39|        return eof_error::eof;
   99|     39|    }
  100|   298k|    return eof_error::good;
  101|   299k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   299k|{
   91|   299k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   299k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   299k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   299k|    {
   84|   299k|        return begin == end;
   85|   299k|    }
   86|   299k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  7.02M|{
   97|  7.02M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  7.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.9k, False: 6.98M]
  |  |  ------------------
  ------------------
   98|  31.9k|        return eof_error::eof;
   99|  31.9k|    }
  100|  6.98M|    return eof_error::good;
  101|  7.02M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  7.02M|{
   91|  7.02M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  7.02M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  7.02M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  7.02M|    {
   84|  7.02M|        return begin == end;
   85|  7.02M|    }
   86|  7.02M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   532k|{
   97|   532k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 532k]
  |  |  ------------------
  ------------------
   98|     78|        return eof_error::eof;
   99|     78|    }
  100|   532k|    return eof_error::good;
  101|   532k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   532k|{
   91|   532k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   532k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   532k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   532k|    {
   84|   532k|        return begin == end;
   85|   532k|    }
   86|   532k|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  1.07M|{
  120|  1.07M|    return find_classic_impl(
  121|  1.07M|        source, [](char ch) { return is_ascii_space(ch); },
  122|  1.07M|        [](char32_t cp) { return is_cp_space(cp); });
  123|  1.07M|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  2.40M|{
  128|  2.40M|    return find_classic_impl(
  129|  2.40M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  2.40M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  2.40M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|  1.07M|{
   44|  1.07M|    auto it = source.begin();
   45|       |
   46|  6.28M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 6.02M, False: 268k]
  ------------------
   47|  6.02M|        auto sv =
   48|  6.02M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  6.02M|                .substr(0, 8);
   50|       |
   51|  6.02M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.91M, False: 110k]
  ------------------
   52|  5.91M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.91M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.91M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 775k, False: 5.13M]
  ------------------
   55|   775k|                break;
   56|   775k|            }
   57|  5.13M|            continue;
   58|  5.91M|        }
   59|       |
   60|   405k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 330k, False: 75.2k]
  ------------------
   61|   330k|            auto tmp =
   62|   330k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   330k|            auto res = get_next_code_point(tmp);
   64|   330k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 35.0k, False: 295k]
  ------------------
   65|  35.0k|                return it;
   66|  35.0k|            }
   67|   295k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   295k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   295k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|   295k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   295k|        }
   71|   110k|    }
   72|       |
   73|  1.04M|    return detail::make_string_view_iterator(source, it);
   74|  1.07M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  8.45M|{
   31|  8.45M|    static_assert(sizeof(*source.data()) == 1);
   32|  8.45M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  8.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  8.45M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  8.45M|    return has_byte_greater(word, 127) != 0;
   37|  8.45M|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|  42.5M|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|   330k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  2.40M|{
   44|  2.40M|    auto it = source.begin();
   45|       |
   46|  2.53M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 2.43M, False: 103k]
  ------------------
   47|  2.43M|        auto sv =
   48|  2.43M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  2.43M|                .substr(0, 8);
   50|       |
   51|  2.43M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 2.35M, False: 79.0k]
  ------------------
   52|  2.35M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  2.35M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  2.35M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 2.23M, False: 120k]
  ------------------
   55|  2.23M|                break;
   56|  2.23M|            }
   57|   120k|            continue;
   58|  2.35M|        }
   59|       |
   60|   162k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 154k, False: 8.04k]
  ------------------
   61|   154k|            auto tmp =
   62|   154k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   154k|            auto res = get_next_code_point(tmp);
   64|   154k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 70.9k, False: 83.6k]
  ------------------
   65|  70.9k|                return it;
   66|  70.9k|            }
   67|  83.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  83.6k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  83.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  83.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  83.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  83.6k|        }
   71|  79.0k|    }
   72|       |
   73|  2.33M|    return detail::make_string_view_iterator(source, it);
   74|  2.40M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  4.19M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   154k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.30M|{
  300|  2.30M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.30M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.30M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.30M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  2.30M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.30M|        return ranges::next(ranges::begin(range),
  306|  2.30M|                            ranges::distance(buf.view().begin(), it));
  307|  2.30M|    }
  308|  2.30M|    else {
  309|  2.30M|        auto it = ranges::begin(range);
  310|       |
  311|  2.30M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  2.30M|            auto seg = get_contiguous_beginning(range);
  313|  2.30M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.30M|                seg_it != seg.end()) {
  315|  2.30M|                return ranges_polyfill::batch_next(
  316|  2.30M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.30M|            }
  318|  2.30M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.30M|        }
  320|       |
  321|  2.30M|        return read_while_code_point(
  322|  2.30M|            SCN_FWD(range),
  323|  2.30M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.30M|    }
  325|  2.30M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.75M|{
  459|  2.75M|    auto it = read_code_unit(range);
  460|  2.75M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.91k, False: 2.74M]
  |  |  ------------------
  ------------------
  461|  2.91k|        return unexpected(make_eof_parse_error(it.error()));
  462|  2.91k|    }
  463|       |
  464|  5.09M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.09M, False: 2.04M]
  ------------------
  465|  5.09M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 709k, False: 4.38M]
  ------------------
  466|   709k|            return *it;
  467|   709k|        }
  468|  5.09M|    }
  469|       |
  470|  2.04M|    return unexpected(parse_error::error);
  471|  2.74M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.13M|{
  418|  6.13M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.13M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.13M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.13M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 50.1k, False: 6.08M]
  ------------------
  423|  50.1k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  50.1k|        }
  425|  6.08M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 5.88M, False: 197k]
  ------------------
  426|  5.88M|            return unexpected(parse_error::error);
  427|  5.88M|        }
  428|   197k|        return ranges::next(ranges::begin(range), str.size());
  429|  6.08M|    }
  430|  6.13M|    else {
  431|  6.13M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.13M|            if (ch < 'A' || ch > 'Z') {
  433|  6.13M|                return ch;
  434|  6.13M|            }
  435|  6.13M|            return static_cast<char_type>(ch +
  436|  6.13M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.13M|        };
  438|       |
  439|  6.13M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  6.13M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.13M|        if (SCN_UNLIKELY(!std::equal(
  443|  6.13M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.13M|                    return ascii_tolower(a) ==
  445|  6.13M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.13M|                }))) {
  447|  6.13M|            return unexpected(parse_error::error);
  448|  6.13M|        }
  449|       |
  450|  6.13M|        return it;
  451|  6.13M|    }
  452|  6.13M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  6.12M|{
  407|  6.12M|    unsigned char running_diff{0};
  408|  23.0M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 16.8M, False: 6.12M]
  ------------------
  409|  16.8M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  16.8M|    }
  411|  6.12M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 179k, False: 5.94M]
  |  Branch (411:33): [True: 36.6k, False: 5.90M]
  ------------------
  412|  6.12M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  41.3k|{
  418|  41.3k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  41.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  41.3k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  41.3k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 536, False: 40.8k]
  ------------------
  423|    536|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|    536|        }
  425|  40.8k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 22.2k, False: 18.5k]
  ------------------
  426|  22.2k|            return unexpected(parse_error::error);
  427|  22.2k|        }
  428|  18.5k|        return ranges::next(ranges::begin(range), str.size());
  429|  40.8k|    }
  430|  41.3k|    else {
  431|  41.3k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  41.3k|            if (ch < 'A' || ch > 'Z') {
  433|  41.3k|                return ch;
  434|  41.3k|            }
  435|  41.3k|            return static_cast<char_type>(ch +
  436|  41.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  41.3k|        };
  438|       |
  439|  41.3k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  41.3k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  41.3k|        if (SCN_UNLIKELY(!std::equal(
  443|  41.3k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  41.3k|                    return ascii_tolower(a) ==
  445|  41.3k|                           static_cast<detail::char_t<Range>>(b);
  446|  41.3k|                }))) {
  447|  41.3k|            return unexpected(parse_error::error);
  448|  41.3k|        }
  449|       |
  450|  41.3k|        return it;
  451|  41.3k|    }
  452|  41.3k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   680k|{
  332|   680k|    auto it = read_code_unit(range);
  333|   680k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   680k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.47k, False: 677k]
  |  |  ------------------
  ------------------
  334|  3.47k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.47k|    }
  336|       |
  337|   677k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 580k, False: 96.4k]
  |  |  ------------------
  ------------------
  338|   677k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   580k|        return unexpected(parse_error::error);
  340|   580k|    }
  341|       |
  342|  96.4k|    return *it;
  343|   677k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  5.51k|{
  139|  5.51k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  5.51k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  5.51k|{
  131|  5.51k|    return ranges::find_if(range, pred);
  132|  5.51k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.23M|{
  159|  1.23M|    auto it = read_while_code_unit(range, pred);
  160|  1.23M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 526k, False: 713k]
  ------------------
  161|   526k|        return unexpected(parse_error::error);
  162|   526k|    }
  163|   713k|    return it;
  164|  1.23M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.23M|{
  139|  1.23M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.23M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.23M|{
  131|  1.23M|    return ranges::find_if(range, pred);
  132|  1.23M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|  99.6k|{
  300|  99.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  99.6k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  99.6k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  99.6k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  99.6k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  99.6k|        return ranges::next(ranges::begin(range),
  306|  99.6k|                            ranges::distance(buf.view().begin(), it));
  307|  99.6k|    }
  308|  99.6k|    else {
  309|  99.6k|        auto it = ranges::begin(range);
  310|       |
  311|  99.6k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  99.6k|            auto seg = get_contiguous_beginning(range);
  313|  99.6k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  99.6k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 0, False: 99.6k]
  ------------------
  315|      0|                return ranges_polyfill::batch_next(
  316|      0|                    it, ranges::distance(seg.begin(), seg_it));
  317|      0|            }
  318|  99.6k|            ranges_polyfill::batch_next(it, seg.size());
  319|  99.6k|        }
  320|       |
  321|  99.6k|        return read_while_code_point(
  322|  99.6k|            SCN_FWD(range),
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  99.6k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  99.6k|    }
  325|  99.6k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|  99.6k|{
  264|  99.6k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  99.6k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|  99.6k|{
  231|  99.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  99.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  99.6k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|  99.6k|    }
  235|  99.6k|    else {
  236|  99.6k|        auto it = ranges::begin(range);
  237|  99.6k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  99.6k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  99.6k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 99.6k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   199k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 199k, False: 39]
  ------------------
  246|   199k|            const auto [iter, value] =
  247|   199k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   199k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   199k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 99.6k, False: 99.6k]
  ------------------
  250|  99.6k|                return it;
  251|  99.6k|            }
  252|  99.6k|            it = iter;
  253|  99.6k|        }
  254|       |
  255|     39|        return it;
  256|  99.6k|    }
  257|  99.6k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  99.6k|{
  178|  99.6k|    static_assert(ranges::contiguous_range<Range> &&
  179|  99.6k|                  ranges::sized_range<Range>);
  180|       |
  181|  99.6k|    std::array<char32_t, 16> cp_buf{};
  182|  99.6k|    std::array<uint8_t, 16> idx_buf{};
  183|  99.6k|    auto it = ranges::begin(range);
  184|   199k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 99.6k, False: 99.6k]
  ------------------
  185|  99.6k|        auto chunk_begin = it;
  186|  99.6k|        size_t code_point_count = 0;
  187|  99.6k|        uint8_t code_unit_idx = 0;
  188|   199k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 199k, False: 0]
  |  Branch (188:52): [True: 99.6k, False: 99.6k]
  ------------------
  189|  99.6k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 99.6k, False: 0]
  ------------------
  190|  99.6k|                idx_buf[code_point_count] = code_unit_idx;
  191|  99.6k|                ++code_point_count;
  192|  99.6k|            }
  193|  99.6k|            ++it;
  194|  99.6k|            ++code_unit_idx;
  195|  99.6k|        }
  196|       |
  197|  99.6k|        auto input = detail::make_string_view_from_pointers(
  198|  99.6k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  99.6k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  99.6k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  99.6k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   199k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 99.6k, False: 99.6k]
  ------------------
  217|  99.6k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 99.6k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|  99.6k|        }
  221|  99.6k|    }
  222|       |
  223|  99.6k|    return it;
  224|  99.6k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   199k|{
   42|   199k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   199k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   199k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   199k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 199k, False: 0]
  ------------------
   59|   199k|        ++it;
   60|   199k|        return {it, make_contiguous_buffer(
   61|   199k|                        ranges::subrange{ranges::begin(range), it})};
   62|   199k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   199k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   299k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|  99.6k|{
  459|  99.6k|    auto it = read_code_unit(range);
  460|  99.6k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   199k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 199k, False: 99.6k]
  ------------------
  465|   199k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 199k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   199k|    }
  469|       |
  470|  99.6k|    return unexpected(parse_error::error);
  471|  99.6k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   252k|{
  418|   252k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   252k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   252k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   252k|        if (ranges::size(range) < str.size()) {
  423|   252k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   252k|        }
  425|   252k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   252k|            return unexpected(parse_error::error);
  427|   252k|        }
  428|   252k|        return ranges::next(ranges::begin(range), str.size());
  429|   252k|    }
  430|   252k|    else {
  431|   252k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   252k|            if (ch < 'A' || ch > 'Z') {
  433|   252k|                return ch;
  434|   252k|            }
  435|   252k|            return static_cast<char_type>(ch +
  436|   252k|                                          static_cast<char_type>('a' - 'A'));
  437|   252k|        };
  438|       |
  439|   252k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   252k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   252k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 252k, False: 0]
  |  |  ------------------
  ------------------
  443|   252k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   252k|                    return ascii_tolower(a) ==
  445|   252k|                           static_cast<detail::char_t<Range>>(b);
  446|   252k|                }))) {
  447|   252k|            return unexpected(parse_error::error);
  448|   252k|        }
  449|       |
  450|      0|        return it;
  451|   252k|    }
  452|   252k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   252k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   252k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 252k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   252k|                return ch;
  434|   252k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   252k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|  99.6k|{
  139|  99.6k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  99.6k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|  99.6k|{
  131|  99.6k|    return ranges::find_if(range, pred);
  132|  99.6k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|  99.6k|{
  159|  99.6k|    auto it = read_while_code_unit(range, pred);
  160|  99.6k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 99.6k, False: 0]
  ------------------
  161|  99.6k|        return unexpected(parse_error::error);
  162|  99.6k|    }
  163|      0|    return it;
  164|  99.6k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.01M|{
  300|  2.01M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.01M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.01M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.01M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  2.01M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.01M|        return ranges::next(ranges::begin(range),
  306|  2.01M|                            ranges::distance(buf.view().begin(), it));
  307|  2.01M|    }
  308|  2.01M|    else {
  309|  2.01M|        auto it = ranges::begin(range);
  310|       |
  311|  2.01M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  2.01M|            auto seg = get_contiguous_beginning(range);
  313|  2.01M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.01M|                seg_it != seg.end()) {
  315|  2.01M|                return ranges_polyfill::batch_next(
  316|  2.01M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.01M|            }
  318|  2.01M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.01M|        }
  320|       |
  321|  2.01M|        return read_while_code_point(
  322|  2.01M|            SCN_FWD(range),
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.01M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.01M|    }
  325|  2.01M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  2.01M|{
  264|  2.01M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.01M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  2.01M|{
  231|  2.01M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.01M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.01M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.01M|    }
  235|  2.01M|    else {
  236|  2.01M|        auto it = ranges::begin(range);
  237|  2.01M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.01M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.01M|            seg_it != seg.end()) {
  241|  2.01M|            return ranges_polyfill::batch_next(
  242|  2.01M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.01M|        }
  244|       |
  245|  2.01M|        while (it != ranges::end(range)) {
  246|  2.01M|            const auto [iter, value] =
  247|  2.01M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.01M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.01M|            if (pred(cp)) {
  250|  2.01M|                return it;
  251|  2.01M|            }
  252|  2.01M|            it = iter;
  253|  2.01M|        }
  254|       |
  255|  2.01M|        return it;
  256|  2.01M|    }
  257|  2.01M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  2.01M|{
  178|  2.01M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.01M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.01M|    std::array<char32_t, 16> cp_buf{};
  182|  2.01M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.01M|    auto it = ranges::begin(range);
  184|  2.03M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.02M, False: 5.68k]
  ------------------
  185|  2.02M|        auto chunk_begin = it;
  186|  2.02M|        size_t code_point_count = 0;
  187|  2.02M|        uint8_t code_unit_idx = 0;
  188|  32.8M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 31.0M, False: 1.85M]
  |  Branch (188:52): [True: 30.8M, False: 165k]
  ------------------
  189|  30.8M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 30.8M, False: 0]
  ------------------
  190|  30.8M|                idx_buf[code_point_count] = code_unit_idx;
  191|  30.8M|                ++code_point_count;
  192|  30.8M|            }
  193|  30.8M|            ++it;
  194|  30.8M|            ++code_unit_idx;
  195|  30.8M|        }
  196|       |
  197|  2.02M|        auto input = detail::make_string_view_from_pointers(
  198|  2.02M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.02M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.02M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.02M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.02M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  3.64M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 3.63M, False: 10.8k]
  ------------------
  217|  3.63M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.01M, False: 1.61M]
  ------------------
  218|  2.01M|                return chunk_begin + idx_buf[i];
  219|  2.01M|            }
  220|  3.63M|        }
  221|  2.02M|    }
  222|       |
  223|  5.68k|    return it;
  224|  2.01M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  3.63M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.38M|{
  459|  2.38M|    auto it = read_code_unit(range);
  460|  2.38M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.00k, False: 2.38M]
  |  |  ------------------
  ------------------
  461|  3.00k|        return unexpected(make_eof_parse_error(it.error()));
  462|  3.00k|    }
  463|       |
  464|  4.44M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.44M, False: 1.78M]
  ------------------
  465|  4.44M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 599k, False: 3.84M]
  ------------------
  466|   599k|            return *it;
  467|   599k|        }
  468|  4.44M|    }
  469|       |
  470|  1.78M|    return unexpected(parse_error::error);
  471|  2.38M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.34M|{
  418|  5.34M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.34M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.34M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.34M|        if (ranges::size(range) < str.size()) {
  423|  5.34M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  5.34M|        }
  425|  5.34M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  5.34M|            return unexpected(parse_error::error);
  427|  5.34M|        }
  428|  5.34M|        return ranges::next(ranges::begin(range), str.size());
  429|  5.34M|    }
  430|  5.34M|    else {
  431|  5.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.34M|            if (ch < 'A' || ch > 'Z') {
  433|  5.34M|                return ch;
  434|  5.34M|            }
  435|  5.34M|            return static_cast<char_type>(ch +
  436|  5.34M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.34M|        };
  438|       |
  439|  5.34M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  5.34M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 87.4k, False: 5.25M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  87.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  87.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  87.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  87.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  87.4k|    }                                                  \
  |  |  |  |   70|  5.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  5.25M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.25M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  5.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.07M, False: 178k]
  |  |  ------------------
  ------------------
  443|  5.25M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.25M|                    return ascii_tolower(a) ==
  445|  5.25M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.25M|                }))) {
  447|  5.07M|            return unexpected(parse_error::error);
  448|  5.07M|        }
  449|       |
  450|   178k|        return it;
  451|  5.25M|    }
  452|  5.34M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  6.10M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.10M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 5.30M, False: 804k]
  |  Branch (432:29): [True: 686k, False: 117k]
  ------------------
  433|  5.99M|                return ch;
  434|  5.99M|            }
  435|   117k|            return static_cast<char_type>(ch +
  436|   117k|                                          static_cast<char_type>('a' - 'A'));
  437|  6.10M|        };
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  34.3k|{
  418|  34.3k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  34.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  34.3k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  34.3k|        if (ranges::size(range) < str.size()) {
  423|  34.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  34.3k|        }
  425|  34.3k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  34.3k|            return unexpected(parse_error::error);
  427|  34.3k|        }
  428|  34.3k|        return ranges::next(ranges::begin(range), str.size());
  429|  34.3k|    }
  430|  34.3k|    else {
  431|  34.3k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  34.3k|            if (ch < 'A' || ch > 'Z') {
  433|  34.3k|                return ch;
  434|  34.3k|            }
  435|  34.3k|            return static_cast<char_type>(ch +
  436|  34.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  34.3k|        };
  438|       |
  439|  34.3k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  34.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 536, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    536|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    536|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    536|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    536|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    536|    }                                                  \
  |  |  |  |   70|  34.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  33.7k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  33.7k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.5k, False: 17.2k]
  |  |  ------------------
  ------------------
  443|  33.7k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  33.7k|                    return ascii_tolower(a) ==
  445|  33.7k|                           static_cast<detail::char_t<Range>>(b);
  446|  33.7k|                }))) {
  447|  16.5k|            return unexpected(parse_error::error);
  448|  16.5k|        }
  449|       |
  450|  17.2k|        return it;
  451|  33.7k|    }
  452|  34.3k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  431|   104k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   104k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 15.7k, False: 88.6k]
  |  Branch (432:29): [True: 88.3k, False: 389]
  ------------------
  433|   104k|                return ch;
  434|   104k|            }
  435|    389|            return static_cast<char_type>(ch +
  436|    389|                                          static_cast<char_type>('a' - 'A'));
  437|   104k|        };
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   573k|{
  332|   573k|    auto it = read_code_unit(range);
  333|   573k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   573k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.59k, False: 569k]
  |  |  ------------------
  ------------------
  334|  3.59k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.59k|    }
  336|       |
  337|   569k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 496k, False: 72.7k]
  |  |  ------------------
  ------------------
  338|   569k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   496k|        return unexpected(parse_error::error);
  340|   496k|    }
  341|       |
  342|  72.7k|    return *it;
  343|   569k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  5.45k|{
  139|  5.45k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  5.45k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  5.45k|{
  131|  5.45k|    return ranges::find_if(range, pred);
  132|  5.45k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.06M|{
  159|  1.06M|    auto it = read_while_code_unit(range, pred);
  160|  1.06M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 483k, False: 581k]
  ------------------
  161|   483k|        return unexpected(parse_error::error);
  162|   483k|    }
  163|   581k|    return it;
  164|  1.06M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.06M|{
  139|  1.06M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.06M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.06M|{
  131|  1.06M|    return ranges::find_if(range, pred);
  132|  1.06M|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|   898k|{
  231|   898k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   898k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   898k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|   898k|    }
  235|   898k|    else {
  236|   898k|        auto it = ranges::begin(range);
  237|   898k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   898k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   898k|            seg_it != seg.end()) {
  241|   898k|            return ranges_polyfill::batch_next(
  242|   898k|                it, ranges::distance(seg.begin(), seg_it));
  243|   898k|        }
  244|       |
  245|   898k|        while (it != ranges::end(range)) {
  246|   898k|            const auto [iter, value] =
  247|   898k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   898k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   898k|            if (pred(cp)) {
  250|   898k|                return it;
  251|   898k|            }
  252|   898k|            it = iter;
  253|   898k|        }
  254|       |
  255|   898k|        return it;
  256|   898k|    }
  257|   898k|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|   898k|{
  178|   898k|    static_assert(ranges::contiguous_range<Range> &&
  179|   898k|                  ranges::sized_range<Range>);
  180|       |
  181|   898k|    std::array<char32_t, 16> cp_buf{};
  182|   898k|    std::array<uint8_t, 16> idx_buf{};
  183|   898k|    auto it = ranges::begin(range);
  184|  2.97M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.75M, False: 220k]
  ------------------
  185|  2.75M|        auto chunk_begin = it;
  186|  2.75M|        size_t code_point_count = 0;
  187|  2.75M|        uint8_t code_unit_idx = 0;
  188|  44.1M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 41.6M, False: 2.50M]
  |  Branch (188:52): [True: 41.4M, False: 248k]
  ------------------
  189|  41.4M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 41.4M, False: 0]
  ------------------
  190|  41.4M|                idx_buf[code_point_count] = code_unit_idx;
  191|  41.4M|                ++code_point_count;
  192|  41.4M|            }
  193|  41.4M|            ++it;
  194|  41.4M|            ++code_unit_idx;
  195|  41.4M|        }
  196|       |
  197|  2.75M|        auto input = detail::make_string_view_from_pointers(
  198|  2.75M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.75M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.75M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.75M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.75M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  36.6M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 34.5M, False: 2.07M]
  ------------------
  217|  34.5M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 678k, False: 33.8M]
  ------------------
  218|   678k|                return chunk_begin + idx_buf[i];
  219|   678k|            }
  220|  34.5M|        }
  221|  2.75M|    }
  222|       |
  223|   220k|    return it;
  224|   898k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   177k|{
  178|   177k|    static_assert(ranges::contiguous_range<Range> &&
  179|   177k|                  ranges::sized_range<Range>);
  180|       |
  181|   177k|    std::array<char32_t, 16> cp_buf{};
  182|   177k|    std::array<uint8_t, 16> idx_buf{};
  183|   177k|    auto it = ranges::begin(range);
  184|   355k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 177k, False: 177k]
  ------------------
  185|   177k|        auto chunk_begin = it;
  186|   177k|        size_t code_point_count = 0;
  187|   177k|        uint8_t code_unit_idx = 0;
  188|   355k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 355k, False: 0]
  |  Branch (188:52): [True: 177k, False: 177k]
  ------------------
  189|   177k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 177k, False: 0]
  ------------------
  190|   177k|                idx_buf[code_point_count] = code_unit_idx;
  191|   177k|                ++code_point_count;
  192|   177k|            }
  193|   177k|            ++it;
  194|   177k|            ++code_unit_idx;
  195|   177k|        }
  196|       |
  197|   177k|        auto input = detail::make_string_view_from_pointers(
  198|   177k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   177k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   177k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   177k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   355k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 177k, False: 177k]
  ------------------
  217|   177k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 177k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   177k|        }
  221|   177k|    }
  222|       |
  223|   177k|    return it;
  224|   177k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   177k|{
  300|   177k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   177k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   177k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   177k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   177k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   177k|        return ranges::next(ranges::begin(range),
  306|   177k|                            ranges::distance(buf.view().begin(), it));
  307|   177k|    }
  308|   177k|    else {
  309|   177k|        auto it = ranges::begin(range);
  310|       |
  311|   177k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   177k|            auto seg = get_contiguous_beginning(range);
  313|   177k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   177k|                seg_it != seg.end()) {
  315|   177k|                return ranges_polyfill::batch_next(
  316|   177k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   177k|            }
  318|   177k|            ranges_polyfill::batch_next(it, seg.size());
  319|   177k|        }
  320|       |
  321|   177k|        return read_while_code_point(
  322|   177k|            SCN_FWD(range),
  ------------------
  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   177k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   177k|    }
  325|   177k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   177k|{
  264|   177k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   177k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   177k|{
  231|   177k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   177k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   177k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   177k|    }
  235|   177k|    else {
  236|   177k|        auto it = ranges::begin(range);
  237|   177k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   177k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   177k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 177k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   533k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 532k, False: 78]
  ------------------
  246|   532k|            const auto [iter, value] =
  247|   532k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   532k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   532k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 177k, False: 355k]
  ------------------
  250|   177k|                return it;
  251|   177k|            }
  252|   355k|            it = iter;
  253|   355k|        }
  254|       |
  255|     78|        return it;
  256|   177k|    }
  257|   177k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   532k|{
   42|   532k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   532k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   532k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   532k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 532k, False: 0]
  ------------------
   59|   532k|        ++it;
   60|   532k|        return {it, make_contiguous_buffer(
   61|   532k|                        ranges::subrange{ranges::begin(range), it})};
   62|   532k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   532k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   710k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   177k|{
  459|   177k|    auto it = read_code_unit(range);
  460|   177k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   355k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 355k, False: 177k]
  ------------------
  465|   355k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 355k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   355k|    }
  469|       |
  470|   177k|    return unexpected(parse_error::error);
  471|   177k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   450k|{
  418|   450k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   450k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   450k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   450k|        if (ranges::size(range) < str.size()) {
  423|   450k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   450k|        }
  425|   450k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   450k|            return unexpected(parse_error::error);
  427|   450k|        }
  428|   450k|        return ranges::next(ranges::begin(range), str.size());
  429|   450k|    }
  430|   450k|    else {
  431|   450k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   450k|            if (ch < 'A' || ch > 'Z') {
  433|   450k|                return ch;
  434|   450k|            }
  435|   450k|            return static_cast<char_type>(ch +
  436|   450k|                                          static_cast<char_type>('a' - 'A'));
  437|   450k|        };
  438|       |
  439|   450k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   450k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   450k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   450k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 450k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|   450k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   450k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   450k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 450k, False: 0]
  |  |  ------------------
  ------------------
  443|   450k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   450k|                    return ascii_tolower(a) ==
  445|   450k|                           static_cast<detail::char_t<Range>>(b);
  446|   450k|                }))) {
  447|   450k|            return unexpected(parse_error::error);
  448|   450k|        }
  449|       |
  450|      0|        return it;
  451|   450k|    }
  452|   450k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   450k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   450k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 450k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   450k|                return ch;
  434|   450k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   450k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   177k|{
  139|   177k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   177k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   177k|{
  131|   177k|    return ranges::find_if(range, pred);
  132|   177k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   177k|{
  159|   177k|    auto it = read_while_code_unit(range, pred);
  160|   177k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 177k, False: 0]
  ------------------
  161|   177k|        return unexpected(parse_error::error);
  162|   177k|    }
  163|      0|    return it;
  164|   177k|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  1.07M|{
  270|  1.07M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  1.07M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  1.07M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  1.07M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  1.07M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  1.07M|        return ranges::next(ranges::begin(range),
  276|  1.07M|                            ranges::distance(buf.view().begin(), it));
  277|  1.07M|    }
  278|  1.07M|    else {
  279|  1.07M|        auto it = ranges::begin(range);
  280|       |
  281|  1.07M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  1.07M|            auto seg = get_contiguous_beginning(range);
  283|  1.07M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  1.07M|                seg_it != seg.end()) {
  285|  1.07M|                return ranges_polyfill::batch_next(
  286|  1.07M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  1.07M|            }
  288|  1.07M|            ranges_polyfill::batch_next(it, seg.size());
  289|  1.07M|        }
  290|       |
  291|  1.07M|        return read_until_code_point(
  292|  1.07M|            ranges::subrange{it, ranges::end(range)},
  293|  1.07M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  1.07M|    }
  295|  1.07M|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|   898k|{
  270|   898k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|   898k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|   898k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|   898k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|   898k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|   898k|        return ranges::next(ranges::begin(range),
  276|   898k|                            ranges::distance(buf.view().begin(), it));
  277|   898k|    }
  278|   898k|    else {
  279|   898k|        auto it = ranges::begin(range);
  280|       |
  281|   898k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|   898k|            auto seg = get_contiguous_beginning(range);
  283|   898k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|   898k|                seg_it != seg.end()) {
  285|   898k|                return ranges_polyfill::batch_next(
  286|   898k|                    it, ranges::distance(seg.begin(), seg_it));
  287|   898k|            }
  288|   898k|            ranges_polyfill::batch_next(it, seg.size());
  289|   898k|        }
  290|       |
  291|   898k|        return read_until_code_point(
  292|   898k|            ranges::subrange{it, ranges::end(range)},
  293|   898k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|   898k|    }
  295|   898k|}
_ZZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_ENKUlDiE_clEDi:
  293|  34.5M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  3.43M|{
   36|  3.43M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.38k, False: 3.42M]
  |  |  ------------------
  ------------------
   37|  6.38k|        return unexpected(e);
   38|  6.38k|    }
   39|       |
   40|  3.42M|    return ranges::next(ranges::begin(range));
   41|  3.43M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.56M|{
   30|  1.56M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.56M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  99.6k|{
   36|  99.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  99.6k|    return ranges::next(ranges::begin(range));
   41|  99.6k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   252k|{
   48|   252k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   252k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   252k|        const auto sz = ranges::ssize(range);
   52|   252k|        if (sz < count) {
   53|   252k|            return unexpected(eof_error::eof);
   54|   252k|        }
   55|       |
   56|   252k|        return ranges::next(ranges::begin(range), count);
   57|   252k|    }
   58|   252k|    else {
   59|   252k|        auto it = ranges::begin(range);
   60|   252k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 153k, False: 99.7k]
  ------------------
   61|   153k|            return ranges_polyfill::batch_next(it, count);
   62|   153k|        }
   63|       |
   64|   398k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 299k, False: 99.5k]
  ------------------
   65|   299k|             ++i, (void)++it) {
   66|   299k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 177, False: 298k]
  ------------------
   67|    177|                return unexpected(eof_error::eof);
   68|    177|            }
   69|   299k|        }
   70|       |
   71|  99.5k|        return it;
   72|  99.7k|    }
   73|   252k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  2.96M|{
   36|  2.96M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.60k, False: 2.95M]
  |  |  ------------------
  ------------------
   37|  6.60k|        return unexpected(e);
   38|  6.60k|    }
   39|       |
   40|  2.95M|    return ranges::next(ranges::begin(range));
   41|  2.96M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  5.37M|{
   48|  5.37M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  5.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  5.37M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  5.37M|        const auto sz = ranges::ssize(range);
   52|  5.37M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 88.0k, False: 5.28M]
  ------------------
   53|  88.0k|            return unexpected(eof_error::eof);
   54|  88.0k|        }
   55|       |
   56|  5.28M|        return ranges::next(ranges::begin(range), count);
   57|  5.37M|    }
   58|  5.37M|    else {
   59|  5.37M|        auto it = ranges::begin(range);
   60|  5.37M|        if (guaranteed_minimum_size(range) >= count) {
   61|  5.37M|            return ranges_polyfill::batch_next(it, count);
   62|  5.37M|        }
   63|       |
   64|  5.37M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  5.37M|             ++i, (void)++it) {
   66|  5.37M|            if (it == ranges::end(range)) {
   67|  5.37M|                return unexpected(eof_error::eof);
   68|  5.37M|            }
   69|  5.37M|        }
   70|       |
   71|  5.37M|        return it;
   72|  5.37M|    }
   73|  5.37M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.35M|{
   30|  1.35M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.35M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   177k|{
   36|   177k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   177k|    return ranges::next(ranges::begin(range));
   41|   177k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   450k|{
   48|   450k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   450k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   450k|        const auto sz = ranges::ssize(range);
   52|   450k|        if (sz < count) {
   53|   450k|            return unexpected(eof_error::eof);
   54|   450k|        }
   55|       |
   56|   450k|        return ranges::next(ranges::begin(range), count);
   57|   450k|    }
   58|   450k|    else {
   59|   450k|        auto it = ranges::begin(range);
   60|   450k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 273k, False: 177k]
  ------------------
   61|   273k|            return ranges_polyfill::batch_next(it, count);
   62|   273k|        }
   63|       |
   64|   710k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 533k, False: 177k]
  ------------------
   65|   533k|             ++i, (void)++it) {
   66|   533k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 177, False: 532k]
  ------------------
   67|    177|                return unexpected(eof_error::eof);
   68|    177|            }
   69|   533k|        }
   70|       |
   71|   177k|        return it;
   72|   177k|    }
   73|   450k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  2.09M|{
   33|  2.09M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  2.09M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   904k|{
   39|   904k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   904k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 452k, False: 452k]
  ------------------
   41|   904k|                    : std::locale{};
   42|   904k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   477k|    {
  112|   477k|        auto stdloc = loc.get<std::locale>();
  113|   477k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   477k|        grouping = numpunct.grouping();
  115|   477k|        thousands_sep =
  116|   477k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 477k]
  ------------------
  117|   477k|        decimal_point = numpunct.decimal_point();
  118|   477k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   477k|{
   49|   477k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 477k, False: 0]
  ------------------
   50|   477k|        return std::use_facet<Facet>(stdloc);
   51|   477k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   477k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  2.40M|    localized_number_formatting_options() = default;
_ZN3scn2v24impl25set_clocale_classic_guardC2Ei:
   88|  1.97M|    {
   89|  1.97M|        std::setlocale(cat, "C");
   90|  1.97M|    }
_ZN3scn2v24impl16clocale_restorerC2Ei:
   59|  1.97M|    {
   60|  1.97M|        const auto loc = std::setlocale(cat, nullptr);
   61|  1.97M|        std::strcpy(m_locbuf, loc);
   62|  1.97M|    }
_ZN3scn2v24impl16clocale_restorerD2Ev:
   64|  1.97M|    {
   65|       |        // Restore locale to what it was before
   66|  1.97M|        std::setlocale(m_category, m_locbuf);
   67|  1.97M|    }
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   427k|    {
  112|   427k|        auto stdloc = loc.get<std::locale>();
  113|   427k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   427k|        grouping = numpunct.grouping();
  115|   427k|        thousands_sep =
  116|   427k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 427k]
  ------------------
  117|   427k|        decimal_point = numpunct.decimal_point();
  118|   427k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   427k|{
   49|   427k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 427k, False: 0]
  ------------------
   50|   427k|        return std::use_facet<Facet>(stdloc);
   51|   427k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   427k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  2.19M|    localized_number_formatting_options() = default;

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.30M|{
   46|  2.30M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.30M, False: 0]
  ------------------
   47|  2.30M|        auto it = read_while_classic_space(range);
   48|  2.30M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.30M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.24k, False: 2.30M]
  |  |  ------------------
  ------------------
   50|  4.24k|            return unexpected(e);
   51|  4.24k|        }
   52|       |
   53|  2.30M|        return it;
   54|  2.30M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.30M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  2.42M|    {
  126|  2.42M|        return true;
  127|  2.42M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|  99.6k|{
   46|  99.6k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 99.6k, False: 0]
  ------------------
   47|  99.6k|        auto it = read_while_classic_space(range);
   48|  99.6k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  99.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39, False: 99.6k]
  |  |  ------------------
  ------------------
   50|     39|            return unexpected(e);
   51|     39|        }
   52|       |
   53|  99.6k|        return it;
   54|  99.6k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  99.6k|}
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  3.27M|    {
   35|  3.27M|        return m_msg == nullptr;
   36|  3.27M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  1.70M|    {
  131|  1.70M|        reader_error_handler eh{};
  132|  1.70M|        get_derived().check_specs_impl(specs, eh);
  133|  1.70M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.70M|        return {};
  137|  1.70M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  1.70M|    {
  142|  1.70M|        return static_cast<Derived&>(*this);
  143|  1.70M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.01M|{
   46|  2.01M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.01M, False: 0]
  ------------------
   47|  2.01M|        auto it = read_while_classic_space(range);
   48|  2.01M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.01M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.68k, False: 2.01M]
  |  |  ------------------
  ------------------
   50|  5.68k|            return unexpected(e);
   51|  5.68k|        }
   52|       |
   53|  2.01M|        return it;
   54|  2.01M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.01M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  2.21M|    {
  126|  2.21M|        return true;
  127|  2.21M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  1.56M|    {
  131|  1.56M|        reader_error_handler eh{};
  132|  1.56M|        get_derived().check_specs_impl(specs, eh);
  133|  1.56M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.56M|        return {};
  137|  1.56M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  1.56M|    {
  142|  1.56M|        return static_cast<Derived&>(*this);
  143|  1.56M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   177k|{
   46|   177k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 177k, False: 0]
  ------------------
   47|   177k|        auto it = read_while_classic_space(range);
   48|   177k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   177k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 177k]
  |  |  ------------------
  ------------------
   50|     78|            return unexpected(e);
   51|     78|        }
   52|       |
   53|   177k|        return it;
   54|   177k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   177k|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   691k|{
  640|   691k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   691k|                                  m_nan_payload_buffer, value);
  642|   691k|    value = this->setsign(value);
  643|   691k|    return n;
  644|   691k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   595k|{
  640|   595k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   595k|                                  m_nan_payload_buffer, value);
  642|   595k|    value = this->setsign(value);
  643|   595k|    return n;
  644|   595k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   779k|{
  640|   779k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   779k|                                  m_nan_payload_buffer, value);
  642|   779k|    value = this->setsign(value);
  643|   779k|    return n;
  644|   779k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   666k|{
  640|   666k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   666k|                                  m_nan_payload_buffer, value);
  642|   666k|    value = this->setsign(value);
  643|   666k|    return n;
  644|   666k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   794k|{
  640|   794k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   794k|                                  m_nan_payload_buffer, value);
  642|   794k|    value = this->setsign(value);
  643|   794k|    return n;
  644|   794k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   677k|{
  640|   677k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   677k|                                  m_nan_payload_buffer, value);
  642|   677k|    value = this->setsign(value);
  643|   677k|    return n;
  644|   677k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   691k|{
  557|   691k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.84k, False: 684k]
  ------------------
  558|  6.84k|        value = std::numeric_limits<T>::infinity();
  559|  6.84k|        return 3;
  560|  6.84k|    }
  561|   684k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.86k, False: 678k]
  ------------------
  562|  5.86k|        value = std::numeric_limits<T>::infinity();
  563|  5.86k|        return 8;
  564|  5.86k|    }
  565|   678k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 29.9k, False: 648k]
  ------------------
  566|  29.9k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  29.9k|        return 3;
  568|  29.9k|    }
  569|   648k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.23k, False: 647k]
  ------------------
  570|  1.23k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.23k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.23k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.23k|    }
  601|       |
  602|   647k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   647k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   647k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   647k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 144k, False: 502k]
  ------------------
  604|   144k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.21k, False: 142k]
  |  |  ------------------
  ------------------
  605|  2.21k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.21k|                                         "Invalid floating-point digit");
  607|  2.21k|        }
  608|   144k|    }
  609|   645k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.98k, False: 639k]
  |  |  ------------------
  ------------------
  610|  5.98k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  5.98k|                                     "Invalid floating-point digit");
  612|  5.98k|    }
  613|       |
  614|   639k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   639k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   639k|            double tmp{};
  619|   639k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   639k|            value = tmp;
  621|   639k|            return ret;
  622|   639k|        }
  623|   639k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   639k|            return fast_float_fallback(data, value);
  627|   639k|        }
  628|   639k|    }
  629|   639k|    else {
  630|       |        // Default to fast_float
  631|   639k|        return fast_float_impl<CharT, T>{data}(value);
  632|   639k|    }
  633|   639k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  496|   639k|    {
  497|   639k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  130|  2.44M|    {
  131|  2.44M|        return {kind, options};
  132|  2.44M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  500|   639k|    {
  501|   639k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 142k, False: 497k]
  ------------------
  502|   639k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 15.4k, False: 481k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   157k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   157k|                                              value);
  506|   157k|        }
  507|       |
  508|   481k|        const auto flags = get_flags();
  509|   481k|        const auto view = get_view();
  510|   481k|        const auto result = fast_float::from_chars(
  511|   481k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   481k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   481k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.76k, False: 476k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  4.76k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  4.76k|                                              value);
  521|  4.76k|        }
  522|       |
  523|   476k|        return result.ptr - view.data();
  524|   481k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   162k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   162k|    {
  467|   162k|#if !SCN_DISABLE_STRTOD
  468|   162k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   162k|    }
  475|   162k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  312|   162k|    {
  313|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  144|   299k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEclERf:
  316|   162k|    {
  317|   162k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   162k|                           generic_strtod);
  319|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   162k|    {
  151|   162k|        CharT* end{};
  152|   162k|        errno = 0;
  153|   162k|        value = strtod_cb(src, &end);
  154|   162k|        const auto saved_errno = errno;
  155|   162k|        auto chars_read = end - src;
  156|       |
  157|   162k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   162k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.62k, False: 156k]
  |  |  ------------------
  ------------------
  159|  5.62k|            return unexpected(e);
  160|  5.62k|        }
  161|       |
  162|   156k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 141k, False: 15.2k]
  ------------------
  163|   156k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 141k, False: 0]
  ------------------
  164|   141k|            chars_read -= 2;
  165|   141k|        }
  166|       |
  167|   156k|        return chars_read;
  168|   162k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  196|   299k|    {
  197|   299k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 80.4k, False: 219k]
  |  Branch (197:37): [True: 0, False: 80.4k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   299k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 28.8k, False: 270k]
  ------------------
  204|   299k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 28.8k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   299k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 9.86k, False: 289k]
  |  Branch (210:34): [True: 1.58k, False: 8.27k]
  ------------------
  211|  1.58k|            SCN_UNLIKELY_ATTR
  212|  1.58k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|  1.58k|        }
  214|       |
  215|   298k|        SCN_GCC_COMPAT_PUSH
  216|   298k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   298k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 298k, False: 0]
  ------------------
  219|   298k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 298k, False: 0]
  ------------------
  220|   298k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 8.27k, False: 289k]
  ------------------
  221|  8.27k|            SCN_UNLIKELY_ATTR
  222|  8.27k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  8.27k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   289k|            return {};
  228|   298k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEf:
  105|   309k|{
  106|   309k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (106:12): [True: 82.0k, False: 227k]
  |  Branch (106:25): [True: 0, False: 227k]
  ------------------
  107|   309k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   162k|    {
  174|   162k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 162k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   162k|            auto first_space = read_until_classic_space(input.view());
  177|   162k|            input.assign(
  178|   162k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   162k|        }
  180|       |
  181|   162k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 142k, False: 20.1k]
  ------------------
  182|   142k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   142k|                input.get_allocated_string().insert(0, "0x");
  184|   142k|            }
  185|   142k|            else {
  186|   142k|                input.get_allocated_string().insert(0, L"0x");
  187|   142k|            }
  188|   142k|        }
  189|       |
  190|   162k|        return input.get_allocated_string().c_str();
  191|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  323|   162k|    {
  324|   162k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   162k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   162k|        }
  327|   162k|        else {
  328|   162k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   162k|        }
  330|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  231|   162k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   162k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   162k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   162k|            return std::strtof(str, str_end);
  258|   162k|        }
  259|   162k|        else if constexpr (std::is_same_v<T, double>) {
  260|   162k|            return std::strtod(str, str_end);
  261|   162k|        }
  262|   162k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   162k|            return std::strtold(str, str_end);
  264|   162k|        }
  265|   162k|#endif
  266|   162k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  479|  1.87M|    {
  480|  1.87M|        unsigned format_flags{};
  481|  1.87M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (481:13): [True: 1.86M, False: 12.7k]
  ------------------
  482|  1.86M|            format_flags |= fast_float::fixed;
  483|  1.86M|        }
  484|  1.87M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (484:13): [True: 1.64M, False: 231k]
  ------------------
  485|  1.64M|            format_flags |= fast_float::scientific;
  486|  1.64M|        }
  487|       |
  488|  1.87M|        return static_cast<fast_float::chars_format>(format_flags);
  489|  1.87M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  528|   481k|    {
  529|   481k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   481k|            return m_input.view();
  531|   481k|        }
  532|   481k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   481k|            return std::u16string_view{
  534|   481k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   481k|                m_input.view().size()};
  536|   481k|        }
  537|   481k|        else {
  538|   481k|            return std::u32string_view{
  539|   481k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   481k|                m_input.view().size()};
  541|   481k|        }
  542|   481k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   595k|{
  557|   595k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 5.03k, False: 590k]
  ------------------
  558|  5.03k|        value = std::numeric_limits<T>::infinity();
  559|  5.03k|        return 3;
  560|  5.03k|    }
  561|   590k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.43k, False: 584k]
  ------------------
  562|  5.43k|        value = std::numeric_limits<T>::infinity();
  563|  5.43k|        return 8;
  564|  5.43k|    }
  565|   584k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 28.1k, False: 556k]
  ------------------
  566|  28.1k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  28.1k|        return 3;
  568|  28.1k|    }
  569|   556k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.23k, False: 555k]
  ------------------
  570|  1.23k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.23k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.23k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.23k|    }
  601|       |
  602|   555k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   555k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 126k, False: 428k]
  ------------------
  604|   126k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.30k, False: 120k]
  |  |  ------------------
  ------------------
  605|  6.30k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.30k|                                         "Invalid floating-point digit");
  607|  6.30k|        }
  608|   126k|    }
  609|   549k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.5k, False: 532k]
  |  |  ------------------
  ------------------
  610|  16.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  16.5k|                                     "Invalid floating-point digit");
  612|  16.5k|    }
  613|       |
  614|   532k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   532k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   532k|            double tmp{};
  619|   532k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   532k|            value = tmp;
  621|   532k|            return ret;
  622|   532k|        }
  623|   532k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   532k|            return fast_float_fallback(data, value);
  627|   532k|        }
  628|   532k|    }
  629|   532k|    else {
  630|       |        // Default to fast_float
  631|   532k|        return fast_float_impl<CharT, T>{data}(value);
  632|   532k|    }
  633|   532k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  496|   532k|    {
  497|   532k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  130|  2.02M|    {
  131|  2.02M|        return {kind, options};
  132|  2.02M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  500|   532k|    {
  501|   532k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 120k, False: 412k]
  ------------------
  502|   532k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 13.3k, False: 399k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   133k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   133k|                                              value);
  506|   133k|        }
  507|       |
  508|   399k|        const auto flags = get_flags();
  509|   399k|        const auto view = get_view();
  510|   399k|        const auto result = fast_float::from_chars(
  511|   399k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   399k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 399k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   399k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.61k, False: 395k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  3.61k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  3.61k|                                              value);
  521|  3.61k|        }
  522|       |
  523|   395k|        return result.ptr - view.data();
  524|   399k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   137k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   137k|    {
  467|   137k|#if !SCN_DISABLE_STRTOD
  468|   137k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   137k|    }
  475|   137k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  312|   137k|    {
  313|   137k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEclERf:
  316|   137k|    {
  317|   137k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   137k|                           generic_strtod);
  319|   137k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   137k|    {
  151|   137k|        CharT* end{};
  152|   137k|        errno = 0;
  153|   137k|        value = strtod_cb(src, &end);
  154|   137k|        const auto saved_errno = errno;
  155|   137k|        auto chars_read = end - src;
  156|       |
  157|   137k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   137k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.23k, False: 132k]
  |  |  ------------------
  ------------------
  159|  4.23k|            return unexpected(e);
  160|  4.23k|        }
  161|       |
  162|   132k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 119k, False: 13.2k]
  ------------------
  163|   132k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 119k, False: 0]
  ------------------
  164|   119k|            chars_read -= 2;
  165|   119k|        }
  166|       |
  167|   132k|        return chars_read;
  168|   137k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   137k|    {
  174|   137k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 137k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   137k|            auto first_space = read_until_classic_space(input.view());
  177|   137k|            input.assign(
  178|   137k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   137k|        }
  180|       |
  181|   137k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 120k, False: 16.9k]
  ------------------
  182|   120k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   120k|                input.get_allocated_string().insert(0, "0x");
  184|   120k|            }
  185|   120k|            else {
  186|   120k|                input.get_allocated_string().insert(0, L"0x");
  187|   120k|            }
  188|   120k|        }
  189|       |
  190|   137k|        return input.get_allocated_string().c_str();
  191|   137k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  323|   137k|    {
  324|   137k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   137k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   137k|        }
  327|   137k|        else {
  328|   137k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   137k|        }
  330|   137k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  269|   137k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   137k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   137k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   137k|            return std::wcstof(str, str_end);
  296|   137k|        }
  297|   137k|        else if constexpr (std::is_same_v<T, double>) {
  298|   137k|            return std::wcstod(str, str_end);
  299|   137k|        }
  300|   137k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   137k|            return std::wcstold(str, str_end);
  302|   137k|        }
  303|   137k|#endif
  304|   137k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  528|   399k|    {
  529|   399k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   399k|            return m_input.view();
  531|   399k|        }
  532|   399k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   399k|            return std::u16string_view{
  534|   399k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   399k|                m_input.view().size()};
  536|   399k|        }
  537|   399k|        else {
  538|   399k|            return std::u32string_view{
  539|   399k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   399k|                m_input.view().size()};
  541|   399k|        }
  542|   399k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   779k|{
  557|   779k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 7.80k, False: 772k]
  ------------------
  558|  7.80k|        value = std::numeric_limits<T>::infinity();
  559|  7.80k|        return 3;
  560|  7.80k|    }
  561|   772k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.30k, False: 765k]
  ------------------
  562|  6.30k|        value = std::numeric_limits<T>::infinity();
  563|  6.30k|        return 8;
  564|  6.30k|    }
  565|   765k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 32.3k, False: 733k]
  ------------------
  566|  32.3k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  32.3k|        return 3;
  568|  32.3k|    }
  569|   733k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.33k, False: 732k]
  ------------------
  570|  1.33k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.33k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.33k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.33k|    }
  601|       |
  602|   732k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   732k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   732k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   732k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 160k, False: 571k]
  ------------------
  604|   160k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.53k, False: 158k]
  |  |  ------------------
  ------------------
  605|  2.53k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.53k|                                         "Invalid floating-point digit");
  607|  2.53k|        }
  608|   160k|    }
  609|   729k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.12k, False: 722k]
  |  |  ------------------
  ------------------
  610|  7.12k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  7.12k|                                     "Invalid floating-point digit");
  612|  7.12k|    }
  613|       |
  614|   722k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   722k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   722k|            double tmp{};
  619|   722k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   722k|            value = tmp;
  621|   722k|            return ret;
  622|   722k|        }
  623|   722k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   722k|            return fast_float_fallback(data, value);
  627|   722k|        }
  628|   722k|    }
  629|   722k|    else {
  630|       |        // Default to fast_float
  631|   722k|        return fast_float_impl<CharT, T>{data}(value);
  632|   722k|    }
  633|   722k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  496|   722k|    {
  497|   722k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  500|   722k|    {
  501|   722k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 158k, False: 564k]
  ------------------
  502|   722k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 20.3k, False: 543k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   178k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   178k|                                              value);
  506|   178k|        }
  507|       |
  508|   543k|        const auto flags = get_flags();
  509|   543k|        const auto view = get_view();
  510|   543k|        const auto result = fast_float::from_chars(
  511|   543k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   543k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 543k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   543k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.26k, False: 541k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  2.26k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  2.26k|                                              value);
  521|  2.26k|        }
  522|       |
  523|   541k|        return result.ptr - view.data();
  524|   543k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   180k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   180k|    {
  467|   180k|#if !SCN_DISABLE_STRTOD
  468|   180k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   180k|    }
  475|   180k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  312|   180k|    {
  313|   180k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  144|   332k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEclERd:
  316|   180k|    {
  317|   180k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   180k|                           generic_strtod);
  319|   180k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   180k|    {
  151|   180k|        CharT* end{};
  152|   180k|        errno = 0;
  153|   180k|        value = strtod_cb(src, &end);
  154|   180k|        const auto saved_errno = errno;
  155|   180k|        auto chars_read = end - src;
  156|       |
  157|   180k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   180k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.48k, False: 178k]
  |  |  ------------------
  ------------------
  159|  2.48k|            return unexpected(e);
  160|  2.48k|        }
  161|       |
  162|   178k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 158k, False: 20.3k]
  ------------------
  163|   178k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 158k, False: 0]
  ------------------
  164|   158k|            chars_read -= 2;
  165|   158k|        }
  166|       |
  167|   178k|        return chars_read;
  168|   180k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  196|   332k|    {
  197|   332k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 85.9k, False: 246k]
  |  Branch (197:37): [True: 0, False: 85.9k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   332k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 38.2k, False: 294k]
  ------------------
  204|   332k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 38.2k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   332k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 4.43k, False: 328k]
  |  Branch (210:34): [True: 685, False: 3.75k]
  ------------------
  211|    685|            SCN_UNLIKELY_ATTR
  212|    685|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    685|        }
  214|       |
  215|   332k|        SCN_GCC_COMPAT_PUSH
  216|   332k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   332k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 332k, False: 0]
  ------------------
  219|   332k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 332k, False: 0]
  ------------------
  220|   332k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 3.75k, False: 328k]
  ------------------
  221|  3.75k|            SCN_UNLIKELY_ATTR
  222|  3.75k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  3.75k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   328k|            return {};
  228|   332k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEd:
  109|   337k|{
  110|   337k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (110:12): [True: 86.6k, False: 250k]
  |  Branch (110:24): [True: 0, False: 250k]
  ------------------
  111|   337k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   180k|    {
  174|   180k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 180k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   180k|            auto first_space = read_until_classic_space(input.view());
  177|   180k|            input.assign(
  178|   180k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   180k|        }
  180|       |
  181|   180k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 158k, False: 22.6k]
  ------------------
  182|   158k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   158k|                input.get_allocated_string().insert(0, "0x");
  184|   158k|            }
  185|   158k|            else {
  186|   158k|                input.get_allocated_string().insert(0, L"0x");
  187|   158k|            }
  188|   158k|        }
  189|       |
  190|   180k|        return input.get_allocated_string().c_str();
  191|   180k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  323|   180k|    {
  324|   180k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   180k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   180k|        }
  327|   180k|        else {
  328|   180k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   180k|        }
  330|   180k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  231|   180k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   180k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   180k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   180k|            return std::strtof(str, str_end);
  258|   180k|        }
  259|   180k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   180k|            return std::strtod(str, str_end);
  261|   180k|        }
  262|   180k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   180k|            return std::strtold(str, str_end);
  264|   180k|        }
  265|   180k|#endif
  266|   180k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  528|   543k|    {
  529|   543k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   543k|            return m_input.view();
  531|   543k|        }
  532|   543k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   543k|            return std::u16string_view{
  534|   543k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   543k|                m_input.view().size()};
  536|   543k|        }
  537|   543k|        else {
  538|   543k|            return std::u32string_view{
  539|   543k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   543k|                m_input.view().size()};
  541|   543k|        }
  542|   543k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   666k|{
  557|   666k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 5.87k, False: 660k]
  ------------------
  558|  5.87k|        value = std::numeric_limits<T>::infinity();
  559|  5.87k|        return 3;
  560|  5.87k|    }
  561|   660k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.85k, False: 654k]
  ------------------
  562|  5.85k|        value = std::numeric_limits<T>::infinity();
  563|  5.85k|        return 8;
  564|  5.85k|    }
  565|   654k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 30.4k, False: 623k]
  ------------------
  566|  30.4k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  30.4k|        return 3;
  568|  30.4k|    }
  569|   623k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.33k, False: 622k]
  ------------------
  570|  1.33k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.33k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.33k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.33k|    }
  601|       |
  602|   622k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   622k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   622k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   622k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 138k, False: 483k]
  ------------------
  604|   138k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.45k, False: 132k]
  |  |  ------------------
  ------------------
  605|  6.45k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.45k|                                         "Invalid floating-point digit");
  607|  6.45k|        }
  608|   138k|    }
  609|   616k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   616k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 17.2k, False: 598k]
  |  |  ------------------
  ------------------
  610|  17.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.2k|                                     "Invalid floating-point digit");
  612|  17.2k|    }
  613|       |
  614|   598k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   598k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   598k|            double tmp{};
  619|   598k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   598k|            value = tmp;
  621|   598k|            return ret;
  622|   598k|        }
  623|   598k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   598k|            return fast_float_fallback(data, value);
  627|   598k|        }
  628|   598k|    }
  629|   598k|    else {
  630|       |        // Default to fast_float
  631|   598k|        return fast_float_impl<CharT, T>{data}(value);
  632|   598k|    }
  633|   598k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  496|   598k|    {
  497|   598k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  500|   598k|    {
  501|   598k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 132k, False: 466k]
  ------------------
  502|   598k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 17.8k, False: 448k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   149k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   149k|                                              value);
  506|   149k|        }
  507|       |
  508|   448k|        const auto flags = get_flags();
  509|   448k|        const auto view = get_view();
  510|   448k|        const auto result = fast_float::from_chars(
  511|   448k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   448k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 448k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   448k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.79k, False: 447k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  1.79k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  1.79k|                                              value);
  521|  1.79k|        }
  522|       |
  523|   447k|        return result.ptr - view.data();
  524|   448k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   151k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   151k|    {
  467|   151k|#if !SCN_DISABLE_STRTOD
  468|   151k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   151k|    }
  475|   151k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  312|   151k|    {
  313|   151k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEclERd:
  316|   151k|    {
  317|   151k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   151k|                           generic_strtod);
  319|   151k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   151k|    {
  151|   151k|        CharT* end{};
  152|   151k|        errno = 0;
  153|   151k|        value = strtod_cb(src, &end);
  154|   151k|        const auto saved_errno = errno;
  155|   151k|        auto chars_read = end - src;
  156|       |
  157|   151k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   151k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.95k, False: 149k]
  |  |  ------------------
  ------------------
  159|  1.95k|            return unexpected(e);
  160|  1.95k|        }
  161|       |
  162|   149k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 131k, False: 17.8k]
  ------------------
  163|   149k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 131k, False: 0]
  ------------------
  164|   131k|            chars_read -= 2;
  165|   131k|        }
  166|       |
  167|   149k|        return chars_read;
  168|   151k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   151k|    {
  174|   151k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 151k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   151k|            auto first_space = read_until_classic_space(input.view());
  177|   151k|            input.assign(
  178|   151k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   151k|        }
  180|       |
  181|   151k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 132k, False: 19.6k]
  ------------------
  182|   132k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   132k|                input.get_allocated_string().insert(0, "0x");
  184|   132k|            }
  185|   132k|            else {
  186|   132k|                input.get_allocated_string().insert(0, L"0x");
  187|   132k|            }
  188|   132k|        }
  189|       |
  190|   151k|        return input.get_allocated_string().c_str();
  191|   151k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  323|   151k|    {
  324|   151k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   151k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   151k|        }
  327|   151k|        else {
  328|   151k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   151k|        }
  330|   151k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  269|   151k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   151k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   151k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   151k|            return std::wcstof(str, str_end);
  296|   151k|        }
  297|   151k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   151k|            return std::wcstod(str, str_end);
  299|   151k|        }
  300|   151k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   151k|            return std::wcstold(str, str_end);
  302|   151k|        }
  303|   151k|#endif
  304|   151k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  528|   448k|    {
  529|   448k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   448k|            return m_input.view();
  531|   448k|        }
  532|   448k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   448k|            return std::u16string_view{
  534|   448k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   448k|                m_input.view().size()};
  536|   448k|        }
  537|   448k|        else {
  538|   448k|            return std::u32string_view{
  539|   448k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   448k|                m_input.view().size()};
  541|   448k|        }
  542|   448k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   794k|{
  557|   794k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 8.11k, False: 786k]
  ------------------
  558|  8.11k|        value = std::numeric_limits<T>::infinity();
  559|  8.11k|        return 3;
  560|  8.11k|    }
  561|   786k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.41k, False: 779k]
  ------------------
  562|  6.41k|        value = std::numeric_limits<T>::infinity();
  563|  6.41k|        return 8;
  564|  6.41k|    }
  565|   779k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 32.4k, False: 747k]
  ------------------
  566|  32.4k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  32.4k|        return 3;
  568|  32.4k|    }
  569|   747k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.37k, False: 745k]
  ------------------
  570|  1.37k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.37k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.37k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.37k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.37k|    }
  601|       |
  602|   745k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   745k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   745k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   745k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 161k, False: 584k]
  ------------------
  604|   161k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.62k, False: 158k]
  |  |  ------------------
  ------------------
  605|  2.62k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.62k|                                         "Invalid floating-point digit");
  607|  2.62k|        }
  608|   161k|    }
  609|   743k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   743k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.76k, False: 735k]
  |  |  ------------------
  ------------------
  610|  7.76k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  7.76k|                                     "Invalid floating-point digit");
  612|  7.76k|    }
  613|       |
  614|   735k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   735k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   735k|            double tmp{};
  619|   735k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   735k|            value = tmp;
  621|   735k|            return ret;
  622|   735k|        }
  623|   735k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   735k|            return fast_float_fallback(data, value);
  627|   735k|        }
  628|   735k|    }
  629|   735k|    else {
  630|       |        // Default to fast_float
  631|   735k|        return fast_float_impl<CharT, T>{data}(value);
  632|   735k|    }
  633|   735k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   735k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   735k|    {
  467|   735k|#if !SCN_DISABLE_STRTOD
  468|   735k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   735k|    }
  475|   735k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  312|   735k|    {
  313|   735k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  144|  1.34M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEclERe:
  316|   735k|    {
  317|   735k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   735k|                           generic_strtod);
  319|   735k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   735k|    {
  151|   735k|        CharT* end{};
  152|   735k|        errno = 0;
  153|   735k|        value = strtod_cb(src, &end);
  154|   735k|        const auto saved_errno = errno;
  155|   735k|        auto chars_read = end - src;
  156|       |
  157|   735k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   735k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 876, False: 734k]
  |  |  ------------------
  ------------------
  159|    876|            return unexpected(e);
  160|    876|        }
  161|       |
  162|   734k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 158k, False: 576k]
  ------------------
  163|   734k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 158k, False: 0]
  ------------------
  164|   158k|            chars_read -= 2;
  165|   158k|        }
  166|       |
  167|   734k|        return chars_read;
  168|   735k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  196|  1.34M|    {
  197|  1.34M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 373k, False: 971k]
  |  Branch (197:37): [True: 0, False: 373k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|  1.34M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 38.3k, False: 1.30M]
  ------------------
  204|  1.34M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 38.3k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|  1.34M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 1.51k, False: 1.34M]
  |  Branch (210:34): [True: 260, False: 1.25k]
  ------------------
  211|    260|            SCN_UNLIKELY_ATTR
  212|    260|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    260|        }
  214|       |
  215|  1.34M|        SCN_GCC_COMPAT_PUSH
  216|  1.34M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|  1.34M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 1.34M, False: 0]
  ------------------
  219|  1.34M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 1.34M, False: 0]
  ------------------
  220|  1.34M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 1.25k, False: 1.34M]
  ------------------
  221|  1.25k|            SCN_UNLIKELY_ATTR
  222|  1.25k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  1.25k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|  1.34M|            return {};
  228|  1.34M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEe:
  113|  1.34M|{
  114|  1.34M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (114:12): [True: 373k, False: 972k]
  |  Branch (114:26): [True: 0, False: 972k]
  ------------------
  115|  1.34M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   735k|    {
  174|   735k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 735k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   735k|            auto first_space = read_until_classic_space(input.view());
  177|   735k|            input.assign(
  178|   735k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   735k|        }
  180|       |
  181|   735k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 158k, False: 576k]
  ------------------
  182|   158k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   158k|                input.get_allocated_string().insert(0, "0x");
  184|   158k|            }
  185|   158k|            else {
  186|   158k|                input.get_allocated_string().insert(0, L"0x");
  187|   158k|            }
  188|   158k|        }
  189|       |
  190|   735k|        return input.get_allocated_string().c_str();
  191|   735k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  323|   735k|    {
  324|   735k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   735k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   735k|        }
  327|   735k|        else {
  328|   735k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   735k|        }
  330|   735k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  231|   735k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   735k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   735k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   735k|            return std::strtof(str, str_end);
  258|   735k|        }
  259|   735k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   735k|            return std::strtod(str, str_end);
  261|   735k|        }
  262|   735k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (262:28): [Folded - Ignored]
  ------------------
  263|   735k|            return std::strtold(str, str_end);
  264|   735k|        }
  265|   735k|#endif
  266|   735k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   677k|{
  557|   677k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.15k, False: 671k]
  ------------------
  558|  6.15k|        value = std::numeric_limits<T>::infinity();
  559|  6.15k|        return 3;
  560|  6.15k|    }
  561|   671k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.96k, False: 665k]
  ------------------
  562|  5.96k|        value = std::numeric_limits<T>::infinity();
  563|  5.96k|        return 8;
  564|  5.96k|    }
  565|   665k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 30.5k, False: 634k]
  ------------------
  566|  30.5k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  30.5k|        return 3;
  568|  30.5k|    }
  569|   634k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.37k, False: 633k]
  ------------------
  570|  1.37k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.37k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.37k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.37k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.37k|    }
  601|       |
  602|   633k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   633k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 138k, False: 494k]
  ------------------
  604|   138k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.49k, False: 132k]
  |  |  ------------------
  ------------------
  605|  6.49k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.49k|                                         "Invalid floating-point digit");
  607|  6.49k|        }
  608|   138k|    }
  609|   627k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   627k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 17.6k, False: 609k]
  |  |  ------------------
  ------------------
  610|  17.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.6k|                                     "Invalid floating-point digit");
  612|  17.6k|    }
  613|       |
  614|   609k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   609k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   609k|            double tmp{};
  619|   609k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   609k|            value = tmp;
  621|   609k|            return ret;
  622|   609k|        }
  623|   609k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   609k|            return fast_float_fallback(data, value);
  627|   609k|        }
  628|   609k|    }
  629|   609k|    else {
  630|       |        // Default to fast_float
  631|   609k|        return fast_float_impl<CharT, T>{data}(value);
  632|   609k|    }
  633|   609k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   609k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   609k|    {
  467|   609k|#if !SCN_DISABLE_STRTOD
  468|   609k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   609k|    }
  475|   609k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  312|   609k|    {
  313|   609k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEclERe:
  316|   609k|    {
  317|   609k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   609k|                           generic_strtod);
  319|   609k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   609k|    {
  151|   609k|        CharT* end{};
  152|   609k|        errno = 0;
  153|   609k|        value = strtod_cb(src, &end);
  154|   609k|        const auto saved_errno = errno;
  155|   609k|        auto chars_read = end - src;
  156|       |
  157|   609k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   609k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 640, False: 608k]
  |  |  ------------------
  ------------------
  159|    640|            return unexpected(e);
  160|    640|        }
  161|       |
  162|   608k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 132k, False: 476k]
  ------------------
  163|   608k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 132k, False: 0]
  ------------------
  164|   132k|            chars_read -= 2;
  165|   132k|        }
  166|       |
  167|   608k|        return chars_read;
  168|   609k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   609k|    {
  174|   609k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 609k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   609k|            auto first_space = read_until_classic_space(input.view());
  177|   609k|            input.assign(
  178|   609k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   609k|        }
  180|       |
  181|   609k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 132k, False: 477k]
  ------------------
  182|   132k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   132k|                input.get_allocated_string().insert(0, "0x");
  184|   132k|            }
  185|   132k|            else {
  186|   132k|                input.get_allocated_string().insert(0, L"0x");
  187|   132k|            }
  188|   132k|        }
  189|       |
  190|   609k|        return input.get_allocated_string().c_str();
  191|   609k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  323|   609k|    {
  324|   609k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   609k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   609k|        }
  327|   609k|        else {
  328|   609k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   609k|        }
  330|   609k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  269|   609k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   609k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   609k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   609k|            return std::wcstof(str, str_end);
  296|   609k|        }
  297|   609k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   609k|            return std::wcstod(str, str_end);
  299|   609k|        }
  300|   609k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (300:28): [Folded - Ignored]
  ------------------
  301|   609k|            return std::wcstold(str, str_end);
  302|   609k|        }
  303|   609k|#endif
  304|   609k|    }

_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   208k|    {
  577|   208k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   208k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   208k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   208k|        float_reader<CharT> rd{};
  581|   208k|        return read_impl<range_nocvref_t>(
  582|   208k|            range, rd,
  583|   208k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   208k|                return r.read_source(SCN_FWD(args)...);
  585|   208k|            },
  586|   208k|            value);
  587|   208k|    }
_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|   716k|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|  1.35M|    constexpr float_reader_base() = default;
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   703k|    {
  633|   703k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   703k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.3k, False: 691k]
  |  |  ------------------
  ------------------
  635|  12.3k|            return unexpected(r.error());
  636|  12.3k|        }
  637|       |
  638|   691k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   691k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   691k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   691k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 677k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|   691k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   677k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   677k|        return ranges::next(ranges::begin(range), n);
  640|   691k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   691k|    {
   98|   691k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   691k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   691k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   691k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 189k, False: 502k]
  ------------------
  102|       |
  103|   691k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   691k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   691k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   691k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 677k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|   691k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   677k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   677k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   691k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   208k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   208k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   208k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.84M|    {
   73|  1.84M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.84M|        return read_source_impl(range);
   79|  1.84M|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.30M|    {
  112|  2.30M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.30M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.30M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.30M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.30M|        auto it = sign_result.first;
  115|  2.30M|        m_sign = sign_result.second;
  116|       |
  117|  2.30M|        auto digits_begin = it;
  118|  2.30M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.30M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.30M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.30M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  4.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.30M]
  |  |  |  Branch (153:45): [True: 0, False: 2.30M]
  |  |  |  Branch (153:45): [True: 0, False: 2.30M]
  |  |  ------------------
  ------------------
  122|  2.30M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.30M|            else {
  133|  2.30M|                auto cb = [&](auto&& rr)
  134|  2.30M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.30M|                    auto res = read_all(rr);
  136|  2.30M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.30M|                        return unexpected_scan_error(
  138|  2.30M|                            scan_error::invalid_scanned_value,
  139|  2.30M|                            "Invalid float value");
  140|  2.30M|                    }
  141|  2.30M|                    return res;
  142|  2.30M|                };
  143|  2.30M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 38.8k, False: 2.26M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  38.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  38.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  38.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  38.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  38.8k|    }                                                  \
  |  |   70|  2.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  2.26M|            }
  145|  2.30M|        }
  146|  2.26M|        else {
  147|  2.26M|            SCN_TRY_ASSIGN(
  148|  2.26M|                it,
  149|  2.26M|                do_read_source_impl(
  150|  2.26M|                    r,
  151|  2.26M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  2.26M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  2.26M|        }
  154|       |
  155|  2.26M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  2.26M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 2.24M, False: 22.7k]
  |  Branch (157:48): [True: 2.22M, False: 18.5k]
  ------------------
  158|  2.26M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 2.12M, False: 94.7k]
  ------------------
  159|  2.26M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 2.12M, False: 3.94k]
  ------------------
  160|  2.12M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  2.12M|        }
  162|       |
  163|  2.26M|        handle_separators();
  164|       |
  165|  2.26M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 2.26M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  2.26M|        return it;
  178|  2.26M|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.30M|    {
  226|  2.30M|        auto it = ranges::begin(range);
  227|  2.30M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 2.26M, False: 41.3k]
  ------------------
  228|  2.26M|            return unexpected(r.error());
  229|  2.26M|        }
  230|  41.3k|        else {
  231|  41.3k|            it = *r;
  232|  41.3k|        }
  233|       |
  234|  41.3k|        if (auto r = read_matching_string_classic_nocase(
  235|  41.3k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  41.3k|            !r) {
  ------------------
  |  Branch (236:13): [True: 22.7k, False: 18.5k]
  ------------------
  237|  22.7k|            m_kind = float_kind::inf_short;
  238|  22.7k|            return it;
  239|  22.7k|        }
  240|  18.5k|        else {
  241|  18.5k|            m_kind = float_kind::inf_long;
  242|  18.5k|            return *r;
  243|  18.5k|        }
  244|  41.3k|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  2.26M|    {
  249|  2.26M|        auto it = ranges::begin(range);
  250|  2.26M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 2.16M, False: 100k]
  ------------------
  251|  2.16M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  2.16M|                scan_error::invalid_scanned_value,
  253|  2.16M|                "Invalid floating-point NaN value"));
  254|  2.16M|        }
  255|   100k|        else {
  256|   100k|            it = *r;
  257|   100k|        }
  258|       |
  259|   100k|        if (auto r = read_matching_code_unit(
  260|   100k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|   100k|            !r) {
  ------------------
  |  Branch (261:13): [True: 94.7k, False: 5.51k]
  ------------------
  262|  94.7k|            m_kind = float_kind::nan_simple;
  263|  94.7k|            return it;
  264|  94.7k|        }
  265|  5.51k|        else {
  266|  5.51k|            it = *r;
  267|  5.51k|        }
  268|       |
  269|  5.51k|        auto payload_beg_it = it;
  270|  5.51k|        it = read_while_code_unit(
  271|  5.51k|            ranges::subrange{it, ranges::end(range)},
  272|  5.51k|            [](char_type ch) SCN_NOEXCEPT {
  273|  5.51k|                return is_ascii_char(ch) &&
  274|  5.51k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  5.51k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  5.51k|            });
  277|  5.51k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  5.51k|        m_kind = float_kind::nan_with_payload;
  280|  5.51k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 3.94k, False: 1.56k]
  ------------------
  281|  5.51k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  3.94k|            return *r;
  283|  3.94k|        }
  284|  1.56k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  1.56k|                                     "Invalid floating-point NaN payload");
  286|  5.51k|    }
_ZZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlcE_clEc:
  272|  52.4k|            [](char_type ch) SCN_NOEXCEPT {
  273|  52.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 52.3k, False: 169]
  ------------------
  274|  52.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 47.8k, False: 4.45k]
  |  Branch (274:39): [True: 36.8k, False: 10.9k]
  |  Branch (274:54): [True: 5.40k, False: 10.0k]
  |  Branch (274:67): [True: 5.30k, False: 99]
  ------------------
  275|  52.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 5.65k, False: 4.45k]
  |  Branch (275:39): [True: 3.24k, False: 2.41k]
  |  Branch (275:53): [True: 2.31k, False: 4.55k]
  ------------------
  276|  52.4k|            });
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.56M|    {
  220|  1.56M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.56M|    }
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   382k|    {
  292|   382k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 66.5k, False: 315k]
  ------------------
  293|  66.5k|            auto beg_exp_it = ranges::begin(range);
  294|  66.5k|            auto it = *r;
  295|       |
  296|  66.5k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 66.2k, False: 212]
  ------------------
  297|  66.5k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  66.2k|                it = r_sign->first;
  299|  66.2k|            }
  300|       |
  301|  66.5k|            if (auto r_exp = read_while1_code_unit(
  302|  66.5k|                    ranges::subrange{it, ranges::end(range)},
  303|  66.5k|                    [](char_type ch)
  304|  66.5k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  66.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 928, False: 65.5k]
  |  |  ------------------
  ------------------
  306|    928|                it = beg_exp_it;
  307|    928|            }
  308|  65.5k|            else {
  309|  65.5k|                it = *r_exp;
  310|  65.5k|            }
  311|       |
  312|  66.5k|            return it;
  313|  66.5k|        }
  314|   315k|        else {
  315|   315k|            return ranges::begin(range);
  316|   315k|        }
  317|   382k|    }
_ZZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlcE_clEc:
  304|   229k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   598k|    {
  365|   598k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   598k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 392k, False: 206k]
  |  Branch (366:50): [True: 24.7k, False: 367k]
  ------------------
  367|       |
  368|   598k|        auto it = ranges::begin(range);
  369|   598k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   598k|        if (auto r =
  372|   598k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   598k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.1k, False: 575k]
  |  |  ------------------
  ------------------
  374|  23.1k|            return r.transform_error(
  375|  23.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  23.1k|                                              "Invalid floating-point value"));
  377|  23.1k|        }
  378|   575k|        else {
  379|   575k|            digits_count += ranges::distance(it, *r);
  380|   575k|            it = *r;
  381|   575k|        }
  382|       |
  383|   575k|        m_integral_part_length = digits_count;
  384|   575k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 86.9k, False: 488k]
  ------------------
  385|   575k|                ranges::subrange{it, ranges::end(range)},
  386|   575k|                m_locale_options.decimal_point)) {
  387|  86.9k|            it = *r;
  388|  86.9k|        }
  389|       |
  390|   575k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 73.1k, False: 502k]
  ------------------
  391|   575k|                                     false)) {
  392|  73.1k|            digits_count += ranges::distance(it, *r);
  393|  73.1k|            it = *r;
  394|  73.1k|        }
  395|       |
  396|   575k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 575k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   575k|        auto beg_exp_it = it;
  402|   575k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 382k, False: 193k]
  ------------------
  403|   382k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   382k|        }
  405|   575k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 23.9k, False: 551k]
  |  Branch (405:29): [True: 13.0k, False: 10.8k]
  ------------------
  406|  13.0k|            return unexpected_scan_error(
  407|  13.0k|                scan_error::invalid_scanned_value,
  408|  13.0k|                "No exponent given to scientific float");
  409|  13.0k|        }
  410|       |
  411|   562k|        m_kind =
  412|   562k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 496k, False: 65.5k]
  ------------------
  413|       |
  414|   562k|        return it;
  415|   575k|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.17M|    {
  185|  1.17M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.17M]
  |  |  |  Branch (153:45): [True: 0, False: 1.17M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.17M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.17M|        return read_while1_code_unit(
  195|  1.17M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.17M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.17M|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|  6.91M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.30M|    {
  423|  2.30M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.30M|        const bool allowed_nonhex =
  425|  2.30M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.30M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.30M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 2.26M, False: 41.3k]
  |  Branch (428:45): [True: 0, False: 2.26M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.30M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 41.3k, False: 2.26M]
  ------------------
  434|  41.3k|            return *r;
  435|  41.3k|        }
  436|       |
  437|  2.26M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 2.16M, False: 98.6k]
  |  Branch (437:45): [True: 1.56k, False: 2.16M]
  ------------------
  438|  1.56k|            return unexpected(r.error());
  439|  1.56k|        }
  440|  2.26M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 98.6k, False: 2.16M]
  ------------------
  441|  98.6k|            return *r;
  442|  98.6k|        }
  443|       |
  444|  2.16M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.56M, False: 598k]
  |  Branch (444:28): [True: 483k, False: 1.08M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   483k|            auto it = ranges::begin(range);
  448|       |
  449|   483k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 16.0k, False: 467k]
  ------------------
  450|  16.0k|                m_kind = float_kind::hex_with_prefix;
  451|  16.0k|                it = *r;
  452|  16.0k|            }
  453|   467k|            else {
  454|   467k|                m_kind = float_kind::hex_without_prefix;
  455|   467k|            }
  456|       |
  457|   483k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   483k|        }
  459|  1.67M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 598k, False: 1.08M]
  |  Branch (459:34): [True: 598k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   598k|            m_kind = float_kind::generic;
  463|   598k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   598k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   598k|        }
  465|  1.08M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.08M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.1k, False: 1.04M]
  |  |  ------------------
  ------------------
  471|  40.1k|                m_kind = float_kind::hex_with_prefix;
  472|  40.1k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  40.1k|            }
  474|       |
  475|  1.04M|            m_kind = float_kind::generic;
  476|  1.04M|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.08M|        }
  478|  2.16M|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   523k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   523k|                    auto res = read_all(rr);
  136|   523k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 356, False: 522k]
  |  |  ------------------
  ------------------
  137|    356|                        return unexpected_scan_error(
  138|    356|                            scan_error::invalid_scanned_value,
  139|    356|                            "Invalid float value");
  140|    356|                    }
  141|   522k|                    return res;
  142|   523k|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.04M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.04M|                    auto res = read_all(rr);
  136|  1.04M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 670, False: 1.04M]
  |  |  ------------------
  ------------------
  137|    670|                        return unexpected_scan_error(
  138|    670|                            scan_error::invalid_scanned_value,
  139|    670|                            "Invalid float value");
  140|    670|                    }
  141|  1.04M|                    return res;
  142|  1.04M|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  2.26M|    {
  482|  2.26M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 2.26M, False: 0]
  ------------------
  483|  2.26M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 2.26M, False: 0]
  ------------------
  484|  2.26M|            return;
  485|  2.26M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   239k|    {
  577|   239k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   239k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   239k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   239k|        float_reader<CharT> rd{};
  581|   239k|        return read_impl<range_nocvref_t>(
  582|   239k|            range, rd,
  583|   239k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   239k|                return r.read_source(SCN_FWD(args)...);
  585|   239k|            },
  586|   239k|            value);
  587|   239k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   792k|    {
  633|   792k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   792k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   792k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.0k, False: 779k]
  |  |  ------------------
  ------------------
  635|  13.0k|            return unexpected(r.error());
  636|  13.0k|        }
  637|       |
  638|   779k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   779k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   779k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   779k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.1k, False: 767k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.1k|    }                                                  \
  |  |  |  |   70|   779k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   767k|        return ranges::next(ranges::begin(range), n);
  640|   779k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   779k|    {
   98|   779k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   779k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 212k, False: 567k]
  ------------------
  102|       |
  103|   779k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   779k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   779k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   779k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.1k, False: 767k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.1k|    }                                                  \
  |  |  |  |   70|   779k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   767k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   779k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   239k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   239k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   239k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   245k|    {
  577|   245k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   245k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   245k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   245k|        float_reader<CharT> rd{};
  581|   245k|        return read_impl<range_nocvref_t>(
  582|   245k|            range, rd,
  583|   245k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   245k|                return r.read_source(SCN_FWD(args)...);
  585|   245k|            },
  586|   245k|            value);
  587|   245k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   807k|    {
  633|   807k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   807k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   807k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.4k, False: 794k]
  |  |  ------------------
  ------------------
  635|  13.4k|            return unexpected(r.error());
  636|  13.4k|        }
  637|       |
  638|   794k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   794k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   794k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   794k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   794k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.2k, False: 782k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.2k|    }                                                  \
  |  |  |  |   70|   794k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   782k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   782k|        return ranges::next(ranges::begin(range), n);
  640|   794k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   794k|    {
   98|   794k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   794k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   794k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   794k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 220k, False: 573k]
  ------------------
  102|       |
  103|   794k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   794k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   794k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   794k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   794k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.2k, False: 782k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.2k|    }                                                  \
  |  |  |  |   70|   794k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   782k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   782k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   794k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   245k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   245k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   245k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.66k|    {
  577|  7.66k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.66k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.66k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.66k|        float_reader<CharT> rd{};
  581|  7.66k|        return read_impl<range_nocvref_t>(
  582|  7.66k|            range, rd,
  583|  7.66k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.66k|                return r.read_source(SCN_FWD(args)...);
  585|  7.66k|            },
  586|  7.66k|            value);
  587|  7.66k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  33.2k|    {
  633|  33.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  33.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.2k, False: 0]
  |  |  ------------------
  ------------------
  635|  33.2k|            return unexpected(r.error());
  636|  33.2k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.66k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.66k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.66k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|  84.3k|    {
   73|  84.3k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  84.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 84.3k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  84.3k|        return read_source_impl(range);
   79|  84.3k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|  99.6k|    {
  112|  99.6k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  99.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  99.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  99.6k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  99.6k|        auto it = sign_result.first;
  115|  99.6k|        m_sign = sign_result.second;
  116|       |
  117|  99.6k|        auto digits_begin = it;
  118|  99.6k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  99.6k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  99.6k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  99.6k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|  99.6k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|  99.6k|                SCN_TRY_ASSIGN(
  124|  99.6k|                    it,
  125|  99.6k|                    do_read_source_impl(
  126|  99.6k|                        r,
  127|  99.6k|                        [&](auto&& rr) {
  128|  99.6k|                            return read_regular_float(SCN_FWD(rr));
  129|  99.6k|                        },
  130|  99.6k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|  99.6k|            }
  132|  99.6k|            else {
  133|  99.6k|                auto cb = [&](auto&& rr)
  134|  99.6k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  99.6k|                    auto res = read_all(rr);
  136|  99.6k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  99.6k|                        return unexpected_scan_error(
  138|  99.6k|                            scan_error::invalid_scanned_value,
  139|  99.6k|                            "Invalid float value");
  140|  99.6k|                    }
  141|  99.6k|                    return res;
  142|  99.6k|                };
  143|  99.6k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|  99.6k|            }
  145|  99.6k|        }
  146|  99.6k|        else {
  147|  99.6k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|  99.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  99.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 99.6k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  99.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  99.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  99.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  99.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  99.6k|    }                                                  \
  |  |   70|  99.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|  99.6k|    {
  423|  99.6k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  99.6k|        const bool allowed_nonhex =
  425|  99.6k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  99.6k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  99.6k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 99.6k, False: 0]
  |  Branch (428:45): [True: 0, False: 99.6k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  99.6k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 99.6k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|  99.6k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 99.6k, False: 0]
  |  Branch (437:45): [True: 0, False: 99.6k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|  99.6k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 99.6k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|  99.6k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 53.6k, False: 45.9k]
  |  Branch (444:28): [True: 15.3k, False: 38.3k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  15.3k|            auto it = ranges::begin(range);
  448|       |
  449|  15.3k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 15.3k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  15.3k|            else {
  454|  15.3k|                m_kind = float_kind::hex_without_prefix;
  455|  15.3k|            }
  456|       |
  457|  15.3k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  15.3k|        }
  459|  84.3k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 45.9k, False: 38.3k]
  |  Branch (459:34): [True: 45.9k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  45.9k|            m_kind = float_kind::generic;
  463|  45.9k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  45.9k|        }
  465|  38.3k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  38.3k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38.3k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  38.3k|            m_kind = float_kind::generic;
  476|  38.3k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  38.3k|        }
  478|  99.6k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|  99.6k|    {
  226|  99.6k|        auto it = ranges::begin(range);
  227|  99.6k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 99.6k, False: 0]
  ------------------
  228|  99.6k|            return unexpected(r.error());
  229|  99.6k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|  99.6k|    {
  249|  99.6k|        auto it = ranges::begin(range);
  250|  99.6k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 99.6k, False: 0]
  ------------------
  251|  99.6k|            return r.transform_error(map_parse_error_to_scan_error(
  252|  99.6k|                scan_error::invalid_scanned_value,
  253|  99.6k|                "Invalid floating-point NaN value"));
  254|  99.6k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|  53.6k|    {
  220|  53.6k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  53.6k|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  15.3k|    {
  323|  15.3k|        auto it = ranges::begin(range);
  324|       |
  325|  15.3k|        std::ptrdiff_t digits_count = 0;
  326|  15.3k|        if (auto r =
  327|  15.3k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  15.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.3k, False: 0]
  |  |  ------------------
  ------------------
  329|  15.3k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  15.3k|                scan_error::invalid_scanned_value,
  331|  15.3k|                "Invalid hexadecimal floating-point value"));
  332|  15.3k|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  15.3k|    {
  203|  15.3k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.3k]
  |  |  |  Branch (153:45): [True: 0, False: 15.3k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  15.3k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  15.3k|        return read_while1_code_unit(
  213|  15.3k|            SCN_FWD(range),
  ------------------
  |  |  248|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  15.3k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  15.3k|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  214|  15.3k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|  84.3k|    {
  365|  84.3k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|  84.3k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 68.9k, False: 15.3k]
  |  Branch (366:50): [True: 15.3k, False: 53.6k]
  ------------------
  367|       |
  368|  84.3k|        auto it = ranges::begin(range);
  369|  84.3k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|  84.3k|        if (auto r =
  372|  84.3k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|  84.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  84.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 84.3k, False: 0]
  |  |  ------------------
  ------------------
  374|  84.3k|            return r.transform_error(
  375|  84.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  84.3k|                                              "Invalid floating-point value"));
  377|  84.3k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|  84.3k|    {
  185|  84.3k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  84.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 84.3k]
  |  |  |  Branch (153:45): [True: 0, False: 84.3k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  84.3k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  84.3k|        return read_while1_code_unit(
  195|  84.3k|            SCN_FWD(range),
  ------------------
  |  |  248|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  84.3k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  84.3k|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  196|  84.3k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.66k|    {
  577|  7.66k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.66k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.66k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.66k|        float_reader<CharT> rd{};
  581|  7.66k|        return read_impl<range_nocvref_t>(
  582|  7.66k|            range, rd,
  583|  7.66k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.66k|                return r.read_source(SCN_FWD(args)...);
  585|  7.66k|            },
  586|  7.66k|            value);
  587|  7.66k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  33.2k|    {
  633|  33.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  33.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.2k, False: 0]
  |  |  ------------------
  ------------------
  635|  33.2k|            return unexpected(r.error());
  636|  33.2k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.66k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.66k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.66k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.66k|    {
  577|  7.66k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.66k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.66k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.66k|        float_reader<CharT> rd{};
  581|  7.66k|        return read_impl<range_nocvref_t>(
  582|  7.66k|            range, rd,
  583|  7.66k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.66k|                return r.read_source(SCN_FWD(args)...);
  585|  7.66k|            },
  586|  7.66k|            value);
  587|  7.66k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  33.2k|    {
  633|  33.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  33.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.2k, False: 0]
  |  |  ------------------
  ------------------
  635|  33.2k|            return unexpected(r.error());
  636|  33.2k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.66k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.66k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.66k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.70M|    {
  570|  1.70M|        detail::check_float_type_specs(specs, eh);
  571|  1.70M|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.68M|    {
  644|  1.68M|        unsigned options{};
  645|  1.68M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 477k, False: 1.21M]
  ------------------
  646|   477k|            options |= float_reader_base::allow_thsep;
  647|   477k|        }
  648|       |
  649|  1.68M|        SCN_GCC_COMPAT_PUSH
  650|  1.68M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.68M|        switch (specs.type) {
  653|   230k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 230k, False: 1.45M]
  ------------------
  654|   230k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  41.2k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 41.2k, False: 1.64M]
  ------------------
  657|  41.2k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   529k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 529k, False: 1.15M]
  ------------------
  660|   529k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   409k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 409k, False: 1.27M]
  ------------------
  663|   409k|                return options | float_reader_base::allow_scientific |
  664|   409k|                       float_reader_base::allow_fixed;
  665|       |
  666|   477k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 477k, False: 1.21M]
  ------------------
  667|   477k|                return options | float_reader_base::allow_scientific |
  668|   477k|                       float_reader_base::allow_fixed |
  669|   477k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.68M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.68M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.68M|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|  1.68M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|  3.23M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   495k|    {
  596|   495k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   495k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   495k|#if !SCN_DISABLE_LOCALE
  600|   495k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 138k, False: 356k]
  ------------------
  601|   138k|            return read_impl<range_nocvref_t>(
  602|   138k|                range, rd,
  603|   138k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   138k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   138k|                },
  606|   138k|                value, loc);
  607|   138k|        }
  608|   356k|#endif
  609|       |
  610|   356k|        return read_impl<range_nocvref_t>(
  611|   356k|            range, rd,
  612|   356k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   356k|                return r.read_source(SCN_FWD(args)...);
  614|   356k|            },
  615|   356k|            value);
  616|   495k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   138k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   138k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   138k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   462k|    {
   86|   462k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   462k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   462k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 462k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   462k|        return read_source_impl(range);
   92|   462k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   356k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   356k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   356k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   553k|    {
  596|   553k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   553k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   553k|#if !SCN_DISABLE_LOCALE
  600|   553k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 159k, False: 393k]
  ------------------
  601|   159k|            return read_impl<range_nocvref_t>(
  602|   159k|                range, rd,
  603|   159k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   159k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   159k|                },
  606|   159k|                value, loc);
  607|   159k|        }
  608|   393k|#endif
  609|       |
  610|   393k|        return read_impl<range_nocvref_t>(
  611|   393k|            range, rd,
  612|   393k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   393k|                return r.read_source(SCN_FWD(args)...);
  614|   393k|            },
  615|   393k|            value);
  616|   553k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   159k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   159k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   159k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   393k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   393k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   393k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   393k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   561k|    {
  596|   561k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   561k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   561k|#if !SCN_DISABLE_LOCALE
  600|   561k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 163k, False: 398k]
  ------------------
  601|   163k|            return read_impl<range_nocvref_t>(
  602|   163k|                range, rd,
  603|   163k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   163k|                },
  606|   163k|                value, loc);
  607|   163k|        }
  608|   398k|#endif
  609|       |
  610|   398k|        return read_impl<range_nocvref_t>(
  611|   398k|            range, rd,
  612|   398k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   398k|                return r.read_source(SCN_FWD(args)...);
  614|   398k|            },
  615|   398k|            value);
  616|   561k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   163k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   163k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   398k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   398k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   398k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  25.5k|    {
  596|  25.5k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  25.5k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  25.5k|#if !SCN_DISABLE_LOCALE
  600|  25.5k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.11k, False: 20.4k]
  ------------------
  601|  5.11k|            return read_impl<range_nocvref_t>(
  602|  5.11k|                range, rd,
  603|  5.11k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.11k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.11k|                },
  606|  5.11k|                value, loc);
  607|  5.11k|        }
  608|  20.4k|#endif
  609|       |
  610|  20.4k|        return read_impl<range_nocvref_t>(
  611|  20.4k|            range, rd,
  612|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.4k|                return r.read_source(SCN_FWD(args)...);
  614|  20.4k|            },
  615|  20.4k|            value);
  616|  25.5k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.11k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.11k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.11k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  15.3k|    {
   86|  15.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  15.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  15.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  15.3k|        return read_source_impl(range);
   92|  15.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  20.4k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  25.5k|    {
  596|  25.5k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  25.5k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  25.5k|#if !SCN_DISABLE_LOCALE
  600|  25.5k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.11k, False: 20.4k]
  ------------------
  601|  5.11k|            return read_impl<range_nocvref_t>(
  602|  5.11k|                range, rd,
  603|  5.11k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.11k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.11k|                },
  606|  5.11k|                value, loc);
  607|  5.11k|        }
  608|  20.4k|#endif
  609|       |
  610|  20.4k|        return read_impl<range_nocvref_t>(
  611|  20.4k|            range, rd,
  612|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.4k|                return r.read_source(SCN_FWD(args)...);
  614|  20.4k|            },
  615|  20.4k|            value);
  616|  25.5k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.11k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.11k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.11k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  20.4k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  25.5k|    {
  596|  25.5k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  25.5k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  25.5k|#if !SCN_DISABLE_LOCALE
  600|  25.5k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.11k, False: 20.4k]
  ------------------
  601|  5.11k|            return read_impl<range_nocvref_t>(
  602|  5.11k|                range, rd,
  603|  5.11k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.11k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.11k|                },
  606|  5.11k|                value, loc);
  607|  5.11k|        }
  608|  20.4k|#endif
  609|       |
  610|  20.4k|        return read_impl<range_nocvref_t>(
  611|  20.4k|            range, rd,
  612|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.4k|                return r.read_source(SCN_FWD(args)...);
  614|  20.4k|            },
  615|  20.4k|            value);
  616|  25.5k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.11k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.11k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.11k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  20.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  20.4k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   181k|    {
  577|   181k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   181k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   181k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   181k|        float_reader<CharT> rd{};
  581|   181k|        return read_impl<range_nocvref_t>(
  582|   181k|            range, rd,
  583|   181k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   181k|                return r.read_source(SCN_FWD(args)...);
  585|   181k|            },
  586|   181k|            value);
  587|   181k|    }
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|   640k|    constexpr float_reader() = default;
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   619k|    {
  633|   619k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   619k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   619k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.5k, False: 595k]
  |  |  ------------------
  ------------------
  635|  24.5k|            return unexpected(r.error());
  636|  24.5k|        }
  637|       |
  638|   595k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   595k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.0k, False: 568k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.0k|    }                                                  \
  |  |  |  |   70|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   568k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   568k|        return ranges::next(ranges::begin(range), n);
  640|   595k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   595k|    {
   98|   595k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   595k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 158k, False: 436k]
  ------------------
  102|       |
  103|   595k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   595k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.0k, False: 568k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.0k|    }                                                  \
  |  |  |  |   70|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   568k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   568k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   595k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   181k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   181k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   181k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.61M|    {
   73|  1.61M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.61M|        return read_source_impl(range);
   79|  1.61M|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.01M|    {
  112|  2.01M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.01M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.01M|        auto it = sign_result.first;
  115|  2.01M|        m_sign = sign_result.second;
  116|       |
  117|  2.01M|        auto digits_begin = it;
  118|  2.01M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.01M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.01M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.01M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  4.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.01M]
  |  |  |  Branch (153:45): [True: 0, False: 2.01M]
  |  |  |  Branch (153:45): [True: 0, False: 2.01M]
  |  |  ------------------
  ------------------
  122|  2.01M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.01M|            else {
  133|  2.01M|                auto cb = [&](auto&& rr)
  134|  2.01M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.01M|                    auto res = read_all(rr);
  136|  2.01M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.01M|                        return unexpected_scan_error(
  138|  2.01M|                            scan_error::invalid_scanned_value,
  139|  2.01M|                            "Invalid float value");
  140|  2.01M|                    }
  141|  2.01M|                    return res;
  142|  2.01M|                };
  143|  2.01M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 74.8k, False: 1.93M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  74.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  74.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  74.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  74.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  74.8k|    }                                                  \
  |  |   70|  2.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  1.93M|            }
  145|  2.01M|        }
  146|  1.93M|        else {
  147|  1.93M|            SCN_TRY_ASSIGN(
  148|  1.93M|                it,
  149|  1.93M|                do_read_source_impl(
  150|  1.93M|                    r,
  151|  1.93M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  1.93M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  1.93M|        }
  154|       |
  155|  1.93M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  1.93M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 1.92M, False: 17.0k]
  |  Branch (157:48): [True: 1.90M, False: 17.2k]
  ------------------
  158|  1.93M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.81M, False: 89.1k]
  ------------------
  159|  1.93M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.81M, False: 3.94k]
  ------------------
  160|  1.81M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.81M|        }
  162|       |
  163|  1.93M|        handle_separators();
  164|       |
  165|  1.93M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 1.93M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  1.93M|        return it;
  178|  1.93M|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.01M|    {
  226|  2.01M|        auto it = ranges::begin(range);
  227|  2.01M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 1.97M, False: 34.3k]
  ------------------
  228|  1.97M|            return unexpected(r.error());
  229|  1.97M|        }
  230|  34.3k|        else {
  231|  34.3k|            it = *r;
  232|  34.3k|        }
  233|       |
  234|  34.3k|        if (auto r = read_matching_string_classic_nocase(
  235|  34.3k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  34.3k|            !r) {
  ------------------
  |  Branch (236:13): [True: 17.0k, False: 17.2k]
  ------------------
  237|  17.0k|            m_kind = float_kind::inf_short;
  238|  17.0k|            return it;
  239|  17.0k|        }
  240|  17.2k|        else {
  241|  17.2k|            m_kind = float_kind::inf_long;
  242|  17.2k|            return *r;
  243|  17.2k|        }
  244|  34.3k|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  1.97M|    {
  249|  1.97M|        auto it = ranges::begin(range);
  250|  1.97M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 1.88M, False: 94.6k]
  ------------------
  251|  1.88M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  1.88M|                scan_error::invalid_scanned_value,
  253|  1.88M|                "Invalid floating-point NaN value"));
  254|  1.88M|        }
  255|  94.6k|        else {
  256|  94.6k|            it = *r;
  257|  94.6k|        }
  258|       |
  259|  94.6k|        if (auto r = read_matching_code_unit(
  260|  94.6k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|  94.6k|            !r) {
  ------------------
  |  Branch (261:13): [True: 89.1k, False: 5.45k]
  ------------------
  262|  89.1k|            m_kind = float_kind::nan_simple;
  263|  89.1k|            return it;
  264|  89.1k|        }
  265|  5.45k|        else {
  266|  5.45k|            it = *r;
  267|  5.45k|        }
  268|       |
  269|  5.45k|        auto payload_beg_it = it;
  270|  5.45k|        it = read_while_code_unit(
  271|  5.45k|            ranges::subrange{it, ranges::end(range)},
  272|  5.45k|            [](char_type ch) SCN_NOEXCEPT {
  273|  5.45k|                return is_ascii_char(ch) &&
  274|  5.45k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  5.45k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  5.45k|            });
  277|  5.45k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  5.45k|        m_kind = float_kind::nan_with_payload;
  280|  5.45k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 3.94k, False: 1.50k]
  ------------------
  281|  5.45k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  3.94k|            return *r;
  283|  3.94k|        }
  284|  1.50k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  1.50k|                                     "Invalid floating-point NaN payload");
  286|  5.45k|    }
_ZZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlwE_clEw:
  272|  52.4k|            [](char_type ch) SCN_NOEXCEPT {
  273|  52.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 52.3k, False: 109]
  ------------------
  274|  52.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 47.8k, False: 4.45k]
  |  Branch (274:39): [True: 36.8k, False: 10.9k]
  |  Branch (274:54): [True: 5.40k, False: 10.0k]
  |  Branch (274:67): [True: 5.30k, False: 97]
  ------------------
  275|  52.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 5.65k, False: 4.45k]
  |  Branch (275:39): [True: 3.24k, False: 2.40k]
  |  Branch (275:53): [True: 2.31k, False: 4.55k]
  ------------------
  276|  52.4k|            });
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.35M|    {
  220|  1.35M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.35M|    }
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   317k|    {
  292|   317k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 57.5k, False: 259k]
  ------------------
  293|  57.5k|            auto beg_exp_it = ranges::begin(range);
  294|  57.5k|            auto it = *r;
  295|       |
  296|  57.5k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 57.3k, False: 224]
  ------------------
  297|  57.5k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  57.3k|                it = r_sign->first;
  299|  57.3k|            }
  300|       |
  301|  57.5k|            if (auto r_exp = read_while1_code_unit(
  302|  57.5k|                    ranges::subrange{it, ranges::end(range)},
  303|  57.5k|                    [](char_type ch)
  304|  57.5k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  57.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.05k, False: 56.4k]
  |  |  ------------------
  ------------------
  306|  1.05k|                it = beg_exp_it;
  307|  1.05k|            }
  308|  56.4k|            else {
  309|  56.4k|                it = *r_exp;
  310|  56.4k|            }
  311|       |
  312|  57.5k|            return it;
  313|  57.5k|        }
  314|   259k|        else {
  315|   259k|            return ranges::begin(range);
  316|   259k|        }
  317|   317k|    }
_ZZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  304|   198k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   534k|    {
  365|   534k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   534k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 354k, False: 180k]
  |  Branch (366:50): [True: 34.4k, False: 319k]
  ------------------
  367|       |
  368|   534k|        auto it = ranges::begin(range);
  369|   534k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   534k|        if (auto r =
  372|   534k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   534k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 61.5k, False: 473k]
  |  |  ------------------
  ------------------
  374|  61.5k|            return r.transform_error(
  375|  61.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  61.5k|                                              "Invalid floating-point value"));
  377|  61.5k|        }
  378|   473k|        else {
  379|   473k|            digits_count += ranges::distance(it, *r);
  380|   473k|            it = *r;
  381|   473k|        }
  382|       |
  383|   473k|        m_integral_part_length = digits_count;
  384|   473k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 63.3k, False: 409k]
  ------------------
  385|   473k|                ranges::subrange{it, ranges::end(range)},
  386|   473k|                m_locale_options.decimal_point)) {
  387|  63.3k|            it = *r;
  388|  63.3k|        }
  389|       |
  390|   473k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 51.8k, False: 421k]
  ------------------
  391|   473k|                                     false)) {
  392|  51.8k|            digits_count += ranges::distance(it, *r);
  393|  51.8k|            it = *r;
  394|  51.8k|        }
  395|       |
  396|   473k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   473k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 473k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   473k|        auto beg_exp_it = it;
  402|   473k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 317k, False: 155k]
  ------------------
  403|   317k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   317k|        }
  405|   473k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 19.3k, False: 453k]
  |  Branch (405:29): [True: 10.6k, False: 8.64k]
  ------------------
  406|  10.6k|            return unexpected_scan_error(
  407|  10.6k|                scan_error::invalid_scanned_value,
  408|  10.6k|                "No exponent given to scientific float");
  409|  10.6k|        }
  410|       |
  411|   462k|        m_kind =
  412|   462k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 406k, False: 56.4k]
  ------------------
  413|       |
  414|   462k|        return it;
  415|   473k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.00M|    {
  185|  1.00M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.00M]
  |  |  |  Branch (153:45): [True: 0, False: 1.00M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.00M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.00M|        return read_while1_code_unit(
  195|  1.00M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.00M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.00M|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|  5.07M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.01M|    {
  423|  2.01M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.01M|        const bool allowed_nonhex =
  425|  2.01M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.01M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.01M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 1.97M, False: 34.3k]
  |  Branch (428:45): [True: 0, False: 1.97M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.01M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 34.3k, False: 1.97M]
  ------------------
  434|  34.3k|            return *r;
  435|  34.3k|        }
  436|       |
  437|  1.97M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 1.88M, False: 93.1k]
  |  Branch (437:45): [True: 1.50k, False: 1.88M]
  ------------------
  438|  1.50k|            return unexpected(r.error());
  439|  1.50k|        }
  440|  1.97M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 93.1k, False: 1.88M]
  ------------------
  441|  93.1k|            return *r;
  442|  93.1k|        }
  443|       |
  444|  1.88M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.35M, False: 534k]
  |  Branch (444:28): [True: 418k, False: 931k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   418k|            auto it = ranges::begin(range);
  448|       |
  449|   418k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 14.0k, False: 404k]
  ------------------
  450|  14.0k|                m_kind = float_kind::hex_with_prefix;
  451|  14.0k|                it = *r;
  452|  14.0k|            }
  453|   404k|            else {
  454|   404k|                m_kind = float_kind::hex_without_prefix;
  455|   404k|            }
  456|       |
  457|   418k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   418k|        }
  459|  1.46M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 534k, False: 931k]
  |  Branch (459:34): [True: 534k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   534k|            m_kind = float_kind::generic;
  463|   534k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   534k|        }
  465|   931k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   931k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|   931k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 35.1k, False: 896k]
  |  |  ------------------
  ------------------
  471|  35.1k|                m_kind = float_kind::hex_with_prefix;
  472|  35.1k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  35.1k|            }
  474|       |
  475|   896k|            m_kind = float_kind::generic;
  476|   896k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   896k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   931k|        }
  478|  1.88M|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   453k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   453k|                    auto res = read_all(rr);
  136|   453k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 374, False: 453k]
  |  |  ------------------
  ------------------
  137|    374|                        return unexpected_scan_error(
  138|    374|                            scan_error::invalid_scanned_value,
  139|    374|                            "Invalid float value");
  140|    374|                    }
  141|   453k|                    return res;
  142|   453k|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   896k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   896k|                    auto res = read_all(rr);
  136|   896k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 715, False: 895k]
  |  |  ------------------
  ------------------
  137|    715|                        return unexpected_scan_error(
  138|    715|                            scan_error::invalid_scanned_value,
  139|    715|                            "Invalid float value");
  140|    715|                    }
  141|   895k|                    return res;
  142|   896k|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  1.93M|    {
  482|  1.93M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 1.93M, False: 0]
  ------------------
  483|  1.93M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 1.93M, False: 0]
  ------------------
  484|  1.93M|            return;
  485|  1.93M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   206k|    {
  577|   206k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   206k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   206k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   206k|        float_reader<CharT> rd{};
  581|   206k|        return read_impl<range_nocvref_t>(
  582|   206k|            range, rd,
  583|   206k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   206k|                return r.read_source(SCN_FWD(args)...);
  585|   206k|            },
  586|   206k|            value);
  587|   206k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   691k|    {
  633|   691k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   691k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.9k, False: 666k]
  |  |  ------------------
  ------------------
  635|  24.9k|            return unexpected(r.error());
  636|  24.9k|        }
  637|       |
  638|   666k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   666k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   666k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   666k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   666k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.6k, False: 640k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.6k|    }                                                  \
  |  |  |  |   70|   666k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   640k|        return ranges::next(ranges::begin(range), n);
  640|   666k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   666k|    {
   98|   666k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   666k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   666k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   666k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 178k, False: 487k]
  ------------------
  102|       |
  103|   666k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   666k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   666k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   666k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   666k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.6k, False: 640k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.6k|    }                                                  \
  |  |  |  |   70|   666k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   640k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   666k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   206k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   206k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   206k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   211k|    {
  577|   211k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   211k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   211k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   211k|        float_reader<CharT> rd{};
  581|   211k|        return read_impl<range_nocvref_t>(
  582|   211k|            range, rd,
  583|   211k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   211k|                return r.read_source(SCN_FWD(args)...);
  585|   211k|            },
  586|   211k|            value);
  587|   211k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   702k|    {
  633|   702k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   702k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.3k, False: 677k]
  |  |  ------------------
  ------------------
  635|  25.3k|            return unexpected(r.error());
  636|  25.3k|        }
  637|       |
  638|   677k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   677k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   677k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   677k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.8k, False: 652k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.8k|    }                                                  \
  |  |  |  |   70|   677k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   652k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   652k|        return ranges::next(ranges::begin(range), n);
  640|   677k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   677k|    {
   98|   677k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   677k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   677k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   677k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 185k, False: 491k]
  ------------------
  102|       |
  103|   677k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   677k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   677k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   677k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.8k, False: 652k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.8k|    }                                                  \
  |  |  |  |   70|   677k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   652k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   652k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   677k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   211k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   211k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   211k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.56M|    {
  570|  1.56M|        detail::check_float_type_specs(specs, eh);
  571|  1.56M|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.55M|    {
  644|  1.55M|        unsigned options{};
  645|  1.55M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 427k, False: 1.12M]
  ------------------
  646|   427k|            options |= float_reader_base::allow_thsep;
  647|   427k|        }
  648|       |
  649|  1.55M|        SCN_GCC_COMPAT_PUSH
  650|  1.55M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.55M|        switch (specs.type) {
  653|   215k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 215k, False: 1.33M]
  ------------------
  654|   215k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  62.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 62.8k, False: 1.48M]
  ------------------
  657|  62.8k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   474k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 474k, False: 1.07M]
  ------------------
  660|   474k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   371k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 371k, False: 1.17M]
  ------------------
  663|   371k|                return options | float_reader_base::allow_scientific |
  664|   371k|                       float_reader_base::allow_fixed;
  665|       |
  666|   427k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 427k, False: 1.12M]
  ------------------
  667|   427k|                return options | float_reader_base::allow_scientific |
  668|   427k|                       float_reader_base::allow_fixed |
  669|   427k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.55M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.55M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.55M|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|  1.55M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   438k|    {
  596|   438k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   438k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   438k|#if !SCN_DISABLE_LOCALE
  600|   438k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 120k, False: 317k]
  ------------------
  601|   120k|            return read_impl<range_nocvref_t>(
  602|   120k|                range, rd,
  603|   120k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   120k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   120k|                },
  606|   120k|                value, loc);
  607|   120k|        }
  608|   317k|#endif
  609|       |
  610|   317k|        return read_impl<range_nocvref_t>(
  611|   317k|            range, rd,
  612|   317k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   317k|                return r.read_source(SCN_FWD(args)...);
  614|   317k|            },
  615|   317k|            value);
  616|   438k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   120k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   120k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   120k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   399k|    {
   86|   399k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   399k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   399k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 399k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   399k|        return read_source_impl(range);
   92|   399k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   317k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   317k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   317k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   484k|    {
  596|   484k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   484k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   484k|#if !SCN_DISABLE_LOCALE
  600|   484k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 137k, False: 346k]
  ------------------
  601|   137k|            return read_impl<range_nocvref_t>(
  602|   137k|                range, rd,
  603|   137k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   137k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   137k|                },
  606|   137k|                value, loc);
  607|   137k|        }
  608|   346k|#endif
  609|       |
  610|   346k|        return read_impl<range_nocvref_t>(
  611|   346k|            range, rd,
  612|   346k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   346k|                return r.read_source(SCN_FWD(args)...);
  614|   346k|            },
  615|   346k|            value);
  616|   484k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   137k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   137k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   137k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   346k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   346k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   346k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   491k|    {
  596|   491k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   491k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   491k|#if !SCN_DISABLE_LOCALE
  600|   491k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 141k, False: 350k]
  ------------------
  601|   141k|            return read_impl<range_nocvref_t>(
  602|   141k|                range, rd,
  603|   141k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   141k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   141k|                },
  606|   141k|                value, loc);
  607|   141k|        }
  608|   350k|#endif
  609|       |
  610|   350k|        return read_impl<range_nocvref_t>(
  611|   350k|            range, rd,
  612|   350k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   350k|                return r.read_source(SCN_FWD(args)...);
  614|   350k|            },
  615|   350k|            value);
  616|   491k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   141k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   141k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   141k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   350k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   350k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   350k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  13.6k|    {
  577|  13.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  13.6k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  13.6k|        float_reader<CharT> rd{};
  581|  13.6k|        return read_impl<range_nocvref_t>(
  582|  13.6k|            range, rd,
  583|  13.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  13.6k|                return r.read_source(SCN_FWD(args)...);
  585|  13.6k|            },
  586|  13.6k|            value);
  587|  13.6k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  59.2k|    {
  633|  59.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  59.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 59.2k, False: 0]
  |  |  ------------------
  ------------------
  635|  59.2k|            return unexpected(r.error());
  636|  59.2k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  13.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  13.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  13.6k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   150k|    {
   73|   150k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   150k|        return read_source_impl(range);
   79|   150k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   177k|    {
  112|   177k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   177k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   177k|        auto it = sign_result.first;
  115|   177k|        m_sign = sign_result.second;
  116|       |
  117|   177k|        auto digits_begin = it;
  118|   177k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   177k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   177k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   177k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   177k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   177k|                SCN_TRY_ASSIGN(
  124|   177k|                    it,
  125|   177k|                    do_read_source_impl(
  126|   177k|                        r,
  127|   177k|                        [&](auto&& rr) {
  128|   177k|                            return read_regular_float(SCN_FWD(rr));
  129|   177k|                        },
  130|   177k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   177k|            }
  132|   177k|            else {
  133|   177k|                auto cb = [&](auto&& rr)
  134|   177k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   177k|                    auto res = read_all(rr);
  136|   177k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   177k|                        return unexpected_scan_error(
  138|   177k|                            scan_error::invalid_scanned_value,
  139|   177k|                            "Invalid float value");
  140|   177k|                    }
  141|   177k|                    return res;
  142|   177k|                };
  143|   177k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   177k|            }
  145|   177k|        }
  146|   177k|        else {
  147|   177k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 177k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   177k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   177k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   177k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   177k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   177k|    }                                                  \
  |  |   70|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   177k|    {
  423|   177k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   177k|        const bool allowed_nonhex =
  425|   177k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   177k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   177k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 177k, False: 0]
  |  Branch (428:45): [True: 0, False: 177k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   177k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 177k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   177k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 177k, False: 0]
  |  Branch (437:45): [True: 0, False: 177k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   177k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 177k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   177k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 95.6k, False: 81.9k]
  |  Branch (444:28): [True: 27.3k, False: 68.3k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  27.3k|            auto it = ranges::begin(range);
  448|       |
  449|  27.3k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 27.3k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  27.3k|            else {
  454|  27.3k|                m_kind = float_kind::hex_without_prefix;
  455|  27.3k|            }
  456|       |
  457|  27.3k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  27.3k|        }
  459|   150k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 81.9k, False: 68.3k]
  |  Branch (459:34): [True: 81.9k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  81.9k|            m_kind = float_kind::generic;
  463|  81.9k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  81.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  81.9k|        }
  465|  68.3k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  68.3k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  68.3k|            m_kind = float_kind::generic;
  476|  68.3k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  68.3k|        }
  478|   177k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   177k|    {
  226|   177k|        auto it = ranges::begin(range);
  227|   177k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 177k, False: 0]
  ------------------
  228|   177k|            return unexpected(r.error());
  229|   177k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   177k|    {
  249|   177k|        auto it = ranges::begin(range);
  250|   177k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 177k, False: 0]
  ------------------
  251|   177k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   177k|                scan_error::invalid_scanned_value,
  253|   177k|                "Invalid floating-point NaN value"));
  254|   177k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|  95.6k|    {
  220|  95.6k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  95.6k|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  27.3k|    {
  323|  27.3k|        auto it = ranges::begin(range);
  324|       |
  325|  27.3k|        std::ptrdiff_t digits_count = 0;
  326|  27.3k|        if (auto r =
  327|  27.3k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  27.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.3k, False: 0]
  |  |  ------------------
  ------------------
  329|  27.3k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  27.3k|                scan_error::invalid_scanned_value,
  331|  27.3k|                "Invalid hexadecimal floating-point value"));
  332|  27.3k|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  27.3k|    {
  203|  27.3k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.3k]
  |  |  |  Branch (153:45): [True: 0, False: 27.3k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  27.3k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  27.3k|        return read_while1_code_unit(
  213|  27.3k|            SCN_FWD(range),
  ------------------
  |  |  248|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  27.3k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  27.3k|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  214|  27.3k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   150k|    {
  365|   150k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   150k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 122k, False: 27.3k]
  |  Branch (366:50): [True: 27.3k, False: 95.6k]
  ------------------
  367|       |
  368|   150k|        auto it = ranges::begin(range);
  369|   150k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   150k|        if (auto r =
  372|   150k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   150k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 150k, False: 0]
  |  |  ------------------
  ------------------
  374|   150k|            return r.transform_error(
  375|   150k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   150k|                                              "Invalid floating-point value"));
  377|   150k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   150k|    {
  185|   150k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 150k]
  |  |  |  Branch (153:45): [True: 0, False: 150k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   150k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   150k|        return read_while1_code_unit(
  195|   150k|            SCN_FWD(range),
  ------------------
  |  |  248|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   150k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   150k|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  196|   150k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  13.6k|    {
  577|  13.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  13.6k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  13.6k|        float_reader<CharT> rd{};
  581|  13.6k|        return read_impl<range_nocvref_t>(
  582|  13.6k|            range, rd,
  583|  13.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  13.6k|                return r.read_source(SCN_FWD(args)...);
  585|  13.6k|            },
  586|  13.6k|            value);
  587|  13.6k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  59.2k|    {
  633|  59.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  59.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 59.2k, False: 0]
  |  |  ------------------
  ------------------
  635|  59.2k|            return unexpected(r.error());
  636|  59.2k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  13.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  13.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  13.6k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  13.6k|    {
  577|  13.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  13.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  13.6k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  13.6k|        float_reader<CharT> rd{};
  581|  13.6k|        return read_impl<range_nocvref_t>(
  582|  13.6k|            range, rd,
  583|  13.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  13.6k|                return r.read_source(SCN_FWD(args)...);
  585|  13.6k|            },
  586|  13.6k|            value);
  587|  13.6k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  59.2k|    {
  633|  59.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  59.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 59.2k, False: 0]
  |  |  ------------------
  ------------------
  635|  59.2k|            return unexpected(r.error());
  636|  59.2k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  13.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  13.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  13.6k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  45.5k|    {
  596|  45.5k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  45.5k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  45.5k|#if !SCN_DISABLE_LOCALE
  600|  45.5k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 9.10k, False: 36.4k]
  ------------------
  601|  9.10k|            return read_impl<range_nocvref_t>(
  602|  9.10k|                range, rd,
  603|  9.10k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  9.10k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  9.10k|                },
  606|  9.10k|                value, loc);
  607|  9.10k|        }
  608|  36.4k|#endif
  609|       |
  610|  36.4k|        return read_impl<range_nocvref_t>(
  611|  36.4k|            range, rd,
  612|  36.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  36.4k|                return r.read_source(SCN_FWD(args)...);
  614|  36.4k|            },
  615|  36.4k|            value);
  616|  45.5k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  9.10k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  9.10k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  9.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  9.10k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  27.3k|    {
   86|  27.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  27.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  27.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 27.3k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  27.3k|        return read_source_impl(range);
   92|  27.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  36.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  36.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  36.4k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  45.5k|    {
  596|  45.5k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  45.5k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  45.5k|#if !SCN_DISABLE_LOCALE
  600|  45.5k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 9.10k, False: 36.4k]
  ------------------
  601|  9.10k|            return read_impl<range_nocvref_t>(
  602|  9.10k|                range, rd,
  603|  9.10k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  9.10k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  9.10k|                },
  606|  9.10k|                value, loc);
  607|  9.10k|        }
  608|  36.4k|#endif
  609|       |
  610|  36.4k|        return read_impl<range_nocvref_t>(
  611|  36.4k|            range, rd,
  612|  36.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  36.4k|                return r.read_source(SCN_FWD(args)...);
  614|  36.4k|            },
  615|  36.4k|            value);
  616|  45.5k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  9.10k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  9.10k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  9.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  9.10k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  36.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  36.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  36.4k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  45.5k|    {
  596|  45.5k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  45.5k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  45.5k|#if !SCN_DISABLE_LOCALE
  600|  45.5k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 9.10k, False: 36.4k]
  ------------------
  601|  9.10k|            return read_impl<range_nocvref_t>(
  602|  9.10k|                range, rd,
  603|  9.10k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  9.10k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  9.10k|                },
  606|  9.10k|                value, loc);
  607|  9.10k|        }
  608|  36.4k|#endif
  609|       |
  610|  36.4k|        return read_impl<range_nocvref_t>(
  611|  36.4k|            range, rd,
  612|  36.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  36.4k|                return r.read_source(SCN_FWD(args)...);
  614|  36.4k|            },
  615|  36.4k|            value);
  616|  45.5k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  9.10k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  9.10k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  9.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  9.10k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  36.4k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  36.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  36.4k|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIfEET_S5_:
  523|   691k|    {
  524|   691k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   691k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   691k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   691k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 87.5k, False: 603k]
  ------------------
  526|  87.5k|            return -value;
  527|  87.5k|        }
  528|   603k|        return value;
  529|   691k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIfEET_S5_:
  523|   595k|    {
  524|   595k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   595k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 76.3k, False: 518k]
  ------------------
  526|  76.3k|            return -value;
  527|  76.3k|        }
  528|   518k|        return value;
  529|   595k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|   779k|    {
  524|   779k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   779k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 97.0k, False: 682k]
  ------------------
  526|  97.0k|            return -value;
  527|  97.0k|        }
  528|   682k|        return value;
  529|   779k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|   666k|    {
  524|   666k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   666k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   666k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   666k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 84.3k, False: 581k]
  ------------------
  526|  84.3k|            return -value;
  527|  84.3k|        }
  528|   581k|        return value;
  529|   666k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIeEET_S5_:
  523|   794k|    {
  524|   794k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   794k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   794k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   794k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 100k, False: 693k]
  ------------------
  526|   100k|            return -value;
  527|   100k|        }
  528|   693k|        return value;
  529|   794k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIeEET_S5_:
  523|   677k|    {
  524|   677k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   677k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   677k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   677k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 87.5k, False: 590k]
  ------------------
  526|  87.5k|            return -value;
  527|  87.5k|        }
  528|   590k|        return value;
  529|   677k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.30M|{
   69|  2.30M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.30M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.67M, False: 625k]
  ------------------
   71|  1.67M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.67M, False: 0]
  ------------------
   72|  1.67M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.67M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.67M|    }
   76|       |
   77|   625k|    auto& it = *r;
   78|   625k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 286k, False: 338k]
  ------------------
   79|   286k|        return std::pair{it, sign_type::minus_sign};
   80|   286k|    }
   81|   338k|    return std::pair{it, sign_type::plus_sign};
   82|   625k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  17.3M|{
   51|  17.3M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  17.3M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  66.5k|{
   69|  66.5k|    auto r = read_one_of_code_unit(range, "+-");
   70|  66.5k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 49.2k, False: 17.3k]
  ------------------
   71|  49.2k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 48.9k, False: 212]
  ------------------
   72|  48.9k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  48.9k|        }
   74|    212|        return unexpected(eof_error::eof);
   75|  49.2k|    }
   76|       |
   77|  17.3k|    auto& it = *r;
   78|  17.3k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 7.59k, False: 9.71k]
  ------------------
   79|  7.59k|        return std::pair{it, sign_type::minus_sign};
   80|  7.59k|    }
   81|  9.71k|    return std::pair{it, sign_type::plus_sign};
   82|  17.3k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|  99.6k|{
   69|  99.6k|    auto r = read_one_of_code_unit(range, "+-");
   70|  99.6k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 99.6k, False: 0]
  ------------------
   71|  99.6k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 99.6k, False: 0]
  ------------------
   72|  99.6k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  99.6k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  99.6k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.01M|{
   69|  2.01M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.01M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.48M, False: 526k]
  ------------------
   71|  1.48M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.48M, False: 0]
  ------------------
   72|  1.48M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.48M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.48M|    }
   76|       |
   77|   526k|    auto& it = *r;
   78|   526k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 249k, False: 276k]
  ------------------
   79|   249k|        return std::pair{it, sign_type::minus_sign};
   80|   249k|    }
   81|   276k|    return std::pair{it, sign_type::plus_sign};
   82|   526k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  7.64M|{
   55|  7.64M|#if WCHAR_MIN < 0
   56|  7.64M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 7.64M, False: 4.09k]
  |  Branch (56:20): [True: 7.54M, False: 98.6k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  7.54M|        return char_to_int(static_cast<char>(ch));
   61|  7.54M|    }
   62|   102k|    return 255;
   63|  7.64M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  57.5k|{
   69|  57.5k|    auto r = read_one_of_code_unit(range, "+-");
   70|  57.5k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 41.7k, False: 15.8k]
  ------------------
   71|  41.7k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 41.4k, False: 224]
  ------------------
   72|  41.4k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  41.4k|        }
   74|    224|        return unexpected(eof_error::eof);
   75|  41.7k|    }
   76|       |
   77|  15.8k|    auto& it = *r;
   78|  15.8k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 6.73k, False: 9.08k]
  ------------------
   79|  6.73k|        return std::pair{it, sign_type::minus_sign};
   80|  6.73k|    }
   81|  9.08k|    return std::pair{it, sign_type::plus_sign};
   82|  15.8k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   177k|{
   69|   177k|    auto r = read_one_of_code_unit(range, "+-");
   70|   177k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 177k, False: 0]
  ------------------
   71|   177k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 177k, False: 0]
  ------------------
   72|   177k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   177k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   177k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.32M|{
   43|  2.32M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.3k, False: 2.30M]
  |  |  ------------------
  ------------------
   44|  19.3k|        return unexpected(e);
   45|  19.3k|    }
   46|       |
   47|  2.30M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.30M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.30M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.30M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  121|   210k|    {
  122|   210k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   210k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   210k|                          basic_contiguous_scan_context<char_type>>) {
  126|   210k|            auto rd = make_reader<T, char_type>();
  127|   210k|            return impl(rd, range, value);
  128|   210k|        }
  129|   210k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   210k|            auto rd = make_reader<T, char_type>();
  131|   210k|            if (!is_segment_contiguous(range)) {
  132|   210k|                return impl(rd, range, value);
  133|   210k|            }
  134|   210k|            auto crange = get_as_contiguous(range);
  135|   210k|            SCN_TRY(it, impl(rd, crange, value));
  136|   210k|            return ranges_polyfill::batch_next(
  137|   210k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   210k|        }
  139|   210k|        else {
  140|   210k|            SCN_EXPECT(false);
  141|   210k|            SCN_UNREACHABLE;
  142|   210k|        }
  143|   210k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   210k|    {
  112|   210k|        SCN_TRY(it,
  ------------------
  |  |   71|   210k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   210k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   210k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.95k, False: 208k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.95k|    }                                                  \
  |  |  |  |   70|   210k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   208k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   208k|                    .transform_error(make_eof_scan_error));
  115|   208k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   208k|                               loc);
  117|   210k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|   241k|    {
  122|   241k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   241k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   241k|                          basic_contiguous_scan_context<char_type>>) {
  126|   241k|            auto rd = make_reader<T, char_type>();
  127|   241k|            return impl(rd, range, value);
  128|   241k|        }
  129|   241k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   241k|            auto rd = make_reader<T, char_type>();
  131|   241k|            if (!is_segment_contiguous(range)) {
  132|   241k|                return impl(rd, range, value);
  133|   241k|            }
  134|   241k|            auto crange = get_as_contiguous(range);
  135|   241k|            SCN_TRY(it, impl(rd, crange, value));
  136|   241k|            return ranges_polyfill::batch_next(
  137|   241k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   241k|        }
  139|   241k|        else {
  140|   241k|            SCN_EXPECT(false);
  141|   241k|            SCN_UNREACHABLE;
  142|   241k|        }
  143|   241k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   241k|    {
  112|   241k|        SCN_TRY(it,
  ------------------
  |  |   71|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.26k, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.26k|    }                                                  \
  |  |  |  |   70|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   239k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   239k|                    .transform_error(make_eof_scan_error));
  115|   239k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   239k|                               loc);
  117|   241k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  121|   248k|    {
  122|   248k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   248k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   248k|                          basic_contiguous_scan_context<char_type>>) {
  126|   248k|            auto rd = make_reader<T, char_type>();
  127|   248k|            return impl(rd, range, value);
  128|   248k|        }
  129|   248k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   248k|            auto rd = make_reader<T, char_type>();
  131|   248k|            if (!is_segment_contiguous(range)) {
  132|   248k|                return impl(rd, range, value);
  133|   248k|            }
  134|   248k|            auto crange = get_as_contiguous(range);
  135|   248k|            SCN_TRY(it, impl(rd, crange, value));
  136|   248k|            return ranges_polyfill::batch_next(
  137|   248k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   248k|        }
  139|   248k|        else {
  140|   248k|            SCN_EXPECT(false);
  141|   248k|            SCN_UNREACHABLE;
  142|   248k|        }
  143|   248k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   248k|    {
  112|   248k|        SCN_TRY(it,
  ------------------
  |  |   71|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.41k, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.41k|    }                                                  \
  |  |  |  |   70|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   245k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   245k|                    .transform_error(make_eof_scan_error));
  115|   245k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   245k|                               loc);
  117|   248k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|  99.6k|{
   43|  99.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|  99.6k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 99.6k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  99.6k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  99.6k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.66k|    {
  122|  7.66k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.66k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.66k|            auto rd = make_reader<T, char_type>();
  127|  7.66k|            return impl(rd, range, value);
  128|  7.66k|        }
  129|  7.66k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.66k|            auto rd = make_reader<T, char_type>();
  131|  7.66k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.66k, False: 0]
  ------------------
  132|  7.66k|                return impl(rd, range, value);
  133|  7.66k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.66k|        else {
  140|  7.66k|            SCN_EXPECT(false);
  141|  7.66k|            SCN_UNREACHABLE;
  142|  7.66k|        }
  143|  7.66k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.66k|    {
  112|  7.66k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 7.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  7.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.66k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.66k|                    .transform_error(make_eof_scan_error));
  115|  7.66k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.66k|                               loc);
  117|  7.66k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.66k|    {
  122|  7.66k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.66k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.66k|            auto rd = make_reader<T, char_type>();
  127|  7.66k|            return impl(rd, range, value);
  128|  7.66k|        }
  129|  7.66k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.66k|            auto rd = make_reader<T, char_type>();
  131|  7.66k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.66k, False: 0]
  ------------------
  132|  7.66k|                return impl(rd, range, value);
  133|  7.66k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.66k|        else {
  140|  7.66k|            SCN_EXPECT(false);
  141|  7.66k|            SCN_UNREACHABLE;
  142|  7.66k|        }
  143|  7.66k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.66k|    {
  112|  7.66k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 7.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  7.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.66k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.66k|                    .transform_error(make_eof_scan_error));
  115|  7.66k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.66k|                               loc);
  117|  7.66k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.66k|    {
  122|  7.66k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.66k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.66k|            auto rd = make_reader<T, char_type>();
  127|  7.66k|            return impl(rd, range, value);
  128|  7.66k|        }
  129|  7.66k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.66k|            auto rd = make_reader<T, char_type>();
  131|  7.66k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.66k, False: 0]
  ------------------
  132|  7.66k|                return impl(rd, range, value);
  133|  7.66k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.66k|        else {
  140|  7.66k|            SCN_EXPECT(false);
  141|  7.66k|            SCN_UNREACHABLE;
  142|  7.66k|        }
  143|  7.66k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.66k|    {
  112|  7.66k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 7.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  7.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.66k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.66k|                    .transform_error(make_eof_scan_error));
  115|  7.66k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.66k|                               loc);
  117|  7.66k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  222|   500k|    {
  223|   500k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   500k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   500k|                          basic_contiguous_scan_context<char_type>>) {
  227|   500k|            auto rd = make_reader<T, char_type>();
  228|   500k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 500k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   500k|            return impl(rd, range, value);
  233|   500k|        }
  234|   500k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   500k|            auto rd = make_reader<T, char_type>();
  236|   500k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   500k|                return unexpected(e);
  238|   500k|            }
  239|       |
  240|   500k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   500k|                return impl(rd, range, value);
  242|   500k|            }
  243|       |
  244|   500k|            auto crange = get_as_contiguous(range);
  245|   500k|            SCN_TRY(it, impl(rd, crange, value));
  246|   500k|            return ranges_polyfill::batch_next(
  247|   500k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   500k|        }
  249|   500k|        else {
  250|   500k|            SCN_EXPECT(false);
  251|   500k|            SCN_UNREACHABLE;
  252|   500k|        }
  253|   500k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   500k|    {
  205|   500k|        SCN_TRY(it,
  ------------------
  |  |   71|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.09k, False: 495k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.09k|    }                                                  \
  |  |  |  |   70|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   495k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   495k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   495k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   495k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   495k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 495k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   495k|        return rd.read_specs(subr, specs, value, loc);
  218|   495k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|   559k|    {
  223|   559k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   559k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   559k|                          basic_contiguous_scan_context<char_type>>) {
  227|   559k|            auto rd = make_reader<T, char_type>();
  228|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 559k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   559k|            return impl(rd, range, value);
  233|   559k|        }
  234|   559k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   559k|            auto rd = make_reader<T, char_type>();
  236|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   559k|                return unexpected(e);
  238|   559k|            }
  239|       |
  240|   559k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   559k|                return impl(rd, range, value);
  242|   559k|            }
  243|       |
  244|   559k|            auto crange = get_as_contiguous(range);
  245|   559k|            SCN_TRY(it, impl(rd, crange, value));
  246|   559k|            return ranges_polyfill::batch_next(
  247|   559k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   559k|        }
  249|   559k|        else {
  250|   559k|            SCN_EXPECT(false);
  251|   559k|            SCN_UNREACHABLE;
  252|   559k|        }
  253|   559k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   559k|    {
  205|   559k|        SCN_TRY(it,
  ------------------
  |  |   71|   559k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   559k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   559k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.78k, False: 553k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.78k|    }                                                  \
  |  |  |  |   70|   559k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   553k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   553k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   553k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   553k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 553k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   553k|        return rd.read_specs(subr, specs, value, loc);
  218|   553k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  222|   568k|    {
  223|   568k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   568k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   568k|                          basic_contiguous_scan_context<char_type>>) {
  227|   568k|            auto rd = make_reader<T, char_type>();
  228|   568k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   568k|            return impl(rd, range, value);
  233|   568k|        }
  234|   568k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   568k|            auto rd = make_reader<T, char_type>();
  236|   568k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   568k|                return unexpected(e);
  238|   568k|            }
  239|       |
  240|   568k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   568k|                return impl(rd, range, value);
  242|   568k|            }
  243|       |
  244|   568k|            auto crange = get_as_contiguous(range);
  245|   568k|            SCN_TRY(it, impl(rd, crange, value));
  246|   568k|            return ranges_polyfill::batch_next(
  247|   568k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   568k|        }
  249|   568k|        else {
  250|   568k|            SCN_EXPECT(false);
  251|   568k|            SCN_UNREACHABLE;
  252|   568k|        }
  253|   568k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   568k|    {
  205|   568k|        SCN_TRY(it,
  ------------------
  |  |   71|   568k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   568k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   568k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.07k, False: 561k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.07k|    }                                                  \
  |  |  |  |   70|   568k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   561k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   561k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   561k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   561k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   561k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 561k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   561k|        return rd.read_specs(subr, specs, value, loc);
  218|   561k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  25.5k|    {
  223|  25.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  25.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  25.5k|            auto rd = make_reader<T, char_type>();
  228|  25.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  25.5k|                return unexpected(e);
  230|  25.5k|            }
  231|       |
  232|  25.5k|            return impl(rd, range, value);
  233|  25.5k|        }
  234|  25.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  25.5k|            auto rd = make_reader<T, char_type>();
  236|  25.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  25.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 25.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  25.5k|                return impl(rd, range, value);
  242|  25.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  25.5k|        else {
  250|  25.5k|            SCN_EXPECT(false);
  251|  25.5k|            SCN_UNREACHABLE;
  252|  25.5k|        }
  253|  25.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  25.5k|    {
  205|  25.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  25.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  25.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  25.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  25.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  25.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  25.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 25.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  25.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  25.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  25.5k|    {
  223|  25.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  25.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  25.5k|            auto rd = make_reader<T, char_type>();
  228|  25.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  25.5k|                return unexpected(e);
  230|  25.5k|            }
  231|       |
  232|  25.5k|            return impl(rd, range, value);
  233|  25.5k|        }
  234|  25.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  25.5k|            auto rd = make_reader<T, char_type>();
  236|  25.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  25.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 25.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  25.5k|                return impl(rd, range, value);
  242|  25.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  25.5k|        else {
  250|  25.5k|            SCN_EXPECT(false);
  251|  25.5k|            SCN_UNREACHABLE;
  252|  25.5k|        }
  253|  25.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  25.5k|    {
  205|  25.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  25.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  25.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  25.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  25.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  25.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  25.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 25.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  25.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  25.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  25.5k|    {
  223|  25.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  25.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  25.5k|            auto rd = make_reader<T, char_type>();
  228|  25.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  25.5k|                return unexpected(e);
  230|  25.5k|            }
  231|       |
  232|  25.5k|            return impl(rd, range, value);
  233|  25.5k|        }
  234|  25.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  25.5k|            auto rd = make_reader<T, char_type>();
  236|  25.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 25.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  25.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 25.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  25.5k|                return impl(rd, range, value);
  242|  25.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  25.5k|        else {
  250|  25.5k|            SCN_EXPECT(false);
  251|  25.5k|            SCN_UNREACHABLE;
  252|  25.5k|        }
  253|  25.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  25.5k|    {
  205|  25.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  25.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 25.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  25.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  25.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  25.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  25.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  25.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 25.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  25.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  25.5k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.03M|{
   43|  2.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.6k, False: 2.01M]
  |  |  ------------------
  ------------------
   44|  19.6k|        return unexpected(e);
   45|  19.6k|    }
   46|       |
   47|  2.01M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.01M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.01M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.01M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  121|   183k|    {
  122|   183k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   183k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   183k|                          basic_contiguous_scan_context<char_type>>) {
  126|   183k|            auto rd = make_reader<T, char_type>();
  127|   183k|            return impl(rd, range, value);
  128|   183k|        }
  129|   183k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   183k|            auto rd = make_reader<T, char_type>();
  131|   183k|            if (!is_segment_contiguous(range)) {
  132|   183k|                return impl(rd, range, value);
  133|   183k|            }
  134|   183k|            auto crange = get_as_contiguous(range);
  135|   183k|            SCN_TRY(it, impl(rd, crange, value));
  136|   183k|            return ranges_polyfill::batch_next(
  137|   183k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   183k|        }
  139|   183k|        else {
  140|   183k|            SCN_EXPECT(false);
  141|   183k|            SCN_UNREACHABLE;
  142|   183k|        }
  143|   183k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   183k|    {
  112|   183k|        SCN_TRY(it,
  ------------------
  |  |   71|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.08k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.08k|    }                                                  \
  |  |  |  |   70|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   181k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   181k|                    .transform_error(make_eof_scan_error));
  115|   181k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   181k|                               loc);
  117|   183k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|   208k|    {
  122|   208k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   208k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   208k|                          basic_contiguous_scan_context<char_type>>) {
  126|   208k|            auto rd = make_reader<T, char_type>();
  127|   208k|            return impl(rd, range, value);
  128|   208k|        }
  129|   208k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   208k|            auto rd = make_reader<T, char_type>();
  131|   208k|            if (!is_segment_contiguous(range)) {
  132|   208k|                return impl(rd, range, value);
  133|   208k|            }
  134|   208k|            auto crange = get_as_contiguous(range);
  135|   208k|            SCN_TRY(it, impl(rd, crange, value));
  136|   208k|            return ranges_polyfill::batch_next(
  137|   208k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   208k|        }
  139|   208k|        else {
  140|   208k|            SCN_EXPECT(false);
  141|   208k|            SCN_UNREACHABLE;
  142|   208k|        }
  143|   208k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   208k|    {
  112|   208k|        SCN_TRY(it,
  ------------------
  |  |   71|   208k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   208k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   208k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.41k, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.41k|    }                                                  \
  |  |  |  |   70|   208k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   206k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   206k|                    .transform_error(make_eof_scan_error));
  115|   206k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   206k|                               loc);
  117|   208k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  121|   214k|    {
  122|   214k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   214k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   214k|                          basic_contiguous_scan_context<char_type>>) {
  126|   214k|            auto rd = make_reader<T, char_type>();
  127|   214k|            return impl(rd, range, value);
  128|   214k|        }
  129|   214k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   214k|            auto rd = make_reader<T, char_type>();
  131|   214k|            if (!is_segment_contiguous(range)) {
  132|   214k|                return impl(rd, range, value);
  133|   214k|            }
  134|   214k|            auto crange = get_as_contiguous(range);
  135|   214k|            SCN_TRY(it, impl(rd, crange, value));
  136|   214k|            return ranges_polyfill::batch_next(
  137|   214k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   214k|        }
  139|   214k|        else {
  140|   214k|            SCN_EXPECT(false);
  141|   214k|            SCN_UNREACHABLE;
  142|   214k|        }
  143|   214k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   214k|    {
  112|   214k|        SCN_TRY(it,
  ------------------
  |  |   71|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   211k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   211k|                    .transform_error(make_eof_scan_error));
  115|   211k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   211k|                               loc);
  117|   214k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  222|   443k|    {
  223|   443k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   443k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   443k|                          basic_contiguous_scan_context<char_type>>) {
  227|   443k|            auto rd = make_reader<T, char_type>();
  228|   443k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   443k|            return impl(rd, range, value);
  233|   443k|        }
  234|   443k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   443k|            auto rd = make_reader<T, char_type>();
  236|   443k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   443k|                return unexpected(e);
  238|   443k|            }
  239|       |
  240|   443k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   443k|                return impl(rd, range, value);
  242|   443k|            }
  243|       |
  244|   443k|            auto crange = get_as_contiguous(range);
  245|   443k|            SCN_TRY(it, impl(rd, crange, value));
  246|   443k|            return ranges_polyfill::batch_next(
  247|   443k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   443k|        }
  249|   443k|        else {
  250|   443k|            SCN_EXPECT(false);
  251|   443k|            SCN_UNREACHABLE;
  252|   443k|        }
  253|   443k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   443k|    {
  205|   443k|        SCN_TRY(it,
  ------------------
  |  |   71|   443k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   443k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   443k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.52k, False: 438k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.52k|    }                                                  \
  |  |  |  |   70|   443k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   438k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   438k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   438k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   438k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 438k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   438k|        return rd.read_specs(subr, specs, value, loc);
  218|   438k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|   490k|    {
  223|   490k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   490k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   490k|                          basic_contiguous_scan_context<char_type>>) {
  227|   490k|            auto rd = make_reader<T, char_type>();
  228|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 490k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   490k|            return impl(rd, range, value);
  233|   490k|        }
  234|   490k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   490k|            auto rd = make_reader<T, char_type>();
  236|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   490k|                return unexpected(e);
  238|   490k|            }
  239|       |
  240|   490k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   490k|                return impl(rd, range, value);
  242|   490k|            }
  243|       |
  244|   490k|            auto crange = get_as_contiguous(range);
  245|   490k|            SCN_TRY(it, impl(rd, crange, value));
  246|   490k|            return ranges_polyfill::batch_next(
  247|   490k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   490k|        }
  249|   490k|        else {
  250|   490k|            SCN_EXPECT(false);
  251|   490k|            SCN_UNREACHABLE;
  252|   490k|        }
  253|   490k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   490k|    {
  205|   490k|        SCN_TRY(it,
  ------------------
  |  |   71|   490k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   490k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   490k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.22k, False: 484k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.22k|    }                                                  \
  |  |  |  |   70|   490k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   484k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   484k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   484k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   484k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 484k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   484k|        return rd.read_specs(subr, specs, value, loc);
  218|   484k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  222|   497k|    {
  223|   497k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   497k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   497k|                          basic_contiguous_scan_context<char_type>>) {
  227|   497k|            auto rd = make_reader<T, char_type>();
  228|   497k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 497k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   497k|            return impl(rd, range, value);
  233|   497k|        }
  234|   497k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   497k|            auto rd = make_reader<T, char_type>();
  236|   497k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   497k|                return unexpected(e);
  238|   497k|            }
  239|       |
  240|   497k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   497k|                return impl(rd, range, value);
  242|   497k|            }
  243|       |
  244|   497k|            auto crange = get_as_contiguous(range);
  245|   497k|            SCN_TRY(it, impl(rd, crange, value));
  246|   497k|            return ranges_polyfill::batch_next(
  247|   497k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   497k|        }
  249|   497k|        else {
  250|   497k|            SCN_EXPECT(false);
  251|   497k|            SCN_UNREACHABLE;
  252|   497k|        }
  253|   497k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   497k|    {
  205|   497k|        SCN_TRY(it,
  ------------------
  |  |   71|   497k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   497k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   497k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.51k, False: 491k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.51k|    }                                                  \
  |  |  |  |   70|   497k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   491k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   491k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   491k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   491k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 491k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   491k|        return rd.read_specs(subr, specs, value, loc);
  218|   491k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   177k|{
   43|   177k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   177k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 177k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   177k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   177k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  13.6k|    {
  122|  13.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.6k|            auto rd = make_reader<T, char_type>();
  127|  13.6k|            return impl(rd, range, value);
  128|  13.6k|        }
  129|  13.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.6k|            auto rd = make_reader<T, char_type>();
  131|  13.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.6k, False: 0]
  ------------------
  132|  13.6k|                return impl(rd, range, value);
  133|  13.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.6k|        else {
  140|  13.6k|            SCN_EXPECT(false);
  141|  13.6k|            SCN_UNREACHABLE;
  142|  13.6k|        }
  143|  13.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.6k|    {
  112|  13.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.6k|                    .transform_error(make_eof_scan_error));
  115|  13.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.6k|                               loc);
  117|  13.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  13.6k|    {
  122|  13.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.6k|            auto rd = make_reader<T, char_type>();
  127|  13.6k|            return impl(rd, range, value);
  128|  13.6k|        }
  129|  13.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.6k|            auto rd = make_reader<T, char_type>();
  131|  13.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.6k, False: 0]
  ------------------
  132|  13.6k|                return impl(rd, range, value);
  133|  13.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.6k|        else {
  140|  13.6k|            SCN_EXPECT(false);
  141|  13.6k|            SCN_UNREACHABLE;
  142|  13.6k|        }
  143|  13.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.6k|    {
  112|  13.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.6k|                    .transform_error(make_eof_scan_error));
  115|  13.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.6k|                               loc);
  117|  13.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  13.6k|    {
  122|  13.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  13.6k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  13.6k|            auto rd = make_reader<T, char_type>();
  127|  13.6k|            return impl(rd, range, value);
  128|  13.6k|        }
  129|  13.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.6k|            auto rd = make_reader<T, char_type>();
  131|  13.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 13.6k, False: 0]
  ------------------
  132|  13.6k|                return impl(rd, range, value);
  133|  13.6k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  13.6k|        else {
  140|  13.6k|            SCN_EXPECT(false);
  141|  13.6k|            SCN_UNREACHABLE;
  142|  13.6k|        }
  143|  13.6k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  13.6k|    {
  112|  13.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  13.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  13.6k|                    .transform_error(make_eof_scan_error));
  115|  13.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  13.6k|                               loc);
  117|  13.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  45.5k|    {
  223|  45.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.5k|            auto rd = make_reader<T, char_type>();
  228|  45.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.5k|                return unexpected(e);
  230|  45.5k|            }
  231|       |
  232|  45.5k|            return impl(rd, range, value);
  233|  45.5k|        }
  234|  45.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.5k|            auto rd = make_reader<T, char_type>();
  236|  45.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.5k|                return impl(rd, range, value);
  242|  45.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.5k|        else {
  250|  45.5k|            SCN_EXPECT(false);
  251|  45.5k|            SCN_UNREACHABLE;
  252|  45.5k|        }
  253|  45.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.5k|    {
  205|  45.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  45.5k|    {
  223|  45.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.5k|            auto rd = make_reader<T, char_type>();
  228|  45.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.5k|                return unexpected(e);
  230|  45.5k|            }
  231|       |
  232|  45.5k|            return impl(rd, range, value);
  233|  45.5k|        }
  234|  45.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.5k|            auto rd = make_reader<T, char_type>();
  236|  45.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.5k|                return impl(rd, range, value);
  242|  45.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.5k|        else {
  250|  45.5k|            SCN_EXPECT(false);
  251|  45.5k|            SCN_UNREACHABLE;
  252|  45.5k|        }
  253|  45.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.5k|    {
  205|  45.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  45.5k|    {
  223|  45.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.5k|            auto rd = make_reader<T, char_type>();
  228|  45.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.5k|                return unexpected(e);
  230|  45.5k|            }
  231|       |
  232|  45.5k|            return impl(rd, range, value);
  233|  45.5k|        }
  234|  45.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.5k|            auto rd = make_reader<T, char_type>();
  236|  45.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.5k|                return impl(rd, range, value);
  242|  45.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.5k|        else {
  250|  45.5k|            SCN_EXPECT(false);
  251|  45.5k|            SCN_UNREACHABLE;
  252|  45.5k|        }
  253|  45.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.5k|    {
  205|  45.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.5k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  1.13M|{
  110|  1.13M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.13M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   199k|{
   89|   199k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 199k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   199k|    constexpr auto enc = get_encoding<CharT>();
   94|   199k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   199k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   199k|    }
   97|   199k|    else if constexpr (enc == encoding::utf16) {
   98|   199k|        return simdutf::validate_utf16(
   99|   199k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   199k|    }
  101|   199k|    else if constexpr (enc == encoding::utf32) {
  102|   199k|        return simdutf::validate_utf32(
  103|   199k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   199k|    }
  105|   199k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  99.6k|{
  449|  99.6k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 99.6k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  99.6k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  99.6k|        SCN_EXPECT(output.size() >= input.size());
  455|  99.6k|        std::memcpy(output.data(), input.data(),
  456|  99.6k|                    input.size() * sizeof(SourceCharT));
  457|  99.6k|        return input.size();
  458|  99.6k|    }
  459|       |
  460|  99.6k|    const auto result = [&]() {
  461|  99.6k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  99.6k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  99.6k|        if constexpr (src_enc == encoding::utf8) {
  465|  99.6k|            if constexpr (dest_enc == encoding::utf16) {
  466|  99.6k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  99.6k|                    input.data(), input.size(),
  468|  99.6k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  99.6k|            }
  470|  99.6k|            else {
  471|  99.6k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  99.6k|                    input.data(), input.size(),
  473|  99.6k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  99.6k|            }
  475|  99.6k|        }
  476|  99.6k|        else if constexpr (src_enc == encoding::utf16) {
  477|  99.6k|            if constexpr (dest_enc == encoding::utf8) {
  478|  99.6k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  99.6k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  99.6k|                    input.size(), output.data());
  481|  99.6k|            }
  482|  99.6k|            else {
  483|  99.6k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  99.6k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  99.6k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  99.6k|            }
  487|  99.6k|        }
  488|  99.6k|        else if constexpr (src_enc == encoding::utf32) {
  489|  99.6k|            if constexpr (dest_enc == encoding::utf8) {
  490|  99.6k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  99.6k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  99.6k|                    input.size(), output.data());
  493|  99.6k|            }
  494|  99.6k|            else {
  495|  99.6k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  99.6k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  99.6k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  99.6k|            }
  499|  99.6k|        }
  500|  99.6k|    }();
  501|       |
  502|  99.6k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|  99.6k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|  99.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|  99.6k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|  99.6k|    const auto result = [&]() {
  461|  99.6k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  99.6k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  99.6k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|  99.6k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|  99.6k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  99.6k|                    input.data(), input.size(),
  468|  99.6k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  99.6k|            }
  470|  99.6k|            else {
  471|  99.6k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  99.6k|                    input.data(), input.size(),
  473|  99.6k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  99.6k|            }
  475|  99.6k|        }
  476|  99.6k|        else if constexpr (src_enc == encoding::utf16) {
  477|  99.6k|            if constexpr (dest_enc == encoding::utf8) {
  478|  99.6k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  99.6k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  99.6k|                    input.size(), output.data());
  481|  99.6k|            }
  482|  99.6k|            else {
  483|  99.6k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  99.6k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  99.6k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  99.6k|            }
  487|  99.6k|        }
  488|  99.6k|        else if constexpr (src_enc == encoding::utf32) {
  489|  99.6k|            if constexpr (dest_enc == encoding::utf8) {
  490|  99.6k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  99.6k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  99.6k|                    input.size(), output.data());
  493|  99.6k|            }
  494|  99.6k|            else {
  495|  99.6k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  99.6k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  99.6k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  99.6k|            }
  499|  99.6k|        }
  500|  99.6k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   199k|{
  116|   199k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   199k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   199k|    constexpr auto enc = get_encoding<CharT>();
  124|   199k|    char32_t output{};
  125|   199k|    size_t ret{};
  126|   199k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   199k|#ifndef NDEBUG
  128|   199k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 199k, False: 0]
  ------------------
  129|   199k|            auto len =
  130|   199k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   199k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   199k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   199k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|   199k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   199k|    return static_cast<char32_t>(output);
  156|   199k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   485k|{
  263|   485k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   485k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.5k, False: 465k]
  |  |  ------------------
  ------------------
  267|  19.5k|        return {get_start_of_next_code_point(input),
  268|  19.5k|                detail::invalid_code_point};
  269|  19.5k|    }
  270|   465k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.83k, False: 462k]
  |  |  ------------------
  ------------------
  271|  2.83k|        return {input.end(), detail::invalid_code_point};
  272|  2.83k|    }
  273|       |
  274|   462k|    constexpr auto enc = get_encoding<CharT>();
  275|   462k|    std::size_t result{1};
  276|   462k|    char32_t output{};
  277|   462k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   462k|        result = simdutf::convert_utf8_to_utf32(
  279|   462k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   462k|    }
  281|   462k|    else if constexpr (enc == encoding::utf16) {
  282|   462k|        result = simdutf::convert_utf16_to_utf32(
  283|   462k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   462k|    }
  285|   462k|    else if constexpr (enc == encoding::utf32) {
  286|   462k|        SCN_EXPECT(len == 1);
  287|   462k|        output = static_cast<char32_t>(input[0]);
  288|   462k|    }
  289|       |
  290|   462k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   462k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58.8k, False: 403k]
  |  |  ------------------
  ------------------
  291|  58.8k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  58.8k|                detail::invalid_code_point};
  293|  58.8k|    }
  294|       |
  295|   403k|    return {input.begin() + len, output};
  296|   462k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  78.4k|{
  248|  78.4k|    auto it = input.begin();
  249|   159k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 152k, False: 7.22k]
  ------------------
  250|   152k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 71.2k, False: 80.8k]
  ------------------
  251|  71.2k|            break;
  252|  71.2k|        }
  253|   152k|    }
  254|       |
  255|  78.4k|    return it;
  256|  78.4k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  73.5M|{
  110|  73.5M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  73.5M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  4.95M|{
  449|  4.95M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 4.95M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  4.95M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  4.95M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  4.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  4.95M|                    input.size() * sizeof(SourceCharT));
  457|  4.95M|        return input.size();
  458|  4.95M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   532k|{
  116|   532k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   532k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   532k|    constexpr auto enc = get_encoding<CharT>();
  124|   532k|    char32_t output{};
  125|   532k|    size_t ret{};
  126|   532k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   532k|#ifndef NDEBUG
  128|   532k|        if (validate_unicode(input)) {
  129|   532k|            auto len =
  130|   532k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   532k|            SCN_EXPECT(len == 1);
  132|   532k|        }
  133|   532k|#endif
  134|   532k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   532k|    }
  136|   532k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|   532k|#ifndef NDEBUG
  138|   532k|        if (validate_unicode(input)) {
  139|   532k|            auto len = simdutf::utf32_length_from_utf16(
  140|   532k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   532k|            SCN_EXPECT(len == 1);
  142|   532k|        }
  143|   532k|#endif
  144|   532k|        ret = simdutf::convert_utf16_to_utf32(
  145|   532k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   532k|    }
  147|   532k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|   532k|        output = static_cast<char32_t>(input[0]);
  149|   532k|        ret = output < detail::invalid_code_point;
  150|   532k|    }
  151|       |
  152|   532k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   532k|    return static_cast<char32_t>(output);
  156|   532k|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  39.6M|{
   29|       |    // Pattern_White_Space property
   30|  39.6M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 39.2M, False: 454k]
  |  Branch (30:27): [True: 2.14M, False: 37.0M]
  ------------------
   31|  39.6M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 923k, False: 36.6M]
  ------------------
   32|  39.6M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 70.8k, False: 36.5M]
  ------------------
   33|  39.6M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 2.03k, False: 36.5M]
  ------------------
   34|  39.6M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 1.69k, False: 36.5M]
  ------------------
   35|  39.6M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 5.14k, False: 36.5M]
  ------------------
   36|  39.6M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 36.5M]
  ------------------
   37|  39.6M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|  52.4k|{
   69|  52.4k|    return static_cast<unsigned char>(ch) <= 127;
   70|  52.4k|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|  52.4k|{
   74|  52.4k|#if WCHAR_MIN < 0
   75|  52.4k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 52.4k, False: 0]
  |  Branch (75:23): [True: 52.3k, False: 109]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|  52.4k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  46.7M|{
   58|  46.7M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  46.7M|        static_cast<unsigned char>(ch))];
   60|  46.7M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  8.45M|{
   92|  8.45M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  8.45M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  1.62M|    {
   57|  1.62M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  4.80M|    {
   61|  4.80M|        return m_current;
   62|  4.80M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  3.17M|    {
   66|  3.17M|        return m_range.end();
   67|  3.17M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  1.55M|    {
   81|  1.55M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.55M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.55M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.55M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.55M|        }
   87|  1.55M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.55M|    static_cast<    \
  |  |  247|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.55M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  1.62M|    {
   71|  1.62M|        return ranges::subrange{begin(), end()};
   72|  1.62M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  1.43M|    {
   57|  1.43M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  4.16M|    {
   61|  4.16M|        return m_current;
   62|  4.16M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  2.72M|    {
   66|  2.72M|        return m_range.end();
   67|  2.72M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.29M|    {
   81|  1.29M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.29M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.29M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.29M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.29M|        }
   87|  1.29M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.29M|    static_cast<    \
  |  |  247|  1.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.29M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  1.43M|    {
   71|  1.43M|        return ranges::subrange{begin(), end()};
   72|  1.43M|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.30M|    {
  205|  2.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.30M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   208k|    {
  196|   208k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   208k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   208k|              cvref<T> obj = *get<T>(fn);
  187|   208k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   208k|                  obj(static_cast<decltype(args)>(args)...);
  189|   208k|              }
  190|   208k|              else {
  191|   208k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   208k|              }
  193|   208k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   208k|    {
  126|   208k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   208k|            return static_cast<T*>(s.m_cp);
  128|   208k|        }
  129|   208k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   208k|            return static_cast<T*>(s.m_p);
  131|   208k|        }
  132|   208k|        else {
  133|   208k|            return reinterpret_cast<T*>(s.m_fp);
  134|   208k|        }
  135|   208k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  14.6M|    {
  205|  14.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  14.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  14.6M|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.34M|    {
  196|  1.34M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  7.30M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.30M|              cvref<T> obj = *get<T>(fn);
  187|  7.30M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.30M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.30M|              }
  190|  7.30M|              else {
  191|  7.30M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.30M|              }
  193|  7.30M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  7.30M|    {
  126|  7.30M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.30M|            return static_cast<T*>(s.m_cp);
  128|  7.30M|        }
  129|  7.30M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.30M|            return static_cast<T*>(s.m_p);
  131|  7.30M|        }
  132|  7.30M|        else {
  133|  7.30M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.30M|        }
  135|  7.30M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  1.34M|        {
  104|  1.34M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_:
  195|  5.51k|    {
  196|  5.51k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  52.4k|              cvref<T> obj = *get<T>(fn);
  187|  52.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  52.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  52.4k|              }
  190|  52.4k|              else {
  191|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  52.4k|              }
  193|  52.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlcE_EEDaNS3_7storageE:
  125|  52.4k|    {
  126|  52.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  52.4k|            return static_cast<T*>(s.m_cp);
  128|  52.4k|        }
  129|  52.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  52.4k|            return static_cast<T*>(s.m_p);
  131|  52.4k|        }
  132|  52.4k|        else {
  133|  52.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  52.4k|        }
  135|  52.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_LPv0EEEPSK_:
  103|  5.51k|        {
  104|  5.51k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_:
  195|  66.5k|    {
  196|  66.5k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   229k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   229k|              cvref<T> obj = *get<T>(fn);
  187|   229k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   229k|                  obj(static_cast<decltype(args)>(args)...);
  189|   229k|              }
  190|   229k|              else {
  191|   229k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   229k|              }
  193|   229k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  125|   229k|    {
  126|   229k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   229k|            return static_cast<T*>(s.m_cp);
  128|   229k|        }
  129|   229k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   229k|            return static_cast<T*>(s.m_p);
  131|   229k|        }
  132|   229k|        else {
  133|   229k|            return reinterpret_cast<T*>(s.m_fp);
  134|   229k|        }
  135|   229k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  103|  66.5k|        {
  104|  66.5k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|  1.17M|    {
  196|  1.17M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|  6.91M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.91M|              cvref<T> obj = *get<T>(fn);
  187|  6.91M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.91M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.91M|              }
  190|  6.91M|              else {
  191|  6.91M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.91M|              }
  193|  6.91M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|  6.91M|    {
  126|  6.91M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.91M|            return static_cast<T*>(s.m_cp);
  128|  6.91M|        }
  129|  6.91M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.91M|            return static_cast<T*>(s.m_p);
  131|  6.91M|        }
  132|  6.91M|        else {
  133|  6.91M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.91M|        }
  135|  6.91M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|  1.17M|        {
  104|  1.17M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   208k|        {
  104|   208k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   239k|    {
  196|   239k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   239k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   239k|              cvref<T> obj = *get<T>(fn);
  187|   239k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   239k|                  obj(static_cast<decltype(args)>(args)...);
  189|   239k|              }
  190|   239k|              else {
  191|   239k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   239k|              }
  193|   239k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   239k|    {
  126|   239k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   239k|            return static_cast<T*>(s.m_cp);
  128|   239k|        }
  129|   239k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   239k|            return static_cast<T*>(s.m_p);
  131|   239k|        }
  132|   239k|        else {
  133|   239k|            return reinterpret_cast<T*>(s.m_fp);
  134|   239k|        }
  135|   239k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   239k|        {
  104|   239k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   245k|    {
  196|   245k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   245k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   245k|              cvref<T> obj = *get<T>(fn);
  187|   245k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   245k|                  obj(static_cast<decltype(args)>(args)...);
  189|   245k|              }
  190|   245k|              else {
  191|   245k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   245k|              }
  193|   245k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   245k|    {
  126|   245k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   245k|            return static_cast<T*>(s.m_cp);
  128|   245k|        }
  129|   245k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   245k|            return static_cast<T*>(s.m_p);
  131|   245k|        }
  132|   245k|        else {
  133|   245k|            return reinterpret_cast<T*>(s.m_fp);
  134|   245k|        }
  135|   245k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   245k|        {
  104|   245k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  43.8M|    {
  205|  43.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  43.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  43.8M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  2.29M|    {
  196|  2.29M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  4.64M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.64M|              cvref<T> obj = *get<T>(fn);
  187|  4.64M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.64M|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.64M|              }
  190|  4.64M|              else {
  191|  4.64M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.64M|              }
  193|  4.64M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  4.64M|    {
  126|  4.64M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.64M|            return static_cast<T*>(s.m_cp);
  128|  4.64M|        }
  129|  4.64M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  4.64M|            return static_cast<T*>(s.m_p);
  131|  4.64M|        }
  132|  4.64M|        else {
  133|  4.64M|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.64M|        }
  135|  4.64M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  2.29M|        {
  104|  2.29M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|  99.6k|    {
  196|  99.6k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   299k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   299k|              cvref<T> obj = *get<T>(fn);
  187|   299k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   299k|                  obj(static_cast<decltype(args)>(args)...);
  189|   299k|              }
  190|   299k|              else {
  191|   299k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   299k|              }
  193|   299k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   299k|    {
  126|   299k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   299k|            return static_cast<T*>(s.m_cp);
  128|   299k|        }
  129|   299k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   299k|            return static_cast<T*>(s.m_p);
  131|   299k|        }
  132|   299k|        else {
  133|   299k|            return reinterpret_cast<T*>(s.m_fp);
  134|   299k|        }
  135|   299k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|  99.6k|        {
  104|  99.6k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|  99.6k|    {
  205|  99.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  99.6k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.66k|    {
  196|  7.66k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.66k|              cvref<T> obj = *get<T>(fn);
  187|  7.66k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.66k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.66k|              }
  190|  7.66k|              else {
  191|  7.66k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.66k|              }
  193|  7.66k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.66k|    {
  126|  7.66k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.66k|            return static_cast<T*>(s.m_cp);
  128|  7.66k|        }
  129|  7.66k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.66k|            return static_cast<T*>(s.m_p);
  131|  7.66k|        }
  132|  7.66k|        else {
  133|  7.66k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.66k|        }
  135|  7.66k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  15.3k|    {
  196|  15.3k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.3k|              cvref<T> obj = *get<T>(fn);
  187|  15.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.3k|              }
  190|  15.3k|              else {
  191|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.3k|              }
  193|  15.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|  15.3k|    {
  126|  15.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.3k|            return static_cast<T*>(s.m_cp);
  128|  15.3k|        }
  129|  15.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  15.3k|            return static_cast<T*>(s.m_p);
  131|  15.3k|        }
  132|  15.3k|        else {
  133|  15.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.3k|        }
  135|  15.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  15.3k|        {
  104|  15.3k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  84.3k|    {
  196|  84.3k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  84.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  84.3k|              cvref<T> obj = *get<T>(fn);
  187|  84.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  84.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  84.3k|              }
  190|  84.3k|              else {
  191|  84.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  84.3k|              }
  193|  84.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|  84.3k|    {
  126|  84.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  84.3k|            return static_cast<T*>(s.m_cp);
  128|  84.3k|        }
  129|  84.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  84.3k|            return static_cast<T*>(s.m_p);
  131|  84.3k|        }
  132|  84.3k|        else {
  133|  84.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  84.3k|        }
  135|  84.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  84.3k|        {
  104|  84.3k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.66k|        {
  104|  7.66k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.66k|    {
  196|  7.66k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.66k|              cvref<T> obj = *get<T>(fn);
  187|  7.66k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.66k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.66k|              }
  190|  7.66k|              else {
  191|  7.66k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.66k|              }
  193|  7.66k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.66k|    {
  126|  7.66k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.66k|            return static_cast<T*>(s.m_cp);
  128|  7.66k|        }
  129|  7.66k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.66k|            return static_cast<T*>(s.m_p);
  131|  7.66k|        }
  132|  7.66k|        else {
  133|  7.66k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.66k|        }
  135|  7.66k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.66k|        {
  104|  7.66k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.66k|    {
  196|  7.66k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.66k|              cvref<T> obj = *get<T>(fn);
  187|  7.66k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.66k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.66k|              }
  190|  7.66k|              else {
  191|  7.66k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.66k|              }
  193|  7.66k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.66k|    {
  126|  7.66k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.66k|            return static_cast<T*>(s.m_cp);
  128|  7.66k|        }
  129|  7.66k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.66k|            return static_cast<T*>(s.m_p);
  131|  7.66k|        }
  132|  7.66k|        else {
  133|  7.66k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.66k|        }
  135|  7.66k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.66k|        {
  104|  7.66k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   138k|    {
  196|   138k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   138k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   138k|              cvref<T> obj = *get<T>(fn);
  187|   138k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   138k|                  obj(static_cast<decltype(args)>(args)...);
  189|   138k|              }
  190|   138k|              else {
  191|   138k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   138k|              }
  193|   138k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   138k|    {
  126|   138k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   138k|            return static_cast<T*>(s.m_cp);
  128|   138k|        }
  129|   138k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   138k|            return static_cast<T*>(s.m_p);
  131|   138k|        }
  132|   138k|        else {
  133|   138k|            return reinterpret_cast<T*>(s.m_fp);
  134|   138k|        }
  135|   138k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   138k|        {
  104|   138k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   356k|    {
  196|   356k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   356k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   356k|              cvref<T> obj = *get<T>(fn);
  187|   356k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   356k|                  obj(static_cast<decltype(args)>(args)...);
  189|   356k|              }
  190|   356k|              else {
  191|   356k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   356k|              }
  193|   356k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   356k|    {
  126|   356k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   356k|            return static_cast<T*>(s.m_cp);
  128|   356k|        }
  129|   356k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   356k|            return static_cast<T*>(s.m_p);
  131|   356k|        }
  132|   356k|        else {
  133|   356k|            return reinterpret_cast<T*>(s.m_fp);
  134|   356k|        }
  135|   356k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   356k|        {
  104|   356k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   159k|    {
  196|   159k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   159k|              cvref<T> obj = *get<T>(fn);
  187|   159k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   159k|                  obj(static_cast<decltype(args)>(args)...);
  189|   159k|              }
  190|   159k|              else {
  191|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   159k|              }
  193|   159k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   159k|    {
  126|   159k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   159k|            return static_cast<T*>(s.m_cp);
  128|   159k|        }
  129|   159k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   159k|            return static_cast<T*>(s.m_p);
  131|   159k|        }
  132|   159k|        else {
  133|   159k|            return reinterpret_cast<T*>(s.m_fp);
  134|   159k|        }
  135|   159k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   159k|        {
  104|   159k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   393k|    {
  196|   393k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   393k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   393k|              cvref<T> obj = *get<T>(fn);
  187|   393k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   393k|                  obj(static_cast<decltype(args)>(args)...);
  189|   393k|              }
  190|   393k|              else {
  191|   393k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   393k|              }
  193|   393k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   393k|    {
  126|   393k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   393k|            return static_cast<T*>(s.m_cp);
  128|   393k|        }
  129|   393k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   393k|            return static_cast<T*>(s.m_p);
  131|   393k|        }
  132|   393k|        else {
  133|   393k|            return reinterpret_cast<T*>(s.m_fp);
  134|   393k|        }
  135|   393k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   393k|        {
  104|   393k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   163k|    {
  196|   163k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   163k|              cvref<T> obj = *get<T>(fn);
  187|   163k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   163k|                  obj(static_cast<decltype(args)>(args)...);
  189|   163k|              }
  190|   163k|              else {
  191|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   163k|              }
  193|   163k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   163k|    {
  126|   163k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   163k|            return static_cast<T*>(s.m_cp);
  128|   163k|        }
  129|   163k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   163k|            return static_cast<T*>(s.m_p);
  131|   163k|        }
  132|   163k|        else {
  133|   163k|            return reinterpret_cast<T*>(s.m_fp);
  134|   163k|        }
  135|   163k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   163k|        {
  104|   163k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   398k|    {
  196|   398k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   398k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   398k|              cvref<T> obj = *get<T>(fn);
  187|   398k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   398k|                  obj(static_cast<decltype(args)>(args)...);
  189|   398k|              }
  190|   398k|              else {
  191|   398k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   398k|              }
  193|   398k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   398k|    {
  126|   398k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   398k|            return static_cast<T*>(s.m_cp);
  128|   398k|        }
  129|   398k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   398k|            return static_cast<T*>(s.m_p);
  131|   398k|        }
  132|   398k|        else {
  133|   398k|            return reinterpret_cast<T*>(s.m_fp);
  134|   398k|        }
  135|   398k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   398k|        {
  104|   398k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.11k|    {
  196|  5.11k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.11k|              cvref<T> obj = *get<T>(fn);
  187|  5.11k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.11k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.11k|              }
  190|  5.11k|              else {
  191|  5.11k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.11k|              }
  193|  5.11k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.11k|    {
  126|  5.11k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.11k|            return static_cast<T*>(s.m_cp);
  128|  5.11k|        }
  129|  5.11k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.11k|            return static_cast<T*>(s.m_p);
  131|  5.11k|        }
  132|  5.11k|        else {
  133|  5.11k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.11k|        }
  135|  5.11k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.11k|        {
  104|  5.11k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  20.4k|    {
  196|  20.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.4k|              cvref<T> obj = *get<T>(fn);
  187|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.4k|              }
  190|  20.4k|              else {
  191|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.4k|              }
  193|  20.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  20.4k|    {
  126|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.4k|            return static_cast<T*>(s.m_cp);
  128|  20.4k|        }
  129|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.4k|            return static_cast<T*>(s.m_p);
  131|  20.4k|        }
  132|  20.4k|        else {
  133|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.4k|        }
  135|  20.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  20.4k|        {
  104|  20.4k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.11k|    {
  196|  5.11k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.11k|              cvref<T> obj = *get<T>(fn);
  187|  5.11k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.11k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.11k|              }
  190|  5.11k|              else {
  191|  5.11k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.11k|              }
  193|  5.11k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.11k|    {
  126|  5.11k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.11k|            return static_cast<T*>(s.m_cp);
  128|  5.11k|        }
  129|  5.11k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.11k|            return static_cast<T*>(s.m_p);
  131|  5.11k|        }
  132|  5.11k|        else {
  133|  5.11k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.11k|        }
  135|  5.11k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.11k|        {
  104|  5.11k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  20.4k|    {
  196|  20.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.4k|              cvref<T> obj = *get<T>(fn);
  187|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.4k|              }
  190|  20.4k|              else {
  191|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.4k|              }
  193|  20.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  20.4k|    {
  126|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.4k|            return static_cast<T*>(s.m_cp);
  128|  20.4k|        }
  129|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.4k|            return static_cast<T*>(s.m_p);
  131|  20.4k|        }
  132|  20.4k|        else {
  133|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.4k|        }
  135|  20.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  20.4k|        {
  104|  20.4k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.11k|    {
  196|  5.11k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.11k|              cvref<T> obj = *get<T>(fn);
  187|  5.11k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.11k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.11k|              }
  190|  5.11k|              else {
  191|  5.11k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.11k|              }
  193|  5.11k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.11k|    {
  126|  5.11k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.11k|            return static_cast<T*>(s.m_cp);
  128|  5.11k|        }
  129|  5.11k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.11k|            return static_cast<T*>(s.m_p);
  131|  5.11k|        }
  132|  5.11k|        else {
  133|  5.11k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.11k|        }
  135|  5.11k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.11k|        {
  104|  5.11k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  20.4k|    {
  196|  20.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.4k|              cvref<T> obj = *get<T>(fn);
  187|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.4k|              }
  190|  20.4k|              else {
  191|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.4k|              }
  193|  20.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  20.4k|    {
  126|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.4k|            return static_cast<T*>(s.m_cp);
  128|  20.4k|        }
  129|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.4k|            return static_cast<T*>(s.m_p);
  131|  20.4k|        }
  132|  20.4k|        else {
  133|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.4k|        }
  135|  20.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  20.4k|        {
  104|  20.4k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  2.01M|    {
  196|  2.01M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  3.63M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  3.63M|              cvref<T> obj = *get<T>(fn);
  187|  3.63M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  3.63M|                  obj(static_cast<decltype(args)>(args)...);
  189|  3.63M|              }
  190|  3.63M|              else {
  191|  3.63M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  3.63M|              }
  193|  3.63M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  3.63M|    {
  126|  3.63M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  3.63M|            return static_cast<T*>(s.m_cp);
  128|  3.63M|        }
  129|  3.63M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  3.63M|            return static_cast<T*>(s.m_p);
  131|  3.63M|        }
  132|  3.63M|        else {
  133|  3.63M|            return reinterpret_cast<T*>(s.m_fp);
  134|  3.63M|        }
  135|  3.63M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  2.01M|        {
  104|  2.01M|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.01M|    {
  205|  2.01M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.01M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   181k|    {
  196|   181k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   181k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   181k|              cvref<T> obj = *get<T>(fn);
  187|   181k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   181k|                  obj(static_cast<decltype(args)>(args)...);
  189|   181k|              }
  190|   181k|              else {
  191|   181k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   181k|              }
  193|   181k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   181k|    {
  126|   181k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   181k|            return static_cast<T*>(s.m_cp);
  128|   181k|        }
  129|   181k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   181k|            return static_cast<T*>(s.m_p);
  131|   181k|        }
  132|   181k|        else {
  133|   181k|            return reinterpret_cast<T*>(s.m_fp);
  134|   181k|        }
  135|   181k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  11.0M|    {
  205|  11.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  11.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  11.0M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.24M|    {
  196|  1.24M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  5.50M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.50M|              cvref<T> obj = *get<T>(fn);
  187|  5.50M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.50M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.50M|              }
  190|  5.50M|              else {
  191|  5.50M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.50M|              }
  193|  5.50M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  5.50M|    {
  126|  5.50M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.50M|            return static_cast<T*>(s.m_cp);
  128|  5.50M|        }
  129|  5.50M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.50M|            return static_cast<T*>(s.m_p);
  131|  5.50M|        }
  132|  5.50M|        else {
  133|  5.50M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.50M|        }
  135|  5.50M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  1.24M|        {
  104|  1.24M|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_:
  195|  5.45k|    {
  196|  5.45k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  52.4k|              cvref<T> obj = *get<T>(fn);
  187|  52.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  52.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  52.4k|              }
  190|  52.4k|              else {
  191|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  52.4k|              }
  193|  52.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlwE_EEDaNS3_7storageE:
  125|  52.4k|    {
  126|  52.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  52.4k|            return static_cast<T*>(s.m_cp);
  128|  52.4k|        }
  129|  52.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  52.4k|            return static_cast<T*>(s.m_p);
  131|  52.4k|        }
  132|  52.4k|        else {
  133|  52.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  52.4k|        }
  135|  52.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_LPv0EEEPSK_:
  103|  5.45k|        {
  104|  5.45k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_:
  195|  57.5k|    {
  196|  57.5k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   198k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   198k|              cvref<T> obj = *get<T>(fn);
  187|   198k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   198k|                  obj(static_cast<decltype(args)>(args)...);
  189|   198k|              }
  190|   198k|              else {
  191|   198k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   198k|              }
  193|   198k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  125|   198k|    {
  126|   198k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   198k|            return static_cast<T*>(s.m_cp);
  128|   198k|        }
  129|   198k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   198k|            return static_cast<T*>(s.m_p);
  131|   198k|        }
  132|   198k|        else {
  133|   198k|            return reinterpret_cast<T*>(s.m_fp);
  134|   198k|        }
  135|   198k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  103|  57.5k|        {
  104|  57.5k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|  1.00M|    {
  196|  1.00M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|  5.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.07M|              cvref<T> obj = *get<T>(fn);
  187|  5.07M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.07M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.07M|              }
  190|  5.07M|              else {
  191|  5.07M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.07M|              }
  193|  5.07M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|  5.07M|    {
  126|  5.07M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.07M|            return static_cast<T*>(s.m_cp);
  128|  5.07M|        }
  129|  5.07M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.07M|            return static_cast<T*>(s.m_p);
  131|  5.07M|        }
  132|  5.07M|        else {
  133|  5.07M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.07M|        }
  135|  5.07M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|  1.00M|        {
  104|  1.00M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   181k|        {
  104|   181k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   206k|    {
  196|   206k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   206k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   206k|              cvref<T> obj = *get<T>(fn);
  187|   206k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   206k|                  obj(static_cast<decltype(args)>(args)...);
  189|   206k|              }
  190|   206k|              else {
  191|   206k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   206k|              }
  193|   206k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   206k|    {
  126|   206k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   206k|            return static_cast<T*>(s.m_cp);
  128|   206k|        }
  129|   206k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   206k|            return static_cast<T*>(s.m_p);
  131|   206k|        }
  132|   206k|        else {
  133|   206k|            return reinterpret_cast<T*>(s.m_fp);
  134|   206k|        }
  135|   206k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   206k|        {
  104|   206k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   211k|    {
  196|   211k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   211k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   211k|              cvref<T> obj = *get<T>(fn);
  187|   211k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   211k|                  obj(static_cast<decltype(args)>(args)...);
  189|   211k|              }
  190|   211k|              else {
  191|   211k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   211k|              }
  193|   211k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   211k|    {
  126|   211k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   211k|            return static_cast<T*>(s.m_cp);
  128|   211k|        }
  129|   211k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   211k|            return static_cast<T*>(s.m_p);
  131|   211k|        }
  132|   211k|        else {
  133|   211k|            return reinterpret_cast<T*>(s.m_fp);
  134|   211k|        }
  135|   211k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   211k|        {
  104|   211k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   120k|    {
  196|   120k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   120k|              cvref<T> obj = *get<T>(fn);
  187|   120k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   120k|                  obj(static_cast<decltype(args)>(args)...);
  189|   120k|              }
  190|   120k|              else {
  191|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   120k|              }
  193|   120k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   120k|    {
  126|   120k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   120k|            return static_cast<T*>(s.m_cp);
  128|   120k|        }
  129|   120k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   120k|            return static_cast<T*>(s.m_p);
  131|   120k|        }
  132|   120k|        else {
  133|   120k|            return reinterpret_cast<T*>(s.m_fp);
  134|   120k|        }
  135|   120k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   120k|        {
  104|   120k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   317k|    {
  196|   317k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   317k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   317k|              cvref<T> obj = *get<T>(fn);
  187|   317k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   317k|                  obj(static_cast<decltype(args)>(args)...);
  189|   317k|              }
  190|   317k|              else {
  191|   317k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   317k|              }
  193|   317k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   317k|    {
  126|   317k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   317k|            return static_cast<T*>(s.m_cp);
  128|   317k|        }
  129|   317k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   317k|            return static_cast<T*>(s.m_p);
  131|   317k|        }
  132|   317k|        else {
  133|   317k|            return reinterpret_cast<T*>(s.m_fp);
  134|   317k|        }
  135|   317k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   317k|        {
  104|   317k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   137k|    {
  196|   137k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   137k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   137k|              cvref<T> obj = *get<T>(fn);
  187|   137k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   137k|                  obj(static_cast<decltype(args)>(args)...);
  189|   137k|              }
  190|   137k|              else {
  191|   137k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   137k|              }
  193|   137k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   137k|    {
  126|   137k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   137k|            return static_cast<T*>(s.m_cp);
  128|   137k|        }
  129|   137k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   137k|            return static_cast<T*>(s.m_p);
  131|   137k|        }
  132|   137k|        else {
  133|   137k|            return reinterpret_cast<T*>(s.m_fp);
  134|   137k|        }
  135|   137k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   137k|        {
  104|   137k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   346k|    {
  196|   346k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   346k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   346k|              cvref<T> obj = *get<T>(fn);
  187|   346k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   346k|                  obj(static_cast<decltype(args)>(args)...);
  189|   346k|              }
  190|   346k|              else {
  191|   346k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   346k|              }
  193|   346k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   346k|    {
  126|   346k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   346k|            return static_cast<T*>(s.m_cp);
  128|   346k|        }
  129|   346k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   346k|            return static_cast<T*>(s.m_p);
  131|   346k|        }
  132|   346k|        else {
  133|   346k|            return reinterpret_cast<T*>(s.m_fp);
  134|   346k|        }
  135|   346k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   346k|        {
  104|   346k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   141k|    {
  196|   141k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   141k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   141k|              cvref<T> obj = *get<T>(fn);
  187|   141k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   141k|                  obj(static_cast<decltype(args)>(args)...);
  189|   141k|              }
  190|   141k|              else {
  191|   141k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   141k|              }
  193|   141k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   141k|    {
  126|   141k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   141k|            return static_cast<T*>(s.m_cp);
  128|   141k|        }
  129|   141k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   141k|            return static_cast<T*>(s.m_p);
  131|   141k|        }
  132|   141k|        else {
  133|   141k|            return reinterpret_cast<T*>(s.m_fp);
  134|   141k|        }
  135|   141k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   141k|        {
  104|   141k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   350k|    {
  196|   350k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   350k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   350k|              cvref<T> obj = *get<T>(fn);
  187|   350k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   350k|                  obj(static_cast<decltype(args)>(args)...);
  189|   350k|              }
  190|   350k|              else {
  191|   350k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   350k|              }
  193|   350k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   350k|    {
  126|   350k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   350k|            return static_cast<T*>(s.m_cp);
  128|   350k|        }
  129|   350k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   350k|            return static_cast<T*>(s.m_p);
  131|   350k|        }
  132|   350k|        else {
  133|   350k|            return reinterpret_cast<T*>(s.m_fp);
  134|   350k|        }
  135|   350k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   350k|        {
  104|   350k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   177k|    {
  196|   177k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   710k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   710k|              cvref<T> obj = *get<T>(fn);
  187|   710k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   710k|                  obj(static_cast<decltype(args)>(args)...);
  189|   710k|              }
  190|   710k|              else {
  191|   710k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   710k|              }
  193|   710k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   710k|    {
  126|   710k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   710k|            return static_cast<T*>(s.m_cp);
  128|   710k|        }
  129|   710k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   710k|            return static_cast<T*>(s.m_p);
  131|   710k|        }
  132|   710k|        else {
  133|   710k|            return reinterpret_cast<T*>(s.m_fp);
  134|   710k|        }
  135|   710k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   177k|        {
  104|   177k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   177k|    {
  205|   177k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   177k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  13.6k|    {
  196|  13.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  13.6k|              cvref<T> obj = *get<T>(fn);
  187|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  13.6k|              }
  190|  13.6k|              else {
  191|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  13.6k|              }
  193|  13.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  13.6k|    {
  126|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  13.6k|            return static_cast<T*>(s.m_cp);
  128|  13.6k|        }
  129|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.6k|            return static_cast<T*>(s.m_p);
  131|  13.6k|        }
  132|  13.6k|        else {
  133|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  13.6k|        }
  135|  13.6k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|  27.3k|    {
  196|  27.3k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|  27.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  27.3k|              cvref<T> obj = *get<T>(fn);
  187|  27.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  27.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  27.3k|              }
  190|  27.3k|              else {
  191|  27.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  27.3k|              }
  193|  27.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|  27.3k|    {
  126|  27.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  27.3k|            return static_cast<T*>(s.m_cp);
  128|  27.3k|        }
  129|  27.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.3k|            return static_cast<T*>(s.m_p);
  131|  27.3k|        }
  132|  27.3k|        else {
  133|  27.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  27.3k|        }
  135|  27.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|  27.3k|        {
  104|  27.3k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   150k|    {
  196|   150k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   150k|              cvref<T> obj = *get<T>(fn);
  187|   150k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   150k|                  obj(static_cast<decltype(args)>(args)...);
  189|   150k|              }
  190|   150k|              else {
  191|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   150k|              }
  193|   150k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   150k|    {
  126|   150k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   150k|            return static_cast<T*>(s.m_cp);
  128|   150k|        }
  129|   150k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   150k|            return static_cast<T*>(s.m_p);
  131|   150k|        }
  132|   150k|        else {
  133|   150k|            return reinterpret_cast<T*>(s.m_fp);
  134|   150k|        }
  135|   150k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   150k|        {
  104|   150k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  13.6k|        {
  104|  13.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  13.6k|    {
  196|  13.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  13.6k|              cvref<T> obj = *get<T>(fn);
  187|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  13.6k|              }
  190|  13.6k|              else {
  191|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  13.6k|              }
  193|  13.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  13.6k|    {
  126|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  13.6k|            return static_cast<T*>(s.m_cp);
  128|  13.6k|        }
  129|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.6k|            return static_cast<T*>(s.m_p);
  131|  13.6k|        }
  132|  13.6k|        else {
  133|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  13.6k|        }
  135|  13.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  13.6k|        {
  104|  13.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  13.6k|    {
  196|  13.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  13.6k|              cvref<T> obj = *get<T>(fn);
  187|  13.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  13.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  13.6k|              }
  190|  13.6k|              else {
  191|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  13.6k|              }
  193|  13.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  13.6k|    {
  126|  13.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  13.6k|            return static_cast<T*>(s.m_cp);
  128|  13.6k|        }
  129|  13.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.6k|            return static_cast<T*>(s.m_p);
  131|  13.6k|        }
  132|  13.6k|        else {
  133|  13.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  13.6k|        }
  135|  13.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  13.6k|        {
  104|  13.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  9.10k|    {
  196|  9.10k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  9.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  9.10k|              cvref<T> obj = *get<T>(fn);
  187|  9.10k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  9.10k|                  obj(static_cast<decltype(args)>(args)...);
  189|  9.10k|              }
  190|  9.10k|              else {
  191|  9.10k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  9.10k|              }
  193|  9.10k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  9.10k|    {
  126|  9.10k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  9.10k|            return static_cast<T*>(s.m_cp);
  128|  9.10k|        }
  129|  9.10k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.10k|            return static_cast<T*>(s.m_p);
  131|  9.10k|        }
  132|  9.10k|        else {
  133|  9.10k|            return reinterpret_cast<T*>(s.m_fp);
  134|  9.10k|        }
  135|  9.10k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  9.10k|        {
  104|  9.10k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  36.4k|    {
  196|  36.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  36.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  36.4k|              cvref<T> obj = *get<T>(fn);
  187|  36.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  36.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  36.4k|              }
  190|  36.4k|              else {
  191|  36.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  36.4k|              }
  193|  36.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  36.4k|    {
  126|  36.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  36.4k|            return static_cast<T*>(s.m_cp);
  128|  36.4k|        }
  129|  36.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  36.4k|            return static_cast<T*>(s.m_p);
  131|  36.4k|        }
  132|  36.4k|        else {
  133|  36.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  36.4k|        }
  135|  36.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  36.4k|        {
  104|  36.4k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  9.10k|    {
  196|  9.10k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  9.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  9.10k|              cvref<T> obj = *get<T>(fn);
  187|  9.10k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  9.10k|                  obj(static_cast<decltype(args)>(args)...);
  189|  9.10k|              }
  190|  9.10k|              else {
  191|  9.10k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  9.10k|              }
  193|  9.10k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  9.10k|    {
  126|  9.10k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  9.10k|            return static_cast<T*>(s.m_cp);
  128|  9.10k|        }
  129|  9.10k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.10k|            return static_cast<T*>(s.m_p);
  131|  9.10k|        }
  132|  9.10k|        else {
  133|  9.10k|            return reinterpret_cast<T*>(s.m_fp);
  134|  9.10k|        }
  135|  9.10k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  9.10k|        {
  104|  9.10k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  36.4k|    {
  196|  36.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  36.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  36.4k|              cvref<T> obj = *get<T>(fn);
  187|  36.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  36.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  36.4k|              }
  190|  36.4k|              else {
  191|  36.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  36.4k|              }
  193|  36.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  36.4k|    {
  126|  36.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  36.4k|            return static_cast<T*>(s.m_cp);
  128|  36.4k|        }
  129|  36.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  36.4k|            return static_cast<T*>(s.m_p);
  131|  36.4k|        }
  132|  36.4k|        else {
  133|  36.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  36.4k|        }
  135|  36.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  36.4k|        {
  104|  36.4k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  9.10k|    {
  196|  9.10k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  9.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  9.10k|              cvref<T> obj = *get<T>(fn);
  187|  9.10k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  9.10k|                  obj(static_cast<decltype(args)>(args)...);
  189|  9.10k|              }
  190|  9.10k|              else {
  191|  9.10k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  9.10k|              }
  193|  9.10k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  9.10k|    {
  126|  9.10k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  9.10k|            return static_cast<T*>(s.m_cp);
  128|  9.10k|        }
  129|  9.10k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.10k|            return static_cast<T*>(s.m_p);
  131|  9.10k|        }
  132|  9.10k|        else {
  133|  9.10k|            return reinterpret_cast<T*>(s.m_fp);
  134|  9.10k|        }
  135|  9.10k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  9.10k|        {
  104|  9.10k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  36.4k|    {
  196|  36.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  36.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  36.4k|              cvref<T> obj = *get<T>(fn);
  187|  36.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  36.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  36.4k|              }
  190|  36.4k|              else {
  191|  36.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  36.4k|              }
  193|  36.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  36.4k|    {
  126|  36.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  36.4k|            return static_cast<T*>(s.m_cp);
  128|  36.4k|        }
  129|  36.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  36.4k|            return static_cast<T*>(s.m_p);
  131|  36.4k|        }
  132|  36.4k|        else {
  133|  36.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  36.4k|        }
  135|  36.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  36.4k|        {
  104|  36.4k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_:
  195|   898k|    {
  196|   898k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESL_Di:
  185|  34.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  34.5M|              cvref<T> obj = *get<T>(fn);
  187|  34.5M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  34.5M|                  obj(static_cast<decltype(args)>(args)...);
  189|  34.5M|              }
  190|  34.5M|              else {
  191|  34.5M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  34.5M|              }
  193|  34.5M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_EUlDiE_EEDaNS3_7storageE:
  125|  34.5M|    {
  126|  34.5M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  34.5M|            return static_cast<T*>(s.m_cp);
  128|  34.5M|        }
  129|  34.5M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  34.5M|            return static_cast<T*>(s.m_p);
  131|  34.5M|        }
  132|  34.5M|        else {
  133|  34.5M|            return reinterpret_cast<T*>(s.m_fp);
  134|  34.5M|        }
  135|  34.5M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_LPv0EEEPSD_:
  103|   898k|        {
  104|   898k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  49.0k|{
   44|  49.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  49.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  49.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  49.0k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  15.9M|{
   30|  15.9M|    return e != eof_error::good;
   31|  15.9M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   152k|{
   91|   152k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   152k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  12.9M|    {
   69|  12.9M|        return a.m_code == b.m_code;
   70|  12.9M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  31.2M|    {
   55|  31.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  31.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  31.2M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  4.68M|    return [code, msg](parse_error err) {
  115|  4.68M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  4.68M|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  4.68M|{
  100|  4.68M|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 4.68M]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  4.68M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 58.5k, False: 4.62M]
  ------------------
  105|  58.5k|        return scan_error{scan_error::end_of_range, "EOF"};
  106|  58.5k|    }
  107|       |
  108|  4.62M|    return scan_error{code, msg};
  109|  4.68M|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  4.68M|{
  114|  4.68M|    return [code, msg](parse_error err) {
  115|  4.68M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  4.68M|    };
  117|  4.68M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.04M|{
  587|  1.04M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.04M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|  46.0k|{
  595|  46.0k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|  46.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|  46.0k|    else {
  600|  46.0k|        source.sync_all();
  601|  46.0k|    }
  602|  46.0k|    return n;
  603|  46.0k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|   918k|{
  611|   918k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|   918k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|  82.0k|{
  619|  82.0k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|  82.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  82.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 82.0k]
  |  |  ------------------
  ------------------
  621|      0|        source.sync(*n);
  622|      0|    }
  623|  82.0k|    else {
  624|  82.0k|        source.sync_all();
  625|  82.0k|    }
  626|  82.0k|    return n;
  627|  82.0k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.04M|{
  544|  1.04M|    return vscan_internal(source, format, args);
  545|  1.04M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|  46.0k|{
  550|  46.0k|    auto n = vscan_internal(source, format, args);
  551|  46.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 46.0k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|  46.0k|    else {
  555|  46.0k|        source.sync_all();
  556|  46.0k|    }
  557|  46.0k|    return n;
  558|  46.0k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|   918k|{
  564|   918k|    return vscan_internal(source, format, args);
  565|   918k|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|  82.0k|{
  570|  82.0k|    auto n = vscan_internal(source, format, args);
  571|  82.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  82.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 82.0k]
  |  |  ------------------
  ------------------
  572|      0|        source.sync(*n);
  573|      0|    }
  574|  82.0k|    else {
  575|  82.0k|        source.sync_all();
  576|  82.0k|    }
  577|  82.0k|    return n;
  578|  82.0k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   233k|{
  654|   233k|    return vscan_value_internal(source, arg);
  655|   233k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  7.66k|{
  659|  7.66k|    auto n = vscan_value_internal(source, arg);
  660|  7.66k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  7.66k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 7.66k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  7.66k|    else {
  664|  7.66k|        source.sync_all();
  665|  7.66k|    }
  666|  7.66k|    return n;
  667|  7.66k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   202k|{
  673|   202k|    return vscan_value_internal(source, arg);
  674|   202k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  13.6k|{
  679|  13.6k|    auto n = vscan_value_internal(source, arg);
  680|  13.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  13.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 13.6k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  13.6k|    else {
  684|  13.6k|        source.sync_all();
  685|  13.6k|    }
  686|  13.6k|    return n;
  687|  13.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  92.0k|{
  476|  92.0k|    const auto argcount = args.size();
  477|  92.0k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 15.3k, False: 76.6k]
  |  Branch (477:60): [True: 15.3k, False: 0]
  ------------------
  478|  15.3k|        auto arg = args.get(0);
  479|  15.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  15.3k|    }
  481|       |
  482|  76.6k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 76.6k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|  76.6k|    SCN_UNLIKELY_ATTR
  490|  76.6k|    {
  491|  76.6k|        auto handler = format_handler<false, CharT>{
  492|  76.6k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  76.6k|    static_cast<    \
  |  |  247|  76.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  76.6k|    static_cast<    \
  |  |  247|  76.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|  76.6k|        return vscan_parse_format_string(format, handler);
  494|  76.6k|    }
  495|  76.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.18M|{
   36|  2.18M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.70M, False: 481k]
  ------------------
   37|  1.70M|        return false;
   38|  1.70M|    }
   39|   481k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 481k, False: 0]
  |  Branch (39:39): [True: 481k, False: 0]
  ------------------
   40|  2.18M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  23.0k|{
   69|  23.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 23.0k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  23.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  23.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 23.0k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  23.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  23.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  23.0k|    static_cast<    \
  |  |  247|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  23.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  23.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|  23.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  23.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  1.62M|    {
  314|  1.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  3.27M|    {
  133|  3.27M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  3.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.27M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  3.27M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  1.62M|    {
  264|  1.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.62M|{
  441|  1.62M|    const auto beg = handler.get_ctx().begin();
  442|  1.62M|    detail::parse_format_string<false>(format, handler);
  443|  1.62M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 76.6k, False: 1.55M]
  |  |  ------------------
  ------------------
  444|  76.6k|        return unexpected(handler.error);
  445|  76.6k|    }
  446|  1.55M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.62M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  11.2M|    {
  425|  11.2M|        return ctx.get();
  426|  11.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  11.2M|    {
  268|  11.2M|        return contiguous_ctx;
  269|  11.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  3.17M|    {
  318|  3.17M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.17M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.62M|{
   92|  1.62M|    auto arg = ctx.arg(id);
   93|  1.62M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.62M|    return arg;
   97|  1.62M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  3.27M|    {
  208|  3.27M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  3.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.27M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  3.27M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  3.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.27M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  3.27M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  3.27M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.27M, False: 0]
  |  |  ------------------
  ------------------
  218|  3.27M|            visited_args_lower64 |= (1ull << id);
  219|  3.27M|            return;
  220|  3.27M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  3.27M|    {
  193|  3.27M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  3.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.27M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  3.27M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  3.27M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.27M, False: 0]
  |  |  ------------------
  ------------------
  199|  3.27M|            return (visited_args_lower64 >> id) & 1ull;
  200|  3.27M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  3.27M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   426k|    {
  177|   426k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 426k, False: 0]
  |  |  ------------------
  ------------------
  178|   426k|            error = err;
  179|   426k|        }
  180|   426k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  1.62M|    {
  347|  1.62M|        return parse_ctx.next_arg_id();
  348|  1.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  1.62M|    {
  388|  1.62M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.62M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.62M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.62M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.62M|        auto specs = detail::format_specs{};
  401|  1.62M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.62M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.62M|            arg.type()};
  404|       |
  405|  1.62M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.62M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.62M]
  |  Branch (406:29): [True: 0, False: 1.62M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.62M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.62M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.62M|        on_visit_scan_arg(
  417|  1.62M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.62M|                                           get_ctx().locale()},
  419|  1.62M|            arg);
  420|  1.62M|        return parse_ctx.begin();
  421|  1.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  1.62M|    {
  112|  1.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  1.62M|    {
  359|  1.62M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.62M]
  |  Branch (359:23): [True: 0, False: 1.62M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.62M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.62M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 76.6k, False: 1.55M]
  |  |  ------------------
  ------------------
  366|  76.6k|            on_error(r.error());
  367|  76.6k|        }
  368|  1.55M|        else {
  369|  1.55M|            get_ctx().advance_to(*r);
  370|  1.55M|        }
  371|  1.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  3.27M|    {
  140|  3.27M|        {
  141|  3.27M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 3.27M]
  ------------------
  142|  3.27M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 3.27M]
  ------------------
  143|  3.27M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  3.27M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  3.27M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 3.27M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  3.27M|        }
  150|       |
  151|  3.27M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 3.27M, False: 0]
  ------------------
  152|  3.27M|            return;
  153|  3.27M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  3.27M|    {
  188|  3.27M|        return error;
  189|  3.27M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  9.82M|    {
  184|  9.82M|        return static_cast<bool>(error);
  185|  9.82M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|  76.6k|    {
  314|  76.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|  76.6k|    {
  241|  76.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  76.6k|{
  441|  76.6k|    const auto beg = handler.get_ctx().begin();
  442|  76.6k|    detail::parse_format_string<false>(format, handler);
  443|  76.6k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 76.6k, False: 0]
  |  |  ------------------
  ------------------
  444|  76.6k|        return unexpected(handler.error);
  445|  76.6k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  76.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   383k|    {
  425|   383k|        return ctx.get();
  426|   383k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   383k|    {
  245|   383k|        return ctx;
  246|   383k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|  76.6k|    {
  318|  76.6k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 76.6k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  76.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|  76.6k|{
   92|  76.6k|    auto arg = ctx.arg(id);
   93|  76.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  76.6k|    return arg;
   97|  76.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|  76.6k|    {
  347|  76.6k|        return parse_ctx.next_arg_id();
  348|  76.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|  76.6k|    {
  388|  76.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  76.6k|        set_arg_as_visited(arg_id);
  390|       |
  391|  76.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 76.6k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  76.6k|        auto specs = detail::format_specs{};
  401|  76.6k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  76.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  76.6k|            arg.type()};
  404|       |
  405|  76.6k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  76.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 76.6k]
  |  Branch (406:29): [True: 0, False: 76.6k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  76.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  76.6k|        parse_ctx.advance_to(begin);
  415|       |
  416|  76.6k|        on_visit_scan_arg(
  417|  76.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  76.6k|                                           get_ctx().locale()},
  419|  76.6k|            arg);
  420|  76.6k|        return parse_ctx.begin();
  421|  76.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|  76.6k|    {
  112|  76.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|  76.6k|    {
  359|  76.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 76.6k]
  |  Branch (359:23): [True: 0, False: 76.6k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  76.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  76.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 76.6k, False: 0]
  |  |  ------------------
  ------------------
  366|  76.6k|            on_error(r.error());
  367|  76.6k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|  76.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.09M|{
  456|  2.09M|    const auto argcount = args.size();
  457|  2.09M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 466k, False: 1.62M]
  |  Branch (457:60): [True: 466k, False: 0]
  ------------------
  458|   466k|        auto arg = args.get(0);
  459|   466k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   466k|    static_cast<    \
  |  |  247|   466k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   466k|    }
  461|       |
  462|  1.62M|    auto handler = format_handler<true, CharT>{
  463|  1.62M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.62M|                                       source.data() + source.size()},
  465|  1.62M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.62M|    static_cast<    \
  |  |  247|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.62M|    static_cast<    \
  |  |  247|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.62M|    return vscan_parse_format_string(format, handler);
  467|  2.09M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   699k|{
   49|   699k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 699k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   699k|    auto reader =
   55|   699k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   699k|            ranges::subrange<const CharT*>{source.data(),
   57|   699k|                                           source.data() + source.size()},
   58|   699k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   699k|    static_cast<    \
  |  |  247|   699k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   699k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   699k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   699k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   699k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 676k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|   699k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   676k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   676k|    return ranges::distance(source.data(), it);
   61|   699k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  1.83M|{
  456|  1.83M|    const auto argcount = args.size();
  457|  1.83M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 404k, False: 1.43M]
  |  Branch (457:60): [True: 404k, False: 0]
  ------------------
  458|   404k|        auto arg = args.get(0);
  459|   404k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   404k|    static_cast<    \
  |  |  247|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   404k|    }
  461|       |
  462|  1.43M|    auto handler = format_handler<true, CharT>{
  463|  1.43M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.43M|                                       source.data() + source.size()},
  465|  1.43M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.43M|    static_cast<    \
  |  |  247|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.43M|    static_cast<    \
  |  |  247|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.43M|    return vscan_parse_format_string(format, handler);
  467|  1.83M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.00M|{
   36|  2.00M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.56M, False: 431k]
  ------------------
   37|  1.56M|        return false;
   38|  1.56M|    }
   39|   431k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 431k, False: 0]
  |  Branch (39:39): [True: 431k, False: 0]
  ------------------
   40|  2.00M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   606k|{
   49|   606k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 606k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   606k|    auto reader =
   55|   606k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   606k|            ranges::subrange<const CharT*>{source.data(),
   57|   606k|                                           source.data() + source.size()},
   58|   606k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   606k|    static_cast<    \
  |  |  247|   606k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   606k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   606k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   606k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   606k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.0k, False: 565k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.0k|    }                                                  \
  |  |  |  |   70|   606k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   565k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   565k|    return ranges::distance(source.data(), it);
   61|   606k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  1.43M|    {
  314|  1.43M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  1.43M|    {
  264|  1.43M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.43M|{
  441|  1.43M|    const auto beg = handler.get_ctx().begin();
  442|  1.43M|    detail::parse_format_string<false>(format, handler);
  443|  1.43M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 136k, False: 1.29M]
  |  |  ------------------
  ------------------
  444|   136k|        return unexpected(handler.error);
  445|   136k|    }
  446|  1.29M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.43M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  9.75M|    {
  425|  9.75M|        return ctx.get();
  426|  9.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  9.75M|    {
  268|  9.75M|        return contiguous_ctx;
  269|  9.75M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  2.72M|    {
  318|  2.72M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 2.72M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  2.72M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.43M|{
   92|  1.43M|    auto arg = ctx.arg(id);
   93|  1.43M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.43M|    return arg;
   97|  1.43M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  1.43M|    {
  347|  1.43M|        return parse_ctx.next_arg_id();
  348|  1.43M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  1.43M|    {
  388|  1.43M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.43M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.43M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.43M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.43M|        auto specs = detail::format_specs{};
  401|  1.43M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.43M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.43M|            arg.type()};
  404|       |
  405|  1.43M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.43M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.43M]
  |  Branch (406:29): [True: 0, False: 1.43M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.43M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.43M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.43M|        on_visit_scan_arg(
  417|  1.43M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.43M|                                           get_ctx().locale()},
  419|  1.43M|            arg);
  420|  1.43M|        return parse_ctx.begin();
  421|  1.43M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  1.43M|    {
  112|  1.43M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  1.43M|    {
  359|  1.43M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.43M]
  |  Branch (359:23): [True: 0, False: 1.43M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.43M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.43M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 136k, False: 1.29M]
  |  |  ------------------
  ------------------
  366|   136k|            on_error(r.error());
  367|   136k|        }
  368|  1.29M|        else {
  369|  1.29M|            get_ctx().advance_to(*r);
  370|  1.29M|        }
  371|  1.43M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   164k|{
  476|   164k|    const auto argcount = args.size();
  477|   164k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 27.3k, False: 136k]
  |  Branch (477:60): [True: 27.3k, False: 0]
  ------------------
  478|  27.3k|        auto arg = args.get(0);
  479|  27.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  27.3k|    static_cast<    \
  |  |  247|  27.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  27.3k|    }
  481|       |
  482|   136k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 136k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   136k|    SCN_UNLIKELY_ATTR
  490|   136k|    {
  491|   136k|        auto handler = format_handler<false, CharT>{
  492|   136k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   136k|    static_cast<    \
  |  |  247|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   136k|    static_cast<    \
  |  |  247|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   136k|        return vscan_parse_format_string(format, handler);
  494|   136k|    }
  495|   136k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  41.0k|{
   69|  41.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 41.0k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  41.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  41.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 41.0k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  41.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  41.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  41.0k|    static_cast<    \
  |  |  247|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  41.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  41.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.0k|    }                                                  \
  |  |  |  |   70|  41.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  41.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   136k|    {
  314|   136k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   136k|    {
  241|   136k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   136k|{
  441|   136k|    const auto beg = handler.get_ctx().begin();
  442|   136k|    detail::parse_format_string<false>(format, handler);
  443|   136k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 136k, False: 0]
  |  |  ------------------
  ------------------
  444|   136k|        return unexpected(handler.error);
  445|   136k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   136k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|   683k|    {
  425|   683k|        return ctx.get();
  426|   683k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|   683k|    {
  245|   683k|        return ctx;
  246|   683k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   136k|    {
  318|   136k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 136k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   136k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   136k|{
   92|   136k|    auto arg = ctx.arg(id);
   93|   136k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   136k|    return arg;
   97|   136k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   136k|    {
  347|   136k|        return parse_ctx.next_arg_id();
  348|   136k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   136k|    {
  388|   136k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   136k|        set_arg_as_visited(arg_id);
  390|       |
  391|   136k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 136k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   136k|        auto specs = detail::format_specs{};
  401|   136k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   136k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   136k|            arg.type()};
  404|       |
  405|   136k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   136k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 136k]
  |  Branch (406:29): [True: 0, False: 136k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   136k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   136k|        parse_ctx.advance_to(begin);
  415|       |
  416|   136k|        on_visit_scan_arg(
  417|   136k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   136k|                                           get_ctx().locale()},
  419|   136k|            arg);
  420|   136k|        return parse_ctx.begin();
  421|   136k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   136k|    {
  112|   136k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   136k|    {
  359|   136k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 136k]
  |  Branch (359:23): [True: 0, False: 136k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   136k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   136k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 136k, False: 0]
  |  |  ------------------
  ------------------
  366|   136k|            on_error(r.error());
  367|   136k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   136k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   233k|{
  502|   233k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   233k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  7.66k|{
  502|  7.66k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  7.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  7.66k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   202k|{
  502|   202k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   202k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  13.6k|{
  502|  13.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  13.6k|}

LLVMFuzzerTestOneInput:
   54|  2.55k|{
   55|  2.55k|    scn::fuzz::run({data, size});
   56|  2.55k|    return 0;
   57|  2.55k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   32|  2.55k|{
   33|  2.55k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.55k]
  |  Branch (33:42): [True: 0, False: 2.55k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.55k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   38|       |
   39|  2.55k|    auto f =
   40|  2.55k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.55k|    do_basic_run(sv, f);
   42|       |
   43|  2.55k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}", L"{:f}",
   44|  2.55k|                                          L"{:g}", L"{:L}");
   45|  2.55k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.55k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.00k, False: 556]
  ------------------
   47|  2.00k|        do_basic_run(wsv_transcode, wf);
   48|  2.00k|    }
   49|  2.55k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.55k|{
   25|  2.55k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.55k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.55k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.55k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.55k|{
   25|  2.55k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.55k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.55k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.55k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  4.55k|{
   25|  4.55k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.55k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.55k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.55k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  4.55k|{
   25|  4.55k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.55k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.55k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.55k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.55k|{
   52|  2.55k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.55k|    std::copy(data.begin(), data.end(),
   57|  2.55k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.55k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.55k|    const auto wsv_reinterpret_size =
   62|  2.55k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 64, False: 2.49k]
  ------------------
   63|  2.55k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.55k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.55k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.55k|    std::wstring_view wsv_transcoded;
   69|  2.55k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 2.00k, False: 556]
  ------------------
   70|  2.00k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  2.00k|        else {
   79|  2.00k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  2.00k|            wstring_buffer_transcoded_wide.resize(size);
   81|  2.00k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  2.00k|                sv.data(), sv.size(),
   83|  2.00k|                reinterpret_cast<char32_t*>(
   84|  2.00k|                    wstring_buffer_transcoded_wide.data()));
   85|  2.00k|        }
   86|  2.00k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  2.00k|    }
   88|       |
   89|  2.55k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.55k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.55k|{
  140|  2.55k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.55k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.55k|    buf.resize(sizeof...(Args));
  143|  2.55k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.55k|    return {buf.data(), buf.size()};
  145|  2.55k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.55k|{
  126|  2.55k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.55k|        return format_string_view_buffer;
  128|  2.55k|    }
  129|  2.55k|    else {
  130|  2.55k|        return wformat_string_view_buffer;
  131|  2.55k|    }
  132|  2.55k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.55k|{
  200|  2.55k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.55k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.55k|                                   format_strings);
  203|  2.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.55k|{
  151|       |    // Regular scan
  152|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.3k, False: 2.55k]
  ------------------
  153|  15.3k|        auto it = scn::ranges::begin(source);
  154|   320k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   320k|            auto result = scn::scan<T>(
  156|   320k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   320k|                scn::runtime_format(f));
  158|   320k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.3k, False: 305k]
  ------------------
  159|  15.3k|                break;
  160|  15.3k|            }
  161|   305k|            it = result->begin();
  162|   305k|        }
  163|  15.3k|    }
  164|       |
  165|       |    // scan localized
  166|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.3k, False: 2.55k]
  ------------------
  167|  15.3k|        auto it = scn::ranges::begin(source);
  168|   320k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   320k|            auto result = scn::scan<T>(
  170|   320k|                global_locale,
  171|   320k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   320k|                scn::runtime_format(f));
  173|   320k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.3k, False: 305k]
  ------------------
  174|  15.3k|                break;
  175|  15.3k|            }
  176|   305k|            it = result->begin();
  177|   305k|        }
  178|  15.3k|    }
  179|       |
  180|       |    // scan_value
  181|  2.55k|    {
  182|  2.55k|        auto it = scn::ranges::begin(source);
  183|  70.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  70.0k|            auto result = scn::scan_value<T>(
  185|  70.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  70.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.55k, False: 67.4k]
  ------------------
  187|  2.55k|                break;
  188|  2.55k|            }
  189|  67.4k|            it = result->begin();
  190|  67.4k|        }
  191|  2.55k|    }
  192|  2.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.55k|{
  151|       |    // Regular scan
  152|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.3k, False: 2.55k]
  ------------------
  153|  15.3k|        auto it = scn::ranges::begin(source);
  154|   360k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   360k|            auto result = scn::scan<T>(
  156|   360k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   360k|                scn::runtime_format(f));
  158|   360k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.3k, False: 344k]
  ------------------
  159|  15.3k|                break;
  160|  15.3k|            }
  161|   344k|            it = result->begin();
  162|   344k|        }
  163|  15.3k|    }
  164|       |
  165|       |    // scan localized
  166|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.3k, False: 2.55k]
  ------------------
  167|  15.3k|        auto it = scn::ranges::begin(source);
  168|   360k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   360k|            auto result = scn::scan<T>(
  170|   360k|                global_locale,
  171|   360k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   360k|                scn::runtime_format(f));
  173|   360k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.3k, False: 344k]
  ------------------
  174|  15.3k|                break;
  175|  15.3k|            }
  176|   344k|            it = result->begin();
  177|   344k|        }
  178|  15.3k|    }
  179|       |
  180|       |    // scan_value
  181|  2.55k|    {
  182|  2.55k|        auto it = scn::ranges::begin(source);
  183|  80.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  80.5k|            auto result = scn::scan_value<T>(
  185|  80.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  80.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.55k, False: 77.9k]
  ------------------
  187|  2.55k|                break;
  188|  2.55k|            }
  189|  77.9k|            it = result->begin();
  190|  77.9k|        }
  191|  2.55k|    }
  192|  2.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.55k|{
  151|       |    // Regular scan
  152|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.3k, False: 2.55k]
  ------------------
  153|  15.3k|        auto it = scn::ranges::begin(source);
  154|   366k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   366k|            auto result = scn::scan<T>(
  156|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   366k|                scn::runtime_format(f));
  158|   366k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.3k, False: 351k]
  ------------------
  159|  15.3k|                break;
  160|  15.3k|            }
  161|   351k|            it = result->begin();
  162|   351k|        }
  163|  15.3k|    }
  164|       |
  165|       |    // scan localized
  166|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.3k, False: 2.55k]
  ------------------
  167|  15.3k|        auto it = scn::ranges::begin(source);
  168|   366k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   366k|            auto result = scn::scan<T>(
  170|   366k|                global_locale,
  171|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   366k|                scn::runtime_format(f));
  173|   366k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.3k, False: 351k]
  ------------------
  174|  15.3k|                break;
  175|  15.3k|            }
  176|   351k|            it = result->begin();
  177|   351k|        }
  178|  15.3k|    }
  179|       |
  180|       |    // scan_value
  181|  2.55k|    {
  182|  2.55k|        auto it = scn::ranges::begin(source);
  183|  82.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  82.6k|            auto result = scn::scan_value<T>(
  185|  82.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  82.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.55k, False: 80.1k]
  ------------------
  187|  2.55k|                break;
  188|  2.55k|            }
  189|  80.1k|            it = result->begin();
  190|  80.1k|        }
  191|  2.55k|    }
  192|  2.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.55k|{
  151|       |    // Regular scan
  152|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.3k, False: 2.55k]
  ------------------
  153|  15.3k|        auto it = scn::ranges::begin(source);
  154|  15.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.3k|            auto result = scn::scan<T>(
  156|  15.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.3k|                scn::runtime_format(f));
  158|  15.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.3k, False: 0]
  ------------------
  159|  15.3k|                break;
  160|  15.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.3k|    }
  164|       |
  165|       |    // scan localized
  166|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.3k, False: 2.55k]
  ------------------
  167|  15.3k|        auto it = scn::ranges::begin(source);
  168|  15.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.3k|            auto result = scn::scan<T>(
  170|  15.3k|                global_locale,
  171|  15.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.3k|                scn::runtime_format(f));
  173|  15.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.3k, False: 0]
  ------------------
  174|  15.3k|                break;
  175|  15.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.3k|    }
  179|       |
  180|       |    // scan_value
  181|  2.55k|    {
  182|  2.55k|        auto it = scn::ranges::begin(source);
  183|  2.55k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.55k|            auto result = scn::scan_value<T>(
  185|  2.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.55k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.55k, False: 0]
  ------------------
  187|  2.55k|                break;
  188|  2.55k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.55k|    }
  192|  2.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.55k|{
  151|       |    // Regular scan
  152|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.3k, False: 2.55k]
  ------------------
  153|  15.3k|        auto it = scn::ranges::begin(source);
  154|  15.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.3k|            auto result = scn::scan<T>(
  156|  15.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.3k|                scn::runtime_format(f));
  158|  15.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.3k, False: 0]
  ------------------
  159|  15.3k|                break;
  160|  15.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.3k|    }
  164|       |
  165|       |    // scan localized
  166|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.3k, False: 2.55k]
  ------------------
  167|  15.3k|        auto it = scn::ranges::begin(source);
  168|  15.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.3k|            auto result = scn::scan<T>(
  170|  15.3k|                global_locale,
  171|  15.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.3k|                scn::runtime_format(f));
  173|  15.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.3k, False: 0]
  ------------------
  174|  15.3k|                break;
  175|  15.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.3k|    }
  179|       |
  180|       |    // scan_value
  181|  2.55k|    {
  182|  2.55k|        auto it = scn::ranges::begin(source);
  183|  2.55k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.55k|            auto result = scn::scan_value<T>(
  185|  2.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.55k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.55k, False: 0]
  ------------------
  187|  2.55k|                break;
  188|  2.55k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.55k|    }
  192|  2.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.55k|{
  151|       |    // Regular scan
  152|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.3k, False: 2.55k]
  ------------------
  153|  15.3k|        auto it = scn::ranges::begin(source);
  154|  15.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.3k|            auto result = scn::scan<T>(
  156|  15.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.3k|                scn::runtime_format(f));
  158|  15.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.3k, False: 0]
  ------------------
  159|  15.3k|                break;
  160|  15.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.3k|    }
  164|       |
  165|       |    // scan localized
  166|  15.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.3k, False: 2.55k]
  ------------------
  167|  15.3k|        auto it = scn::ranges::begin(source);
  168|  15.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.3k|            auto result = scn::scan<T>(
  170|  15.3k|                global_locale,
  171|  15.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.3k|                scn::runtime_format(f));
  173|  15.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.3k, False: 0]
  ------------------
  174|  15.3k|                break;
  175|  15.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.3k|    }
  179|       |
  180|       |    // scan_value
  181|  2.55k|    {
  182|  2.55k|        auto it = scn::ranges::begin(source);
  183|  2.55k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.55k|            auto result = scn::scan_value<T>(
  185|  2.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.55k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.55k, False: 0]
  ------------------
  187|  2.55k|                break;
  188|  2.55k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.55k|    }
  192|  2.55k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.55k|{
  109|  2.55k|    using char_type = ranges::range_value_t<Source>;
  110|  2.55k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.55k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.55k|              std::back_inserter(deque));
  113|  2.55k|    return deque;
  114|  2.55k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.55k|{
   98|  2.55k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.55k|        return noncontiguous_buffer;
  100|  2.55k|    }
  101|  2.55k|    else {
  102|  2.55k|        return wnoncontiguous_buffer;
  103|  2.55k|    }
  104|  2.55k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.55k|{
  140|  2.55k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.55k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.55k|    buf.resize(sizeof...(Args));
  143|  2.55k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.55k|    return {buf.data(), buf.size()};
  145|  2.55k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.55k|{
  126|  2.55k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.55k|        return format_string_view_buffer;
  128|  2.55k|    }
  129|  2.55k|    else {
  130|  2.55k|        return wformat_string_view_buffer;
  131|  2.55k|    }
  132|  2.55k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  4.55k|{
  200|  4.55k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  4.55k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  4.55k|                                   format_strings);
  203|  4.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.55k|{
  151|       |    // Regular scan
  152|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 27.3k, False: 4.55k]
  ------------------
  153|  27.3k|        auto it = scn::ranges::begin(source);
  154|   283k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   283k|            auto result = scn::scan<T>(
  156|   283k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   283k|                scn::runtime_format(f));
  158|   283k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.3k, False: 255k]
  ------------------
  159|  27.3k|                break;
  160|  27.3k|            }
  161|   255k|            it = result->begin();
  162|   255k|        }
  163|  27.3k|    }
  164|       |
  165|       |    // scan localized
  166|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 27.3k, False: 4.55k]
  ------------------
  167|  27.3k|        auto it = scn::ranges::begin(source);
  168|   283k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   283k|            auto result = scn::scan<T>(
  170|   283k|                global_locale,
  171|   283k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   283k|                scn::runtime_format(f));
  173|   283k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 27.3k, False: 255k]
  ------------------
  174|  27.3k|                break;
  175|  27.3k|            }
  176|   255k|            it = result->begin();
  177|   255k|        }
  178|  27.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.55k|    {
  182|  4.55k|        auto it = scn::ranges::begin(source);
  183|  61.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  61.1k|            auto result = scn::scan_value<T>(
  185|  61.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  61.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.55k, False: 56.6k]
  ------------------
  187|  4.55k|                break;
  188|  4.55k|            }
  189|  56.6k|            it = result->begin();
  190|  56.6k|        }
  191|  4.55k|    }
  192|  4.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.55k|{
  151|       |    // Regular scan
  152|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 27.3k, False: 4.55k]
  ------------------
  153|  27.3k|        auto it = scn::ranges::begin(source);
  154|   315k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   315k|            auto result = scn::scan<T>(
  156|   315k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   315k|                scn::runtime_format(f));
  158|   315k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.3k, False: 287k]
  ------------------
  159|  27.3k|                break;
  160|  27.3k|            }
  161|   287k|            it = result->begin();
  162|   287k|        }
  163|  27.3k|    }
  164|       |
  165|       |    // scan localized
  166|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 27.3k, False: 4.55k]
  ------------------
  167|  27.3k|        auto it = scn::ranges::begin(source);
  168|   315k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   315k|            auto result = scn::scan<T>(
  170|   315k|                global_locale,
  171|   315k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   315k|                scn::runtime_format(f));
  173|   315k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 27.3k, False: 287k]
  ------------------
  174|  27.3k|                break;
  175|  27.3k|            }
  176|   287k|            it = result->begin();
  177|   287k|        }
  178|  27.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.55k|    {
  182|  4.55k|        auto it = scn::ranges::begin(source);
  183|  69.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  69.6k|            auto result = scn::scan_value<T>(
  185|  69.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  69.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.55k, False: 65.0k]
  ------------------
  187|  4.55k|                break;
  188|  4.55k|            }
  189|  65.0k|            it = result->begin();
  190|  65.0k|        }
  191|  4.55k|    }
  192|  4.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.55k|{
  151|       |    // Regular scan
  152|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 27.3k, False: 4.55k]
  ------------------
  153|  27.3k|        auto it = scn::ranges::begin(source);
  154|   320k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   320k|            auto result = scn::scan<T>(
  156|   320k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   320k|                scn::runtime_format(f));
  158|   320k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.3k, False: 292k]
  ------------------
  159|  27.3k|                break;
  160|  27.3k|            }
  161|   292k|            it = result->begin();
  162|   292k|        }
  163|  27.3k|    }
  164|       |
  165|       |    // scan localized
  166|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 27.3k, False: 4.55k]
  ------------------
  167|  27.3k|        auto it = scn::ranges::begin(source);
  168|   320k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   320k|            auto result = scn::scan<T>(
  170|   320k|                global_locale,
  171|   320k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   320k|                scn::runtime_format(f));
  173|   320k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 27.3k, False: 292k]
  ------------------
  174|  27.3k|                break;
  175|  27.3k|            }
  176|   292k|            it = result->begin();
  177|   292k|        }
  178|  27.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.55k|    {
  182|  4.55k|        auto it = scn::ranges::begin(source);
  183|  71.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  71.3k|            auto result = scn::scan_value<T>(
  185|  71.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  71.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.55k, False: 66.8k]
  ------------------
  187|  4.55k|                break;
  188|  4.55k|            }
  189|  66.8k|            it = result->begin();
  190|  66.8k|        }
  191|  4.55k|    }
  192|  4.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.55k|{
  151|       |    // Regular scan
  152|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 27.3k, False: 4.55k]
  ------------------
  153|  27.3k|        auto it = scn::ranges::begin(source);
  154|  27.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  27.3k|            auto result = scn::scan<T>(
  156|  27.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  27.3k|                scn::runtime_format(f));
  158|  27.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.3k, False: 0]
  ------------------
  159|  27.3k|                break;
  160|  27.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  27.3k|    }
  164|       |
  165|       |    // scan localized
  166|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 27.3k, False: 4.55k]
  ------------------
  167|  27.3k|        auto it = scn::ranges::begin(source);
  168|  27.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  27.3k|            auto result = scn::scan<T>(
  170|  27.3k|                global_locale,
  171|  27.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  27.3k|                scn::runtime_format(f));
  173|  27.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 27.3k, False: 0]
  ------------------
  174|  27.3k|                break;
  175|  27.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  27.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.55k|    {
  182|  4.55k|        auto it = scn::ranges::begin(source);
  183|  4.55k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.55k|            auto result = scn::scan_value<T>(
  185|  4.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.55k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.55k, False: 0]
  ------------------
  187|  4.55k|                break;
  188|  4.55k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  4.55k|    }
  192|  4.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.55k|{
  151|       |    // Regular scan
  152|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 27.3k, False: 4.55k]
  ------------------
  153|  27.3k|        auto it = scn::ranges::begin(source);
  154|  27.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  27.3k|            auto result = scn::scan<T>(
  156|  27.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  27.3k|                scn::runtime_format(f));
  158|  27.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.3k, False: 0]
  ------------------
  159|  27.3k|                break;
  160|  27.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  27.3k|    }
  164|       |
  165|       |    // scan localized
  166|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 27.3k, False: 4.55k]
  ------------------
  167|  27.3k|        auto it = scn::ranges::begin(source);
  168|  27.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  27.3k|            auto result = scn::scan<T>(
  170|  27.3k|                global_locale,
  171|  27.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  27.3k|                scn::runtime_format(f));
  173|  27.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 27.3k, False: 0]
  ------------------
  174|  27.3k|                break;
  175|  27.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  27.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.55k|    {
  182|  4.55k|        auto it = scn::ranges::begin(source);
  183|  4.55k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.55k|            auto result = scn::scan_value<T>(
  185|  4.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.55k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.55k, False: 0]
  ------------------
  187|  4.55k|                break;
  188|  4.55k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  4.55k|    }
  192|  4.55k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.55k|{
  151|       |    // Regular scan
  152|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 27.3k, False: 4.55k]
  ------------------
  153|  27.3k|        auto it = scn::ranges::begin(source);
  154|  27.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  27.3k|            auto result = scn::scan<T>(
  156|  27.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  27.3k|                scn::runtime_format(f));
  158|  27.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.3k, False: 0]
  ------------------
  159|  27.3k|                break;
  160|  27.3k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  27.3k|    }
  164|       |
  165|       |    // scan localized
  166|  27.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 27.3k, False: 4.55k]
  ------------------
  167|  27.3k|        auto it = scn::ranges::begin(source);
  168|  27.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  27.3k|            auto result = scn::scan<T>(
  170|  27.3k|                global_locale,
  171|  27.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  27.3k|                scn::runtime_format(f));
  173|  27.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 27.3k, False: 0]
  ------------------
  174|  27.3k|                break;
  175|  27.3k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  27.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.55k|    {
  182|  4.55k|        auto it = scn::ranges::begin(source);
  183|  4.55k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.55k|            auto result = scn::scan_value<T>(
  185|  4.55k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.55k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.55k, False: 0]
  ------------------
  187|  4.55k|                break;
  188|  4.55k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  4.55k|    }
  192|  4.55k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  4.55k|{
  109|  4.55k|    using char_type = ranges::range_value_t<Source>;
  110|  4.55k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  4.55k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  4.55k|              std::back_inserter(deque));
  113|  4.55k|    return deque;
  114|  4.55k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  4.55k|{
   98|  4.55k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  4.55k|        return noncontiguous_buffer;
  100|  4.55k|    }
  101|  4.55k|    else {
  102|  4.55k|        return wnoncontiguous_buffer;
  103|  4.55k|    }
  104|  4.55k|}

