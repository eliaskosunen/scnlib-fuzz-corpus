_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.34M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.34M|  chars_format const fmt = options.format;
  277|  2.34M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.34M|  parsed_number_string_t<UC> answer;
  280|  2.34M|  answer.valid = false;
  281|  2.34M|  answer.too_many_digits = false;
  282|  2.34M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.34M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.34M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.34M|  UC const * const start_digits = p;
  303|       |
  304|  2.34M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  13.8M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 12.6M, False: 1.14M]
  |  Branch (306:25): [True: 11.4M, False: 1.20M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  11.4M|    i = 10 * i +
  310|  11.4M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  11.4M|    ++p;
  312|  11.4M|  }
  313|  2.34M|  UC const * const end_of_integer_part = p;
  314|  2.34M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.34M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.34M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.34M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.34M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.34M|  int64_t exponent = 0;
  324|  2.34M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.20M, False: 1.14M]
  |  Branch (324:49): [True: 400k, False: 802k]
  ------------------
  325|  2.34M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 400k, False: 1.94M]
  ------------------
  326|   400k|    ++p;
  327|   400k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   400k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.60M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.37M, False: 238k]
  |  Branch (332:27): [True: 1.20M, False: 161k]
  ------------------
  333|  1.20M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.20M|      ++p;
  335|  1.20M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.20M|    }
  337|   400k|    exponent = before - p;
  338|   400k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   400k|    digit_count -= exponent;
  340|   400k|  }
  341|  2.34M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.34M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.34M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.34M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.34M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.34M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.34M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 2.05M, False: 292k]
  ------------------
  352|  2.34M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 964k, False: 1.09M]
  ------------------
  353|  2.34M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 247k, False: 716k]
  |  Branch (353:29): [True: 85.3k, False: 631k]
  ------------------
  354|  2.34M|       ||
  355|  2.34M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  2.01M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 2.01M]
  ------------------
  356|  2.01M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  2.01M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   332k|    UC const * location_of_e = p;
  359|   332k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 247k, False: 85.3k]
  |  Branch (359:28): [True: 85.3k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   332k|      ++p;
  361|   332k|    }
  362|   332k|    bool neg_exp = false;
  363|   332k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 332k, False: 215]
  |  Branch (363:24): [True: 23.0k, False: 309k]
  ------------------
  364|  23.0k|      neg_exp = true;
  365|  23.0k|      ++p;
  366|   309k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 309k, False: 215]
  |  Branch (366:31): [True: 60.2k, False: 248k]
  ------------------
  367|  60.2k|      ++p;
  368|  60.2k|    }
  369|   332k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 332k]
  |  Branch (369:24): [True: 990, False: 331k]
  ------------------
  370|  1.24k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.24k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.24k|      p = location_of_e;
  376|   331k|    } else {
  377|  1.08M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 859k, False: 223k]
  |  Branch (377:29): [True: 751k, False: 107k]
  ------------------
  378|   751k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   751k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 703k, False: 48.6k]
  ------------------
  380|   703k|          exp_number = 10 * exp_number + digit;
  381|   703k|        }
  382|   751k|        ++p;
  383|   751k|      }
  384|   331k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 22.9k, False: 308k]
  ------------------
  385|   331k|      exponent += exp_number;
  386|   331k|    }
  387|  2.01M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  2.01M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.72M, False: 292k]
  |  Branch (389:44): [True: 0, False: 1.72M]
  ------------------
  390|  2.01M|  }
  391|  2.34M|  answer.lastmatch = p;
  392|  2.34M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.34M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 369k, False: 1.97M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   369k|    UC const * start = start_digits;
  405|  3.31M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.30M, False: 14.9k]
  |  Branch (405:32): [True: 2.88M, False: 420k]
  |  Branch (405:53): [True: 65.3k, False: 354k]
  ------------------
  406|  2.94M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.88M, False: 65.3k]
  ------------------
  407|  2.94M|      start++;
  408|  2.94M|    }
  409|       |
  410|   369k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 316k, False: 53.0k]
  ------------------
  411|   316k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   316k|      i = 0;
  416|   316k|      p = answer.integer.ptr;
  417|   316k|      UC const* int_end = p + answer.integer.len();
  418|   316k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  4.32M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 4.22M, False: 100k]
  |  Branch (419:54): [True: 4.00M, False: 216k]
  ------------------
  420|  4.00M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  4.00M|        ++p;
  422|  4.00M|      }
  423|   316k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 100k, False: 216k]
  ------------------
  424|   100k|        exponent = end_of_integer_part - p + exp_number;
  425|   100k|      }
  426|   216k|      else { // We have a value with a fractional component.
  427|   216k|        p = answer.fraction.ptr;
  428|   216k|        UC const* frac_end = p + answer.fraction.len();
  429|  4.01M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.80M, False: 216k]
  |  Branch (429:56): [True: 3.80M, False: 0]
  ------------------
  430|  3.80M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.80M|          ++p;
  432|  3.80M|        }
  433|   216k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   216k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   316k|    }
  437|   369k|  }
  438|  2.34M|  answer.exponent = exponent;
  439|  2.34M|  answer.mantissa = i;
  440|  2.34M|  return answer;
  441|  2.34M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  15.2M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  15.2M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 377k, False: 14.8M]
  |  Branch (36:27): [True: 1.09M, False: 13.7M]
  ------------------
   37|  15.2M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   400k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.61M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.35M, False: 259k]
  |  Branch (249:43): [True: 1.21M, False: 140k]
  ------------------
  250|  1.21M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.21M|    p += 8;
  252|  1.21M|  }
  253|   400k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.35M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.35M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.35M|     0x8080808080808080));
  172|  1.35M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  3.05M|uint64_t read8_to_u64(const UC *chars) {
   54|  3.05M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  3.05M|  uint64_t val;
   63|  3.05M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  3.05M|  return val;
   69|  3.05M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.69M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.69M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.69M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.69M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.69M|  val -= 0x3030303030303030;
  151|  1.69M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.69M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.69M|  return uint32_t(val);
  154|  1.69M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   476k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   476k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   476k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   476k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   476k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   105k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   105k|  chars_format const fmt = options.format;
  277|   105k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   105k|  parsed_number_string_t<UC> answer;
  280|   105k|  answer.valid = false;
  281|   105k|  answer.too_many_digits = false;
  282|   105k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   105k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 105k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   105k|  UC const * const start_digits = p;
  303|       |
  304|   105k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   217k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 143k, False: 74.1k]
  |  Branch (306:25): [True: 111k, False: 31.2k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   111k|    i = 10 * i +
  310|   111k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   111k|    ++p;
  312|   111k|  }
  313|   105k|  UC const * const end_of_integer_part = p;
  314|   105k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   105k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   105k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   105k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 105k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   105k|  int64_t exponent = 0;
  324|   105k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 31.2k, False: 74.1k]
  |  Branch (324:49): [True: 72, False: 31.2k]
  ------------------
  325|   105k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 72, False: 105k]
  ------------------
  326|     72|    ++p;
  327|     72|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|     72|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|     72|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 20, False: 52]
  |  Branch (332:27): [True: 0, False: 20]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|     72|    exponent = before - p;
  338|     72|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|     72|    digit_count -= exponent;
  340|     72|  }
  341|   105k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   105k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 105k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   105k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 105k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   105k|  int64_t exp_number = 0;            // explicit exponential part
  351|   105k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 82.1k, False: 23.2k]
  ------------------
  352|   105k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 31.2k, False: 50.9k]
  ------------------
  353|   105k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 56, False: 31.1k]
  |  Branch (353:29): [True: 3.60k, False: 27.5k]
  ------------------
  354|   105k|       ||
  355|   105k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   101k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 101k]
  ------------------
  356|   101k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   101k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  3.66k|    UC const * location_of_e = p;
  359|  3.66k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 56, False: 3.60k]
  |  Branch (359:28): [True: 3.60k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  3.66k|      ++p;
  361|  3.66k|    }
  362|  3.66k|    bool neg_exp = false;
  363|  3.66k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 3.65k, False: 10]
  |  Branch (363:24): [True: 408, False: 3.24k]
  ------------------
  364|    408|      neg_exp = true;
  365|    408|      ++p;
  366|  3.25k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 3.24k, False: 10]
  |  Branch (366:31): [True: 28, False: 3.21k]
  ------------------
  367|     28|      ++p;
  368|     28|    }
  369|  3.66k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 3.65k]
  |  Branch (369:24): [True: 470, False: 3.18k]
  ------------------
  370|    480|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 480]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    480|      p = location_of_e;
  376|  3.18k|    } else {
  377|  9.88k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 7.57k, False: 2.30k]
  |  Branch (377:29): [True: 6.69k, False: 880]
  ------------------
  378|  6.69k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  6.69k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 6.69k, False: 0]
  ------------------
  380|  6.69k|          exp_number = 10 * exp_number + digit;
  381|  6.69k|        }
  382|  6.69k|        ++p;
  383|  6.69k|      }
  384|  3.18k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 388, False: 2.79k]
  ------------------
  385|  3.18k|      exponent += exp_number;
  386|  3.18k|    }
  387|   101k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   101k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 78.4k, False: 23.2k]
  |  Branch (389:44): [True: 0, False: 78.4k]
  ------------------
  390|   101k|  }
  391|   105k|  answer.lastmatch = p;
  392|   105k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   105k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 105k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|   105k|  answer.exponent = exponent;
  439|   105k|  answer.mantissa = i;
  440|   105k|  return answer;
  441|   105k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   154k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   154k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 32.1k, False: 122k]
  |  Branch (36:27): [True: 462, False: 121k]
  ------------------
   37|   154k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|     72|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|     72|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|     72|    return;
  240|     72|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|   106k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   233k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   372k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   372k|    return small_mul(vec, y);
  565|   372k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   570k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   570k|  limb carry = 0;
  284|  2.67M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.10M, False: 570k]
  ------------------
  285|  2.10M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.10M|  }
  287|   570k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 362k, False: 208k]
  ------------------
  288|   362k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   362k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
  289|   362k|  }
  290|   570k|  return true;
  291|   570k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.81M|  constexpr size_t len() const noexcept {
   77|  4.81M|    return length;
   78|  4.81M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.10M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.10M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.10M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.10M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.10M|  carry = limb(z >> limb_bits);
  235|  2.10M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.10M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.61M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.61M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.61M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.61M|    return data[index];
   60|  5.61M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   496k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   496k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 496k, False: 0]
  ------------------
   93|   496k|      push_unchecked(value);
   94|   496k|      return true;
   95|   496k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   496k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   599k|  constexpr size_t capacity() const noexcept {
   83|   599k|    return size;
   84|   599k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   587k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   587k|    data[length] = value;
   88|   587k|    length++;
   89|   587k|  }
_ZN10fast_float6bigint3addEm:
  567|   372k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   372k|    return small_add(vec, y);
  569|   372k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   372k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   372k|  return small_add_from(vec, y, 0);
  277|   372k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   372k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   372k|  size_t index = start;
  259|   372k|  limb carry = y;
  260|   372k|  bool overflow;
  261|   552k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 285k, False: 266k]
  |  Branch (261:24): [True: 179k, False: 106k]
  ------------------
  262|   179k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   179k|    carry = limb(overflow);
  264|   179k|    index += 1;
  265|   179k|  }
  266|   372k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 106k, False: 266k]
  ------------------
  267|   106k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   106k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  268|   106k|  }
  269|   372k|  return true;
  270|   372k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   579k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   579k|  limb z;
  211|       |// gcc and clang
  212|   579k|#if defined(__has_builtin)
  213|   579k|  #if __has_builtin(__builtin_add_overflow)
  214|   579k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   579k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   579k|      return z;
  217|   579k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   579k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  15.3k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  15.3k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  15.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  611|  15.3k|    return pow2(exp);
  612|  15.3k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|   106k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|   106k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|   106k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|   115k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.88k, False: 106k]
  ------------------
  582|  8.88k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.88k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.88k]
  |  |  ------------------
  ------------------
  583|  8.88k|      exp -= large_step;
  584|  8.88k|    }
  585|   106k|#ifdef FASTFLOAT_64BIT_LIMB
  586|   106k|    uint32_t small_step = 27;
  587|   106k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   173k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 66.8k, False: 106k]
  ------------------
  593|  66.8k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  66.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 66.8k]
  |  |  ------------------
  ------------------
  594|  66.8k|      exp -= small_step;
  595|  66.8k|    }
  596|   106k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 86.4k, False: 20.0k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  86.4k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  86.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 86.4k]
  |  |  ------------------
  ------------------
  601|  86.4k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  86.4k|      );
  603|  86.4k|    }
  604|       |
  605|   106k|    return true;
  606|   106k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.88k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.88k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.88k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.88k|  } else {
  368|  8.88k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.88k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.88k]
  |  |  ------------------
  ------------------
  369|  8.88k|  }
  370|  8.88k|  return true;
  371|  8.88k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.88k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.88k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.88k|  stackvec<size> z(xs);
  338|  8.88k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.88k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.88k, False: 0]
  ------------------
  341|  8.88k|    limb y0 = y[0];
  342|  8.88k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.88k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.88k]
  |  |  ------------------
  ------------------
  343|  44.4k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 35.5k, False: 8.88k]
  ------------------
  344|  35.5k|      limb yi = y[index];
  345|  35.5k|      stackvec<size> zi;
  346|  35.5k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 35.5k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  35.5k|        zi.set_len(0);
  349|  35.5k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  35.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.5k]
  |  |  ------------------
  ------------------
  350|  35.5k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  35.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.5k]
  |  |  ------------------
  ------------------
  351|  35.5k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  35.5k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  35.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.5k]
  |  |  ------------------
  ------------------
  353|  35.5k|      }
  354|  35.5k|    }
  355|  8.88k|  }
  356|       |
  357|  8.88k|  x.normalize();
  358|  8.88k|  return true;
  359|  8.88k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.88k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.88k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.88k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.88k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   139k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   139k|    length = uint16_t(len);
   75|   139k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  44.4k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  44.4k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 44.4k, False: 0]
  ------------------
  108|  44.4k|      extend_unchecked(s);
  109|  44.4k|      return true;
  110|  44.4k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  44.4k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  44.4k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  44.4k|    limb* ptr = data + length;
  102|  44.4k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  44.4k|    set_len(len() + s.len());
  104|  44.4k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  35.5k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  35.5k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 35.5k]
  |  Branch (300:26): [True: 35.1k, False: 396]
  ------------------
  301|  35.1k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  35.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.1k]
  |  |  ------------------
  ------------------
  302|  35.1k|  }
  303|       |
  304|  35.5k|  bool carry = false;
  305|   326k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 290k, False: 35.5k]
  ------------------
  306|   290k|    limb xi = x[index + start];
  307|   290k|    limb yi = y[index];
  308|   290k|    bool c1 = false;
  309|   290k|    bool c2 = false;
  310|   290k|    xi = scalar_add(xi, yi, c1);
  311|   290k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 109k, False: 181k]
  ------------------
  312|   109k|      xi = scalar_add(xi, 1, c2);
  313|   109k|    }
  314|   290k|    x[index + start] = xi;
  315|   290k|    carry = c1 | c2;
  316|   290k|  }
  317|       |
  318|       |  // handle overflow
  319|  35.5k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 35.5k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  35.5k|  return true;
  323|  35.5k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  35.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  35.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 35.1k]
  ------------------
  132|      0|      return false;
  133|  35.1k|    } else {
  134|  35.1k|      resize_unchecked(new_len, value);
  135|  35.1k|      return true;
  136|  35.1k|    }
  137|  35.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  35.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  35.1k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 35.1k, False: 0]
  ------------------
  120|  35.1k|      size_t count = new_len - len();
  121|  35.1k|      limb* first = data + len();
  122|  35.1k|      limb* last = first + count;
  123|  35.1k|      ::std::fill(first, last, value);
  124|  35.1k|      set_len(new_len);
  125|  35.1k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  35.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|   100k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|   100k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 100k, False: 0]
  |  Branch (152:25): [True: 0, False: 100k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|   100k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   144k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   144k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   144k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   144k|    size_t rindex = length - index - 1;
   69|   144k|    return data[rindex];
   70|   144k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|   106k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|   106k|    return shl(exp);
  574|   106k|  }
_ZN10fast_float6bigint3shlEm:
  530|   106k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|   106k|    size_t rem = n % limb_bits;
  532|   106k|    size_t div = n / limb_bits;
  533|   106k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 90.8k, False: 15.5k]
  ------------------
  534|  90.8k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  90.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
  535|  90.8k|    }
  536|   106k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 24.0k, False: 82.3k]
  ------------------
  537|  24.0k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  24.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 24.0k]
  |  |  ------------------
  ------------------
  538|  24.0k|    }
  539|   106k|    return true;
  540|   106k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  90.8k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  90.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  90.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  90.8k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  90.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  90.8k|    size_t shl = n;
  493|  90.8k|    size_t shr = limb_bits - shl;
  494|  90.8k|    limb prev = 0;
  495|   321k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 230k, False: 90.8k]
  ------------------
  496|   230k|      limb xi = vec[index];
  497|   230k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   230k|      prev = xi;
  499|   230k|    }
  500|       |
  501|  90.8k|    limb carry = prev >> shr;
  502|  90.8k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 27.0k, False: 63.8k]
  ------------------
  503|  27.0k|      return vec.try_push(carry);
  504|  27.0k|    }
  505|  63.8k|    return true;
  506|  90.8k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  24.0k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  24.0k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  24.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  24.0k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 24.0k]
  ------------------
  512|      0|      return false;
  513|  24.0k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 24.0k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  24.0k|      limb* dst = vec.data + n;
  516|  24.0k|      const limb* src = vec.data;
  517|  24.0k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  24.0k|      limb* first = vec.data;
  520|  24.0k|      limb* last = first + n;
  521|  24.0k|      ::std::fill(first, last, 0);
  522|  24.0k|      vec.set_len(n + vec.len());
  523|  24.0k|      return true;
  524|  24.0k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  24.0k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  39.3k|  constexpr bool is_empty() const noexcept {
   80|  39.3k|    return length == 0;
   81|  39.3k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  15.3k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  15.3k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  15.3k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 15.3k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  15.3k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 2.05k, False: 13.2k]
  ------------------
  435|  2.05k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.2k|    } else {
  437|  13.2k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.2k|      truncated |= vec.nonzero(2);
  439|  13.2k|      return result;
  440|  13.2k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  15.3k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  2.05k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  2.05k|  truncated = false;
  167|  2.05k|  int shl = leading_zeroes(r0);
  168|  2.05k|  return r0 << shl;
  169|  2.05k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.2k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.2k|  int shl = leading_zeroes(r0);
  174|  13.2k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.2k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.2k|  } else {
  178|  13.2k|    int shr = 64 - shl;
  179|  13.2k|    truncated = (r1 << shl) != 0;
  180|  13.2k|    return (r0 << shl) | (r1 >> shr);
  181|  13.2k|  }
  182|  13.2k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.2k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.3k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 845, False: 12.4k]
  ------------------
  143|    845|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 791, False: 54]
  ------------------
  144|    791|        return true;
  145|    791|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.4k|    return false;
  149|  13.2k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  15.3k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  15.3k|    int lz = ctlz();
  560|  15.3k|    return int(limb_bits * vec.len()) - lz;
  561|  15.3k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  15.3k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  15.3k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 15.3k]
  ------------------
  545|      0|      return 0;
  546|  15.3k|    } else {
  547|  15.3k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  15.3k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  15.3k|    }
  555|  15.3k|  }
_ZN10fast_float6bigintC2Em:
  418|  91.1k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  91.1k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  91.1k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  91.1k|    vec.normalize();
  426|  91.1k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  91.1k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  91.1k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 91.1k]
  ------------------
  464|      0|      return 1;
  465|  91.1k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 91.1k]
  ------------------
  466|      0|      return -1;
  467|  91.1k|    } else {
  468|   179k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 169k, False: 10.4k]
  ------------------
  469|   169k|        limb xi = vec[index - 1];
  470|   169k|        limb yi = other.vec[index - 1];
  471|   169k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 12.4k, False: 156k]
  ------------------
  472|  12.4k|          return 1;
  473|   156k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 68.3k, False: 88.3k]
  ------------------
  474|  68.3k|          return -1;
  475|  68.3k|        }
  476|   169k|      }
  477|  10.4k|      return 0;
  478|  91.1k|    }
  479|  91.1k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   338k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   338k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   338k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   338k|    return data[index];
   64|   338k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   471k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   471k|  adjusted_mantissa answer;
   96|   471k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 13.4k, False: 458k]
  |  Branch (96:19): [True: 2.06k, False: 455k]
  ------------------
   97|  15.5k|    answer.power2 = 0;
   98|  15.5k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  15.5k|    return answer;
  101|  15.5k|  }
  102|   455k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 9.69k, False: 446k]
  ------------------
  103|       |    // we want to get infinity:
  104|  9.69k|    answer.power2 = binary::infinite_power();
  105|  9.69k|    answer.mantissa = 0;
  106|  9.69k|    return answer;
  107|  9.69k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   446k|  int lz = leading_zeroes(w);
  112|   446k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   446k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   446k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   446k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   446k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   446k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 937, False: 445k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    937|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 54, False: 883]
  ------------------
  137|     54|      answer.power2 = 0;
  138|     54|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     54|      return answer;
  141|     54|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    883|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    883|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    883|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    883|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 883, False: 0]
  ------------------
  156|    883|    return answer;
  157|    937|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   445k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 168k, False: 276k]
  |  Branch (162:30): [True: 167k, False: 1.11k]
  |  Branch (162:77): [True: 150k, False: 17.2k]
  ------------------
  163|   445k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 27.4k, False: 123k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  27.4k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 13.1k, False: 14.3k]
  ------------------
  168|  13.1k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  13.1k|    }
  170|  27.4k|  }
  171|       |
  172|   445k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   445k|  answer.mantissa >>= 1;
  174|   445k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 18.1k, False: 427k]
  ------------------
  175|  18.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  18.1k|    answer.power2++; // undo previous addition
  177|  18.1k|  }
  178|       |
  179|   445k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   445k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.92k, False: 442k]
  ------------------
  181|  2.92k|    answer.power2 = binary::infinite_power();
  182|  2.92k|    answer.mantissa = 0;
  183|  2.92k|  }
  184|   445k|  return answer;
  185|   446k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   497k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   497k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   497k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   497k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   497k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   497k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   497k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 82.6k, False: 414k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  82.6k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  82.6k|    firstproduct.low += secondproduct.high;
   35|  82.6k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 69.4k, False: 13.1k]
  ------------------
   36|  69.4k|      firstproduct.high++;
   37|  69.4k|    }
   38|  82.6k|  }
   39|   497k|  return firstproduct;
   40|   497k|}
_ZN10fast_float6detail5powerEi:
   58|   979k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   979k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   979k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  51.1k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  51.1k|  int lz = leading_zeroes(w);
   82|  51.1k|  w <<= lz;
   83|  51.1k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  51.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  51.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  51.1k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  51.1k|  int hilz = int(w >> 63) ^ 1;
   69|  51.1k|  adjusted_mantissa answer;
   70|  51.1k|  answer.mantissa = w << hilz;
   71|  51.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  51.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  51.1k|  return answer;
   74|  51.1k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   440k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   440k|  adjusted_mantissa answer;
   96|   440k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 8.11k, False: 432k]
  |  Branch (96:19): [True: 442, False: 431k]
  ------------------
   97|  8.55k|    answer.power2 = 0;
   98|  8.55k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  8.55k|    return answer;
  101|  8.55k|  }
  102|   431k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.86k, False: 426k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.86k|    answer.power2 = binary::infinite_power();
  105|  4.86k|    answer.mantissa = 0;
  106|  4.86k|    return answer;
  107|  4.86k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   426k|  int lz = leading_zeroes(w);
  112|   426k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   426k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   426k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   426k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   426k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   426k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 14.5k, False: 412k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  14.5k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 14.4k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  14.4k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  14.4k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  14.4k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  14.4k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 14.4k, False: 0]
  ------------------
  156|  14.4k|    return answer;
  157|  14.5k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   412k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 131k, False: 280k]
  |  Branch (162:30): [True: 73.6k, False: 57.8k]
  |  Branch (162:77): [True: 65.3k, False: 8.22k]
  ------------------
  163|   412k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 23.1k, False: 42.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  23.1k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 15.1k, False: 8.05k]
  ------------------
  168|  15.1k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  15.1k|    }
  170|  23.1k|  }
  171|       |
  172|   412k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   412k|  answer.mantissa >>= 1;
  174|   412k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.4k, False: 397k]
  ------------------
  175|  14.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.4k|    answer.power2++; // undo previous addition
  177|  14.4k|  }
  178|       |
  179|   412k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   412k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 284, False: 412k]
  ------------------
  181|    284|    answer.power2 = binary::infinite_power();
  182|    284|    answer.mantissa = 0;
  183|    284|  }
  184|   412k|  return answer;
  185|   426k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   482k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   482k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   482k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   482k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   482k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   482k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   482k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 127k, False: 354k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   127k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   127k|    firstproduct.low += secondproduct.high;
   35|   127k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 65.4k, False: 62.3k]
  ------------------
   36|  65.4k|      firstproduct.high++;
   37|  65.4k|    }
   38|   127k|  }
   39|   482k|  return firstproduct;
   40|   482k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  55.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  55.3k|  int lz = leading_zeroes(w);
   82|  55.3k|  w <<= lz;
   83|  55.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  55.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  55.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  55.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  55.3k|  int hilz = int(w >> 63) ^ 1;
   69|  55.3k|  adjusted_mantissa answer;
   70|  55.3k|  answer.mantissa = w << hilz;
   71|  55.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  55.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  55.3k|  return answer;
   74|  55.3k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  51.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  51.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  51.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  51.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  51.1k|  size_t digits = 0;
  413|  51.1k|  bigint bigmant;
  414|  51.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  51.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  51.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 880, False: 50.2k]
  ------------------
  418|    880|    return positive_digit_comp<T>(bigmant, exponent);
  419|  50.2k|  } else {
  420|  50.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  50.2k|  }
  422|  51.1k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|   106k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|   106k|  uint64_t mantissa = num.mantissa;
   30|   106k|  int32_t exponent = int32_t(num.exponent);
   31|   532k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 426k, False: 106k]
  ------------------
   32|   426k|    mantissa /= 10000;
   33|   426k|    exponent += 4;
   34|   426k|  }
   35|   213k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 106k, False: 106k]
  ------------------
   36|   106k|    mantissa /= 100;
   37|   106k|    exponent += 2;
   38|   106k|  }
   39|   106k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 106k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|   106k|  return exponent;
   44|   106k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|   106k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|   106k|  size_t counter = 0;
  245|   106k|  digits = 0;
  246|   106k|  limb value = 0;
  247|   106k|#ifdef FASTFLOAT_64BIT_LIMB
  248|   106k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|   106k|  UC const * p = num.integer.ptr;
  255|   106k|  UC const * pend = p + num.integer.len();
  256|   106k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   230k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 124k, False: 106k]
  ------------------
  259|   232k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 136k, False: 96.9k]
  |  Branch (259:45): [True: 108k, False: 27.0k]
  |  Branch (259:70): [True: 108k, False: 420]
  ------------------
  260|   108k|      parse_eight_digits(p, value, counter, digits);
  261|   108k|    }
  262|   453k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 419k, False: 33.7k]
  |  Branch (262:30): [True: 329k, False: 90.2k]
  |  Branch (262:43): [True: 329k, False: 420]
  ------------------
  263|   329k|      parse_one_digit(p, value, counter, digits);
  264|   329k|    }
  265|   124k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 420, False: 123k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    420|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    420|      bool truncated = is_truncated(p, pend);
  269|    420|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 388, False: 32]
  ------------------
  270|    388|        truncated |= is_truncated(num.fraction);
  271|    388|      }
  272|    420|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 232, False: 188]
  ------------------
  273|    232|        round_up_bigint(result, digits);
  274|    232|      }
  275|    420|      return;
  276|   123k|    } else {
  277|   123k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   123k|      counter = 0;
  279|   123k|      value = 0;
  280|   123k|    }
  281|   124k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|   106k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 91.8k, False: 14.1k]
  ------------------
  285|  91.8k|    p = num.fraction.ptr;
  286|  91.8k|    pend = p + num.fraction.len();
  287|  91.8k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.8k, False: 76.0k]
  ------------------
  288|  15.8k|      skip_zeros(p, pend);
  289|  15.8k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   327k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 243k, False: 83.9k]
  ------------------
  292|   611k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 504k, False: 107k]
  |  Branch (292:47): [True: 371k, False: 133k]
  |  Branch (292:72): [True: 368k, False: 2.88k]
  ------------------
  293|   368k|        parse_eight_digits(p, value, counter, digits);
  294|   368k|      }
  295|  1.01M|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 857k, False: 155k]
  |  Branch (295:32): [True: 775k, False: 82.4k]
  |  Branch (295:45): [True: 769k, False: 5.56k]
  ------------------
  296|   769k|        parse_one_digit(p, value, counter, digits);
  297|   769k|      }
  298|   243k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 7.96k, False: 235k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  7.96k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  7.96k|        bool truncated = is_truncated(p, pend);
  302|  7.96k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 4.61k, False: 3.34k]
  ------------------
  303|  4.61k|          round_up_bigint(result, digits);
  304|  4.61k|        }
  305|  7.96k|        return;
  306|   235k|      } else {
  307|   235k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   235k|        counter = 0;
  309|   235k|        value = 0;
  310|   235k|      }
  311|   243k|    }
  312|  91.8k|  }
  313|       |
  314|  98.1k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 98.1k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  98.1k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   122k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   122k|  uint64_t val;
  161|   195k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 142k, False: 53.0k]
  ------------------
  162|   142k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   142k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 69.3k, False: 72.8k]
  ------------------
  164|  69.3k|      break;
  165|  69.3k|    }
  166|  72.8k|    first += int_cmp_len<UC>();
  167|  72.8k|  }
  168|   299k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 283k, False: 15.8k]
  ------------------
  169|   283k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 106k, False: 177k]
  ------------------
  170|   106k|      break;
  171|   106k|    }
  172|   177k|    first++;
  173|   177k|  }
  174|   122k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   476k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   476k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   476k|  p += 8;
  210|   476k|  counter += 8;
  211|   476k|  count += 8;
  212|   476k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  1.09M|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  1.09M|  value = value * 10 + limb(*p - UC('0'));
  218|  1.09M|  p++;
  219|  1.09M|  counter++;
  220|  1.09M|  count++;
  221|  1.09M|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   372k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   372k|  big.mul(power);
  226|   372k|  big.add(value);
  227|   372k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  8.76k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  8.76k|  uint64_t val;
  183|  20.3k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 13.7k, False: 6.56k]
  ------------------
  184|  13.7k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  13.7k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 2.20k, False: 11.5k]
  ------------------
  186|  2.20k|      return true;
  187|  2.20k|    }
  188|  11.5k|    first += int_cmp_len<UC>();
  189|  11.5k|  }
  190|  10.6k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 6.77k, False: 3.84k]
  ------------------
  191|  6.77k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.71k, False: 4.05k]
  ------------------
  192|  2.71k|      return true;
  193|  2.71k|    }
  194|  4.05k|    ++first;
  195|  4.05k|  }
  196|  3.84k|  return false;
  197|  6.56k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    388|bool is_truncated(span<const UC> s) noexcept {
  201|    388|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    388|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  4.84k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  4.84k|  add_native(big, 10, 1);
  234|  4.84k|  count++;
  235|  4.84k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    880|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    880|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    880|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    880|  adjusted_mantissa answer;
  324|    880|  bool truncated;
  325|    880|  answer.mantissa = bigmant.hi64(truncated);
  326|    880|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    880|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    880|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    880|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    880|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    880|    });
  333|    880|  });
  334|       |
  335|    880|  return answer;
  336|    880|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    880|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    880|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    880|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 880]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    880|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    880|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 880]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    880|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    880|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 880]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    880|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    880|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    880|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    880|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    880|    });
  333|    880|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    880|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    880|  const uint64_t mask
  125|    880|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 880]
  ------------------
  126|    880|    ? UINT64_MAX
  127|    880|    : (uint64_t(1) << shift) - 1;
  128|    880|  const uint64_t halfway
  129|    880|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 880]
  ------------------
  130|    880|    ? 0
  131|    880|    : uint64_t(1) << (shift - 1);
  132|    880|  uint64_t truncated_bits = am.mantissa & mask;
  133|    880|  bool is_above = truncated_bits > halfway;
  134|    880|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    880|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 880]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    880|  } else {
  140|    880|    am.mantissa >>= shift;
  141|    880|  }
  142|    880|  am.power2 += shift;
  143|       |
  144|    880|  bool is_odd = (am.mantissa & 1) == 1;
  145|    880|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    880|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    880|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    880|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 794]
  |  Branch (331:27): [True: 644, False: 150]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 96, False: 630]
  |  Branch (331:66): [True: 32, False: 64]
  ------------------
  332|    880|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  50.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  50.2k|  bigint& real_digits = bigmant;
  347|  50.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  50.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  50.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  50.2k|  T b;
  354|  50.2k|  to_float(false, am_b, b);
  355|  50.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  50.2k|  bigint theor_digits(theor.mantissa);
  357|  50.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  50.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  50.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  50.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 50.2k, False: 0]
  ------------------
  363|  50.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  50.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  50.2k|  }
  365|  50.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 50.2k, False: 0]
  ------------------
  366|  50.2k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  50.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  50.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  50.2k|  int ord = real_digits.compare(theor_digits);
  373|  50.2k|  adjusted_mantissa answer = am;
  374|  50.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  50.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  50.2k|      (void)_;  // not needed, since we've done our comparison
  377|  50.2k|      (void)__; // not needed, since we've done our comparison
  378|  50.2k|      if (ord > 0) {
  379|  50.2k|        return true;
  380|  50.2k|      } else if (ord < 0) {
  381|  50.2k|        return false;
  382|  50.2k|      } else {
  383|  50.2k|        return is_odd;
  384|  50.2k|      }
  385|  50.2k|    });
  386|  50.2k|  });
  387|       |
  388|  50.2k|  return answer;
  389|  50.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  50.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  50.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  50.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 50.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  50.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  50.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 50.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  50.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  50.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 50.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  50.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  50.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  91.1k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  91.1k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 91.1k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  91.1k|  } else {
  153|  91.1k|    am.mantissa >>= shift;
  154|  91.1k|  }
  155|  91.1k|  am.power2 += shift;
  156|  91.1k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  50.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  50.2k|  adjusted_mantissa am = to_extended(value);
   84|  50.2k|  am.mantissa <<= 1;
   85|  50.2k|  am.mantissa += 1;
   86|  50.2k|  am.power2 -= 1;
   87|  50.2k|  return am;
   88|  50.2k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  50.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  50.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  50.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  50.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  50.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  50.2k|  adjusted_mantissa am;
   56|  50.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  50.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  50.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  50.2k|#endif
   63|  50.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 50.2k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  50.2k|  } else {
   68|       |    // normal
   69|  50.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  50.2k|    am.power2 -= bias;
   71|  50.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  50.2k|  }
   73|       |
   74|  50.2k|  return am;
   75|  50.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  50.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  50.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  50.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 50.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  50.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  50.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 50.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  50.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  50.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 50.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  50.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  50.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  50.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  50.2k|      (void)_;  // not needed, since we've done our comparison
  377|  50.2k|      (void)__; // not needed, since we've done our comparison
  378|  50.2k|      if (ord > 0) {
  379|  50.2k|        return true;
  380|  50.2k|      } else if (ord < 0) {
  381|  50.2k|        return false;
  382|  50.2k|      } else {
  383|  50.2k|        return is_odd;
  384|  50.2k|      }
  385|  50.2k|    });
  386|  50.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  50.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  50.2k|  const uint64_t mask
  125|  50.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 50.2k]
  ------------------
  126|  50.2k|    ? UINT64_MAX
  127|  50.2k|    : (uint64_t(1) << shift) - 1;
  128|  50.2k|  const uint64_t halfway
  129|  50.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 50.2k]
  ------------------
  130|  50.2k|    ? 0
  131|  50.2k|    : uint64_t(1) << (shift - 1);
  132|  50.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  50.2k|  bool is_above = truncated_bits > halfway;
  134|  50.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  50.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 50.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  50.2k|  } else {
  140|  50.2k|    am.mantissa >>= shift;
  141|  50.2k|  }
  142|  50.2k|  am.power2 += shift;
  143|       |
  144|  50.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  50.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  50.2k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  50.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  50.2k|      (void)_;  // not needed, since we've done our comparison
  377|  50.2k|      (void)__; // not needed, since we've done our comparison
  378|  50.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 544, False: 49.7k]
  ------------------
  379|    544|        return true;
  380|  49.7k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 40.3k, False: 9.38k]
  ------------------
  381|  40.3k|        return false;
  382|  40.3k|      } else {
  383|  9.38k|        return is_odd;
  384|  9.38k|      }
  385|  50.2k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  55.3k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  55.3k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  55.3k|  int32_t sci_exp = scientific_exponent(num);
  411|  55.3k|  size_t max_digits = binary_format<T>::max_digits();
  412|  55.3k|  size_t digits = 0;
  413|  55.3k|  bigint bigmant;
  414|  55.3k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  55.3k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  55.3k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 14.4k, False: 40.9k]
  ------------------
  418|  14.4k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  40.9k|  } else {
  420|  40.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  40.9k|  }
  422|  55.3k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.4k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.4k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  14.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.4k|  adjusted_mantissa answer;
  324|  14.4k|  bool truncated;
  325|  14.4k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.4k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.4k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.4k|    });
  333|  14.4k|  });
  334|       |
  335|  14.4k|  return answer;
  336|  14.4k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.4k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.16k, False: 13.2k]
  ------------------
  109|  1.16k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.16k|    am.power2++;
  111|  1.16k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.4k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.4k|    });
  333|  14.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.4k|  const uint64_t mask
  125|  14.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.4k]
  ------------------
  126|  14.4k|    ? UINT64_MAX
  127|  14.4k|    : (uint64_t(1) << shift) - 1;
  128|  14.4k|  const uint64_t halfway
  129|  14.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.4k]
  ------------------
  130|  14.4k|    ? 0
  131|  14.4k|    : uint64_t(1) << (shift - 1);
  132|  14.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.4k|  bool is_above = truncated_bits > halfway;
  134|  14.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.4k|  } else {
  140|  14.4k|    am.mantissa >>= shift;
  141|  14.4k|  }
  142|  14.4k|  am.power2 += shift;
  143|       |
  144|  14.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.4k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.30k, False: 13.1k]
  |  Branch (331:27): [True: 12.1k, False: 1.01k]
  |  Branch (331:41): [True: 3.97k, False: 8.14k]
  |  Branch (331:56): [True: 401, False: 8.75k]
  |  Branch (331:66): [True: 82, False: 319]
  ------------------
  332|  14.4k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  40.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  40.9k|  bigint& real_digits = bigmant;
  347|  40.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  40.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  40.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  40.9k|  T b;
  354|  40.9k|  to_float(false, am_b, b);
  355|  40.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  40.9k|  bigint theor_digits(theor.mantissa);
  357|  40.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  40.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  40.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  40.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 40.9k, False: 0]
  ------------------
  363|  40.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  40.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  40.9k|  }
  365|  40.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 5.63k, False: 35.3k]
  ------------------
  366|  5.63k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  5.63k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  35.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 35.1k, False: 158]
  ------------------
  368|  35.1k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  35.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  35.1k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  40.9k|  int ord = real_digits.compare(theor_digits);
  373|  40.9k|  adjusted_mantissa answer = am;
  374|  40.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  40.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.9k|      (void)_;  // not needed, since we've done our comparison
  377|  40.9k|      (void)__; // not needed, since we've done our comparison
  378|  40.9k|      if (ord > 0) {
  379|  40.9k|        return true;
  380|  40.9k|      } else if (ord < 0) {
  381|  40.9k|        return false;
  382|  40.9k|      } else {
  383|  40.9k|        return is_odd;
  384|  40.9k|      }
  385|  40.9k|    });
  386|  40.9k|  });
  387|       |
  388|  40.9k|  return answer;
  389|  40.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  40.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  40.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  40.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 182, False: 40.7k]
  ------------------
   96|       |    // have a denormal float
   97|    182|    int32_t shift = -am.power2 + 1;
   98|    182|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    182|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 182, False: 0]
  ------------------
  101|    182|    return;
  102|    182|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  40.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  40.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 40.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  40.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  40.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 40.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  40.7k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  40.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  40.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  40.9k|  adjusted_mantissa am = to_extended(value);
   84|  40.9k|  am.mantissa <<= 1;
   85|  40.9k|  am.mantissa += 1;
   86|  40.9k|  am.power2 -= 1;
   87|  40.9k|  return am;
   88|  40.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  40.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  40.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  40.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  40.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  40.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  40.9k|  adjusted_mantissa am;
   56|  40.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  40.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  40.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  40.9k|#endif
   63|  40.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 182, False: 40.7k]
  ------------------
   64|       |    // denormal
   65|    182|    am.power2 = 1 - bias;
   66|    182|    am.mantissa = bits & mantissa_mask;
   67|  40.7k|  } else {
   68|       |    // normal
   69|  40.7k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  40.7k|    am.power2 -= bias;
   71|  40.7k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  40.7k|  }
   73|       |
   74|  40.9k|  return am;
   75|  40.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  40.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  40.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  40.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 182, False: 40.7k]
  ------------------
   96|       |    // have a denormal float
   97|    182|    int32_t shift = -am.power2 + 1;
   98|    182|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    182|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 182, False: 0]
  ------------------
  101|    182|    return;
  102|    182|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  40.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  40.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 118, False: 40.6k]
  ------------------
  109|    118|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    118|    am.power2++;
  111|    118|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  40.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  40.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 40.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  40.7k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  40.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  40.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.9k|      (void)_;  // not needed, since we've done our comparison
  377|  40.9k|      (void)__; // not needed, since we've done our comparison
  378|  40.9k|      if (ord > 0) {
  379|  40.9k|        return true;
  380|  40.9k|      } else if (ord < 0) {
  381|  40.9k|        return false;
  382|  40.9k|      } else {
  383|  40.9k|        return is_odd;
  384|  40.9k|      }
  385|  40.9k|    });
  386|  40.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  40.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  40.9k|  const uint64_t mask
  125|  40.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 40.9k]
  ------------------
  126|  40.9k|    ? UINT64_MAX
  127|  40.9k|    : (uint64_t(1) << shift) - 1;
  128|  40.9k|  const uint64_t halfway
  129|  40.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 40.9k]
  ------------------
  130|  40.9k|    ? 0
  131|  40.9k|    : uint64_t(1) << (shift - 1);
  132|  40.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  40.9k|  bool is_above = truncated_bits > halfway;
  134|  40.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  40.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 40.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  40.9k|  } else {
  140|  40.9k|    am.mantissa >>= shift;
  141|  40.9k|  }
  142|  40.9k|  am.power2 += shift;
  143|       |
  144|  40.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  40.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  40.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  40.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.9k|      (void)_;  // not needed, since we've done our comparison
  377|  40.9k|      (void)__; // not needed, since we've done our comparison
  378|  40.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.8k, False: 29.0k]
  ------------------
  379|  11.8k|        return true;
  380|  29.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 28.0k, False: 1.06k]
  ------------------
  381|  28.0k|        return false;
  382|  28.0k|      } else {
  383|  1.06k|        return is_odd;
  384|  1.06k|      }
  385|  40.9k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.69M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.74M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   732k|  constexpr size_t len() const noexcept {
  238|   732k|    return length;
  239|   732k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.17M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.17M|  return -10;
  469|  1.17M|#endif
  470|  1.17M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.10M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.10M|  return 10;
  517|  1.10M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   931k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   931k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   931k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  3.14M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  3.14M|  return 23;
  477|  3.14M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   856k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   856k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   856k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  1.12M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   458k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   458k|  return -65;
  568|   458k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   455k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   455k|  return 38;
  559|   455k|}
_ZN10fast_float14leading_zeroesEm:
  268|  1.01M|int leading_zeroes(uint64_t input_num) {
  269|  1.01M|  assert(input_num > 0);
  270|  1.01M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|  1.01M|  return __builtin_clzll(input_num);
  285|  1.01M|#endif
  286|  1.01M|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.19M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.19M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.19M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.19M|  answer.low = uint64_t(r);
  337|  1.19M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.19M|  return answer;
  342|  1.19M|}
_ZN10fast_float8value128C2Ev:
  251|  1.19M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   548k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   548k|  return -127;
  500|   548k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   168k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   168k|  return -17;
  493|   168k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   167k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   167k|  return 10;
  485|   167k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   316k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   316k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 106k, False: 210k]
  |  Branch (352:38): [True: 0, False: 210k]
  ------------------
  353|   316k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  51.1k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  51.1k|  return 114;
  575|  51.1k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   299k|{
  650|   299k|    return sizeof(uint64_t) / sizeof(UC);
  651|   299k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   155k|{
  644|   155k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   155k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   155k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   159k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   592k|  constexpr size_t len() const noexcept {
  238|   592k|    return length;
  239|   592k|  }
_ZNK10fast_float4spanImEixEm:
  241|   335k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   335k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   335k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   335k|    return ptr[index];
  244|   335k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   369k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   369k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   369k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   369k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   369k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   369k|  ::memcpy(&value, &word, sizeof(T));
  615|   369k|#endif
  616|   369k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   369k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   877k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   877k|  return 0xFF;
  507|   877k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.34M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   210k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   105k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   105k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.27M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.27M|  return -22;
  461|  1.27M|#endif
  462|  1.27M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.23M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.23M|  return 22;
  514|  1.23M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|  1.02M|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|  1.02M|  return uint64_t(2) << mantissa_explicit_bits();
  521|  1.02M|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  3.08M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  3.08M|  return 52;
  474|  3.08M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|  1.00M|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|  1.00M|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|  1.00M|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   432k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   432k|  return -342;
  564|   432k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   431k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   431k|  return 308;
  555|   431k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   537k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   537k|  return -1023;
  497|   537k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   131k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   131k|  return -4;
  489|   131k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  73.6k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  73.6k|  return 23;
  481|  73.6k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  55.3k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  55.3k|  return 769;
  572|  55.3k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   316k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   316k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   316k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   316k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   316k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   316k|  ::memcpy(&value, &word, sizeof(T));
  615|   316k|#endif
  616|   316k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   316k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   788k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   788k|  return 0x7FF;
  504|   788k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.12M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.12M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.12M|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  1.12M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.12M|    return from_chars_advanced(first, last, value, options);
  143|  1.12M|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.12M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.12M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.12M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.12M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.12M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.12M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.12M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.12M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.12M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.12M|  answer.ec = std::errc(); // be optimistic
  221|  1.12M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.12M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.05M, False: 66.7k]
  |  Branch (227:69): [True: 982k, False: 74.1k]
  |  Branch (227:131): [True: 879k, False: 102k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   879k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 879k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   879k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 805k, False: 74.7k]
  ------------------
  239|   805k|        value = T(pns.mantissa);
  240|   805k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 13.0k, False: 792k]
  ------------------
  241|   792k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   805k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 805k]
  ------------------
  243|   805k|        return answer;
  244|   805k|      }
  245|   879k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   879k|  }
  262|   318k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   318k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 151k, False: 166k]
  |  Branch (263:29): [True: 151k, False: 0]
  ------------------
  264|   151k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 51.1k, False: 100k]
  ------------------
  265|  51.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  51.1k|    }
  267|   151k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   318k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 51.1k, False: 267k]
  ------------------
  271|   318k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   318k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 305k, False: 13.4k]
  |  Branch (273:29): [True: 22.7k, False: 282k]
  |  Branch (273:49): [True: 1.69k, False: 21.0k]
  |  Branch (273:68): [True: 8.67k, False: 308k]
  ------------------
  274|  10.3k|    answer.ec = std::errc::result_out_of_range;
  275|  10.3k|  }
  276|   318k|  return answer;
  277|  1.12M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.95M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.95M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.95M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.95M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.95M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.95M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  52.6k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  52.6k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  52.6k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  52.6k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  52.6k|    return from_chars_advanced(first, last, value, options);
  143|  52.6k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  52.6k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  52.6k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  52.6k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  52.6k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  52.6k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 52.6k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  52.6k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  52.6k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 52.6k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  52.6k|  answer.ec = std::errc(); // be optimistic
  221|  52.6k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  52.6k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 52.5k, False: 158]
  |  Branch (227:69): [True: 51.6k, False: 854]
  |  Branch (227:131): [True: 51.6k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  51.6k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 51.6k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  51.6k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 51.6k, False: 0]
  ------------------
  239|  51.6k|        value = T(pns.mantissa);
  240|  51.6k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 51.6k]
  ------------------
  241|  51.6k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  51.6k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 51.6k]
  ------------------
  243|  51.6k|        return answer;
  244|  51.6k|      }
  245|  51.6k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  51.6k|  }
  262|  1.01k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  1.01k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 1.01k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  1.01k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 1.01k]
  ------------------
  271|  1.01k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  1.01k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 994, False: 18]
  |  Branch (273:29): [True: 888, False: 106]
  |  Branch (273:49): [True: 126, False: 762]
  |  Branch (273:68): [True: 762, False: 124]
  ------------------
  274|    888|    answer.ec = std::errc::result_out_of_range;
  275|    888|  }
  276|  1.01k|  return answer;
  277|  52.6k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.22M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.22M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.22M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.22M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.22M|    return from_chars_advanced(first, last, value, options);
  143|  1.22M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.22M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.22M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.22M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.22M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.22M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.22M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.22M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.22M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.22M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.22M|  answer.ec = std::errc(); // be optimistic
  221|  1.22M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.22M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.18M, False: 37.1k]
  |  Branch (227:69): [True: 1.10M, False: 76.8k]
  |  Branch (227:131): [True: 970k, False: 139k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   970k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 970k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   970k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 949k, False: 20.8k]
  ------------------
  239|   949k|        value = T(pns.mantissa);
  240|   949k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 49.4k, False: 899k]
  ------------------
  241|   899k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   949k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 949k]
  ------------------
  243|   949k|        return answer;
  244|   949k|      }
  245|   970k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   970k|  }
  262|   274k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   274k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 164k, False: 109k]
  |  Branch (263:29): [True: 164k, False: 0]
  ------------------
  264|   164k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 55.3k, False: 109k]
  ------------------
  265|  55.3k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  55.3k|    }
  267|   164k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   274k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 55.3k, False: 218k]
  ------------------
  271|   274k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   274k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 266k, False: 8.09k]
  |  Branch (273:29): [True: 12.5k, False: 253k]
  |  Branch (273:49): [True: 460, False: 12.0k]
  |  Branch (273:68): [True: 4.08k, False: 269k]
  ------------------
  274|  4.54k|    answer.ec = std::errc::result_out_of_range;
  275|  4.54k|  }
  276|   274k|  return answer;
  277|  1.22M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  52.7k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  52.7k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  52.7k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  52.7k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  52.7k|    return from_chars_advanced(first, last, value, options);
  143|  52.7k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  52.7k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  52.7k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  52.7k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  52.7k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  52.7k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 52.7k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  52.7k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  52.7k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 52.7k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  52.7k|  answer.ec = std::errc(); // be optimistic
  221|  52.7k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  52.7k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 52.6k, False: 158]
  |  Branch (227:69): [True: 51.7k, False: 812]
  |  Branch (227:131): [True: 51.7k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  51.7k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 51.7k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  51.7k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 51.7k, False: 0]
  ------------------
  239|  51.7k|        value = T(pns.mantissa);
  240|  51.7k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 51.7k]
  ------------------
  241|  51.7k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  51.7k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 51.7k]
  ------------------
  243|  51.7k|        return answer;
  244|  51.7k|      }
  245|  51.7k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  51.7k|  }
  262|    970|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    970|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 970]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    970|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 970]
  ------------------
  271|    970|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    970|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 952, False: 18]
  |  Branch (273:29): [True: 492, False: 460]
  |  Branch (273:49): [True: 0, False: 492]
  |  Branch (273:68): [True: 492, False: 478]
  ------------------
  274|    492|    answer.ec = std::errc::result_out_of_range;
  275|    492|  }
  276|    970|  return answer;
  277|  52.7k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  8.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   943k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   943k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  7.21M|{
 3807|  7.21M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  7.21M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  7.21M|    }
 3810|  7.21M|    else if constexpr (sizeof(U) == 2) {
 3811|  7.21M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  7.21M|    }
 3813|  7.21M|    else {
 3814|       |        // utf-32
 3815|  7.21M|        static_assert(sizeof(U) == 4);
 3816|  7.21M|        SCN_UNUSED(ch);
 3817|  7.21M|        return 1;
 3818|  7.21M|    }
 3819|  7.21M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  7.21M|{
 3771|  7.21M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  7.21M|    SCN_GCC_COMPAT_PUSH
 3774|  7.21M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  7.21M|    constexpr char lengths[] =
 3776|  7.21M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  7.21M|        "\1\1\1\1\1\1\1\1"
 3778|  7.21M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  7.21M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  7.21M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  7.21M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  7.21M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  7.21M|    SCN_GCC_COMPAT_POP
 3785|  7.21M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  6.74M|{
 4013|  6.74M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  6.74M|        return decode_utf8_code_point_exhaustive(input);
 4015|  6.74M|    }
 4016|  6.74M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  6.74M|        return decode_utf16_code_point_exhaustive(input);
 4018|  6.74M|    }
 4019|  6.74M|    else {
 4020|  6.74M|        SCN_EXPECT(input.size() == 1);
 4021|  6.74M|        auto cp = static_cast<char32_t>(input.front());
 4022|  6.74M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  6.74M|            return invalid_code_point;
 4024|  6.74M|        }
 4025|  6.74M|        return cp;
 4026|  6.74M|    }
 4027|  6.74M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  6.74M|{
 3826|  6.74M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  6.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  6.74M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  6.74M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  6.74M|    };
 3831|       |
 3832|  6.74M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 6.44M, False: 292k]
  ------------------
 3833|  6.44M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 831, False: 6.44M]
  ------------------
 3834|    831|            SCN_UNLIKELY_ATTR
 3835|    831|            return invalid_code_point;
 3836|    831|        }
 3837|  6.44M|        return static_cast<char32_t>(input[0]);
 3838|  6.44M|    }
 3839|       |
 3840|   292k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 258k, False: 34.1k]
  ------------------
 3841|   258k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 145, False: 258k]
  ------------------
 3842|    145|            SCN_UNLIKELY_ATTR
 3843|    145|            return invalid_code_point;
 3844|    145|        }
 3845|   258k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 53.8k, False: 204k]
  ------------------
 3846|  53.8k|            SCN_UNLIKELY_ATTR
 3847|  53.8k|            return invalid_code_point;
 3848|  53.8k|        }
 3849|       |
 3850|   204k|        char32_t cp{};
 3851|   204k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   204k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   204k|        return cp;
 3854|   258k|    }
 3855|       |
 3856|  34.1k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 14.9k, False: 19.1k]
  ------------------
 3857|  14.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 173, False: 14.8k]
  ------------------
 3858|    173|            SCN_UNLIKELY_ATTR
 3859|    173|            return invalid_code_point;
 3860|    173|        }
 3861|  14.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 7.04k, False: 7.78k]
  ------------------
 3862|  14.8k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.47k, False: 6.30k]
  ------------------
 3863|  8.52k|            SCN_UNLIKELY_ATTR
 3864|  8.52k|            return invalid_code_point;
 3865|  8.52k|        }
 3866|       |
 3867|  6.30k|        char32_t cp{};
 3868|  6.30k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  6.30k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  6.30k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  6.30k|        return cp;
 3872|  14.8k|    }
 3873|       |
 3874|  19.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 19.1k, False: 0]
  ------------------
 3875|  19.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 19.1k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  19.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 2.74k, False: 16.3k]
  ------------------
 3880|  2.74k|            SCN_UNLIKELY_ATTR
 3881|  2.74k|            return invalid_code_point;
 3882|  2.74k|        }
 3883|  16.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 3.88k, False: 12.4k]
  ------------------
 3884|  16.3k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.33k, False: 11.1k]
  ------------------
 3885|  16.3k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 1.75k, False: 9.40k]
  ------------------
 3886|  6.97k|            SCN_UNLIKELY_ATTR
 3887|  6.97k|            return invalid_code_point;
 3888|  6.97k|        }
 3889|       |
 3890|  9.40k|        char32_t cp{};
 3891|  9.40k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  9.40k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  9.40k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  9.40k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  9.40k|        return cp;
 3896|  16.3k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   321k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   321k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   321k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  13.9M|{
 3699|  13.9M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  13.9M|                                          decltype(first), decltype(last)> &&
 3701|  13.9M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  13.9M|        return {first, last};
 3703|  13.9M|    }
 3704|  13.9M|    else {
 3705|  13.9M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  13.9M|                                       to_address(first), to_address(last)))};
 3707|  13.9M|    }
 3708|  13.9M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  42.3M|{
  326|  42.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  42.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  42.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  47.2M|{
  304|  47.2M|    return p;
  305|  47.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  20.6M|{
 3730|  20.6M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  20.6M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  20.6M|                      decltype(it)> &&
 3733|  20.6M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  20.6M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  20.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  20.6M|        return it;
 3736|  20.6M|    }
 3737|  20.6M|    else {
 3738|  20.6M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  20.6M|    }
 3740|  20.6M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   139k|    {
 2724|   139k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   139k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   139k|    {
 2705|   139k|        return decay_copy(t.begin());
 2706|   139k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  28.4M|{
 1949|  28.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  28.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  28.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.32M|    {
 2781|  5.32M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.32M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.32M|    {
 2763|  5.32M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.32M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   377k|{
 8867|   377k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   377k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   377k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   377k|    static_cast<    \
  |  |  929|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   377k|    static_cast<    \
  |  |  929|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   377k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|  1.53M|{
 5396|  1.53M|    detail::check_scan_arg_types<Args...>();
 5397|  1.53M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.53M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.94M|{
 5135|  1.94M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.94M|                  "Scan argument types must be default constructible");
 5137|  1.94M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.94M|                  "Scan argument types must be Destructible");
 5139|  1.94M|    static_assert(
 5140|  1.94M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.94M|        "Scan argument types must not be references");
 5142|  1.94M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|  1.53M|    {
 5349|  1.53M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.53M|    {
 5360|  1.53M|        return {detail::make_arg<
 5361|  1.53M|            kind, Context,
 5362|  1.53M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.53M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.53M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|  1.53M|{
 5170|  1.53M|    return make_value<Context>(value).ref_value;
 5171|  1.53M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|  1.69M|{
 5120|  1.69M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.69M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.69M|                                  needs_context_tag>) {
 5124|  1.69M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.69M|    }
 5126|  1.69M|    else {
 5127|  1.69M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.69M|            value, context_tag<Context>{}));
 5129|  1.69M|    }
 5130|  1.69M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|  1.69M|    {                                                                        \
 4959|  1.69M|        return val;                                                          \
 4960|  1.69M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.94M|{
 5089|  1.94M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.94M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.94M|    constexpr bool scannable_char =
 5093|  1.94M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.94M|    static_assert(scannable_char,
 5095|  1.94M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.94M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.94M|    constexpr bool scannable_const =
 5099|  1.94M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.94M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.94M|    constexpr bool scannable_disabled =
 5103|  1.94M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.94M|    static_assert(scannable_disabled,
 5105|  1.94M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.94M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.94M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.94M|    static_assert(
 5110|  1.94M|        scannable,
 5111|  1.94M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.94M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.94M|    return arg_value{arg};
 5115|  1.94M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  1.94M|    {
 4902|  1.94M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.19M|{
 8654|  1.19M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.19M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  1.19M|{
 8591|  1.19M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.19M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.19M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 1.13M]
  |  |  ------------------
  ------------------
 8595|  62.7k|        return unexpected(result.error());
 8596|  62.7k|    }
 8597|  1.13M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.19M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  2.65M|{
 4720|  2.65M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.65M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.65M|                  "\n"
 4724|  2.65M|                  "Unsupported range type given as input to a scanning "
 4725|  2.65M|                  "function.\n"
 4726|  2.65M|                  "A range needs to have a character type (value type) "
 4727|  2.65M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.65M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.65M|                  "to be included.\n"
 4730|  2.65M|                  "See the scnlib documentation for more details.");
 4731|  2.65M|    static_assert(
 4732|  2.65M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.65M|        "\n"
 4734|  2.65M|        "Unsupported range type given as input to a scanning "
 4735|  2.65M|        "function.\n"
 4736|  2.65M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.65M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.65M|        "not supported.");
 4739|  2.65M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.65M|                  "\n"
 4741|  2.65M|                  "Unsupported range type given as input to a scanning "
 4742|  2.65M|                  "function.\n"
 4743|  2.65M|                  "file_marker_found cannot be used as an "
 4744|  2.65M|                  "source range type to scn::scan.\n"
 4745|  2.65M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.65M|                  "and do not provide an explicit source range, "
 4747|  2.65M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.65M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.65M|                  "\n"
 4750|  2.65M|                  "Unsupported range type given as input to a scanning "
 4751|  2.65M|                  "function.\n"
 4752|  2.65M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.65M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.65M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.65M|                  "\n"
 4756|  2.65M|                  "Unsupported range type given as input to a scanning "
 4757|  2.65M|                  "function.\n"
 4758|  2.65M|                  "A range needs to model forward_range and have a valid "
 4759|  2.65M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.65M|                  "Examples of scannable ranges are std::string, "
 4761|  2.65M|                  "std::string_view, "
 4762|  2.65M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.65M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.65M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.65M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  2.65M|{
 4659|  2.65M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  2.65M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  2.65M|    }
 4662|  2.65M|    else {
 4663|  2.65M|        return invalid_char_type{};
 4664|  2.65M|    }
 4665|  2.65M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.65M|    {
 2855|  2.65M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.65M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.65M|    {
 2836|  2.65M|        return t.data();
 2837|  2.65M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  2.65M|    {
 3231|  2.65M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 21.9k, False: 2.63M]
  ------------------
 3232|  2.65M|                   ? nullptr
 3233|  2.65M|                   : std::addressof(*ranges::begin(derived()));
 3234|  2.65M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  2.65M|    {
 3005|  2.65M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  2.65M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  2.65M|    {
 2978|  2.65M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  2.65M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  14.7M|    {
 3339|  14.7M|        return m_iterator == m_sentinel;
 3340|  14.7M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  5.29M|    {
 3185|  5.29M|        return static_cast<const D&>(*this);
 3186|  5.29M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.16M|    {
 2724|  5.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.16M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.16M|    {
 2705|  5.16M|        return decay_copy(t.begin());
 2706|  5.16M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  64.5M|    {
 3330|  64.5M|        return m_iterator;
 3331|  64.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  2.65M|    {
 2930|  2.65M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.65M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.65M|    {
 2896|  2.65M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.65M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  8.32M|{
 1949|  8.32M|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  8.32M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  14.8M|    {
 3346|  14.8M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  14.8M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  20.2M|    {
 1598|  20.2M|        return has_value();
 1599|  20.2M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  40.0M|    {
  485|  40.0M|        return m_has_value;
  486|  40.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.23M|    {
 1604|  1.23M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.23M|        return this->get_unexpected().error();
 1606|  1.23M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.23M|    {
  468|  1.23M|        return m_unexpected;
  469|  1.23M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  9.55M|    {
  361|  9.55M|        return m_unexpected;
  362|  9.55M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  4.66M|    {
  347|  4.66M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.66M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.66M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   135k|    {
 1476|   135k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   135k|    {
  447|   135k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  11.2M|    {
  356|  11.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  11.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  11.2M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.65M|    {
 1177|  2.65M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  2.52M|{
 5923|  2.52M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.52M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.52M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.52M|    }
 5927|  2.52M|    else {
 5928|  2.52M|        auto it = ranges::begin(source);
 5929|  2.52M|        while (n > 0) {
 5930|  2.52M|            --n;
 5931|  2.52M|            ++it;
 5932|  2.52M|        }
 5933|  2.52M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.52M|    }
 5935|  2.52M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  15.3M|    {
 2724|  15.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  15.3M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  15.3M|    {
 2705|  15.3M|        return decay_copy(t.begin());
 2706|  15.3M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  2.52M|{
 5910|  2.52M|    return ranges::end(source);
 5911|  2.52M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.52M|    {
 2781|  2.52M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.52M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.52M|    {
 2763|  2.52M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.52M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  31.5M|    {
 3334|  31.5M|        return m_sentinel;
 3335|  31.5M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  7.96M|    {
 1653|  7.96M|        return value();
 1654|  7.96M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  18.5M|    {
 1627|  18.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.5M|        return this->get_value();
 1629|  18.5M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  18.5M|    {
  451|  18.5M|        return m_value;
  452|  18.5M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.52M|    {
 1430|  2.52M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.52M|    {
  437|  2.52M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   755k|    {
 7975|   755k|        return m_str;
 7976|   755k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.53M|    {
 5426|  1.53M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|  1.53M|    {
 5379|  1.53M|        return m_argptrs;
 5380|  1.53M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  4.85M|    {
 5478|  4.85M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   755k|{
 8820|   755k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.8k, False: 714k]
  |  |  ------------------
  ------------------
 8821|  41.8k|        return unexpected(result.error());
 8822|  41.8k|    }
 8823|   714k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   714k|    static_cast<    \
  |  |  929|   714k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   714k|    static_cast<    \
  |  |  929|   714k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   755k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  2.65M|    {
 1598|  2.65M|        return has_value();
 1599|  2.65M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.31M|    {
  485|  5.31M|        return m_has_value;
  486|  5.31M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   135k|    {
 1604|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   135k|        return this->get_unexpected().error();
 1606|   135k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   135k|    {
  468|   135k|        return m_unexpected;
  469|   135k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  45.3k|    {
 1476|  45.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  45.3k|    {
  447|  45.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   838k|    {
 1177|   838k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.26M|    {
 1653|  2.26M|        return value();
 1654|  2.26M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.52M|    {
 1627|  2.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.52M|        return this->get_value();
 1629|  2.52M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.52M|    {
  451|  2.52M|        return m_value;
  452|  2.52M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   793k|    {
 5830|   793k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.52M|    {
 5681|  2.52M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|  1.66M|    {
 5616|  1.66M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   793k|    {
 1430|   793k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   793k|    {
  437|   793k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|  1.53M|    {
 5374|  1.53M|        return m_args;
 5375|  1.53M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  25.1M|    {
 3316|  25.1M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  4.85M|{
 7691|  4.85M|    return s;
 7692|  4.85M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  4.85M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   755k|    {
 7971|   755k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   838k|    {
 1598|   838k|        return has_value();
 1599|   838k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.63M|    {
  485|  1.63M|        return m_has_value;
  486|  1.63M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   793k|    {
 1673|   793k|        return &value();
 1674|   793k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   793k|    {
 1627|   793k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   793k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   793k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   793k|        return this->get_value();
 1629|   793k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   793k|    {
  451|   793k|        return m_value;
  452|   793k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  2.52M|    {
 5698|  2.52M|        return ranges::begin(m_range);
 5699|  2.52M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   377k|{
 8934|   377k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   377k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   377k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   377k|    static_cast<    \
  |  |  929|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   377k|    static_cast<    \
  |  |  929|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   377k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.19M|{
 8672|  1.19M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.19M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  1.19M|{
 8607|  1.19M|#if !SCN_DISABLE_LOCALE
 8608|  1.19M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.19M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.19M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.19M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.19M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 1.13M]
  |  |  ------------------
  ------------------
 8615|  62.7k|        return unexpected(result.error());
 8616|  62.7k|    }
 8617|  1.13M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.19M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  82.6k|{
 8973|  82.6k|    T value;
 8974|  82.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  82.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  82.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  82.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  82.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.48k, False: 79.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.48k|    }                                                  \
  |  |  |  | 3671|  82.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  79.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.1k|    static_cast<    \
  |  |  929|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.1k|    static_cast<    \
  |  |  929|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  82.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|   161k|{
 5155|   161k|    check_scan_arg_types<T>();
 5156|       |
 5157|   161k|    basic_scan_arg<Context> arg;
 5158|   161k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   161k|    arg.m_value = make_value<Context>(value);
 5160|   161k|    return arg;
 5161|   161k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  5.37M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  6.11M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   266k|{
 8685|   266k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   266k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   266k|{
 8631|   266k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   266k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   266k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 256k]
  |  |  ------------------
  ------------------
 8635|  10.4k|        return unexpected(result.error());
 8636|  10.4k|    }
 8637|   256k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   266k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   256k|    {
 1663|   256k|        return std::move(value());
 1664|   256k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   406k|{
 8867|   406k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   406k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   406k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   406k|    static_cast<    \
  |  |  929|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   406k|    static_cast<    \
  |  |  929|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   406k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  1.65M|{
 5396|  1.65M|    detail::check_scan_arg_types<Args...>();
 5397|  1.65M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.65M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  2.07M|{
 5135|  2.07M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.07M|                  "Scan argument types must be default constructible");
 5137|  2.07M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.07M|                  "Scan argument types must be Destructible");
 5139|  2.07M|    static_assert(
 5140|  2.07M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.07M|        "Scan argument types must not be references");
 5142|  2.07M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  1.65M|    {
 5349|  1.65M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.65M|    {
 5360|  1.65M|        return {detail::make_arg<
 5361|  1.65M|            kind, Context,
 5362|  1.65M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.65M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.65M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  1.65M|{
 5170|  1.65M|    return make_value<Context>(value).ref_value;
 5171|  1.65M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  1.82M|{
 5120|  1.82M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.82M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.82M|                                  needs_context_tag>) {
 5124|  1.82M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.82M|    }
 5126|  1.82M|    else {
 5127|  1.82M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.82M|            value, context_tag<Context>{}));
 5129|  1.82M|    }
 5130|  1.82M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  1.82M|    {                                                                        \
 4959|  1.82M|        return val;                                                          \
 4960|  1.82M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  2.07M|{
 5089|  2.07M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.07M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.07M|    constexpr bool scannable_char =
 5093|  2.07M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.07M|    static_assert(scannable_char,
 5095|  2.07M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.07M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.07M|    constexpr bool scannable_const =
 5099|  2.07M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.07M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.07M|    constexpr bool scannable_disabled =
 5103|  2.07M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.07M|    static_assert(scannable_disabled,
 5105|  2.07M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.07M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.07M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.07M|    static_assert(
 5110|  2.07M|        scannable,
 5111|  2.07M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.07M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.07M|    return arg_value{arg};
 5115|  2.07M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  2.07M|    {
 4902|  2.07M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   813k|    {
 7975|   813k|        return m_str;
 7976|   813k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.65M|    {
 5426|  1.65M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  1.65M|    {
 5379|  1.65M|        return m_argptrs;
 5380|  1.65M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   813k|{
 8820|   813k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.8k, False: 771k]
  |  |  ------------------
  ------------------
 8821|  41.8k|        return unexpected(result.error());
 8822|  41.8k|    }
 8823|   771k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   771k|    static_cast<    \
  |  |  929|   771k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   771k|    static_cast<    \
  |  |  929|   771k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   813k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  45.3k|    {
 1476|  45.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  45.3k|    {
  447|  45.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   904k|    {
 1177|   904k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   859k|    {
 5830|   859k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|  1.80M|    {
 5616|  1.80M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   859k|    {
 1430|   859k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   859k|    {
  437|   859k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  1.65M|    {
 5374|  1.65M|        return m_args;
 5375|  1.65M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   813k|    {
 7971|   813k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   904k|    {
 1598|   904k|        return has_value();
 1599|   904k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.76M|    {
  485|  1.76M|        return m_has_value;
  486|  1.76M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   859k|    {
 1673|   859k|        return &value();
 1674|   859k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   859k|    {
 1627|   859k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   859k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   859k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   859k|        return this->get_value();
 1629|   859k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   859k|    {
  451|   859k|        return m_value;
  452|   859k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   406k|{
 8934|   406k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   406k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   406k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   406k|    static_cast<    \
  |  |  929|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   406k|    static_cast<    \
  |  |  929|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   406k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  91.2k|{
 8973|  91.2k|    T value;
 8974|  91.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  91.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  91.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.48k, False: 87.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.48k|    }                                                  \
  |  |  |  | 3671|  91.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  87.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  87.7k|    static_cast<    \
  |  |  929|  87.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  87.7k|    static_cast<    \
  |  |  929|  87.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  91.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|   178k|{
 5155|   178k|    check_scan_arg_types<T>();
 5156|       |
 5157|   178k|    basic_scan_arg<Context> arg;
 5158|   178k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   178k|    arg.m_value = make_value<Context>(value);
 5160|   178k|    return arg;
 5161|   178k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   411k|{
 8867|   411k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   411k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   411k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   411k|    static_cast<    \
  |  |  929|   411k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   411k|    static_cast<    \
  |  |  929|   411k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   411k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|  1.66M|{
 5396|  1.66M|    detail::check_scan_arg_types<Args...>();
 5397|  1.66M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.66M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  2.09M|{
 5135|  2.09M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.09M|                  "Scan argument types must be default constructible");
 5137|  2.09M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.09M|                  "Scan argument types must be Destructible");
 5139|  2.09M|    static_assert(
 5140|  2.09M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.09M|        "Scan argument types must not be references");
 5142|  2.09M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|  1.66M|    {
 5349|  1.66M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.66M|    {
 5360|  1.66M|        return {detail::make_arg<
 5361|  1.66M|            kind, Context,
 5362|  1.66M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.66M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.66M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|  1.66M|{
 5170|  1.66M|    return make_value<Context>(value).ref_value;
 5171|  1.66M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|  1.85M|{
 5120|  1.85M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.85M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.85M|                                  needs_context_tag>) {
 5124|  1.85M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.85M|    }
 5126|  1.85M|    else {
 5127|  1.85M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.85M|            value, context_tag<Context>{}));
 5129|  1.85M|    }
 5130|  1.85M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|  1.85M|    {                                                                        \
 4959|  1.85M|        return val;                                                          \
 4960|  1.85M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  2.09M|{
 5089|  2.09M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.09M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.09M|    constexpr bool scannable_char =
 5093|  2.09M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.09M|    static_assert(scannable_char,
 5095|  2.09M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.09M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.09M|    constexpr bool scannable_const =
 5099|  2.09M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.09M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.09M|    constexpr bool scannable_disabled =
 5103|  2.09M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.09M|    static_assert(scannable_disabled,
 5105|  2.09M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.09M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.09M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.09M|    static_assert(
 5110|  2.09M|        scannable,
 5111|  2.09M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.09M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.09M|    return arg_value{arg};
 5115|  2.09M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  2.09M|    {
 4902|  2.09M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   823k|    {
 7975|   823k|        return m_str;
 7976|   823k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.66M|    {
 5426|  1.66M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|  1.66M|    {
 5379|  1.66M|        return m_argptrs;
 5380|  1.66M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   823k|{
 8820|   823k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   823k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.8k, False: 781k]
  |  |  ------------------
  ------------------
 8821|  41.8k|        return unexpected(result.error());
 8822|  41.8k|    }
 8823|   781k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   781k|    static_cast<    \
  |  |  929|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   781k|    static_cast<    \
  |  |  929|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   823k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  45.3k|    {
 1476|  45.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  45.3k|    {
  447|  45.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   916k|    {
 1177|   916k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   870k|    {
 5830|   870k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|  1.82M|    {
 5616|  1.82M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   870k|    {
 1430|   870k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   870k|    {
  437|   870k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|  1.66M|    {
 5374|  1.66M|        return m_args;
 5375|  1.66M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   823k|    {
 7971|   823k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   916k|    {
 1598|   916k|        return has_value();
 1599|   916k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.78M|    {
  485|  1.78M|        return m_has_value;
  486|  1.78M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   870k|    {
 1673|   870k|        return &value();
 1674|   870k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   870k|    {
 1627|   870k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   870k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   870k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   870k|        return this->get_value();
 1629|   870k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   870k|    {
  451|   870k|        return m_value;
  452|   870k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   411k|{
 8934|   411k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   411k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   411k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   411k|    static_cast<    \
  |  |  929|   411k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   411k|    static_cast<    \
  |  |  929|   411k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   411k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  92.8k|{
 8973|  92.8k|    T value;
 8974|  92.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  92.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.48k, False: 89.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.48k|    }                                                  \
  |  |  |  | 3671|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  89.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  89.3k|    static_cast<    \
  |  |  929|  89.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  89.3k|    static_cast<    \
  |  |  929|  89.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  92.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|   180k|{
 5155|   180k|    check_scan_arg_types<T>();
 5156|       |
 5157|   180k|    basic_scan_arg<Context> arg;
 5158|   180k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   180k|    arg.m_value = make_value<Context>(value);
 5160|   180k|    return arg;
 5161|   180k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   135k|    {
 2724|   135k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   135k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   135k|    {
 2705|   135k|        return decay_copy(t.begin());
 2706|   135k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|   119M|{
 1949|   119M|    return SCN_FWD(t);
  ------------------
  |  |  930|   119M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   119M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.42M|    {
 2781|  5.42M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.42M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.42M|    {
 2763|  5.42M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.42M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   388k|{
 8867|   388k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   388k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   388k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.23M|{
 8654|  1.23M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.23M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  1.23M|{
 8591|  1.23M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.23M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.23M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 1.16M]
  |  |  ------------------
  ------------------
 8595|  62.7k|        return unexpected(result.error());
 8596|  62.7k|    }
 8597|  1.16M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.23M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  2.71M|{
 4720|  2.71M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.71M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.71M|                  "\n"
 4724|  2.71M|                  "Unsupported range type given as input to a scanning "
 4725|  2.71M|                  "function.\n"
 4726|  2.71M|                  "A range needs to have a character type (value type) "
 4727|  2.71M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.71M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.71M|                  "to be included.\n"
 4730|  2.71M|                  "See the scnlib documentation for more details.");
 4731|  2.71M|    static_assert(
 4732|  2.71M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.71M|        "\n"
 4734|  2.71M|        "Unsupported range type given as input to a scanning "
 4735|  2.71M|        "function.\n"
 4736|  2.71M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.71M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.71M|        "not supported.");
 4739|  2.71M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.71M|                  "\n"
 4741|  2.71M|                  "Unsupported range type given as input to a scanning "
 4742|  2.71M|                  "function.\n"
 4743|  2.71M|                  "file_marker_found cannot be used as an "
 4744|  2.71M|                  "source range type to scn::scan.\n"
 4745|  2.71M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.71M|                  "and do not provide an explicit source range, "
 4747|  2.71M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.71M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.71M|                  "\n"
 4750|  2.71M|                  "Unsupported range type given as input to a scanning "
 4751|  2.71M|                  "function.\n"
 4752|  2.71M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.71M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.71M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.71M|                  "\n"
 4756|  2.71M|                  "Unsupported range type given as input to a scanning "
 4757|  2.71M|                  "function.\n"
 4758|  2.71M|                  "A range needs to model forward_range and have a valid "
 4759|  2.71M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.71M|                  "Examples of scannable ranges are std::string, "
 4761|  2.71M|                  "std::string_view, "
 4762|  2.71M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.71M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.71M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.71M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  2.71M|{
 4690|  2.71M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  2.71M|        return file_marker_found{};
 4692|  2.71M|    }
 4693|  2.71M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  2.71M|        if constexpr (ranges::range<Range>) {
 4695|  2.71M|            return insufficient_range{};
 4696|  2.71M|        }
 4697|  2.71M|        else {
 4698|  2.71M|            return invalid_input_range{};
 4699|  2.71M|        }
 4700|  2.71M|    }
 4701|  2.71M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  2.71M|        return invalid_char_type{};
 4703|  2.71M|    }
 4704|  2.71M|    else {
 4705|  2.71M|        return make_forward_scan_buffer(r);
 4706|  2.71M|    }
 4707|  2.71M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  2.71M|{
 4524|  2.71M|    return basic_scan_forward_buffer_impl(range);
 4525|  2.71M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  2.71M|    {
 4411|  2.71M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  2.71M|    {
 4382|  2.71M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  2.71M|    {
 4151|  2.71M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  2.71M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.29M|    {
 2724|  5.29M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.29M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.29M|    {
 2705|  5.29M|        return decay_copy(t.begin());
 2706|  5.29M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  7.87M|    {
 3330|  7.87M|        return m_iterator;
 3331|  7.87M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  34.8M|    {
 4415|  34.8M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 433k, False: 34.3M]
  ------------------
 4416|   433k|            return false;
 4417|   433k|        }
 4418|  34.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  34.3M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  34.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  34.3M|        }
 4421|  34.3M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 31.7M, False: 2.69M]
  ------------------
 4422|  31.7M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  31.7M|                                          this->m_current_view.begin(),
 4424|  31.7M|                                          this->m_current_view.end());
 4425|  31.7M|        }
 4426|  34.3M|        m_latest = *m_cursor;
 4427|  34.3M|        ++m_cursor;
 4428|  34.3M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  34.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  34.3M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  34.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  34.3M|        }
 4432|  34.3M|        return true;
 4433|  34.3M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   103M|    {
 2781|   103M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   103M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   103M|    {
 2763|   103M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   103M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|   106M|    {
 3334|   106M|        return m_sentinel;
 3335|   106M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  2.71M|    {
 4071|  2.71M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  2.71M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   135k|    {
 1476|   135k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   135k|    {
  447|   135k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.71M|    {
 1177|  2.71M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  2.57M|{
 5923|  2.57M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.57M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.57M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.57M|    }
 5927|  2.57M|    else {
 5928|  2.57M|        auto it = ranges::begin(source);
 5929|  2.57M|        while (n > 0) {
 5930|  2.57M|            --n;
 5931|  2.57M|            ++it;
 5932|  2.57M|        }
 5933|  2.57M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.57M|    }
 5935|  2.57M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.57M|    {
 2724|  2.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.57M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.57M|    {
 2705|  2.57M|        return decay_copy(t.begin());
 2706|  2.57M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  2.57M|{
 5910|  2.57M|    return ranges::end(source);
 5911|  2.57M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.57M|    {
 2781|  2.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.57M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.57M|    {
 2763|  2.57M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.57M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  2.57M|    {
 1430|  2.57M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  2.57M|    {
  437|  2.57M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   777k|    {
 7975|   777k|        return m_str;
 7976|   777k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   777k|{
 8820|   777k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   777k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.8k, False: 736k]
  |  |  ------------------
  ------------------
 8821|  41.8k|        return unexpected(result.error());
 8822|  41.8k|    }
 8823|   736k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   736k|    static_cast<    \
  |  |  929|   736k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   736k|    static_cast<    \
  |  |  929|   736k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   777k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  2.71M|    {
 1598|  2.71M|        return has_value();
 1599|  2.71M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.42M|    {
  485|  5.42M|        return m_has_value;
  486|  5.42M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   135k|    {
 1604|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   135k|        return this->get_unexpected().error();
 1606|   135k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   135k|    {
  468|   135k|        return m_unexpected;
  469|   135k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  45.3k|    {
 1476|  45.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  45.3k|    {
  447|  45.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   856k|    {
 1177|   856k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  2.33M|    {
 1653|  2.33M|        return value();
 1654|  2.33M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  2.57M|    {
 1627|  2.57M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.57M|        return this->get_value();
 1629|  2.57M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.57M|    {
  451|  2.57M|        return m_value;
  452|  2.57M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   811k|    {
 5830|   811k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  2.57M|    {
 5681|  2.57M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   811k|    {
 1430|   811k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   811k|    {
  437|   811k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  5.29M|    {
 3316|  5.29M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   777k|    {
 7971|   777k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   856k|    {
 1598|   856k|        return has_value();
 1599|   856k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.66M|    {
  485|  1.66M|        return m_has_value;
  486|  1.66M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   811k|    {
 1673|   811k|        return &value();
 1674|   811k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   811k|    {
 1627|   811k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   811k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   811k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   811k|        return this->get_value();
 1629|   811k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   811k|    {
  451|   811k|        return m_value;
  452|   811k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  2.57M|    {
 5698|  2.57M|        return ranges::begin(m_range);
 5699|  2.57M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   388k|{
 8934|   388k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   388k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   388k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.23M|{
 8672|  1.23M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.23M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  1.23M|{
 8607|  1.23M|#if !SCN_DISABLE_LOCALE
 8608|  1.23M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.23M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.23M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.23M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.23M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 1.16M]
  |  |  ------------------
  ------------------
 8615|  62.7k|        return unexpected(result.error());
 8616|  62.7k|    }
 8617|  1.16M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.23M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  78.9k|{
 8973|  78.9k|    T value;
 8974|  78.9k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  78.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  78.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.48k, False: 75.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.48k|    }                                                  \
  |  |  |  | 3671|  78.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  75.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  75.4k|    static_cast<    \
  |  |  929|  75.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  75.4k|    static_cast<    \
  |  |  929|  75.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  78.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   253k|{
 8685|   253k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   253k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   253k|{
 8631|   253k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   253k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   253k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 243k]
  |  |  ------------------
  ------------------
 8635|  10.4k|        return unexpected(result.error());
 8636|  10.4k|    }
 8637|   243k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   253k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   243k|    {
 1663|   243k|        return std::move(value());
 1664|   243k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   418k|{
 8867|   418k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   418k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   418k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   418k|    static_cast<    \
  |  |  929|   418k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   418k|    static_cast<    \
  |  |  929|   418k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   418k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   836k|    {
 7975|   836k|        return m_str;
 7976|   836k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   836k|{
 8820|   836k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.8k, False: 794k]
  |  |  ------------------
  ------------------
 8821|  41.8k|        return unexpected(result.error());
 8822|  41.8k|    }
 8823|   794k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   794k|    static_cast<    \
  |  |  929|   794k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   794k|    static_cast<    \
  |  |  929|   794k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   836k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  45.3k|    {
 1476|  45.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  45.3k|    {
  447|  45.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   923k|    {
 1177|   923k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   878k|    {
 5830|   878k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   878k|    {
 1430|   878k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   878k|    {
  437|   878k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   836k|    {
 7971|   836k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   923k|    {
 1598|   923k|        return has_value();
 1599|   923k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.80M|    {
  485|  1.80M|        return m_has_value;
  486|  1.80M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   878k|    {
 1673|   878k|        return &value();
 1674|   878k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   878k|    {
 1627|   878k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   878k|        return this->get_value();
 1629|   878k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   878k|    {
  451|   878k|        return m_value;
  452|   878k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   418k|{
 8934|   418k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   418k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   418k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   418k|    static_cast<    \
  |  |  929|   418k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   418k|    static_cast<    \
  |  |  929|   418k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   418k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  87.0k|{
 8973|  87.0k|    T value;
 8974|  87.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  87.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  87.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  87.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  87.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.48k, False: 83.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.48k|    }                                                  \
  |  |  |  | 3671|  87.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  83.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.5k|    static_cast<    \
  |  |  929|  83.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.5k|    static_cast<    \
  |  |  929|  83.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  87.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   422k|{
 8867|   422k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   422k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   422k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   422k|    static_cast<    \
  |  |  929|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   422k|    static_cast<    \
  |  |  929|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   422k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   845k|    {
 7975|   845k|        return m_str;
 7976|   845k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   845k|{
 8820|   845k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.8k, False: 803k]
  |  |  ------------------
  ------------------
 8821|  41.8k|        return unexpected(result.error());
 8822|  41.8k|    }
 8823|   803k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   803k|    static_cast<    \
  |  |  929|   803k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   803k|    static_cast<    \
  |  |  929|   803k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   845k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  45.3k|    {
 1476|  45.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  45.3k|    {
  447|  45.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   933k|    {
 1177|   933k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   888k|    {
 5830|   888k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   888k|    {
 1430|   888k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   888k|    {
  437|   888k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   845k|    {
 7971|   845k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   933k|    {
 1598|   933k|        return has_value();
 1599|   933k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.82M|    {
  485|  1.82M|        return m_has_value;
  486|  1.82M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   888k|    {
 1673|   888k|        return &value();
 1674|   888k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   888k|    {
 1627|   888k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   888k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   888k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   888k|        return this->get_value();
 1629|   888k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   888k|    {
  451|   888k|        return m_value;
  452|   888k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   422k|{
 8934|   422k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   422k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   422k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   422k|    static_cast<    \
  |  |  929|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   422k|    static_cast<    \
  |  |  929|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   422k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  88.0k|{
 8973|  88.0k|    T value;
 8974|  88.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  88.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  88.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  88.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  88.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.48k, False: 84.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.48k|    }                                                  \
  |  |  |  | 3671|  88.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  84.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  84.5k|    static_cast<    \
  |  |  929|  84.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  84.5k|    static_cast<    \
  |  |  929|  84.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  88.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   278k|    {
 2724|   278k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   278k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   278k|    {
 2705|   278k|        return decay_copy(t.begin());
 2706|   278k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.08M|{
 1949|  2.08M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.08M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   744k|    {
 2781|   744k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   744k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   744k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   744k|    {
 2763|   744k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   744k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   744k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   225k|{
 5396|   225k|    detail::check_scan_arg_types<Args...>();
 5397|   225k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   225k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   225k|    {
 5349|   225k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   225k|    {
 5360|   225k|        return {detail::make_arg<
 5361|   225k|            kind, Context,
 5362|   225k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   225k|                                 typename Context::char_type>::value>(args)...};
 5364|   225k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   225k|{
 5170|   225k|    return make_value<Context>(value).ref_value;
 5171|   225k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   245k|{
 5120|   245k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   245k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   245k|                                  needs_context_tag>) {
 5124|   245k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   245k|    }
 5126|   245k|    else {
 5127|   245k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   245k|            value, context_tag<Context>{}));
 5129|   245k|    }
 5130|   245k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   245k|    {                                                                        \
 4959|   245k|        return val;                                                          \
 4960|   245k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   169k|{
 8591|   169k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   169k|    auto result = vscan_impl(buffer, format, args);
 8594|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 44.0k]
  |  |  ------------------
  ------------------
 8595|   125k|        return unexpected(result.error());
 8596|   125k|    }
 8597|  44.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   169k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   368k|{
 4720|   368k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   368k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   368k|                  "\n"
 4724|   368k|                  "Unsupported range type given as input to a scanning "
 4725|   368k|                  "function.\n"
 4726|   368k|                  "A range needs to have a character type (value type) "
 4727|   368k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   368k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   368k|                  "to be included.\n"
 4730|   368k|                  "See the scnlib documentation for more details.");
 4731|   368k|    static_assert(
 4732|   368k|        !std::is_same_v<T, custom_char_traits>,
 4733|   368k|        "\n"
 4734|   368k|        "Unsupported range type given as input to a scanning "
 4735|   368k|        "function.\n"
 4736|   368k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   368k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   368k|        "not supported.");
 4739|   368k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   368k|                  "\n"
 4741|   368k|                  "Unsupported range type given as input to a scanning "
 4742|   368k|                  "function.\n"
 4743|   368k|                  "file_marker_found cannot be used as an "
 4744|   368k|                  "source range type to scn::scan.\n"
 4745|   368k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   368k|                  "and do not provide an explicit source range, "
 4747|   368k|                  "or use scn::scan with a FILE* directly.");
 4748|   368k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   368k|                  "\n"
 4750|   368k|                  "Unsupported range type given as input to a scanning "
 4751|   368k|                  "function.\n"
 4752|   368k|                  "In order to be scannable, a range needs to satisfy "
 4753|   368k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   368k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   368k|                  "\n"
 4756|   368k|                  "Unsupported range type given as input to a scanning "
 4757|   368k|                  "function.\n"
 4758|   368k|                  "A range needs to model forward_range and have a valid "
 4759|   368k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   368k|                  "Examples of scannable ranges are std::string, "
 4761|   368k|                  "std::string_view, "
 4762|   368k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   368k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   368k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   368k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   368k|{
 4659|   368k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   368k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   368k|    }
 4662|   368k|    else {
 4663|   368k|        return invalid_char_type{};
 4664|   368k|    }
 4665|   368k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   368k|    {
 2855|   368k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   368k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   368k|    {
 2836|   368k|        return t.data();
 2837|   368k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   368k|    {
 3231|   368k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 591, False: 368k]
  ------------------
 3232|   368k|                   ? nullptr
 3233|   368k|                   : std::addressof(*ranges::begin(derived()));
 3234|   368k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   368k|    {
 3005|   368k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   368k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   368k|    {
 2978|   368k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   368k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   610k|    {
 3339|   610k|        return m_iterator == m_sentinel;
 3340|   610k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   736k|    {
 3185|   736k|        return static_cast<const D&>(*this);
 3186|   736k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   465k|    {
 2724|   465k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   465k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   465k|    {
 2705|   465k|        return decay_copy(t.begin());
 2706|   465k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  10.3M|    {
 3330|  10.3M|        return m_iterator;
 3331|  10.3M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   368k|    {
 2930|   368k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   368k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   368k|    {
 2896|   368k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   368k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.55M|    {
 3346|  1.55M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.55M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   271k|    {
 1476|   271k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   271k|    {
  447|   271k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   368k|    {
 1177|   368k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  96.8k|{
 5923|  96.8k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  96.8k|                      ranges::iterator_t<SourceRange>>) {
 5925|  96.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  96.8k|    }
 5927|  96.8k|    else {
 5928|  96.8k|        auto it = ranges::begin(source);
 5929|  96.8k|        while (n > 0) {
 5930|  96.8k|            --n;
 5931|  96.8k|            ++it;
 5932|  96.8k|        }
 5933|  96.8k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  96.8k|    }
 5935|  96.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   498k|    {
 2724|   498k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   498k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   498k|    {
 2705|   498k|        return decay_copy(t.begin());
 2706|   498k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  96.8k|{
 5910|  96.8k|    return ranges::end(source);
 5911|  96.8k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  96.8k|    {
 2781|  96.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  96.8k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  96.8k|    {
 2763|  96.8k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  96.8k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  5.27M|    {
 3334|  5.27M|        return m_sentinel;
 3335|  5.27M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  96.8k|    {
 1430|  96.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  96.8k|    {
  437|  96.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   112k|    {
 7975|   112k|        return m_str;
 7976|   112k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   225k|    {
 5426|   225k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   225k|    {
 5379|   225k|        return m_argptrs;
 5380|   225k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   678k|    {
 5478|   678k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   112k|{
 8820|   112k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.6k, False: 29.1k]
  |  |  ------------------
  ------------------
 8821|  83.6k|        return unexpected(result.error());
 8822|  83.6k|    }
 8823|  29.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.1k|    static_cast<    \
  |  |  929|  29.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.1k|    static_cast<    \
  |  |  929|  29.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   112k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   368k|    {
 1598|   368k|        return has_value();
 1599|   368k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   737k|    {
  485|   737k|        return m_has_value;
  486|   737k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   271k|    {
 1604|   271k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   271k|        return this->get_unexpected().error();
 1606|   271k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   271k|    {
  468|   271k|        return m_unexpected;
  469|   271k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  90.6k|    {
 1476|  90.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  90.6k|    {
  447|  90.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   122k|    {
 1177|   122k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  88.0k|    {
 1653|  88.0k|        return value();
 1654|  88.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  96.8k|    {
 1627|  96.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  96.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  96.8k|        return this->get_value();
 1629|  96.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  96.8k|    {
  451|  96.8k|        return m_value;
  452|  96.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  31.9k|    {
 5830|  31.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  96.8k|    {
 5681|  96.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  31.9k|    {
 1430|  31.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  31.9k|    {
  437|  31.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   225k|    {
 5374|   225k|        return m_args;
 5375|   225k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  3.57M|    {
 3316|  3.57M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   678k|{
 7696|   678k|    return s;
 7697|   678k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   678k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   112k|    {
 7971|   112k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   122k|    {
 1598|   122k|        return has_value();
 1599|   122k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   154k|    {
  485|   154k|        return m_has_value;
  486|   154k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  31.9k|    {
 1673|  31.9k|        return &value();
 1674|  31.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  31.9k|    {
 1627|  31.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  31.9k|        return this->get_value();
 1629|  31.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  31.9k|    {
  451|  31.9k|        return m_value;
  452|  31.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  96.8k|    {
 5698|  96.8k|        return ranges::begin(m_range);
 5699|  96.8k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   169k|{
 8607|   169k|#if !SCN_DISABLE_LOCALE
 8608|   169k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   169k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   169k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   169k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 44.0k]
  |  |  ------------------
  ------------------
 8615|   125k|        return unexpected(result.error());
 8616|   125k|    }
 8617|  44.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   169k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  19.6k|{
 5155|  19.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  19.6k|    basic_scan_arg<Context> arg;
 5158|  19.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  19.6k|    arg.m_value = make_value<Context>(value);
 5160|  19.6k|    return arg;
 5161|  19.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   737k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  29.6k|{
 8631|  29.6k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  29.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  29.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.9k, False: 8.72k]
  |  |  ------------------
  ------------------
 8635|  20.9k|        return unexpected(result.error());
 8636|  20.9k|    }
 8637|  8.72k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  8.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  29.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  8.72k|    {
 1663|  8.72k|        return std::move(value());
 1664|  8.72k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   225k|{
 5396|   225k|    detail::check_scan_arg_types<Args...>();
 5397|   225k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   225k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   225k|    {
 5349|   225k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   225k|    {
 5360|   225k|        return {detail::make_arg<
 5361|   225k|            kind, Context,
 5362|   225k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   225k|                                 typename Context::char_type>::value>(args)...};
 5364|   225k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   225k|{
 5170|   225k|    return make_value<Context>(value).ref_value;
 5171|   225k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   245k|{
 5120|   245k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   245k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   245k|                                  needs_context_tag>) {
 5124|   245k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   245k|    }
 5126|   245k|    else {
 5127|   245k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   245k|            value, context_tag<Context>{}));
 5129|   245k|    }
 5130|   245k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   245k|    {                                                                        \
 4959|   245k|        return val;                                                          \
 4960|   245k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   113k|    {
 7975|   113k|        return m_str;
 7976|   113k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   225k|    {
 5426|   225k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   225k|    {
 5379|   225k|        return m_argptrs;
 5380|   225k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   113k|{
 8820|   113k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.6k, False: 29.3k]
  |  |  ------------------
  ------------------
 8821|  83.6k|        return unexpected(result.error());
 8822|  83.6k|    }
 8823|  29.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.3k|    static_cast<    \
  |  |  929|  29.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.3k|    static_cast<    \
  |  |  929|  29.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   113k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  90.6k|    {
 1476|  90.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  90.6k|    {
  447|  90.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   122k|    {
 1177|   122k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  32.2k|    {
 5830|  32.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  32.2k|    {
 1430|  32.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  32.2k|    {
  437|  32.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   225k|    {
 5374|   225k|        return m_args;
 5375|   225k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   113k|    {
 7971|   113k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   122k|    {
 1598|   122k|        return has_value();
 1599|   122k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   155k|    {
  485|   155k|        return m_has_value;
  486|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  32.2k|    {
 1673|  32.2k|        return &value();
 1674|  32.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  32.2k|    {
 1627|  32.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  32.2k|        return this->get_value();
 1629|  32.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  32.2k|    {
  451|  32.2k|        return m_value;
  452|  32.2k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  19.7k|{
 5155|  19.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  19.7k|    basic_scan_arg<Context> arg;
 5158|  19.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  19.7k|    arg.m_value = make_value<Context>(value);
 5160|  19.7k|    return arg;
 5161|  19.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   226k|{
 5396|   226k|    detail::check_scan_arg_types<Args...>();
 5397|   226k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   226k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   226k|    {
 5349|   226k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   226k|    {
 5360|   226k|        return {detail::make_arg<
 5361|   226k|            kind, Context,
 5362|   226k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   226k|                                 typename Context::char_type>::value>(args)...};
 5364|   226k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   226k|{
 5170|   226k|    return make_value<Context>(value).ref_value;
 5171|   226k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   246k|{
 5120|   246k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   246k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   246k|                                  needs_context_tag>) {
 5124|   246k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   246k|    }
 5126|   246k|    else {
 5127|   246k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   246k|            value, context_tag<Context>{}));
 5129|   246k|    }
 5130|   246k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   246k|    {                                                                        \
 4959|   246k|        return val;                                                          \
 4960|   246k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   113k|    {
 7975|   113k|        return m_str;
 7976|   113k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   226k|    {
 5426|   226k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   226k|    {
 5379|   226k|        return m_argptrs;
 5380|   226k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   113k|{
 8820|   113k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.6k, False: 29.6k]
  |  |  ------------------
  ------------------
 8821|  83.6k|        return unexpected(result.error());
 8822|  83.6k|    }
 8823|  29.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.6k|    static_cast<    \
  |  |  929|  29.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.6k|    static_cast<    \
  |  |  929|  29.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   113k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  90.6k|    {
 1476|  90.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  90.6k|    {
  447|  90.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   123k|    {
 1177|   123k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  32.6k|    {
 5830|  32.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  32.6k|    {
 1430|  32.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  32.6k|    {
  437|  32.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   226k|    {
 5374|   226k|        return m_args;
 5375|   226k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   113k|    {
 7971|   113k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   123k|    {
 1598|   123k|        return has_value();
 1599|   123k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   155k|    {
  485|   155k|        return m_has_value;
  486|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  32.6k|    {
 1673|  32.6k|        return &value();
 1674|  32.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  32.6k|    {
 1627|  32.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  32.6k|        return this->get_value();
 1629|  32.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  32.6k|    {
  451|  32.6k|        return m_value;
  452|  32.6k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  19.8k|{
 5155|  19.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  19.8k|    basic_scan_arg<Context> arg;
 5158|  19.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  19.8k|    arg.m_value = make_value<Context>(value);
 5160|  19.8k|    return arg;
 5161|  19.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   271k|    {
 2724|   271k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   271k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   271k|    {
 2705|   271k|        return decay_copy(t.begin());
 2706|   271k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  6.32M|{
 1949|  6.32M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.32M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   737k|    {
 2781|   737k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   737k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   737k|    {
 2763|   737k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   737k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   169k|{
 8591|   169k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   169k|    auto result = vscan_impl(buffer, format, args);
 8594|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 43.9k]
  |  |  ------------------
  ------------------
 8595|   125k|        return unexpected(result.error());
 8596|   125k|    }
 8597|  43.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   169k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   368k|{
 4720|   368k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   368k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   368k|                  "\n"
 4724|   368k|                  "Unsupported range type given as input to a scanning "
 4725|   368k|                  "function.\n"
 4726|   368k|                  "A range needs to have a character type (value type) "
 4727|   368k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   368k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   368k|                  "to be included.\n"
 4730|   368k|                  "See the scnlib documentation for more details.");
 4731|   368k|    static_assert(
 4732|   368k|        !std::is_same_v<T, custom_char_traits>,
 4733|   368k|        "\n"
 4734|   368k|        "Unsupported range type given as input to a scanning "
 4735|   368k|        "function.\n"
 4736|   368k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   368k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   368k|        "not supported.");
 4739|   368k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   368k|                  "\n"
 4741|   368k|                  "Unsupported range type given as input to a scanning "
 4742|   368k|                  "function.\n"
 4743|   368k|                  "file_marker_found cannot be used as an "
 4744|   368k|                  "source range type to scn::scan.\n"
 4745|   368k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   368k|                  "and do not provide an explicit source range, "
 4747|   368k|                  "or use scn::scan with a FILE* directly.");
 4748|   368k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   368k|                  "\n"
 4750|   368k|                  "Unsupported range type given as input to a scanning "
 4751|   368k|                  "function.\n"
 4752|   368k|                  "In order to be scannable, a range needs to satisfy "
 4753|   368k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   368k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   368k|                  "\n"
 4756|   368k|                  "Unsupported range type given as input to a scanning "
 4757|   368k|                  "function.\n"
 4758|   368k|                  "A range needs to model forward_range and have a valid "
 4759|   368k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   368k|                  "Examples of scannable ranges are std::string, "
 4761|   368k|                  "std::string_view, "
 4762|   368k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   368k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   368k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   368k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   368k|{
 4690|   368k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   368k|        return file_marker_found{};
 4692|   368k|    }
 4693|   368k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   368k|        if constexpr (ranges::range<Range>) {
 4695|   368k|            return insufficient_range{};
 4696|   368k|        }
 4697|   368k|        else {
 4698|   368k|            return invalid_input_range{};
 4699|   368k|        }
 4700|   368k|    }
 4701|   368k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   368k|        return invalid_char_type{};
 4703|   368k|    }
 4704|   368k|    else {
 4705|   368k|        return make_forward_scan_buffer(r);
 4706|   368k|    }
 4707|   368k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   368k|{
 4524|   368k|    return basic_scan_forward_buffer_impl(range);
 4525|   368k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   368k|    {
 4411|   368k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   368k|    {
 4382|   368k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   368k|    {
 4151|   368k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   368k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   465k|    {
 2724|   465k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   465k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   465k|    {
 2705|   465k|        return decay_copy(t.begin());
 2706|   465k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   561k|    {
 3330|   561k|        return m_iterator;
 3331|   561k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  1.65M|    {
 4415|  1.65M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 158k, False: 1.49M]
  ------------------
 4416|   158k|            return false;
 4417|   158k|        }
 4418|  1.49M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.49M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.49M|        }
 4421|  1.49M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.13M, False: 367k]
  ------------------
 4422|  1.13M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.13M|                                          this->m_current_view.begin(),
 4424|  1.13M|                                          this->m_current_view.end());
 4425|  1.13M|        }
 4426|  1.49M|        m_latest = *m_cursor;
 4427|  1.49M|        ++m_cursor;
 4428|  1.49M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.49M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.49M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.49M|        }
 4432|  1.49M|        return true;
 4433|  1.49M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.65M|    {
 2781|  4.65M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.65M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.65M|    {
 2763|  4.65M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.65M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  4.75M|    {
 3334|  4.75M|        return m_sentinel;
 3335|  4.75M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   368k|    {
 4071|   368k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   368k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   368k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   271k|    {
 1476|   271k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   271k|    {
  447|   271k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   368k|    {
 1177|   368k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  96.5k|{
 5923|  96.5k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  96.5k|                      ranges::iterator_t<SourceRange>>) {
 5925|  96.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  96.5k|    }
 5927|  96.5k|    else {
 5928|  96.5k|        auto it = ranges::begin(source);
 5929|  96.5k|        while (n > 0) {
 5930|  96.5k|            --n;
 5931|  96.5k|            ++it;
 5932|  96.5k|        }
 5933|  96.5k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  96.5k|    }
 5935|  96.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  96.5k|    {
 2724|  96.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  96.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  96.5k|    {
 2705|  96.5k|        return decay_copy(t.begin());
 2706|  96.5k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|  96.5k|{
 5910|  96.5k|    return ranges::end(source);
 5911|  96.5k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  96.5k|    {
 2781|  96.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  96.5k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  96.5k|    {
 2763|  96.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  96.5k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  96.5k|    {
 1430|  96.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  96.5k|    {
  437|  96.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   112k|    {
 7975|   112k|        return m_str;
 7976|   112k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   112k|{
 8820|   112k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.6k, False: 29.0k]
  |  |  ------------------
  ------------------
 8821|  83.6k|        return unexpected(result.error());
 8822|  83.6k|    }
 8823|  29.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.0k|    static_cast<    \
  |  |  929|  29.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.0k|    static_cast<    \
  |  |  929|  29.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   112k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   368k|    {
 1598|   368k|        return has_value();
 1599|   368k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   737k|    {
  485|   737k|        return m_has_value;
  486|   737k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   271k|    {
 1604|   271k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   271k|        return this->get_unexpected().error();
 1606|   271k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   271k|    {
  468|   271k|        return m_unexpected;
  469|   271k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  90.6k|    {
 1476|  90.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  90.6k|    {
  447|  90.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   122k|    {
 1177|   122k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  87.8k|    {
 1653|  87.8k|        return value();
 1654|  87.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  96.5k|    {
 1627|  96.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  96.5k|        return this->get_value();
 1629|  96.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  96.5k|    {
  451|  96.5k|        return m_value;
  452|  96.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  31.9k|    {
 5830|  31.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|  96.5k|    {
 5681|  96.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  31.9k|    {
 1430|  31.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  31.9k|    {
  437|  31.9k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   465k|    {
 3316|   465k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   112k|    {
 7971|   112k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   122k|    {
 1598|   122k|        return has_value();
 1599|   122k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   154k|    {
  485|   154k|        return m_has_value;
  486|   154k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  31.9k|    {
 1673|  31.9k|        return &value();
 1674|  31.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  31.9k|    {
 1627|  31.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  31.9k|        return this->get_value();
 1629|  31.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  31.9k|    {
  451|  31.9k|        return m_value;
  452|  31.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|  96.5k|    {
 5698|  96.5k|        return ranges::begin(m_range);
 5699|  96.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   169k|{
 8607|   169k|#if !SCN_DISABLE_LOCALE
 8608|   169k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   169k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   169k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   169k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 43.9k]
  |  |  ------------------
  ------------------
 8615|   125k|        return unexpected(result.error());
 8616|   125k|    }
 8617|  43.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   169k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  29.6k|{
 8631|  29.6k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  29.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  29.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.9k, False: 8.69k]
  |  |  ------------------
  ------------------
 8635|  20.9k|        return unexpected(result.error());
 8636|  20.9k|    }
 8637|  8.69k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  8.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  29.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  8.69k|    {
 1663|  8.69k|        return std::move(value());
 1664|  8.69k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   112k|    {
 7975|   112k|        return m_str;
 7976|   112k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   112k|{
 8820|   112k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.6k, False: 29.2k]
  |  |  ------------------
  ------------------
 8821|  83.6k|        return unexpected(result.error());
 8822|  83.6k|    }
 8823|  29.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.2k|    static_cast<    \
  |  |  929|  29.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.2k|    static_cast<    \
  |  |  929|  29.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   112k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  90.6k|    {
 1476|  90.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  90.6k|    {
  447|  90.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   122k|    {
 1177|   122k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  32.1k|    {
 5830|  32.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  32.1k|    {
 1430|  32.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  32.1k|    {
  437|  32.1k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   112k|    {
 7971|   112k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   122k|    {
 1598|   122k|        return has_value();
 1599|   122k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   154k|    {
  485|   154k|        return m_has_value;
  486|   154k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  32.1k|    {
 1673|  32.1k|        return &value();
 1674|  32.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  32.1k|    {
 1627|  32.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  32.1k|        return this->get_value();
 1629|  32.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  32.1k|    {
  451|  32.1k|        return m_value;
  452|  32.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   113k|    {
 7975|   113k|        return m_str;
 7976|   113k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   113k|{
 8820|   113k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.6k, False: 29.5k]
  |  |  ------------------
  ------------------
 8821|  83.6k|        return unexpected(result.error());
 8822|  83.6k|    }
 8823|  29.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.5k|    static_cast<    \
  |  |  929|  29.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.5k|    static_cast<    \
  |  |  929|  29.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   113k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  90.6k|    {
 1476|  90.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  90.6k|    {
  447|  90.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   123k|    {
 1177|   123k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  32.5k|    {
 5830|  32.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  32.5k|    {
 1430|  32.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  32.5k|    {
  437|  32.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   113k|    {
 7971|   113k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   123k|    {
 1598|   123k|        return has_value();
 1599|   123k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   155k|    {
  485|   155k|        return m_has_value;
  486|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  32.5k|    {
 1673|  32.5k|        return &value();
 1674|  32.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  32.5k|    {
 1627|  32.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  32.5k|        return this->get_value();
 1629|  32.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  32.5k|    {
  451|  32.5k|        return m_value;
  452|  32.5k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  6.58M|    {
 3568|  6.58M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  6.58M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  6.58M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  28.2M|    {
 3574|  28.2M|        return m_code == good;
 3575|  28.2M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   627k|    {
 3585|   627k|        return m_code;
 3586|   627k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   123M|    {
 3330|   123M|        return m_iterator;
 3331|   123M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  12.9M|    {
 3330|  12.9M|        return m_iterator;
 3331|  12.9M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  4.37M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|  1.21M|    {
 6272|  1.21M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.21M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|  1.21M|            m_specs.localized = true;
 6274|  1.21M|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|  1.21M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  3.15M|    {
 6303|  3.15M|        m_specs.type = type;
 6304|  3.15M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  4.37M|    {
 6376|  4.37M|        return static_cast<bool>(m_error);
 6377|  4.37M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   627k|{
 3609|   627k|    return a.code() == b;
 3610|   627k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   627k|{
 3613|   627k|    return !(a == b);
 3614|   627k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.21M|{
 7063|  1.21M|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.21M]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.21M]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.21M]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 1.21M]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.21M]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.21M]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.21M]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.21M]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 1.21M]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.21M]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.21M]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.21M]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.21M]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.21M]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 1.21M]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.21M]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   378k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 378k, False: 834k]
  ------------------
 7091|   792k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 413k, False: 799k]
  ------------------
 7092|  1.21M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 420k, False: 792k]
  ------------------
 7093|  1.21M|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 1.21M]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 1.21M]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.21M]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 1.21M]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.21M]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.21M]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.21M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.21M|            SCN_CLANG_POP
 7110|  1.21M|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.21M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  5.29M|    {
 2896|  5.29M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  5.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  5.29M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  5.29M|    {
 2930|  5.29M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  5.29M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  5.29M|    {
 2953|  5.29M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  5.29M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  5.29M|    {
 2962|  5.29M|        return fn::impl(std::forward<T>(t));
 2963|  5.29M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.35k|{
 3654|  1.35k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.35k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.34k|{
 3654|  2.34k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.34k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  40.2k|{
 3654|  40.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  40.2k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  4.37M|{
 7193|  4.37M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 3.15M, False: 1.21M]
  ------------------
 7194|  4.37M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 3.15M]
  ------------------
 7195|  3.15M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 3.15M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  4.37M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   786M|    {
 4195|   786M|        return m_end == nullptr;
 4196|   786M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  2.12M|{
 3715|  2.12M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  2.12M|                                          const CharT*, const CharT*>) {
 3717|  2.12M|        return {first, last};
 3718|  2.12M|    }
 3719|  2.12M|    else {
 3720|  2.12M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  2.12M|    }
 3722|  2.12M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  10.3M|    {
 4211|  10.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 10.3M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  10.3M|        return parent()->get_segment_starting_at(position());
 4217|  10.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   438M|    {
 4205|   438M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   438M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   438M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   438M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   438M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  10.3M|    {
 4101|  10.3M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  10.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.56M, False: 5.76M]
  |  |  ------------------
  ------------------
 4102|  10.3M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  4.56M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  4.56M|        }
 4105|  5.76M|        const auto start = pos - m_putback_buffer.size();
 4106|  5.76M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  5.76M|        return m_current_view.substr(start);
 4108|  5.76M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  7.19M|    {
 4200|  7.19M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  7.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  7.19M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  7.19M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  18.9M|    {
 4190|  18.9M|        return m_position;
 4191|  18.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  8.14M|    {
 4123|  8.14M|        return m_is_contiguous;
 4124|  8.14M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  37.2M|    {
 4195|  37.2M|        return m_end == nullptr;
 4196|  37.2M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  93.3k|{
 3715|  93.3k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  93.3k|                                          const CharT*, const CharT*>) {
 3717|  93.3k|        return {first, last};
 3718|  93.3k|    }
 3719|  93.3k|    else {
 3720|  93.3k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  93.3k|    }
 3722|  93.3k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   563k|    {
 4211|   563k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 563k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   563k|        return parent()->get_segment_starting_at(position());
 4217|   563k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  20.1M|    {
 4205|  20.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  20.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  20.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  20.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   563k|    {
 4101|   563k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 189k, False: 373k]
  |  |  ------------------
  ------------------
 4102|   563k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   189k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   189k|        }
 4105|   373k|        const auto start = pos - m_putback_buffer.size();
 4106|   373k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   373k|        return m_current_view.substr(start);
 4108|   373k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|   938k|    {
 4200|   938k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   938k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   938k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|   938k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|   938k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  1.53M|    {
 4190|  1.53M|        return m_position;
 4191|  1.53M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.10M|    {
 4123|  1.10M|        return m_is_contiguous;
 4124|  1.10M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  24.2M|    {
 3180|  24.2M|        return static_cast<D&>(*this);
 3181|  24.2M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  12.1M|    {
 2978|  12.1M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  12.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  12.1M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  12.1M|    {
 3005|  12.1M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  12.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  12.1M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  12.1M|    {
 3221|  12.1M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 18.7k, False: 12.0M]
  ------------------
 3222|  12.1M|                   ? nullptr
 3223|  12.1M|                   : std::addressof(*ranges::begin(derived()));
 3224|  12.1M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   483k|    {
 3180|   483k|        return static_cast<D&>(*this);
 3181|   483k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   241k|    {
 2978|   241k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   241k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   241k|    {
 3005|   241k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   241k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   241k|    {
 3221|   241k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 241k]
  ------------------
 3222|   241k|                   ? nullptr
 3223|   241k|                   : std::addressof(*ranges::begin(derived()));
 3224|   241k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  1.95M|    {
 8169|  1.95M|        return ranges::subrange{begin(), end()};
 8170|  1.95M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  5.75M|    {
 8153|  5.75M|        return m_current;
 8154|  5.75M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  1.95M|    {
 8161|  1.95M|        return ranges::default_sentinel;
 8162|  1.95M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  30.2M|    {
 3316|  30.2M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  9.35M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.71M|    {
 1837|  2.71M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.71M|                                            std::forward<F>(f));
 1839|  2.71M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  2.71M|{
 1323|  2.71M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.71M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.71M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.71M|            return result(*std::forward<Exp>(exp));
 1327|  2.71M|        }
 1328|       |
 1329|  2.71M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.71M|        return result(unexpect, monostate{});
 1331|  2.71M|    }
 1332|  2.71M|    else {
 1333|  2.71M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.71M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.71M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.68M, False: 29.7k]
  |  |  ------------------
  ------------------
 1335|  2.71M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.71M|                   : result(unexpect,
 1337|  29.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  29.7k|                                           std::forward<Exp>(exp).error()));
 1339|  2.71M|    }
 1340|  2.71M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  29.0M|    {
  485|  29.0M|        return m_has_value;
  486|  29.0M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  9.82M|    {
 1663|  9.82M|        return std::move(value());
 1664|  9.82M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  11.2M|    {
 1627|  11.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.2M|        return this->get_value();
 1629|  11.2M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  11.2M|    {
  451|  11.2M|        return m_value;
  452|  11.2M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  12.2M|    {
 1430|  12.2M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  12.2M|    {
  437|  12.2M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.3M|    {
 1177|  15.3M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  60.7k|{
 1211|  60.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  60.7k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  83.3k|    {
 1614|  83.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  83.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  83.3k|        return std::move(this->get_unexpected().error());
 1616|  83.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|   113k|    {
  468|   113k|        return m_unexpected;
  469|   113k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   512k|    {
  361|   512k|        return m_unexpected;
  362|   512k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.65M|    {
 1486|  2.65M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  2.98M|    {
  447|  2.98M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   279k|    {
 8169|   279k|        return ranges::subrange{begin(), end()};
 8170|   279k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   629k|    {
 8153|   629k|        return m_current;
 8154|   629k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   279k|    {
 8161|   279k|        return ranges::default_sentinel;
 8162|   279k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  2.99M|    {
 3316|  2.99M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   368k|    {
 1837|   368k|        return detail::transform_error_impl(std::move(*this),
 1838|   368k|                                            std::forward<F>(f));
 1839|   368k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   368k|{
 1323|   368k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   368k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   368k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   368k|            return result(*std::forward<Exp>(exp));
 1327|   368k|        }
 1328|       |
 1329|   368k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   368k|        return result(unexpect, monostate{});
 1331|   368k|    }
 1332|   368k|    else {
 1333|   368k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   368k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   368k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 366k, False: 2.35k]
  |  |  ------------------
  ------------------
 1335|   368k|                   ? result(*std::forward<Exp>(exp))
 1336|   368k|                   : result(unexpect,
 1337|  2.35k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.35k|                                           std::forward<Exp>(exp).error()));
 1339|   368k|    }
 1340|   368k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.17M|    {
  485|  3.17M|        return m_has_value;
  486|  3.17M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.25M|    {
 1663|  1.25M|        return std::move(value());
 1664|  1.25M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.25M|    {
 1627|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.25M|        return this->get_value();
 1629|  1.25M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.25M|    {
  451|  1.25M|        return m_value;
  452|  1.25M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   728k|    {
 1430|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   728k|    {
  437|   728k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.11M|    {
 1177|  2.11M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  53.6k|    {
 1614|  53.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.6k|        return std::move(this->get_unexpected().error());
 1616|  53.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  54.6k|    {
  468|  54.6k|        return m_unexpected;
  469|  54.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   635k|    {
 1486|   635k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.38M|    {
  447|  1.38M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   234k|    {
  347|   234k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   234k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   234k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   298k|    {
 1476|   298k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  2.85M|    {
  447|  2.85M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.0M|    {
 1177|  15.0M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  12.0M|    {
 1430|  12.0M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  12.0M|    {
  437|  12.0M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  17.6M|    {
 1598|  17.6M|        return has_value();
 1599|  17.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  27.5M|    {
  485|  27.5M|        return m_has_value;
  486|  27.5M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   358k|    {
 1604|   358k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   358k|        return this->get_unexpected().error();
 1606|   358k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   358k|    {
  468|   358k|        return m_unexpected;
  469|   358k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  7.73M|    {
 1663|  7.73M|        return std::move(value());
 1664|  7.73M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  9.58M|    {
 1627|  9.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.58M|        return this->get_value();
 1629|  9.58M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.58M|    {
  451|  9.58M|        return m_value;
  452|  9.58M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   605k|    {
 1476|   605k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.09M|    {
  447|  1.09M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.11M|    {
 1177|  2.11M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.01M|    {
  437|  1.01M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  2.48M|    {
 1598|  2.48M|        return has_value();
 1599|  2.48M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  3.98M|    {
  485|  3.98M|        return m_has_value;
  486|  3.98M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   730k|    {
 1604|   730k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   730k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   730k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   730k|        return this->get_unexpected().error();
 1606|   730k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   730k|    {
  468|   730k|        return m_unexpected;
  469|   730k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   705k|    {
 1663|   705k|        return std::move(value());
 1664|   705k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   775k|    {
 1627|   775k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   775k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   775k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   775k|        return this->get_value();
 1629|   775k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   775k|    {
  451|   775k|        return m_value;
  452|   775k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.65M|    {
 1837|  2.65M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.65M|                                            std::forward<F>(f));
 1839|  2.65M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.65M|{
 1323|  2.65M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.65M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.65M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.65M|            return result(*std::forward<Exp>(exp));
 1327|  2.65M|        }
 1328|       |
 1329|  2.65M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.65M|        return result(unexpect, monostate{});
 1331|  2.65M|    }
 1332|  2.65M|    else {
 1333|  2.65M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.65M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.65M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.63M, False: 26.2k]
  |  |  ------------------
  ------------------
 1335|  2.65M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.65M|                   : result(unexpect,
 1337|  26.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  26.2k|                                           std::forward<Exp>(exp).error()));
 1339|  2.65M|    }
 1340|  2.65M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  10.2M|    {
  485|  10.2M|        return m_has_value;
  486|  10.2M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.63M|    {
 1663|  2.63M|        return std::move(value());
 1664|  2.63M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.59M|    {
 1627|  3.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.59M|        return this->get_value();
 1629|  3.59M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.59M|    {
  451|  3.59M|        return m_value;
  452|  3.59M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  26.2k|    {
 1614|  26.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  26.2k|        return std::move(this->get_unexpected().error());
 1616|  26.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  33.2k|    {
  468|  33.2k|        return m_unexpected;
  469|  33.2k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.55M|    {
 1486|  2.55M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  19.4M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   334k|    {
 1476|   334k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  24.1M|    {
 4280|  24.1M|        return x.is_at_end();
 4281|  24.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  59.8M|    {
 4324|  59.8M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 59.8M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  59.8M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 59.8M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  59.8M|        return !read_at_position();
 4331|  59.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   257M|    {
 4304|   257M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   257M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   257M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   257M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 257M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   257M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   257M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 222M, False: 34.8M]
  |  |  ------------------
  ------------------
 4311|   222M|            return true;
 4312|   222M|        }
 4313|       |
 4314|  69.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 34.8M, False: 34.3M]
  ------------------
 4315|  34.8M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 433k, False: 34.3M]
  ------------------
 4316|   433k|                return false;
 4317|   433k|            }
 4318|  34.8M|        }
 4319|  34.3M|        return true;
 4320|  34.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   334M|    {
 4081|   334M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   334M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  66.1M|    {
 4239|  66.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  66.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  66.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 66.1M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  66.1M|        auto res = read_at_position();
 4248|  66.1M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  66.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  66.1M|        return parent()->get_character_at(m_position);
 4250|  66.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  66.1M|    {
 4112|  66.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  66.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.3M, False: 24.8M]
  |  |  ------------------
  ------------------
 4113|  66.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  41.3M|            return m_putback_buffer[pos];
 4115|  41.3M|        }
 4116|  24.8M|        const auto start = pos - m_putback_buffer.size();
 4117|  24.8M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  24.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  24.8M|        return m_current_view[start];
 4119|  24.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  17.5M|    {
 1430|  17.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  17.5M|    {
  437|  17.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.6M|    {
 1177|  17.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   156k|    {
  347|   156k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   156k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   113k|    {
 1476|   113k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   113k|    {
  447|   113k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   256k|    {
  356|   256k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   256k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   256k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  7.76M|    {
 1598|  7.76M|        return has_value();
 1599|  7.76M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.46M|    {
 1653|  1.46M|        return value();
 1654|  1.46M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  62.8M|    {
 4274|  62.8M|        return !(lhs == rhs);
 4275|  62.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  69.9M|    {
 4269|  69.9M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 69.9M, False: 0]
  |  Branch (4269:46): [True: 9.13M, False: 60.8M]
  ------------------
 4270|  69.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|   131M|    {
 4225|   131M|        ++m_position;
 4226|   131M|        (void)read_at_position();
 4227|   131M|        return *this;
 4228|   131M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  99.4k|    {
  347|  99.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  99.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  99.4k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  22.4k|    {
 1476|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  22.4k|    {
  447|  22.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.78M|    {
 1177|  3.78M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  3.76M|    {
 1430|  3.76M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  3.76M|    {
  437|  3.76M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  3.78M|    {
 1598|  3.78M|        return has_value();
 1599|  3.78M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.56M|    {
  485|  7.56M|        return m_has_value;
  486|  7.56M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  22.4k|    {
 1604|  22.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  22.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  22.4k|        return this->get_unexpected().error();
 1606|  22.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  22.4k|    {
  468|  22.4k|        return m_unexpected;
  469|  22.4k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.76M|    {
 1663|  3.76M|        return std::move(value());
 1664|  3.76M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.76M|    {
 1627|  3.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.76M|        return this->get_value();
 1629|  3.76M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.76M|    {
  451|  3.76M|        return m_value;
  452|  3.76M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  85.3M|    {
 3334|  85.3M|        return m_sentinel;
 3335|  85.3M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  96.3k|    {
  347|  96.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  96.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  96.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  23.4M|    {
  361|  23.4M|        return m_unexpected;
  362|  23.4M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  6.37M|    {
  356|  6.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.37M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  28.9M|    {
  347|  28.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  28.9M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  28.9M|    {
  361|  28.9M|        return m_unexpected;
  362|  28.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  28.9M|    {
  356|  28.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  28.9M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   156k|{
 1211|   156k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   156k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  6.12M|    {
  347|  6.12M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.12M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  6.12M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  30.3k|    {
 1604|  30.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  30.3k|        return this->get_unexpected().error();
 1606|  30.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.72M|    {
 1476|  2.72M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  2.78M|    {
  447|  2.78M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.1M|    {
 1177|  30.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  1.48M|    {
 1430|  1.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48M|    {
  437|  1.48M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  15.3M|    {
 1476|  15.3M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  15.3M|    {
  447|  15.3M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  32.7M|    {
 1598|  32.7M|        return has_value();
 1599|  32.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  57.6M|    {
  485|  57.6M|        return m_has_value;
  486|  57.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  7.47M|    {
 1604|  7.47M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.47M|        return this->get_unexpected().error();
 1606|  7.47M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  7.47M|    {
  468|  7.47M|        return m_unexpected;
  469|  7.47M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  2.94M|    {
 1430|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  2.94M|    {
  437|  2.94M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.94M|    {
 1177|  2.94M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    512|    {
 1476|    512|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    512|    {
  447|    512|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  7.63M|    {
 1653|  7.63M|        return value();
 1654|  7.63M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  14.7M|    {
 1627|  14.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  14.7M|        return this->get_value();
 1629|  14.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  14.7M|    {
  451|  14.7M|        return m_value;
  452|  14.7M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   262k|    {
 1598|   262k|        return has_value();
 1599|   262k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  5.89M|    {
  485|  5.89M|        return m_has_value;
  486|  5.89M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.68M|    {
 1663|  2.68M|        return std::move(value());
 1664|  2.68M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  2.94M|    {
  451|  2.94M|        return m_value;
  452|  2.94M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  7.19M|    {
 1837|  7.19M|        return detail::transform_error_impl(std::move(*this),
 1838|  7.19M|                                            std::forward<F>(f));
 1839|  7.19M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  7.19M|{
 1323|  7.19M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  7.19M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  7.19M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  7.19M|            return result(*std::forward<Exp>(exp));
 1327|  7.19M|        }
 1328|       |
 1329|  7.19M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  7.19M|        return result(unexpect, monostate{});
 1331|  7.19M|    }
 1332|  7.19M|    else {
 1333|  7.19M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  7.19M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.14M, False: 53.5k]
  |  |  ------------------
  ------------------
 1335|  7.19M|                   ? result(*std::forward<Exp>(exp))
 1336|  7.19M|                   : result(unexpect,
 1337|  53.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  53.5k|                                           std::forward<Exp>(exp).error()));
 1339|  7.19M|    }
 1340|  7.19M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  10.4M|    {
 1430|  10.4M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  10.4M|    {
  437|  10.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  53.5k|    {
 1486|  53.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  7.14M|    {
 1663|  7.14M|        return std::move(value());
 1664|  7.14M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  3.10M|    {
 3330|  3.10M|        return m_iterator;
 3331|  3.10M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  3.10M|    {
 3334|  3.10M|        return m_sentinel;
 3335|  3.10M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  18.0M|    {
 1598|  18.0M|        return has_value();
 1599|  18.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  28.2M|    {
  485|  28.2M|        return m_has_value;
  486|  28.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   441k|    {
 1604|   441k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   441k|        return this->get_unexpected().error();
 1606|   441k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   441k|    {
  468|   441k|        return m_unexpected;
  469|   441k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  7.85M|    {
 1663|  7.85M|        return std::move(value());
 1664|  7.85M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  9.79M|    {
 1627|  9.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.79M|        return this->get_value();
 1629|  9.79M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  9.79M|    {
  451|  9.79M|        return m_value;
  452|  9.79M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  4.90M|{
  326|  4.90M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  4.90M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  2.45M|    {
 3316|  2.45M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  35.7M|    {
 4291|  35.7M|        return !x.is_at_end();
 4292|  35.7M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  33.2k|    {
 1476|  33.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  33.2k|    {
  447|  33.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.56M|    {
 1177|  6.56M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  6.53M|    {
 1430|  6.53M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  6.53M|    {
  437|  6.53M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  3.91M|    {
 1598|  3.91M|        return has_value();
 1599|  3.91M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   965k|    {
 1653|   965k|        return value();
 1654|   965k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  18.8k|    {
 1476|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  18.8k|    {
  447|  18.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.59M|    {
 1177|  3.59M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.57M|    {
 1430|  3.57M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  3.57M|    {
  437|  3.57M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  3.59M|    {
 1598|  3.59M|        return has_value();
 1599|  3.59M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.19M|    {
  485|  7.19M|        return m_has_value;
  486|  7.19M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  18.8k|    {
 1604|  18.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.8k|        return this->get_unexpected().error();
 1606|  18.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  18.8k|    {
  468|  18.8k|        return m_unexpected;
  469|  18.8k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.57M|    {
 1663|  3.57M|        return std::move(value());
 1664|  3.57M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.57M|    {
 1627|  3.57M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.57M|        return this->get_value();
 1629|  3.57M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.57M|    {
  451|  3.57M|        return m_value;
  452|  3.57M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  6.99k|    {
 1604|  6.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.99k|        return this->get_unexpected().error();
 1606|  6.99k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  2.65M|    {
 1476|  2.65M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  2.65M|    {
  447|  2.65M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.0M|    {
 1177|  15.0M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   982k|    {
 1430|   982k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   982k|    {
  437|   982k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.2M|    {
 1476|  10.2M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  10.2M|    {
  447|  10.2M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  17.6M|    {
 1598|  17.6M|        return has_value();
 1599|  17.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  30.1M|    {
  485|  30.1M|        return m_has_value;
  486|  30.1M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  7.08M|    {
 1604|  7.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.08M|        return this->get_unexpected().error();
 1606|  7.08M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  7.08M|    {
  468|  7.08M|        return m_unexpected;
  469|  7.08M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  2.71M|    {
 1430|  2.71M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  2.71M|    {
  437|  2.71M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.71M|    {
 1177|  2.71M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    162|    {
 1476|    162|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    162|    {
  447|    162|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.85M|    {
 1653|  2.85M|        return value();
 1654|  2.85M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  2.85M|    {
 1627|  2.85M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.85M|        return this->get_value();
 1629|  2.85M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.85M|    {
  451|  2.85M|        return m_value;
  452|  2.85M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  83.8k|    {
 1598|  83.8k|        return has_value();
 1599|  83.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  5.43M|    {
  485|  5.43M|        return m_has_value;
  486|  5.43M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  2.63M|    {
 1663|  2.63M|        return std::move(value());
 1664|  2.63M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.71M|    {
 1627|  2.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.71M|        return this->get_value();
 1629|  2.71M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  2.71M|    {
  451|  2.71M|        return m_value;
  452|  2.71M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.11M|    {
 1430|  1.11M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.11M|    {
  437|  1.11M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.09M|    {
 2855|  5.09M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.09M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.09M|    {
 2836|  5.09M|        return t.data();
 2837|  5.09M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  1.23M|    {
 1476|  1.23M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  1.23M|    {
  447|  1.23M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.1M|    {
 1177|  17.1M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  15.6M|    {
 1430|  15.6M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  15.6M|    {
  437|  15.6M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  10.5M|    {
 1663|  10.5M|        return std::move(value());
 1664|  10.5M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  6.27M|{
 1211|  6.27M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  6.27M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  2.68M|    {
 1837|  2.68M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.68M|                                            std::forward<F>(f));
 1839|  2.68M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  2.68M|{
 1323|  2.68M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.68M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.68M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.68M|            return result(*std::forward<Exp>(exp));
 1327|  2.68M|        }
 1328|       |
 1329|  2.68M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.68M|        return result(unexpect, monostate{});
 1331|  2.68M|    }
 1332|  2.68M|    else {
 1333|  2.68M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.68M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.68M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.68M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.68M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.68M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.68M|    }
 1340|  2.68M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  2.68M|    {
 1430|  2.68M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  2.68M|    {
  437|  2.68M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.68M|    {
 1177|  2.68M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  2.68M|    {
 1598|  2.68M|        return has_value();
 1599|  2.68M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.36M|    {
  485|  5.36M|        return m_has_value;
  486|  5.36M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.68M|    {
 1663|  2.68M|        return std::move(value());
 1664|  2.68M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.68M|    {
 1627|  2.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.68M|        return this->get_value();
 1629|  2.68M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.68M|    {
  451|  2.68M|        return m_value;
  452|  2.68M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  2.62M|    {
 1823|  2.62M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.62M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  2.62M|{
 1323|  2.62M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.62M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.62M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.62M|            return result(*std::forward<Exp>(exp));
 1327|  2.62M|        }
 1328|       |
 1329|  2.62M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.62M|        return result(unexpect, monostate{});
 1331|  2.62M|    }
 1332|  2.62M|    else {
 1333|  2.62M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.62M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.62M]
  |  |  ------------------
  ------------------
 1335|  2.62M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.62M|                   : result(unexpect,
 1337|  2.62M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.62M|                                           std::forward<Exp>(exp).error()));
 1339|  2.62M|    }
 1340|  2.62M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|   141k|    {
 1430|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   141k|    {
  437|   141k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.94M|    {
 1653|  1.94M|        return value();
 1654|  1.94M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   654k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   262k|    {
 1673|   262k|        return &value();
 1674|   262k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.89M|    {
 2724|  1.89M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.89M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.89M|    {
 2705|  1.89M|        return decay_copy(t.begin());
 2706|  1.89M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.89M|{
 1949|  1.89M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.89M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|  1.17M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  2.63M|    {
 1837|  2.63M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.63M|                                            std::forward<F>(f));
 1839|  2.63M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  2.63M|{
 1323|  2.63M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.63M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.63M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.63M|            return result(*std::forward<Exp>(exp));
 1327|  2.63M|        }
 1328|       |
 1329|  2.63M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.63M|        return result(unexpect, monostate{});
 1331|  2.63M|    }
 1332|  2.63M|    else {
 1333|  2.63M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.63M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.63M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.63M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.63M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.63M|    }
 1340|  2.63M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.63M|    {
 1430|  2.63M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  2.63M|    {
  437|  2.63M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.63M|    {
 1177|  2.63M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  2.63M|    {
 1598|  2.63M|        return has_value();
 1599|  2.63M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.26M|    {
  485|  5.26M|        return m_has_value;
  486|  5.26M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  2.63M|    {
 1663|  2.63M|        return std::move(value());
 1664|  2.63M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.63M|    {
 1627|  2.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.63M|        return this->get_value();
 1629|  2.63M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.63M|    {
  451|  2.63M|        return m_value;
  452|  2.63M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  2.52M|    {
 1823|  2.52M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.52M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  2.52M|{
 1323|  2.52M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.52M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.52M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.52M|            return result(*std::forward<Exp>(exp));
 1327|  2.52M|        }
 1328|       |
 1329|  2.52M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.52M|        return result(unexpect, monostate{});
 1331|  2.52M|    }
 1332|  2.52M|    else {
 1333|  2.52M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.52M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.52M]
  |  |  ------------------
  ------------------
 1335|  2.52M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.52M|                   : result(unexpect,
 1337|  2.52M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.52M|                                           std::forward<Exp>(exp).error()));
 1339|  2.52M|    }
 1340|  2.52M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  2.52M|    {
 3648|  2.52M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.85M|    {
 1653|  1.85M|        return value();
 1654|  1.85M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  83.7k|    {
 1673|  83.7k|        return &value();
 1674|  83.7k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  2.62M|    {
 3648|  2.62M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   750k|    {
 1476|   750k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  2.62M|    {
 4280|  2.62M|        return x.is_at_end();
 4281|  2.62M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  3.73M|    {
 4324|  3.73M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 3.73M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  3.73M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 3.73M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  3.73M|        return !read_at_position();
 4331|  3.73M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  11.2M|    {
 4304|  11.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  11.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  11.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 11.2M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  11.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  11.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.61M, False: 1.65M]
  |  |  ------------------
  ------------------
 4311|  9.61M|            return true;
 4312|  9.61M|        }
 4313|       |
 4314|  3.15M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.65M, False: 1.49M]
  ------------------
 4315|  1.65M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 158k, False: 1.49M]
  ------------------
 4316|   158k|                return false;
 4317|   158k|            }
 4318|  1.65M|        }
 4319|  1.49M|        return true;
 4320|  1.65M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  15.3M|    {
 4081|  15.3M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  15.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  3.45M|    {
 4239|  3.45M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  3.45M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 3.45M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  3.45M|        auto res = read_at_position();
 4248|  3.45M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  3.45M|        return parent()->get_character_at(m_position);
 4250|  3.45M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  3.45M|    {
 4112|  3.45M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.92M, False: 527k]
  |  |  ------------------
  ------------------
 4113|  3.45M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  2.92M|            return m_putback_buffer[pos];
 4115|  2.92M|        }
 4116|   527k|        const auto start = pos - m_putback_buffer.size();
 4117|   527k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   527k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   527k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   527k|        return m_current_view[start];
 4119|   527k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.09M|{
 3807|  1.09M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.09M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.09M|    }
 3810|  1.09M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.09M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.09M|    }
 3813|  1.09M|    else {
 3814|       |        // utf-32
 3815|  1.09M|        static_assert(sizeof(U) == 4);
 3816|  1.09M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.09M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.09M|        return 1;
 3818|  1.09M|    }
 3819|  1.09M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  1.80M|    {
 1430|  1.80M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.80M|    {
  437|  1.80M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.85M|    {
 1177|  1.85M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  54.6k|    {
 1476|  54.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  54.6k|    {
  447|  54.6k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   551k|    {
 1598|   551k|        return has_value();
 1599|   551k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  4.54k|    {
 1653|  4.54k|        return value();
 1654|  4.54k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  1.38M|    {
 4274|  1.38M|        return !(lhs == rhs);
 4275|  1.38M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  1.93M|    {
 4269|  1.93M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 1.93M, False: 0]
  |  Branch (4269:46): [True: 620k, False: 1.31M]
  ------------------
 4270|  1.93M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  4.08M|    {
 4225|  4.08M|        ++m_position;
 4226|  4.08M|        (void)read_at_position();
 4227|  4.08M|        return *this;
 4228|  4.08M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.09M|{
 4013|  1.09M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.09M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.09M|    }
 4016|  1.09M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.09M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.09M|    }
 4019|  1.09M|    else {
 4020|  1.09M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.09M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.09M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 281k, False: 818k]
  |  |  ------------------
  ------------------
 4023|   281k|            return invalid_code_point;
 4024|   281k|        }
 4025|   818k|        return cp;
 4026|  1.09M|    }
 4027|  1.09M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.76k|    {
 1476|  1.76k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.76k|    {
  447|  1.76k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   349k|    {
 1177|   349k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   348k|    {
 1430|   348k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   348k|    {
  437|   348k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   349k|    {
 1598|   349k|        return has_value();
 1599|   349k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   699k|    {
  485|   699k|        return m_has_value;
  486|   699k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.76k|    {
 1604|  1.76k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.76k|        return this->get_unexpected().error();
 1606|  1.76k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.76k|    {
  468|  1.76k|        return m_unexpected;
  469|  1.76k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   348k|    {
 1663|   348k|        return std::move(value());
 1664|   348k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   348k|    {
 1627|   348k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   348k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   348k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   348k|        return this->get_value();
 1629|   348k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   348k|    {
  451|   348k|        return m_value;
  452|   348k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  6.07M|    {
 3334|  6.07M|        return m_sentinel;
 3335|  6.07M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|    987|    {
 1604|    987|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    987|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    987|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    987|        return this->get_unexpected().error();
 1606|    987|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   418k|    {
 1476|   418k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   469k|    {
  447|   469k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.26M|    {
 1177|  3.26M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  4.54k|    {
 1430|  4.54k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  4.54k|    {
  437|  4.54k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  1.80M|    {
 1476|  1.80M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.80M|    {
  447|  1.80M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  3.63M|    {
 1598|  3.63M|        return has_value();
 1599|  3.63M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  6.77M|    {
  485|  6.77M|        return m_has_value;
  486|  6.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.41M|    {
 1604|  1.41M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.41M|        return this->get_unexpected().error();
 1606|  1.41M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.41M|    {
  468|  1.41M|        return m_unexpected;
  469|  1.41M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   369k|    {
 1430|   369k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   369k|    {
  437|   369k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   369k|    {
 1177|   369k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     27|    {
 1476|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     27|    {
  447|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   206k|    {
 1653|   206k|        return value();
 1654|   206k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.09M|    {
 1627|  1.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.09M|        return this->get_value();
 1629|  1.09M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.09M|    {
  451|  1.09M|        return m_value;
  452|  1.09M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  3.78k|    {
 1598|  3.78k|        return has_value();
 1599|  3.78k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   739k|    {
  485|   739k|        return m_has_value;
  486|   739k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   366k|    {
 1663|   366k|        return std::move(value());
 1664|   366k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   369k|    {
 1627|   369k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   369k|        return this->get_value();
 1629|   369k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   369k|    {
  451|   369k|        return m_value;
  452|   369k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   938k|    {
 1837|   938k|        return detail::transform_error_impl(std::move(*this),
 1838|   938k|                                            std::forward<F>(f));
 1839|   938k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   938k|{
 1323|   938k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   938k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   938k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   938k|            return result(*std::forward<Exp>(exp));
 1327|   938k|        }
 1328|       |
 1329|   938k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   938k|        return result(unexpect, monostate{});
 1331|   938k|    }
 1332|   938k|    else {
 1333|   938k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   938k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   938k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 887k, False: 51.3k]
  |  |  ------------------
  ------------------
 1335|   938k|                   ? result(*std::forward<Exp>(exp))
 1336|   938k|                   : result(unexpect,
 1337|  51.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  51.3k|                                           std::forward<Exp>(exp).error()));
 1339|   938k|    }
 1340|   938k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|   989k|    {
 1430|   989k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   989k|    {
  437|   989k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  51.3k|    {
 1486|  51.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|   887k|    {
 1663|   887k|        return std::move(value());
 1664|   887k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   105k|    {
 3330|   105k|        return m_iterator;
 3331|   105k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   105k|    {
 3334|   105k|        return m_sentinel;
 3335|   105k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.47M|    {
 1598|  2.47M|        return has_value();
 1599|  2.47M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.13M|    {
  485|  4.13M|        return m_has_value;
  486|  4.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  1.01M|    {
 1604|  1.01M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.01M|        return this->get_unexpected().error();
 1606|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.01M|    {
  468|  1.01M|        return m_unexpected;
  469|  1.01M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   560k|    {
 1663|   560k|        return std::move(value());
 1664|   560k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   630k|    {
 1627|   630k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   630k|        return this->get_value();
 1629|   630k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   630k|    {
  451|   630k|        return m_value;
  452|   630k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   194k|{
  304|   194k|    return p;
  305|   194k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   194k|{
  326|   194k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   194k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  97.3k|    {
 3316|  97.3k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.11M|    {
 4291|  1.11M|        return !x.is_at_end();
 4292|  1.11M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  54.0k|    {
 1476|  54.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  54.0k|    {
  447|  54.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.73M|    {
 1177|  1.73M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  1.67M|    {
 1430|  1.67M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.67M|    {
  437|  1.67M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   425k|    {
 1598|   425k|        return has_value();
 1599|   425k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.04M|    {
  485|  3.04M|        return m_has_value;
  486|  3.04M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.01k|    {
 1653|  2.01k|        return value();
 1654|  2.01k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.25M|    {
 1627|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.25M|        return this->get_value();
 1629|  1.25M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.25M|    {
  451|  1.25M|        return m_value;
  452|  1.25M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.76k|    {
 1476|  1.76k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  1.76k|    {
  447|  1.76k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   350k|    {
 1177|   350k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   348k|    {
 1430|   348k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   348k|    {
  437|   348k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   368k|    {
 1837|   368k|        return detail::transform_error_impl(std::move(*this),
 1838|   368k|                                            std::forward<F>(f));
 1839|   368k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   368k|{
 1323|   368k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   368k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   368k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   368k|            return result(*std::forward<Exp>(exp));
 1327|   368k|        }
 1328|       |
 1329|   368k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   368k|        return result(unexpect, monostate{});
 1331|   368k|    }
 1332|   368k|    else {
 1333|   368k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   368k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   368k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 366k, False: 2.35k]
  |  |  ------------------
  ------------------
 1335|   368k|                   ? result(*std::forward<Exp>(exp))
 1336|   368k|                   : result(unexpect,
 1337|  2.35k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.35k|                                           std::forward<Exp>(exp).error()));
 1339|   368k|    }
 1340|   368k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.25M|    {
 1663|  1.25M|        return std::move(value());
 1664|  1.25M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  53.7k|    {
 1614|  53.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.7k|        return std::move(this->get_unexpected().error());
 1616|  53.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  54.0k|    {
  468|  54.0k|        return m_unexpected;
  469|  54.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   491k|    {
 1486|   491k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   350k|    {
 1598|   350k|        return has_value();
 1599|   350k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   700k|    {
  485|   700k|        return m_has_value;
  486|   700k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  1.76k|    {
 1604|  1.76k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.76k|        return this->get_unexpected().error();
 1606|  1.76k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.76k|    {
  468|  1.76k|        return m_unexpected;
  469|  1.76k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   348k|    {
 1663|   348k|        return std::move(value());
 1664|   348k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   348k|    {
 1627|   348k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   348k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   348k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   348k|        return this->get_value();
 1629|   348k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   348k|    {
  451|   348k|        return m_value;
  452|   348k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    284|    {
 1604|    284|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    284|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    284|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    284|        return this->get_unexpected().error();
 1606|    284|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   418k|    {
 1476|   418k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   469k|    {
  447|   469k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.86M|    {
 1177|  2.86M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  2.01k|    {
 1430|  2.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.01k|    {
  437|  2.01k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.47M|    {
 1476|  1.47M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.47M|    {
  447|  1.47M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  3.23M|    {
 1598|  3.23M|        return has_value();
 1599|  3.23M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  5.96M|    {
  485|  5.96M|        return m_has_value;
  486|  5.96M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.27M|    {
 1604|  1.27M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.27M|        return this->get_unexpected().error();
 1606|  1.27M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.27M|    {
  468|  1.27M|        return m_unexpected;
  469|  1.27M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   367k|    {
 1430|   367k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   367k|    {
  437|   367k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   367k|    {
 1177|   367k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     12|    {
 1476|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     12|    {
  447|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  78.2k|    {
 1653|  78.2k|        return value();
 1654|  78.2k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|   966k|    {
 1627|   966k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   966k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   966k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   966k|        return this->get_value();
 1629|   966k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   966k|    {
  451|   966k|        return m_value;
  452|   966k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  1.51k|    {
 1598|  1.51k|        return has_value();
 1599|  1.51k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   735k|    {
  485|   735k|        return m_has_value;
  486|   735k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   366k|    {
 1663|   366k|        return std::move(value());
 1664|   366k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   367k|    {
 1627|   367k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   367k|        return this->get_value();
 1629|   367k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   367k|    {
  451|   367k|        return m_value;
  452|   367k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   939k|    {
 1837|   939k|        return detail::transform_error_impl(std::move(*this),
 1838|   939k|                                            std::forward<F>(f));
 1839|   939k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   939k|{
 1323|   939k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   939k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   939k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   939k|            return result(*std::forward<Exp>(exp));
 1327|   939k|        }
 1328|       |
 1329|   939k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   939k|        return result(unexpect, monostate{});
 1331|   939k|    }
 1332|   939k|    else {
 1333|   939k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   939k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   939k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 888k, False: 51.3k]
  |  |  ------------------
  ------------------
 1335|   939k|                   ? result(*std::forward<Exp>(exp))
 1336|   939k|                   : result(unexpect,
 1337|  51.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  51.3k|                                           std::forward<Exp>(exp).error()));
 1339|   939k|    }
 1340|   939k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   926k|    {
 1430|   926k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   926k|    {
  437|   926k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  51.3k|    {
 1486|  51.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|   888k|    {
 1663|   888k|        return std::move(value());
 1664|   888k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   241k|    {
 2855|   241k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   241k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   241k|    {
 2836|   241k|        return t.data();
 2837|   241k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   366k|    {
 1837|   366k|        return detail::transform_error_impl(std::move(*this),
 1838|   366k|                                            std::forward<F>(f));
 1839|   366k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   366k|{
 1323|   366k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   366k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   366k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   366k|            return result(*std::forward<Exp>(exp));
 1327|   366k|        }
 1328|       |
 1329|   366k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   366k|        return result(unexpect, monostate{});
 1331|   366k|    }
 1332|   366k|    else {
 1333|   366k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   366k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   366k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 366k, False: 0]
  |  |  ------------------
  ------------------
 1335|   366k|                   ? result(*std::forward<Exp>(exp))
 1336|   366k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   366k|    }
 1340|   366k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   366k|    {
 1430|   366k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   366k|    {
  437|   366k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   366k|    {
 1177|   366k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   366k|    {
 1598|   366k|        return has_value();
 1599|   366k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   732k|    {
  485|   732k|        return m_has_value;
  486|   732k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   366k|    {
 1663|   366k|        return std::move(value());
 1664|   366k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   366k|    {
 1627|   366k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   366k|        return this->get_value();
 1629|   366k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   366k|    {
  451|   366k|        return m_value;
  452|   366k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   633k|    {
 1823|   633k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   633k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   633k|{
 1323|   633k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   633k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   633k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   633k|            return result(*std::forward<Exp>(exp));
 1327|   633k|        }
 1328|       |
 1329|   633k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   633k|        return result(unexpect, monostate{});
 1331|   633k|    }
 1332|   633k|    else {
 1333|   633k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   633k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   633k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 633k]
  |  |  ------------------
  ------------------
 1335|   633k|                   ? result(*std::forward<Exp>(exp))
 1336|   633k|                   : result(unexpect,
 1337|   633k|                            trivial_invoke(std::forward<F>(f),
 1338|   633k|                                           std::forward<Exp>(exp).error()));
 1339|   633k|    }
 1340|   633k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  70.4k|    {
 1653|  70.4k|        return value();
 1654|  70.4k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  59.4k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  3.76k|    {
 1673|  3.76k|        return &value();
 1674|  3.76k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   306k|    {
 2724|   306k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   306k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   306k|    {
 2705|   306k|        return decay_copy(t.begin());
 2706|   306k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   306k|{
 1949|   306k|    return SCN_FWD(t);
  ------------------
  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   306k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   146k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   366k|    {
 1837|   366k|        return detail::transform_error_impl(std::move(*this),
 1838|   366k|                                            std::forward<F>(f));
 1839|   366k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   366k|{
 1323|   366k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   366k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   366k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   366k|            return result(*std::forward<Exp>(exp));
 1327|   366k|        }
 1328|       |
 1329|   366k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   366k|        return result(unexpect, monostate{});
 1331|   366k|    }
 1332|   366k|    else {
 1333|   366k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   366k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   366k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 366k, False: 0]
  |  |  ------------------
  ------------------
 1335|   366k|                   ? result(*std::forward<Exp>(exp))
 1336|   366k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   366k|    }
 1340|   366k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   366k|    {
 1430|   366k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   366k|    {
  437|   366k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   366k|    {
 1177|   366k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   366k|    {
 1598|   366k|        return has_value();
 1599|   366k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   732k|    {
  485|   732k|        return m_has_value;
  486|   732k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   366k|    {
 1663|   366k|        return std::move(value());
 1664|   366k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   366k|    {
 1627|   366k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   366k|        return this->get_value();
 1629|   366k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   366k|    {
  451|   366k|        return m_value;
  452|   366k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   488k|    {
 1823|   488k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   488k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   488k|{
 1323|   488k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   488k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   488k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   488k|            return result(*std::forward<Exp>(exp));
 1327|   488k|        }
 1328|       |
 1329|   488k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   488k|        return result(unexpect, monostate{});
 1331|   488k|    }
 1332|   488k|    else {
 1333|   488k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   488k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   488k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
 1335|   488k|                   ? result(*std::forward<Exp>(exp))
 1336|   488k|                   : result(unexpect,
 1337|   488k|                            trivial_invoke(std::forward<F>(f),
 1338|   488k|                                           std::forward<Exp>(exp).error()));
 1339|   488k|    }
 1340|   488k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   488k|    {
 3648|   488k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  70.6k|    {
 1653|  70.6k|        return value();
 1654|  70.6k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  1.50k|    {
 1673|  1.50k|        return &value();
 1674|  1.50k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   633k|    {
 3648|   633k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   271k|    {
 1430|   271k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   271k|    {
  437|   271k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   190k|{
 3654|   190k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   190k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.38M|    {
 2855|  2.38M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.38M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.38M|    {
 2836|  2.38M|        return t.data();
 2837|  2.38M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  4.85M|    {
 5466|  4.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.85M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  4.85M|        return static_cast<std::size_t>(m_desc &
 5471|  4.85M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  4.85M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  9.70M|    {
 5491|  9.70M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  9.70M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  4.85M|    {
 5434|  4.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.85M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.85M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.85M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  4.85M|        const auto t = type(id);
 5446|  4.85M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.85M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  4.85M|        basic_scan_arg<Context> arg;
 5451|  4.85M|        arg.m_type = t;
 5452|  4.85M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 4.85M, False: 0]
  ------------------
 5453|  4.85M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  4.85M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  4.85M|        return arg;
 5459|  4.85M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  4.85M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  4.85M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  4.85M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  4.85M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  4.85M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  4.85M|    {
 5495|  4.85M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  4.85M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  9.18M|    {
 5247|  9.18M|        return m_type != detail::arg_type::none_type;
 5248|  9.18M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   799k|{
 8417|   799k|#define SCN_VISIT(Type)                                         \
 8418|   799k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   799k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   799k|    }                                                           \
 8421|   799k|    else {                                                      \
 8422|   799k|        return vis(monostate_val);                              \
 8423|   799k|    }
 8424|       |
 8425|   799k|    monostate monostate_val{};
 8426|       |
 8427|   799k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 799k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 799k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 799k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 799k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 799k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 799k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 799k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 799k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 799k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 799k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 799k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 799k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 799k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 799k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 799k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   247k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 247k, False: 552k]
  ------------------
 8459|   247k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   247k|    }                                                           \
  |  | 8421|   247k|    else {                                                      \
  |  | 8422|   247k|        return vis(monostate_val);                              \
  |  | 8423|   247k|    }
  ------------------
 8460|   273k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 273k, False: 526k]
  ------------------
 8461|   273k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   273k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   273k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   273k|    }                                                           \
  |  | 8421|   273k|    else {                                                      \
  |  | 8422|   273k|        return vis(monostate_val);                              \
  |  | 8423|   273k|    }
  ------------------
 8462|   278k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 278k, False: 521k]
  ------------------
 8463|   278k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   278k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   278k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   278k|    }                                                           \
  |  | 8421|   278k|    else {                                                      \
  |  | 8422|   278k|        return vis(monostate_val);                              \
  |  | 8423|   278k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 799k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 799k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 799k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 799k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 799k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 799k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 799k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 799k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 799k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   799k|            SCN_CLANG_POP
 8495|   799k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  3.81M|    {
 5545|  3.81M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  1.95M|    {
 8138|  1.95M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  3.81M|    {
 8056|  3.81M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  2.71M|{
 4344|  2.71M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 2.71M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  2.71M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  2.71M|                            ranges::default_sentinel};
 4350|  2.71M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  2.71M|    {
 4177|  2.71M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  2.71M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  2.71M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   761k|{
 8417|   761k|#define SCN_VISIT(Type)                                         \
 8418|   761k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   761k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   761k|    }                                                           \
 8421|   761k|    else {                                                      \
 8422|   761k|        return vis(monostate_val);                              \
 8423|   761k|    }
 8424|       |
 8425|   761k|    monostate monostate_val{};
 8426|       |
 8427|   761k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 761k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 761k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 761k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 761k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 761k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 761k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 761k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 761k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 761k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 761k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 761k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 761k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 761k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 761k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 761k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   236k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 236k, False: 525k]
  ------------------
 8459|   236k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   236k|    }                                                           \
  |  | 8421|   236k|    else {                                                      \
  |  | 8422|   236k|        return vis(monostate_val);                              \
  |  | 8423|   236k|    }
  ------------------
 8460|   261k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 261k, False: 500k]
  ------------------
 8461|   261k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   261k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   261k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   261k|    }                                                           \
  |  | 8421|   261k|    else {                                                      \
  |  | 8422|   261k|        return vis(monostate_val);                              \
  |  | 8423|   261k|    }
  ------------------
 8462|   264k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 264k, False: 497k]
  ------------------
 8463|   264k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   264k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   264k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   264k|    }                                                           \
  |  | 8421|   264k|    else {                                                      \
  |  | 8422|   264k|        return vis(monostate_val);                              \
  |  | 8423|   264k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 761k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 761k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 761k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 761k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 761k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 761k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 761k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 761k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 761k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   761k|            SCN_CLANG_POP
 8495|   761k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.85M|{
 7044|  1.85M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.85M|    handler.check_args_exhausted();
 7046|  1.85M|    return handler.get_error();
 7047|  1.85M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.85M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.85M|    auto begin = format.data();
 7013|  1.85M|    auto it = begin;
 7014|  1.85M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.61M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.85M, False: 1.75M]
  ------------------
 7017|  1.85M|        const auto ch = *it++;
 7018|  1.85M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.85M, False: 0]
  ------------------
 7019|  1.85M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.85M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.85M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 104k, False: 1.75M]
  ------------------
 7023|   104k|                return;
 7024|   104k|            }
 7025|  1.85M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.85M|    }
 7036|       |
 7037|  1.75M|    handler.on_literal_text(begin, end);
 7038|  1.75M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  1.85M|{
 6942|  1.85M|    struct id_adapter {
 6943|  1.85M|        constexpr void operator()()
 6944|  1.85M|        {
 6945|  1.85M|            arg_id = handler.on_arg_id();
 6946|  1.85M|        }
 6947|  1.85M|        constexpr void operator()(std::size_t id)
 6948|  1.85M|        {
 6949|  1.85M|            arg_id = handler.on_arg_id(id);
 6950|  1.85M|        }
 6951|       |
 6952|  1.85M|        constexpr void on_error(const char* msg)
 6953|  1.85M|        {
 6954|  1.85M|            SCN_UNLIKELY_ATTR
 6955|  1.85M|            handler.on_error(msg);
 6956|  1.85M|        }
 6957|       |
 6958|  1.85M|        Handler& handler;
 6959|  1.85M|        std::size_t arg_id;
 6960|  1.85M|    };
 6961|       |
 6962|  1.85M|    ++begin;
 6963|  1.85M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.85M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.85M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.85M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.85M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.85M|    else {
 6975|  1.85M|        auto adapter = id_adapter{handler, 0};
 6976|  1.85M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.85M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.85M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.85M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.85M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.85M, False: 0]
  ------------------
 6987|  1.85M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.85M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.85M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85M]
  |  |  |  Branch (859:45): [True: 0, False: 1.85M]
  |  |  |  Branch (859:45): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.85M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.85M|    }
 7003|  1.85M|    return begin + 1;
 7004|  1.85M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  3.81M|    {
 8039|  3.81M|        return m_args.get(id);
 8040|  3.81M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  3.81M|    {
 8049|  3.81M|        return m_locale;
 8050|  3.81M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  3.81M|    {
 5566|  3.81M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.81M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  3.81M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  3.81M|        do_check_arg_id(id);
 5574|  3.81M|        return id;
 5575|  3.81M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  3.81M|{
 6054|  3.81M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  3.81M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  3.81M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.85M|{
 6443|  1.85M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.85M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.85M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.85M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.85M|    handler();
 6449|  1.85M|    return begin;
 6450|  1.85M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.85M|        {
 6945|  1.85M|            arg_id = handler.on_arg_id();
 6946|  1.85M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  7.62M|    {
 5252|  7.62M|        return m_type;
 5253|  7.62M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  3.81M|    {
 5561|  3.81M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  3.81M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  7.62M|    {
 5550|  7.62M|        return m_format.data();
 5551|  7.62M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  1.85M|    {
 7122|  1.85M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.85M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  1.85M|{
 6858|  1.85M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.85M|        if (*begin == CharT{'['}) {
 6860|  1.85M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.85M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.85M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.85M|                return begin;
 6866|  1.85M|            }
 6867|  1.85M|            handler.on_character_set_string(set);
 6868|  1.85M|            return begin;
 6869|  1.85M|        }
 6870|  1.85M|        if (*begin == CharT{'/'}) {
 6871|  1.85M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.85M|        }
 6873|  1.85M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.85M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.85M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.85M|            return begin;
 6877|  1.85M|        }
 6878|  1.85M|        handler.on_type(type);
 6879|  1.85M|        return begin;
 6880|  1.85M|    };
 6881|       |
 6882|  1.85M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.85M, False: 0]
  |  Branch (6882:28): [True: 1.85M, False: 0]
  ------------------
 6883|  1.85M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.85M, False: 0]
  |  Branch (6883:36): [True: 1.32M, False: 533k]
  ------------------
 6884|  1.32M|        return do_presentation();
 6885|  1.32M|    }
 6886|       |
 6887|   533k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 533k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   533k|    begin = parse_align(begin, end, handler);
 6893|   533k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 533k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   533k|    begin = parse_width(begin, end, handler);
 6899|   533k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 533k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   533k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 533k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   533k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 533k, False: 0]
  ------------------
 6918|   533k|        handler.on_localized();
 6919|   533k|        ++begin;
 6920|   533k|    }
 6921|   533k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 533k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   533k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 533k, False: 0]
  |  Branch (6926:25): [True: 0, False: 533k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   533k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 533k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   533k|    return begin;
 6935|   533k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  3.81M|{
 6507|  3.81M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 2.71M, False: 1.09M]
  |  Branch (6507:33): [True: 2.71M, False: 0]
  ------------------
 6508|  3.81M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 1.09M, False: 0]
  |  Branch (6508:33): [True: 1.09M, False: 0]
  ------------------
 6509|  3.81M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  1.32M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.32M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.32M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.32M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.32M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.32M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.32M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.32M|        handler.on_type(type);
 6879|  1.32M|        return begin;
 6880|  1.32M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  2.71M|{
 6455|  2.71M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 2.71M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 2.71M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.71M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 2.71M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.71M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 2.71M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.71M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 2.71M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.71M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 2.71M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|  1.22M|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 1.22M, False: 1.49M]
  ------------------
 6474|  1.22M|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 2.71M]
  ------------------
 6475|  1.22M|            return presentation_type::float_hex;
 6476|  75.0k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 75.0k, False: 2.64M]
  ------------------
 6477|  75.0k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 2.71M]
  ------------------
 6478|  75.0k|            return presentation_type::float_scientific;
 6479|   496k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 496k, False: 2.22M]
  ------------------
 6480|   496k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 2.71M]
  ------------------
 6481|   496k|            return presentation_type::float_fixed;
 6482|   923k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 923k, False: 1.79M]
  ------------------
 6483|   923k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.71M]
  ------------------
 6484|   923k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.71M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.71M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.71M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 2.71M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.71M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.71M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 2.71M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  2.71M|    }
 6502|  2.71M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   533k|{
 6532|   533k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   533k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   533k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   533k|    auto check_align = [](wchar_t ch) {
 6535|   533k|        switch (ch) {
 6536|   533k|            case L'<':
 6537|   533k|                return align_type::left;
 6538|   533k|            case L'>':
 6539|   533k|                return align_type::right;
 6540|   533k|            case L'^':
 6541|   533k|                return align_type::center;
 6542|   533k|            default:
 6543|   533k|                return align_type::none;
 6544|   533k|        }
 6545|   533k|    };
 6546|       |
 6547|   533k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   533k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 533k]
  |  |  |  Branch (859:45): [True: 0, False: 533k]
  |  |  |  Branch (859:45): [True: 0, False: 533k]
  |  |  ------------------
  ------------------
 6549|   533k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   533k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   533k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   533k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   533k|    const auto begin_before_fill = begin;
 6559|   533k|    begin += potential_fill_len;
 6560|       |
 6561|   533k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 533k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   533k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   533k|    const auto begin_after_fill = begin;
 6567|   533k|    ++begin;
 6568|       |
 6569|   533k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 533k, False: 0]
  ------------------
 6570|   533k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 533k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   533k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 533k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   533k|    }
 6578|       |
 6579|   533k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 533k, False: 0]
  ------------------
 6580|   533k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 533k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   533k|        return begin_before_fill;
 6585|   533k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   533k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  1.09M|{
 6514|  1.09M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  1.09M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  1.09M|        return 1;
 6517|  1.09M|    }
 6518|  1.09M|    else {
 6519|  1.09M|        const auto lengths =
 6520|  1.09M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  1.09M|            "\3\4";
 6522|  1.09M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  1.09M|        return len;
 6524|  1.09M|    }
 6525|  1.09M|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  1.06M|    auto check_align = [](wchar_t ch) {
 6535|  1.06M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.06M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.06M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.06M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.06M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.06M, False: 0]
  ------------------
 6543|  1.06M|                return align_type::none;
 6544|  1.06M|        }
 6545|  1.06M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   533k|{
 6597|   533k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   533k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   533k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   533k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 533k, False: 0]
  |  Branch (6599:33): [True: 0, False: 533k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   533k|    return begin;
 6610|   533k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   533k|    {
 7127|   533k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   533k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 533k, False: 0]
  ------------------
 7129|   533k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 533k, False: 0]
  ------------------
 7130|   533k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 533k]
  ------------------
 7131|   533k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   533k|        Handler::on_localized();
 7139|   533k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.85M|{
 8417|  1.85M|#define SCN_VISIT(Type)                                         \
 8418|  1.85M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.85M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.85M|    }                                                           \
 8421|  1.85M|    else {                                                      \
 8422|  1.85M|        return vis(monostate_val);                              \
 8423|  1.85M|    }
 8424|       |
 8425|  1.85M|    monostate monostate_val{};
 8426|       |
 8427|  1.85M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.85M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.85M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.85M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.85M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.85M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.85M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.85M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.85M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.85M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.85M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.85M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.85M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.85M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.85M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.85M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   590k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 590k, False: 1.26M]
  ------------------
 8459|   590k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   590k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   590k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   590k|    }                                                           \
  |  | 8421|   590k|    else {                                                      \
  |  | 8422|   590k|        return vis(monostate_val);                              \
  |  | 8423|   590k|    }
  ------------------
 8460|   631k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 631k, False: 1.22M]
  ------------------
 8461|   631k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   631k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   631k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   631k|    }                                                           \
  |  | 8421|   631k|    else {                                                      \
  |  | 8422|   631k|        return vis(monostate_val);                              \
  |  | 8423|   631k|    }
  ------------------
 8462|   637k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 637k, False: 1.22M]
  ------------------
 8463|   637k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   637k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   637k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   637k|    }                                                           \
  |  | 8421|   637k|    else {                                                      \
  |  | 8422|   637k|        return vis(monostate_val);                              \
  |  | 8423|   637k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.85M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.85M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.85M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.85M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.85M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.85M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.85M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.85M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.85M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.85M|            SCN_CLANG_POP
 8495|  1.85M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.95M|{
 7044|  1.95M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.95M|    handler.check_args_exhausted();
 7046|  1.95M|    return handler.get_error();
 7047|  1.95M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.95M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.95M|    auto begin = format.data();
 7013|  1.95M|    auto it = begin;
 7014|  1.95M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.79M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.95M, False: 1.84M]
  ------------------
 7017|  1.95M|        const auto ch = *it++;
 7018|  1.95M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.95M, False: 0]
  ------------------
 7019|  1.95M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.95M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.95M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 104k, False: 1.84M]
  ------------------
 7023|   104k|                return;
 7024|   104k|            }
 7025|  1.95M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.95M|    }
 7036|       |
 7037|  1.84M|    handler.on_literal_text(begin, end);
 7038|  1.84M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  1.84M|    {
 8175|  1.84M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.84M|    static_cast<    \
  |  |  929|  1.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.84M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  1.95M|{
 6942|  1.95M|    struct id_adapter {
 6943|  1.95M|        constexpr void operator()()
 6944|  1.95M|        {
 6945|  1.95M|            arg_id = handler.on_arg_id();
 6946|  1.95M|        }
 6947|  1.95M|        constexpr void operator()(std::size_t id)
 6948|  1.95M|        {
 6949|  1.95M|            arg_id = handler.on_arg_id(id);
 6950|  1.95M|        }
 6951|       |
 6952|  1.95M|        constexpr void on_error(const char* msg)
 6953|  1.95M|        {
 6954|  1.95M|            SCN_UNLIKELY_ATTR
 6955|  1.95M|            handler.on_error(msg);
 6956|  1.95M|        }
 6957|       |
 6958|  1.95M|        Handler& handler;
 6959|  1.95M|        std::size_t arg_id;
 6960|  1.95M|    };
 6961|       |
 6962|  1.95M|    ++begin;
 6963|  1.95M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.95M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.95M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.95M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.95M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.95M|    else {
 6975|  1.95M|        auto adapter = id_adapter{handler, 0};
 6976|  1.95M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.95M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.95M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.95M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.95M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.95M, False: 0]
  ------------------
 6987|  1.95M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.95M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.95M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  |  Branch (859:45): [True: 0, False: 1.95M]
  |  |  |  Branch (859:45): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.95M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.95M|    }
 7003|  1.95M|    return begin + 1;
 7004|  1.95M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.95M|{
 6443|  1.95M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.95M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.95M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.95M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.95M|    handler();
 6449|  1.95M|    return begin;
 6450|  1.95M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.95M|        {
 6945|  1.95M|            arg_id = handler.on_arg_id();
 6946|  1.95M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  1.95M|    {
 7122|  1.95M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.95M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  1.95M|{
 6858|  1.95M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.95M|        if (*begin == CharT{'['}) {
 6860|  1.95M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.95M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.95M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.95M|                return begin;
 6866|  1.95M|            }
 6867|  1.95M|            handler.on_character_set_string(set);
 6868|  1.95M|            return begin;
 6869|  1.95M|        }
 6870|  1.95M|        if (*begin == CharT{'/'}) {
 6871|  1.95M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.95M|        }
 6873|  1.95M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.95M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.95M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.95M|            return begin;
 6877|  1.95M|        }
 6878|  1.95M|        handler.on_type(type);
 6879|  1.95M|        return begin;
 6880|  1.95M|    };
 6881|       |
 6882|  1.95M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.95M, False: 0]
  |  Branch (6882:28): [True: 1.95M, False: 0]
  ------------------
 6883|  1.95M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.95M, False: 0]
  |  Branch (6883:36): [True: 1.39M, False: 561k]
  ------------------
 6884|  1.39M|        return do_presentation();
 6885|  1.39M|    }
 6886|       |
 6887|   561k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   561k|    begin = parse_align(begin, end, handler);
 6893|   561k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   561k|    begin = parse_width(begin, end, handler);
 6899|   561k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   561k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 561k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   561k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 561k, False: 0]
  ------------------
 6918|   561k|        handler.on_localized();
 6919|   561k|        ++begin;
 6920|   561k|    }
 6921|   561k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   561k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 561k, False: 0]
  |  Branch (6926:25): [True: 0, False: 561k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   561k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   561k|    return begin;
 6935|   561k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  1.39M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.39M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.39M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.39M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.39M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.39M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.39M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.39M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.39M|        handler.on_type(type);
 6879|  1.39M|        return begin;
 6880|  1.39M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   561k|{
 6532|   561k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   561k|    auto check_align = [](wchar_t ch) {
 6535|   561k|        switch (ch) {
 6536|   561k|            case L'<':
 6537|   561k|                return align_type::left;
 6538|   561k|            case L'>':
 6539|   561k|                return align_type::right;
 6540|   561k|            case L'^':
 6541|   561k|                return align_type::center;
 6542|   561k|            default:
 6543|   561k|                return align_type::none;
 6544|   561k|        }
 6545|   561k|    };
 6546|       |
 6547|   561k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   561k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  |  Branch (859:45): [True: 0, False: 561k]
  |  |  |  Branch (859:45): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 6549|   561k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   561k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   561k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   561k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   561k|    const auto begin_before_fill = begin;
 6559|   561k|    begin += potential_fill_len;
 6560|       |
 6561|   561k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 561k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   561k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   561k|    const auto begin_after_fill = begin;
 6567|   561k|    ++begin;
 6568|       |
 6569|   561k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 561k, False: 0]
  ------------------
 6570|   561k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   561k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 561k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   561k|    }
 6578|       |
 6579|   561k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 561k, False: 0]
  ------------------
 6580|   561k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 561k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   561k|        return begin_before_fill;
 6585|   561k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   561k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  1.12M|    auto check_align = [](wchar_t ch) {
 6535|  1.12M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.12M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.12M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.12M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.12M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.12M, False: 0]
  ------------------
 6543|  1.12M|                return align_type::none;
 6544|  1.12M|        }
 6545|  1.12M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   561k|{
 6597|   561k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   561k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 561k, False: 0]
  |  Branch (6599:33): [True: 0, False: 561k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   561k|    return begin;
 6610|   561k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   561k|    {
 7127|   561k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   561k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 561k, False: 0]
  ------------------
 7129|   561k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 561k, False: 0]
  ------------------
 7130|   561k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 561k]
  ------------------
 7131|   561k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   561k|        Handler::on_localized();
 7139|   561k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.95M|{
 8417|  1.95M|#define SCN_VISIT(Type)                                         \
 8418|  1.95M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.95M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.95M|    }                                                           \
 8421|  1.95M|    else {                                                      \
 8422|  1.95M|        return vis(monostate_val);                              \
 8423|  1.95M|    }
 8424|       |
 8425|  1.95M|    monostate monostate_val{};
 8426|       |
 8427|  1.95M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.95M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.95M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.95M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.95M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.95M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.95M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.95M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.95M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.95M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.95M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.95M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.95M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.95M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.95M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.95M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   620k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 620k, False: 1.33M]
  ------------------
 8459|   620k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   620k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   620k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   620k|    }                                                           \
  |  | 8421|   620k|    else {                                                      \
  |  | 8422|   620k|        return vis(monostate_val);                              \
  |  | 8423|   620k|    }
  ------------------
 8460|   662k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 662k, False: 1.28M]
  ------------------
 8461|   662k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   662k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   662k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   662k|    }                                                           \
  |  | 8421|   662k|    else {                                                      \
  |  | 8422|   662k|        return vis(monostate_val);                              \
  |  | 8423|   662k|    }
  ------------------
 8462|   669k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 669k, False: 1.28M]
  ------------------
 8463|   669k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   669k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   669k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   669k|    }                                                           \
  |  | 8421|   669k|    else {                                                      \
  |  | 8422|   669k|        return vis(monostate_val);                              \
  |  | 8423|   669k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.95M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.95M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.95M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.95M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.95M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.95M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.95M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.95M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.95M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.95M|            SCN_CLANG_POP
 8495|  1.95M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   135k|    {
 4076|   135k|        sync(0);
 4077|   135k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   678k|    {
 5466|   678k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   678k|        return static_cast<std::size_t>(m_desc &
 5471|   678k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   678k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.35M|    {
 5491|  1.35M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.35M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   678k|    {
 5434|   678k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   678k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   678k|        const auto t = type(id);
 5446|   678k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   678k|        basic_scan_arg<Context> arg;
 5451|   678k|        arg.m_type = t;
 5452|   678k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 678k, False: 0]
  ------------------
 5453|   678k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   678k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   678k|        return arg;
 5459|   678k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   678k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   678k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   678k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   678k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   678k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   678k|    {
 5495|   678k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   678k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.29M|    {
 5247|  1.29M|        return m_type != detail::arg_type::none_type;
 5248|  1.29M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  88.9k|{
 8417|  88.9k|#define SCN_VISIT(Type)                                         \
 8418|  88.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  88.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  88.9k|    }                                                           \
 8421|  88.9k|    else {                                                      \
 8422|  88.9k|        return vis(monostate_val);                              \
 8423|  88.9k|    }
 8424|       |
 8425|  88.9k|    monostate monostate_val{};
 8426|       |
 8427|  88.9k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 88.9k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 88.9k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 88.9k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 88.9k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 88.9k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 88.9k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 88.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 88.9k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 88.9k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 88.9k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 88.9k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 88.9k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 88.9k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 88.9k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 88.9k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  29.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 29.5k, False: 59.4k]
  ------------------
 8459|  29.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  29.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  29.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  29.5k|    }                                                           \
  |  | 8421|  29.5k|    else {                                                      \
  |  | 8422|  29.5k|        return vis(monostate_val);                              \
  |  | 8423|  29.5k|    }
  ------------------
 8460|  29.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 29.6k, False: 59.3k]
  ------------------
 8461|  29.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  29.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  29.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  29.6k|    }                                                           \
  |  | 8421|  29.6k|    else {                                                      \
  |  | 8422|  29.6k|        return vis(monostate_val);                              \
  |  | 8423|  29.6k|    }
  ------------------
 8462|  29.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 29.7k, False: 59.1k]
  ------------------
 8463|  29.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  29.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  29.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  29.7k|    }                                                           \
  |  | 8421|  29.7k|    else {                                                      \
  |  | 8422|  29.7k|        return vis(monostate_val);                              \
  |  | 8423|  29.7k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 88.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 88.9k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 88.9k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 88.9k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 88.9k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 88.9k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 88.9k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 88.9k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 88.9k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  88.9k|            SCN_CLANG_POP
 8495|  88.9k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   559k|    {
 5545|   559k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   279k|    {
 8138|   279k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   559k|    {
 8056|   559k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   279k|{
 7044|   279k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   279k|    handler.check_args_exhausted();
 7046|   279k|    return handler.get_error();
 7047|   279k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   279k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   279k|    auto begin = format.data();
 7013|   279k|    auto it = begin;
 7014|   279k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   350k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 279k, False: 70.6k]
  ------------------
 7017|   279k|        const auto ch = *it++;
 7018|   279k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 279k, False: 0]
  ------------------
 7019|   279k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   279k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   279k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 209k, False: 70.6k]
  ------------------
 7023|   209k|                return;
 7024|   209k|            }
 7025|   279k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   279k|    }
 7036|       |
 7037|  70.6k|    handler.on_literal_text(begin, end);
 7038|  70.6k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   279k|{
 6942|   279k|    struct id_adapter {
 6943|   279k|        constexpr void operator()()
 6944|   279k|        {
 6945|   279k|            arg_id = handler.on_arg_id();
 6946|   279k|        }
 6947|   279k|        constexpr void operator()(std::size_t id)
 6948|   279k|        {
 6949|   279k|            arg_id = handler.on_arg_id(id);
 6950|   279k|        }
 6951|       |
 6952|   279k|        constexpr void on_error(const char* msg)
 6953|   279k|        {
 6954|   279k|            SCN_UNLIKELY_ATTR
 6955|   279k|            handler.on_error(msg);
 6956|   279k|        }
 6957|       |
 6958|   279k|        Handler& handler;
 6959|   279k|        std::size_t arg_id;
 6960|   279k|    };
 6961|       |
 6962|   279k|    ++begin;
 6963|   279k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   279k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 279k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   279k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 279k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   279k|    else {
 6975|   279k|        auto adapter = id_adapter{handler, 0};
 6976|   279k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   279k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   279k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 279k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   279k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 279k, False: 0]
  ------------------
 6987|   279k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   279k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   279k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  |  Branch (859:45): [True: 0, False: 279k]
  |  |  |  Branch (859:45): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   279k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   279k|    }
 7003|   279k|    return begin + 1;
 7004|   279k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   559k|    {
 8039|   559k|        return m_args.get(id);
 8040|   559k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   559k|    {
 8049|   559k|        return m_locale;
 8050|   559k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   559k|    {
 5566|   559k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 559k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   559k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   559k|        do_check_arg_id(id);
 5574|   559k|        return id;
 5575|   559k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   559k|{
 6054|   559k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   559k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   559k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   279k|{
 6443|   279k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   279k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 279k, False: 0]
  |  Branch (6444:26): [True: 0, False: 279k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   279k|    handler();
 6449|   279k|    return begin;
 6450|   279k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   279k|        {
 6945|   279k|            arg_id = handler.on_arg_id();
 6946|   279k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.11M|    {
 5252|  1.11M|        return m_type;
 5253|  1.11M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   559k|    {
 5561|   559k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   559k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   368k|{
 4344|   368k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 368k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   368k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   368k|                            ranges::default_sentinel};
 4350|   368k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   368k|    {
 4177|   368k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   368k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   368k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.11M|    {
 5550|  1.11M|        return m_format.data();
 5551|  1.11M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   279k|    {
 7122|   279k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   279k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   279k|{
 6858|   279k|    auto do_presentation = [&]() -> const CharT* {
 6859|   279k|        if (*begin == CharT{'['}) {
 6860|   279k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   279k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   279k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   279k|                return begin;
 6866|   279k|            }
 6867|   279k|            handler.on_character_set_string(set);
 6868|   279k|            return begin;
 6869|   279k|        }
 6870|   279k|        if (*begin == CharT{'/'}) {
 6871|   279k|            return parse_presentation_regex(begin, end, handler);
 6872|   279k|        }
 6873|   279k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   279k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   279k|            handler.on_error("Invalid type specifier in format string");
 6876|   279k|            return begin;
 6877|   279k|        }
 6878|   279k|        handler.on_type(type);
 6879|   279k|        return begin;
 6880|   279k|    };
 6881|       |
 6882|   279k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 279k, False: 0]
  |  Branch (6882:28): [True: 279k, False: 0]
  ------------------
 6883|   279k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 279k, False: 0]
  |  Branch (6883:36): [True: 220k, False: 59.2k]
  ------------------
 6884|   220k|        return do_presentation();
 6885|   220k|    }
 6886|       |
 6887|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  59.2k|    begin = parse_align(begin, end, handler);
 6893|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  59.2k|    begin = parse_width(begin, end, handler);
 6899|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  59.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 59.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  59.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 59.2k, False: 0]
  ------------------
 6918|  59.2k|        handler.on_localized();
 6919|  59.2k|        ++begin;
 6920|  59.2k|    }
 6921|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  59.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 59.2k, False: 0]
  |  Branch (6926:25): [True: 0, False: 59.2k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  59.2k|    return begin;
 6935|  59.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   559k|{
 6507|   559k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 441k, False: 118k]
  |  Branch (6507:33): [True: 441k, False: 0]
  ------------------
 6508|   559k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 118k, False: 0]
  |  Branch (6508:33): [True: 118k, False: 0]
  ------------------
 6509|   559k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   220k|    auto do_presentation = [&]() -> const CharT* {
 6859|   220k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 220k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   220k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 220k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   220k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   220k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   220k|        handler.on_type(type);
 6879|   220k|        return begin;
 6880|   220k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   441k|{
 6455|   441k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 441k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 441k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 441k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 441k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 441k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 441k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 441k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 441k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 441k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 441k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   119k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 119k, False: 321k]
  ------------------
 6474|   119k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 441k]
  ------------------
 6475|   119k|            return presentation_type::float_hex;
 6476|  84.2k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 84.2k, False: 356k]
  ------------------
 6477|  84.2k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 441k]
  ------------------
 6478|  84.2k|            return presentation_type::float_scientific;
 6479|   118k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 118k, False: 322k]
  ------------------
 6480|   118k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 441k]
  ------------------
 6481|   118k|            return presentation_type::float_fixed;
 6482|   118k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 118k, False: 322k]
  ------------------
 6483|   118k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 441k]
  ------------------
 6484|   118k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 441k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 441k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 441k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 441k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 441k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 441k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 441k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   441k|    }
 6502|   441k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  59.2k|{
 6532|  59.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  59.2k|    auto check_align = [](wchar_t ch) {
 6535|  59.2k|        switch (ch) {
 6536|  59.2k|            case L'<':
 6537|  59.2k|                return align_type::left;
 6538|  59.2k|            case L'>':
 6539|  59.2k|                return align_type::right;
 6540|  59.2k|            case L'^':
 6541|  59.2k|                return align_type::center;
 6542|  59.2k|            default:
 6543|  59.2k|                return align_type::none;
 6544|  59.2k|        }
 6545|  59.2k|    };
 6546|       |
 6547|  59.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  59.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  |  Branch (859:45): [True: 0, False: 59.2k]
  |  |  |  Branch (859:45): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6549|  59.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  59.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  59.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  59.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  59.2k|    const auto begin_before_fill = begin;
 6559|  59.2k|    begin += potential_fill_len;
 6560|       |
 6561|  59.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 59.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  59.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  59.2k|    const auto begin_after_fill = begin;
 6567|  59.2k|    ++begin;
 6568|       |
 6569|  59.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 59.2k, False: 0]
  ------------------
 6570|  59.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  59.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 59.2k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  59.2k|    }
 6578|       |
 6579|  59.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 59.2k, False: 0]
  ------------------
 6580|  59.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 59.2k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  59.2k|        return begin_before_fill;
 6585|  59.2k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  59.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   118k|{
 6514|   118k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   118k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   118k|        return 1;
 6517|   118k|    }
 6518|   118k|    else {
 6519|   118k|        const auto lengths =
 6520|   118k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   118k|            "\3\4";
 6522|   118k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   118k|        return len;
 6524|   118k|    }
 6525|   118k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   118k|    auto check_align = [](wchar_t ch) {
 6535|   118k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 118k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 118k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 118k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   118k|            default:
  ------------------
  |  Branch (6542:13): [True: 118k, False: 0]
  ------------------
 6543|   118k|                return align_type::none;
 6544|   118k|        }
 6545|   118k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  59.2k|{
 6597|  59.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  59.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 59.2k, False: 0]
  |  Branch (6599:33): [True: 0, False: 59.2k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  59.2k|    return begin;
 6610|  59.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  59.2k|    {
 7127|  59.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  59.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 59.2k, False: 0]
  ------------------
 7129|  59.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 59.2k, False: 0]
  ------------------
 7130|  59.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 59.2k]
  ------------------
 7131|  59.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  59.2k|        Handler::on_localized();
 7139|  59.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   279k|{
 8417|   279k|#define SCN_VISIT(Type)                                         \
 8418|   279k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   279k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   279k|    }                                                           \
 8421|   279k|    else {                                                      \
 8422|   279k|        return vis(monostate_val);                              \
 8423|   279k|    }
 8424|       |
 8425|   279k|    monostate monostate_val{};
 8426|       |
 8427|   279k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 279k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 279k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 279k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 279k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 279k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 279k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 279k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 279k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 279k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 279k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 279k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 279k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 279k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 279k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 279k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  93.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 93.1k, False: 186k]
  ------------------
 8459|  93.1k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  93.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.1k|    }                                                           \
  |  | 8421|  93.1k|    else {                                                      \
  |  | 8422|  93.1k|        return vis(monostate_val);                              \
  |  | 8423|  93.1k|    }
  ------------------
 8460|  93.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 93.2k, False: 186k]
  ------------------
 8461|  93.2k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  93.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.2k|    }                                                           \
  |  | 8421|  93.2k|    else {                                                      \
  |  | 8422|  93.2k|        return vis(monostate_val);                              \
  |  | 8423|  93.2k|    }
  ------------------
 8462|  93.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 93.4k, False: 186k]
  ------------------
 8463|  93.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  93.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.4k|    }                                                           \
  |  | 8421|  93.4k|    else {                                                      \
  |  | 8422|  93.4k|        return vis(monostate_val);                              \
  |  | 8423|  93.4k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 279k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 279k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 279k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 279k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 279k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 279k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 279k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 279k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 279k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   279k|            SCN_CLANG_POP
 8495|   279k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  88.8k|{
 8417|  88.8k|#define SCN_VISIT(Type)                                         \
 8418|  88.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  88.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  88.8k|    }                                                           \
 8421|  88.8k|    else {                                                      \
 8422|  88.8k|        return vis(monostate_val);                              \
 8423|  88.8k|    }
 8424|       |
 8425|  88.8k|    monostate monostate_val{};
 8426|       |
 8427|  88.8k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 88.8k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 88.8k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 88.8k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 88.8k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 88.8k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 88.8k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 88.8k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 88.8k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 88.8k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 88.8k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 88.8k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 88.8k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 88.8k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 88.8k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 88.8k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  29.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 29.5k, False: 59.3k]
  ------------------
 8459|  29.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  29.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  29.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  29.5k|    }                                                           \
  |  | 8421|  29.5k|    else {                                                      \
  |  | 8422|  29.5k|        return vis(monostate_val);                              \
  |  | 8423|  29.5k|    }
  ------------------
 8460|  29.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 29.5k, False: 59.2k]
  ------------------
 8461|  29.5k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  29.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  29.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  29.5k|    }                                                           \
  |  | 8421|  29.5k|    else {                                                      \
  |  | 8422|  29.5k|        return vis(monostate_val);                              \
  |  | 8423|  29.5k|    }
  ------------------
 8462|  29.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 29.7k, False: 59.0k]
  ------------------
 8463|  29.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  29.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  29.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  29.7k|    }                                                           \
  |  | 8421|  29.7k|    else {                                                      \
  |  | 8422|  29.7k|        return vis(monostate_val);                              \
  |  | 8423|  29.7k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 88.8k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 88.8k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 88.8k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 88.8k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 88.8k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 88.8k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 88.8k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 88.8k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 88.8k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  88.8k|            SCN_CLANG_POP
 8495|  88.8k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   279k|{
 7044|   279k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   279k|    handler.check_args_exhausted();
 7046|   279k|    return handler.get_error();
 7047|   279k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   279k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   279k|    auto begin = format.data();
 7013|   279k|    auto it = begin;
 7014|   279k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   350k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 279k, False: 70.4k]
  ------------------
 7017|   279k|        const auto ch = *it++;
 7018|   279k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 279k, False: 0]
  ------------------
 7019|   279k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   279k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   279k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 209k, False: 70.4k]
  ------------------
 7023|   209k|                return;
 7024|   209k|            }
 7025|   279k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   279k|    }
 7036|       |
 7037|  70.4k|    handler.on_literal_text(begin, end);
 7038|  70.4k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  70.4k|    {
 8175|  70.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  70.4k|    static_cast<    \
  |  |  929|  70.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  70.4k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   279k|{
 6942|   279k|    struct id_adapter {
 6943|   279k|        constexpr void operator()()
 6944|   279k|        {
 6945|   279k|            arg_id = handler.on_arg_id();
 6946|   279k|        }
 6947|   279k|        constexpr void operator()(std::size_t id)
 6948|   279k|        {
 6949|   279k|            arg_id = handler.on_arg_id(id);
 6950|   279k|        }
 6951|       |
 6952|   279k|        constexpr void on_error(const char* msg)
 6953|   279k|        {
 6954|   279k|            SCN_UNLIKELY_ATTR
 6955|   279k|            handler.on_error(msg);
 6956|   279k|        }
 6957|       |
 6958|   279k|        Handler& handler;
 6959|   279k|        std::size_t arg_id;
 6960|   279k|    };
 6961|       |
 6962|   279k|    ++begin;
 6963|   279k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   279k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 279k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   279k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 279k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   279k|    else {
 6975|   279k|        auto adapter = id_adapter{handler, 0};
 6976|   279k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   279k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   279k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 279k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   279k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 279k, False: 0]
  ------------------
 6987|   279k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   279k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   279k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  |  Branch (859:45): [True: 0, False: 279k]
  |  |  |  Branch (859:45): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   279k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   279k|    }
 7003|   279k|    return begin + 1;
 7004|   279k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   279k|{
 6443|   279k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   279k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 279k, False: 0]
  |  Branch (6444:26): [True: 0, False: 279k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   279k|    handler();
 6449|   279k|    return begin;
 6450|   279k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   279k|        {
 6945|   279k|            arg_id = handler.on_arg_id();
 6946|   279k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   279k|    {
 7122|   279k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   279k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   279k|{
 6858|   279k|    auto do_presentation = [&]() -> const CharT* {
 6859|   279k|        if (*begin == CharT{'['}) {
 6860|   279k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   279k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   279k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   279k|                return begin;
 6866|   279k|            }
 6867|   279k|            handler.on_character_set_string(set);
 6868|   279k|            return begin;
 6869|   279k|        }
 6870|   279k|        if (*begin == CharT{'/'}) {
 6871|   279k|            return parse_presentation_regex(begin, end, handler);
 6872|   279k|        }
 6873|   279k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   279k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   279k|            handler.on_error("Invalid type specifier in format string");
 6876|   279k|            return begin;
 6877|   279k|        }
 6878|   279k|        handler.on_type(type);
 6879|   279k|        return begin;
 6880|   279k|    };
 6881|       |
 6882|   279k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 279k, False: 0]
  |  Branch (6882:28): [True: 279k, False: 0]
  ------------------
 6883|   279k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 279k, False: 0]
  |  Branch (6883:36): [True: 220k, False: 59.2k]
  ------------------
 6884|   220k|        return do_presentation();
 6885|   220k|    }
 6886|       |
 6887|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  59.2k|    begin = parse_align(begin, end, handler);
 6893|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  59.2k|    begin = parse_width(begin, end, handler);
 6899|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  59.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 59.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  59.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 59.2k, False: 0]
  ------------------
 6918|  59.2k|        handler.on_localized();
 6919|  59.2k|        ++begin;
 6920|  59.2k|    }
 6921|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  59.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 59.2k, False: 0]
  |  Branch (6926:25): [True: 0, False: 59.2k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  59.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  59.2k|    return begin;
 6935|  59.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   220k|    auto do_presentation = [&]() -> const CharT* {
 6859|   220k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 220k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   220k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 220k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   220k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   220k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   220k|        handler.on_type(type);
 6879|   220k|        return begin;
 6880|   220k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  59.2k|{
 6532|  59.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  59.2k|    auto check_align = [](wchar_t ch) {
 6535|  59.2k|        switch (ch) {
 6536|  59.2k|            case L'<':
 6537|  59.2k|                return align_type::left;
 6538|  59.2k|            case L'>':
 6539|  59.2k|                return align_type::right;
 6540|  59.2k|            case L'^':
 6541|  59.2k|                return align_type::center;
 6542|  59.2k|            default:
 6543|  59.2k|                return align_type::none;
 6544|  59.2k|        }
 6545|  59.2k|    };
 6546|       |
 6547|  59.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  59.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  |  Branch (859:45): [True: 0, False: 59.2k]
  |  |  |  Branch (859:45): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6549|  59.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  59.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  59.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  59.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  59.2k|    const auto begin_before_fill = begin;
 6559|  59.2k|    begin += potential_fill_len;
 6560|       |
 6561|  59.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 59.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  59.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  59.2k|    const auto begin_after_fill = begin;
 6567|  59.2k|    ++begin;
 6568|       |
 6569|  59.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 59.2k, False: 0]
  ------------------
 6570|  59.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  59.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 59.2k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  59.2k|    }
 6578|       |
 6579|  59.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 59.2k, False: 0]
  ------------------
 6580|  59.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 59.2k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  59.2k|        return begin_before_fill;
 6585|  59.2k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  59.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   118k|    auto check_align = [](wchar_t ch) {
 6535|   118k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 118k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 118k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 118k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   118k|            default:
  ------------------
  |  Branch (6542:13): [True: 118k, False: 0]
  ------------------
 6543|   118k|                return align_type::none;
 6544|   118k|        }
 6545|   118k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  59.2k|{
 6597|  59.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  59.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 59.2k, False: 0]
  |  Branch (6599:33): [True: 0, False: 59.2k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  59.2k|    return begin;
 6610|  59.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  59.2k|    {
 7127|  59.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  59.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 59.2k, False: 0]
  ------------------
 7129|  59.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 59.2k, False: 0]
  ------------------
 7130|  59.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 59.2k]
  ------------------
 7131|  59.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  59.2k|        Handler::on_localized();
 7139|  59.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   279k|{
 8417|   279k|#define SCN_VISIT(Type)                                         \
 8418|   279k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   279k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   279k|    }                                                           \
 8421|   279k|    else {                                                      \
 8422|   279k|        return vis(monostate_val);                              \
 8423|   279k|    }
 8424|       |
 8425|   279k|    monostate monostate_val{};
 8426|       |
 8427|   279k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 279k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 279k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 279k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 279k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 279k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 279k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 279k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 279k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 279k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 279k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 279k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 279k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 279k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 279k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 279k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  93.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 93.0k, False: 186k]
  ------------------
 8459|  93.0k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  93.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.0k|    }                                                           \
  |  | 8421|  93.0k|    else {                                                      \
  |  | 8422|  93.0k|        return vis(monostate_val);                              \
  |  | 8423|  93.0k|    }
  ------------------
 8460|  93.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 93.2k, False: 186k]
  ------------------
 8461|  93.2k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  93.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.2k|    }                                                           \
  |  | 8421|  93.2k|    else {                                                      \
  |  | 8422|  93.2k|        return vis(monostate_val);                              \
  |  | 8423|  93.2k|    }
  ------------------
 8462|  93.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 93.4k, False: 186k]
  ------------------
 8463|  93.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  93.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.4k|    }                                                           \
  |  | 8421|  93.4k|    else {                                                      \
  |  | 8422|  93.4k|        return vis(monostate_val);                              \
  |  | 8423|  93.4k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 279k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 279k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 279k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 279k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 279k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 279k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 279k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 279k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 279k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   279k|            SCN_CLANG_POP
 8495|   279k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   271k|    {
 4076|   271k|        sync(0);
 4077|   271k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   520k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  59.2k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  56.3k|{
   89|  56.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   169k|{
   44|   169k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   169k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  56.3k|{
  127|  56.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   169k|{
   60|   169k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   169k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  9.84k|{
  163|  9.84k|    T value;
  164|  9.84k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  9.84k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  9.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.97k, False: 2.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.97k|    }                                                  \
  |  |  |  | 3671|  9.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.87k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.87k|    static_cast<    \
  |  |  929|  2.87k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.87k|    static_cast<    \
  |  |  929|  2.87k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  9.84k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  29.6k|{
   72|  29.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  29.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  56.5k|{
   89|  56.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.5k|    static_cast<    \
  |  |  929|  56.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.5k|    static_cast<    \
  |  |  929|  56.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  56.5k|{
  127|  56.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.5k|    static_cast<    \
  |  |  929|  56.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.5k|    static_cast<    \
  |  |  929|  56.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  9.87k|{
  163|  9.87k|    T value;
  164|  9.87k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  9.87k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  9.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.97k, False: 2.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.97k|    }                                                  \
  |  |  |  | 3671|  9.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.90k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.90k|    static_cast<    \
  |  |  929|  2.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.90k|    static_cast<    \
  |  |  929|  2.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  9.87k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  56.6k|{
   89|  56.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.6k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  56.6k|{
  127|  56.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.6k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  9.92k|{
  163|  9.92k|    T value;
  164|  9.92k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  9.92k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  9.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.97k, False: 2.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.97k|    }                                                  \
  |  |  |  | 3671|  9.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.95k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.95k|    static_cast<    \
  |  |  929|  2.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.95k|    static_cast<    \
  |  |  929|  2.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  9.92k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  56.3k|{
   89|  56.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   169k|{
   44|   169k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   169k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  56.3k|{
  127|  56.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   169k|{
   60|   169k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   169k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  9.83k|{
  163|  9.83k|    T value;
  164|  9.83k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  9.83k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  9.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.97k, False: 2.86k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.97k|    }                                                  \
  |  |  |  | 3671|  9.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.86k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.86k|    static_cast<    \
  |  |  929|  2.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.86k|    static_cast<    \
  |  |  929|  2.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  9.83k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  29.6k|{
   72|  29.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  29.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  56.4k|{
   89|  56.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.4k|    static_cast<    \
  |  |  929|  56.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.4k|    static_cast<    \
  |  |  929|  56.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.4k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  56.4k|{
  127|  56.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.4k|    static_cast<    \
  |  |  929|  56.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.4k|    static_cast<    \
  |  |  929|  56.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.4k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  9.86k|{
  163|  9.86k|    T value;
  164|  9.86k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  9.86k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  9.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.97k, False: 2.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.97k|    }                                                  \
  |  |  |  | 3671|  9.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.89k|    static_cast<    \
  |  |  929|  2.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.89k|    static_cast<    \
  |  |  929|  2.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  9.86k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  56.6k|{
   89|  56.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.6k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  56.6k|{
  127|  56.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.6k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  9.91k|{
  163|  9.91k|    T value;
  164|  9.91k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  9.91k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  9.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.97k, False: 2.94k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.97k|    }                                                  \
  |  |  |  | 3671|  9.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.94k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.94k|    static_cast<    \
  |  |  929|  2.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.94k|    static_cast<    \
  |  |  929|  2.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  9.91k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.76M|{
  653|  2.76M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.76M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.20M|{
  659|  1.20M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.20M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 600k, False: 600k]
  ------------------
  661|  1.20M|                    : std::locale{};
  662|  1.20M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.63M|{
 1221|  1.63M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.63M|                                  m_nan_payload_buffer, value);
 1223|  1.63M|    value = this->setsign(value);
 1224|  1.63M|    return n;
 1225|  1.63M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   112k|{
 1221|   112k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   112k|                                  m_nan_payload_buffer, value);
 1223|   112k|    value = this->setsign(value);
 1224|   112k|    return n;
 1225|   112k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.75M|{
 1221|  1.75M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.75M|                                  m_nan_payload_buffer, value);
 1223|  1.75M|    value = this->setsign(value);
 1224|  1.75M|    return n;
 1225|  1.75M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   113k|{
 1221|   113k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   113k|                                  m_nan_payload_buffer, value);
 1223|   113k|    value = this->setsign(value);
 1224|   113k|    return n;
 1225|   113k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.77M|{
 1221|  1.77M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.77M|                                  m_nan_payload_buffer, value);
 1223|  1.77M|    value = this->setsign(value);
 1224|  1.77M|    return n;
 1225|  1.77M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   113k|{
 1221|   113k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   113k|                                  m_nan_payload_buffer, value);
 1223|   113k|    value = this->setsign(value);
 1224|   113k|    return n;
 1225|   113k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.19M|{
 2184|  1.19M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.19M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  1.23M|{
 2192|  1.23M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  1.23M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.16M, False: 62.7k]
  |  |  ------------------
  ------------------
 2194|  1.16M|        source.sync(*n);
 2195|  1.16M|    }
 2196|  62.7k|    else {
 2197|  62.7k|        source.sync_all();
 2198|  62.7k|    }
 2199|  1.23M|    return n;
 2200|  1.23M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   169k|{
 2208|   169k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   169k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   169k|{
 2216|   169k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   169k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   169k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 43.9k, False: 125k]
  |  |  ------------------
  ------------------
 2218|  43.9k|        source.sync(*n);
 2219|  43.9k|    }
 2220|   125k|    else {
 2221|   125k|        source.sync_all();
 2222|   125k|    }
 2223|   169k|    return n;
 2224|   169k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.38M|{
  194|  2.38M|    return find_classic_impl(
  195|  2.38M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.38M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.38M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  5.36M|{
  202|  5.36M|    return find_classic_impl(
  203|  5.36M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  5.36M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  5.36M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  1.19M|{
 2141|  1.19M|    return vscan_internal(source, format, args);
 2142|  1.19M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  1.23M|{
 2147|  1.23M|    auto n = vscan_internal(source, format, args);
 2148|  1.23M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.16M, False: 62.7k]
  |  |  ------------------
  ------------------
 2149|  1.16M|        source.sync(*n);
 2150|  1.16M|    }
 2151|  62.7k|    else {
 2152|  62.7k|        source.sync_all();
 2153|  62.7k|    }
 2154|  1.23M|    return n;
 2155|  1.23M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   169k|{
 2161|   169k|    return vscan_internal(source, format, args);
 2162|   169k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   169k|{
 2167|   169k|    auto n = vscan_internal(source, format, args);
 2168|   169k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   169k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 43.9k, False: 125k]
  |  |  ------------------
  ------------------
 2169|  43.9k|        source.sync(*n);
 2170|  43.9k|    }
 2171|   125k|    else {
 2172|   125k|        source.sync_all();
 2173|   125k|    }
 2174|   169k|    return n;
 2175|   169k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   266k|{
 2251|   266k|    return vscan_value_internal(source, arg);
 2252|   266k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   253k|{
 2256|   253k|    auto n = vscan_value_internal(source, arg);
 2257|   253k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   253k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 243k, False: 10.4k]
  |  |  ------------------
  ------------------
 2258|   243k|        source.sync(*n);
 2259|   243k|    }
 2260|  10.4k|    else {
 2261|  10.4k|        source.sync_all();
 2262|  10.4k|    }
 2263|   253k|    return n;
 2264|   253k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  29.6k|{
 2270|  29.6k|    return vscan_value_internal(source, arg);
 2271|  29.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  29.6k|{
 2276|  29.6k|    auto n = vscan_value_internal(source, arg);
 2277|  29.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  29.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.69k, False: 20.9k]
  |  |  ------------------
  ------------------
 2278|  8.69k|        source.sync(*n);
 2279|  8.69k|    }
 2280|  20.9k|    else {
 2281|  20.9k|        source.sync_all();
 2282|  20.9k|    }
 2283|  29.6k|    return n;
 2284|  29.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.38M|{
  118|  2.38M|    auto it = source.begin();
  119|       |
  120|  9.70M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 8.25M, False: 1.44M]
  ------------------
  121|  8.25M|        auto sv =
  122|  8.25M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  8.25M|                .substr(0, 8);
  124|       |
  125|  8.25M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 8.06M, False: 194k]
  ------------------
  126|  8.06M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  8.06M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  8.06M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 852k, False: 7.21M]
  ------------------
  129|   852k|                break;
  130|   852k|            }
  131|  7.21M|            continue;
  132|  8.06M|        }
  133|       |
  134|   672k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 560k, False: 111k]
  ------------------
  135|   560k|            auto tmp =
  136|   560k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   560k|            auto res = get_next_code_point(tmp);
  138|   560k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 83.0k, False: 477k]
  ------------------
  139|  83.0k|                return it;
  140|  83.0k|            }
  141|   477k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   477k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   477k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   477k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   477k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   477k|        }
  145|   194k|    }
  146|       |
  147|  2.30M|    return detail::make_string_view_iterator(source, it);
  148|  2.38M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  11.6M|{
  105|  11.6M|    static_assert(sizeof(*source.data()) == 1);
  106|  11.6M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  11.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  11.6M|    uint64_t word{};
  108|  11.6M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  11.6M|    return has_byte_greater(word, 127) != 0;
  111|  11.6M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  53.1M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   560k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  5.36M|{
  118|  5.36M|    auto it = source.begin();
  119|       |
  120|  5.83M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.42M, False: 2.41M]
  ------------------
  121|  3.42M|        auto sv =
  122|  3.42M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.42M|                .substr(0, 8);
  124|       |
  125|  3.42M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.20M, False: 218k]
  ------------------
  126|  3.20M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.20M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.20M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.74M, False: 459k]
  ------------------
  129|  2.74M|                break;
  130|  2.74M|            }
  131|   459k|            continue;
  132|  3.20M|        }
  133|       |
  134|   419k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 401k, False: 17.3k]
  ------------------
  135|   401k|            auto tmp =
  136|   401k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   401k|            auto res = get_next_code_point(tmp);
  138|   401k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 201k, False: 200k]
  ------------------
  139|   201k|                return it;
  140|   201k|            }
  141|   200k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   200k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   200k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   200k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   200k|        }
  145|   218k|    }
  146|       |
  147|  5.15M|    return detail::make_string_view_iterator(source, it);
  148|  5.36M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  5.11M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   401k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.63M|{
 1138|  1.63M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.2k, False: 1.61M]
  ------------------
 1139|  14.2k|        value = std::numeric_limits<T>::infinity();
 1140|  14.2k|        return 3;
 1141|  14.2k|    }
 1142|  1.61M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.8k, False: 1.60M]
  ------------------
 1143|  10.8k|        value = std::numeric_limits<T>::infinity();
 1144|  10.8k|        return 8;
 1145|  10.8k|    }
 1146|  1.60M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 62.4k, False: 1.54M]
  ------------------
 1147|  62.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  62.4k|        return 3;
 1149|  62.4k|    }
 1150|  1.54M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.54M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.54M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.54M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 349k, False: 1.19M]
  ------------------
 1185|   349k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.83k, False: 346k]
  |  |  ------------------
  ------------------
 1186|  3.83k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.83k|                                         "Invalid floating-point digit");
 1188|  3.83k|        }
 1189|   349k|    }
 1190|  1.53M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 1.52M]
  |  |  ------------------
  ------------------
 1191|  10.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.1k|                                     "Invalid floating-point digit");
 1193|  10.1k|    }
 1194|       |
 1195|  1.52M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.52M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.52M|            double tmp{};
 1200|  1.52M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.52M|            value = tmp;
 1202|  1.52M|            return ret;
 1203|  1.52M|        }
 1204|  1.52M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.52M|            return fast_float_fallback(data, value);
 1208|  1.52M|        }
 1209|  1.52M|    }
 1210|  1.52M|    else {
 1211|       |        // Default to fast_float
 1212|  1.52M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.52M|    }
 1214|  1.52M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.52M|    {
 1078|  1.52M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  5.68M|    {
  712|  5.68M|        return {kind, options};
  713|  5.68M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.52M|    {
 1082|  1.52M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 345k, False: 1.18M]
  ------------------
 1083|  1.52M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 58.1k, False: 1.12M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   403k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   403k|                                              value);
 1087|   403k|        }
 1088|       |
 1089|  1.12M|        const auto flags = get_flags();
 1090|  1.12M|        const auto view = get_view();
 1091|  1.12M|        const auto result = fast_float::from_chars(
 1092|  1.12M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.12M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.12M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 1.11M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  10.3k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  10.3k|                                              value);
 1102|  10.3k|        }
 1103|       |
 1104|  1.11M|        return result.ptr - view.data();
 1105|  1.12M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   414k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   414k|    {
 1048|   414k|#if !SCN_DISABLE_STRTOD
 1049|   414k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   414k|    }
 1056|   414k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   414k|    {
  894|   414k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   427k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   414k|    {
  898|   414k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   414k|                           generic_strtod);
  900|   414k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   414k|    {
  732|   414k|        CharT* end{};
  733|   414k|        errno = 0;
  734|   414k|        value = strtod_cb(src, &end);
  735|   414k|        const auto saved_errno = errno;
  736|   414k|        auto chars_read = end - src;
  737|       |
  738|   414k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   414k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 401k]
  |  |  ------------------
  ------------------
  740|  12.3k|            return unexpected(e);
  741|  12.3k|        }
  742|       |
  743|   401k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 344k, False: 57.6k]
  ------------------
  744|   401k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 344k, False: 0]
  ------------------
  745|   344k|            chars_read -= 2;
  746|   344k|        }
  747|       |
  748|   401k|        return chars_read;
  749|   414k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   427k|    {
  778|   427k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 113k, False: 313k]
  |  Branch (778:37): [True: 0, False: 113k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   427k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 58.2k, False: 369k]
  ------------------
  785|   427k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 58.2k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   427k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 13.8k, False: 413k]
  |  Branch (791:34): [True: 2.00k, False: 11.8k]
  ------------------
  792|  2.00k|            SCN_UNLIKELY_ATTR
  793|  2.00k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.00k|        }
  795|       |
  796|   425k|        SCN_GCC_COMPAT_PUSH
  797|   425k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   425k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 425k, False: 0]
  ------------------
  800|   425k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 425k, False: 0]
  ------------------
  801|   425k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 11.2k, False: 414k]
  ------------------
  802|  11.2k|            SCN_UNLIKELY_ATTR
  803|  11.2k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  11.2k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   414k|            return {};
  809|   425k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   441k|{
  687|   441k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 115k, False: 325k]
  |  Branch (687:25): [True: 0, False: 325k]
  ------------------
  688|   441k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   414k|    {
  755|   414k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 407k, False: 7.18k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   407k|            auto first_space = read_until_classic_space(input.view());
  758|   407k|            input.assign(
  759|   407k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   407k|        }
  761|       |
  762|   414k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 345k, False: 68.4k]
  ------------------
  763|   345k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   345k|                input.get_allocated_string().insert(0, "0x");
  765|   345k|            }
  766|   345k|            else {
  767|   345k|                input.get_allocated_string().insert(0, L"0x");
  768|   345k|            }
  769|   345k|        }
  770|       |
  771|   414k|        return input.get_allocated_string().c_str();
  772|   414k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   414k|    {
  905|   414k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   414k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   414k|        }
  908|   414k|        else {
  909|   414k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   414k|        }
  911|   414k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   414k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   414k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   414k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   414k|            return std::strtof(str, str_end);
  839|   414k|        }
  840|   414k|        else if constexpr (std::is_same_v<T, double>) {
  841|   414k|            return std::strtod(str, str_end);
  842|   414k|        }
  843|   414k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   414k|            return std::strtold(str, str_end);
  845|   414k|        }
  846|   414k|#endif
  847|   414k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.45M|    {
 1061|  2.45M|        unsigned format_flags{};
 1062|  2.45M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.43M, False: 21.1k]
  ------------------
 1063|  2.43M|            format_flags |= fast_float::fixed;
 1064|  2.43M|        }
 1065|  2.45M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 2.13M, False: 315k]
  ------------------
 1066|  2.13M|            format_flags |= fast_float::scientific;
 1067|  2.13M|        }
 1068|       |
 1069|  2.45M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.45M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  1.12M|    {
 1110|  1.12M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.12M|            return m_input.view();
 1112|  1.12M|        }
 1113|  1.12M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.12M|            return std::u16string_view{
 1115|  1.12M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.12M|                m_input.view().size()};
 1117|  1.12M|        }
 1118|  1.12M|        else {
 1119|  1.12M|            return std::u32string_view{
 1120|  1.12M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.12M|                m_input.view().size()};
 1122|  1.12M|        }
 1123|  1.12M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   112k|{
 1138|   112k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 112k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   112k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 112k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   112k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 112k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   112k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 112k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   112k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   112k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 25.7k, False: 87.1k]
  ------------------
 1185|  25.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 1186|  13.7k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  13.7k|                                         "Invalid floating-point digit");
 1188|  13.7k|        }
 1189|  25.7k|    }
 1190|  99.1k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  99.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.3k, False: 64.7k]
  |  |  ------------------
  ------------------
 1191|  34.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  34.3k|                                     "Invalid floating-point digit");
 1193|  34.3k|    }
 1194|       |
 1195|  64.7k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  64.7k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  64.7k|            double tmp{};
 1200|  64.7k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  64.7k|            value = tmp;
 1202|  64.7k|            return ret;
 1203|  64.7k|        }
 1204|  64.7k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  64.7k|            return fast_float_fallback(data, value);
 1208|  64.7k|        }
 1209|  64.7k|    }
 1210|  64.7k|    else {
 1211|       |        // Default to fast_float
 1212|  64.7k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  64.7k|    }
 1214|  64.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  64.7k|    {
 1078|  64.7k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   220k|    {
  712|   220k|        return {kind, options};
  713|   220k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  64.7k|    {
 1082|  64.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 11.9k, False: 52.8k]
  ------------------
 1083|  64.7k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 161, False: 52.6k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  12.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  12.1k|                                              value);
 1087|  12.1k|        }
 1088|       |
 1089|  52.6k|        const auto flags = get_flags();
 1090|  52.6k|        const auto view = get_view();
 1091|  52.6k|        const auto result = fast_float::from_chars(
 1092|  52.6k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  52.6k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  52.6k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 888, False: 51.8k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    888|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    888|                                              value);
 1102|    888|        }
 1103|       |
 1104|  51.8k|        return result.ptr - view.data();
 1105|  52.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  12.9k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  12.9k|    {
 1048|  12.9k|#if !SCN_DISABLE_STRTOD
 1049|  12.9k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  12.9k|    }
 1056|  12.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  12.9k|    {
  894|  12.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  12.9k|    {
  898|  12.9k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  12.9k|                           generic_strtod);
  900|  12.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  12.9k|    {
  732|  12.9k|        CharT* end{};
  733|  12.9k|        errno = 0;
  734|  12.9k|        value = strtod_cb(src, &end);
  735|  12.9k|        const auto saved_errno = errno;
  736|  12.9k|        auto chars_read = end - src;
  737|       |
  738|  12.9k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  12.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 912, False: 12.0k]
  |  |  ------------------
  ------------------
  740|    912|            return unexpected(e);
  741|    912|        }
  742|       |
  743|  12.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 11.9k, False: 161]
  ------------------
  744|  12.0k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 11.9k, False: 0]
  ------------------
  745|  11.9k|            chars_read -= 2;
  746|  11.9k|        }
  747|       |
  748|  12.0k|        return chars_read;
  749|  12.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  12.9k|    {
  755|  12.9k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 12.3k, False: 647]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  12.3k|            auto first_space = read_until_classic_space(input.view());
  758|  12.3k|            input.assign(
  759|  12.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  12.3k|        }
  761|       |
  762|  12.9k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 11.9k, False: 1.04k]
  ------------------
  763|  11.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  11.9k|                input.get_allocated_string().insert(0, "0x");
  765|  11.9k|            }
  766|  11.9k|            else {
  767|  11.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  11.9k|            }
  769|  11.9k|        }
  770|       |
  771|  12.9k|        return input.get_allocated_string().c_str();
  772|  12.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  12.9k|    {
  905|  12.9k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  12.9k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  12.9k|        }
  908|  12.9k|        else {
  909|  12.9k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  12.9k|        }
  911|  12.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  12.9k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  12.9k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  12.9k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  12.9k|            return std::wcstof(str, str_end);
  877|  12.9k|        }
  878|  12.9k|        else if constexpr (std::is_same_v<T, double>) {
  879|  12.9k|            return std::wcstod(str, str_end);
  880|  12.9k|        }
  881|  12.9k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  12.9k|            return std::wcstold(str, str_end);
  883|  12.9k|        }
  884|  12.9k|#endif
  885|  12.9k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  52.6k|    {
 1110|  52.6k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  52.6k|            return m_input.view();
 1112|  52.6k|        }
 1113|  52.6k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  52.6k|            return std::u16string_view{
 1115|  52.6k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  52.6k|                m_input.view().size()};
 1117|  52.6k|        }
 1118|  52.6k|        else {
 1119|  52.6k|            return std::u32string_view{
 1120|  52.6k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  52.6k|                m_input.view().size()};
 1122|  52.6k|        }
 1123|  52.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.75M|{
 1138|  1.75M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.5k, False: 1.74M]
  ------------------
 1139|  15.5k|        value = std::numeric_limits<T>::infinity();
 1140|  15.5k|        return 3;
 1141|  15.5k|    }
 1142|  1.74M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.4k, False: 1.73M]
  ------------------
 1143|  11.4k|        value = std::numeric_limits<T>::infinity();
 1144|  11.4k|        return 8;
 1145|  11.4k|    }
 1146|  1.73M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 64.4k, False: 1.66M]
  ------------------
 1147|  64.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  64.4k|        return 3;
 1149|  64.4k|    }
 1150|  1.66M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.66M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.66M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.66M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 363k, False: 1.30M]
  ------------------
 1185|   363k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.12k, False: 359k]
  |  |  ------------------
  ------------------
 1186|  4.12k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.12k|                                         "Invalid floating-point digit");
 1188|  4.12k|        }
 1189|   363k|    }
 1190|  1.66M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 1.64M]
  |  |  ------------------
  ------------------
 1191|  11.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.5k|                                     "Invalid floating-point digit");
 1193|  11.5k|    }
 1194|       |
 1195|  1.64M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.64M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.64M|            double tmp{};
 1200|  1.64M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.64M|            value = tmp;
 1202|  1.64M|            return ret;
 1203|  1.64M|        }
 1204|  1.64M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.64M|            return fast_float_fallback(data, value);
 1208|  1.64M|        }
 1209|  1.64M|    }
 1210|  1.64M|    else {
 1211|       |        // Default to fast_float
 1212|  1.64M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.64M|    }
 1214|  1.64M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.64M|    {
 1078|  1.64M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.64M|    {
 1082|  1.64M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 359k, False: 1.29M]
  ------------------
 1083|  1.64M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 66.7k, False: 1.22M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   425k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   425k|                                              value);
 1087|   425k|        }
 1088|       |
 1089|  1.22M|        const auto flags = get_flags();
 1090|  1.22M|        const auto view = get_view();
 1091|  1.22M|        const auto result = fast_float::from_chars(
 1092|  1.22M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.22M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.22M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 1.21M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.54k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.54k|                                              value);
 1102|  4.54k|        }
 1103|       |
 1104|  1.21M|        return result.ptr - view.data();
 1105|  1.22M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   430k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   430k|    {
 1048|   430k|#if !SCN_DISABLE_STRTOD
 1049|   430k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   430k|    }
 1056|   430k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   430k|    {
  894|   430k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   442k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   430k|    {
  898|   430k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   430k|                           generic_strtod);
  900|   430k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   430k|    {
  732|   430k|        CharT* end{};
  733|   430k|        errno = 0;
  734|   430k|        value = strtod_cb(src, &end);
  735|   430k|        const auto saved_errno = errno;
  736|   430k|        auto chars_read = end - src;
  737|       |
  738|   430k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   430k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.20k, False: 425k]
  |  |  ------------------
  ------------------
  740|  5.20k|            return unexpected(e);
  741|  5.20k|        }
  742|       |
  743|   425k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 358k, False: 66.6k]
  ------------------
  744|   425k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 358k, False: 0]
  ------------------
  745|   358k|            chars_read -= 2;
  746|   358k|        }
  747|       |
  748|   425k|        return chars_read;
  749|   430k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   442k|    {
  778|   442k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 115k, False: 327k]
  |  Branch (778:37): [True: 0, False: 115k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   442k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 66.8k, False: 376k]
  ------------------
  785|   442k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 66.8k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   442k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.71k, False: 437k]
  |  Branch (791:34): [True: 574, False: 5.14k]
  ------------------
  792|    574|            SCN_UNLIKELY_ATTR
  793|    574|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    574|        }
  795|       |
  796|   442k|        SCN_GCC_COMPAT_PUSH
  797|   442k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   442k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 442k, False: 0]
  ------------------
  800|   442k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 442k, False: 0]
  ------------------
  801|   442k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.14k, False: 437k]
  ------------------
  802|  5.14k|            SCN_UNLIKELY_ATTR
  803|  5.14k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.14k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   437k|            return {};
  809|   442k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   448k|{
  691|   448k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 116k, False: 332k]
  |  Branch (691:24): [True: 0, False: 332k]
  ------------------
  692|   448k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   430k|    {
  755|   430k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 425k, False: 5.09k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   425k|            auto first_space = read_until_classic_space(input.view());
  758|   425k|            input.assign(
  759|   425k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   425k|        }
  761|       |
  762|   430k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 359k, False: 71.2k]
  ------------------
  763|   359k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   359k|                input.get_allocated_string().insert(0, "0x");
  765|   359k|            }
  766|   359k|            else {
  767|   359k|                input.get_allocated_string().insert(0, L"0x");
  768|   359k|            }
  769|   359k|        }
  770|       |
  771|   430k|        return input.get_allocated_string().c_str();
  772|   430k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   430k|    {
  905|   430k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   430k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   430k|        }
  908|   430k|        else {
  909|   430k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   430k|        }
  911|   430k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   430k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   430k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   430k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   430k|            return std::strtof(str, str_end);
  839|   430k|        }
  840|   430k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   430k|            return std::strtod(str, str_end);
  842|   430k|        }
  843|   430k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   430k|            return std::strtold(str, str_end);
  845|   430k|        }
  846|   430k|#endif
  847|   430k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.22M|    {
 1110|  1.22M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.22M|            return m_input.view();
 1112|  1.22M|        }
 1113|  1.22M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.22M|            return std::u16string_view{
 1115|  1.22M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.22M|                m_input.view().size()};
 1117|  1.22M|        }
 1118|  1.22M|        else {
 1119|  1.22M|            return std::u32string_view{
 1120|  1.22M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.22M|                m_input.view().size()};
 1122|  1.22M|        }
 1123|  1.22M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   113k|{
 1138|   113k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 113k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   113k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 113k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   113k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 113k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   113k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 113k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   113k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   113k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 25.7k, False: 87.2k]
  ------------------
 1185|  25.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 1186|  13.7k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  13.7k|                                         "Invalid floating-point digit");
 1188|  13.7k|        }
 1189|  25.7k|    }
 1190|  99.2k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  99.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.4k, False: 64.8k]
  |  |  ------------------
  ------------------
 1191|  34.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  34.4k|                                     "Invalid floating-point digit");
 1193|  34.4k|    }
 1194|       |
 1195|  64.8k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  64.8k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  64.8k|            double tmp{};
 1200|  64.8k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  64.8k|            value = tmp;
 1202|  64.8k|            return ret;
 1203|  64.8k|        }
 1204|  64.8k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  64.8k|            return fast_float_fallback(data, value);
 1208|  64.8k|        }
 1209|  64.8k|    }
 1210|  64.8k|    else {
 1211|       |        // Default to fast_float
 1212|  64.8k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  64.8k|    }
 1214|  64.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  64.8k|    {
 1078|  64.8k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  64.8k|    {
 1082|  64.8k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 11.9k, False: 52.9k]
  ------------------
 1083|  64.8k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 161, False: 52.7k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  12.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  12.1k|                                              value);
 1087|  12.1k|        }
 1088|       |
 1089|  52.7k|        const auto flags = get_flags();
 1090|  52.7k|        const auto view = get_view();
 1091|  52.7k|        const auto result = fast_float::from_chars(
 1092|  52.7k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  52.7k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.7k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  52.7k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 492, False: 52.2k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    492|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    492|                                              value);
 1102|    492|        }
 1103|       |
 1104|  52.2k|        return result.ptr - view.data();
 1105|  52.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  12.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  12.5k|    {
 1048|  12.5k|#if !SCN_DISABLE_STRTOD
 1049|  12.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  12.5k|    }
 1056|  12.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  12.5k|    {
  894|  12.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  12.5k|    {
  898|  12.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  12.5k|                           generic_strtod);
  900|  12.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  12.5k|    {
  732|  12.5k|        CharT* end{};
  733|  12.5k|        errno = 0;
  734|  12.5k|        value = strtod_cb(src, &end);
  735|  12.5k|        const auto saved_errno = errno;
  736|  12.5k|        auto chars_read = end - src;
  737|       |
  738|  12.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  12.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 512, False: 12.0k]
  |  |  ------------------
  ------------------
  740|    512|            return unexpected(e);
  741|    512|        }
  742|       |
  743|  12.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 11.9k, False: 161]
  ------------------
  744|  12.0k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 11.9k, False: 0]
  ------------------
  745|  11.9k|            chars_read -= 2;
  746|  11.9k|        }
  747|       |
  748|  12.0k|        return chars_read;
  749|  12.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  12.5k|    {
  755|  12.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 12.1k, False: 449]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  12.1k|            auto first_space = read_until_classic_space(input.view());
  758|  12.1k|            input.assign(
  759|  12.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  12.1k|        }
  761|       |
  762|  12.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 11.9k, False: 653]
  ------------------
  763|  11.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  11.9k|                input.get_allocated_string().insert(0, "0x");
  765|  11.9k|            }
  766|  11.9k|            else {
  767|  11.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  11.9k|            }
  769|  11.9k|        }
  770|       |
  771|  12.5k|        return input.get_allocated_string().c_str();
  772|  12.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  12.5k|    {
  905|  12.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  12.5k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  12.5k|        }
  908|  12.5k|        else {
  909|  12.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  12.5k|        }
  911|  12.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  12.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  12.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  12.5k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  12.5k|            return std::wcstof(str, str_end);
  877|  12.5k|        }
  878|  12.5k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  12.5k|            return std::wcstod(str, str_end);
  880|  12.5k|        }
  881|  12.5k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  12.5k|            return std::wcstold(str, str_end);
  883|  12.5k|        }
  884|  12.5k|#endif
  885|  12.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  52.7k|    {
 1110|  52.7k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  52.7k|            return m_input.view();
 1112|  52.7k|        }
 1113|  52.7k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  52.7k|            return std::u16string_view{
 1115|  52.7k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  52.7k|                m_input.view().size()};
 1117|  52.7k|        }
 1118|  52.7k|        else {
 1119|  52.7k|            return std::u32string_view{
 1120|  52.7k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  52.7k|                m_input.view().size()};
 1122|  52.7k|        }
 1123|  52.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.77M|{
 1138|  1.77M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 16.0k, False: 1.76M]
  ------------------
 1139|  16.0k|        value = std::numeric_limits<T>::infinity();
 1140|  16.0k|        return 3;
 1141|  16.0k|    }
 1142|  1.76M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.6k, False: 1.74M]
  ------------------
 1143|  11.6k|        value = std::numeric_limits<T>::infinity();
 1144|  11.6k|        return 8;
 1145|  11.6k|    }
 1146|  1.74M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 64.9k, False: 1.68M]
  ------------------
 1147|  64.9k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  64.9k|        return 3;
 1149|  64.9k|    }
 1150|  1.68M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.68M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.68M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.68M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 364k, False: 1.31M]
  ------------------
 1185|   364k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.27k, False: 359k]
  |  |  ------------------
  ------------------
 1186|  4.27k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.27k|                                         "Invalid floating-point digit");
 1188|  4.27k|        }
 1189|   364k|    }
 1190|  1.67M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 1.66M]
  |  |  ------------------
  ------------------
 1191|  12.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  12.2k|                                     "Invalid floating-point digit");
 1193|  12.2k|    }
 1194|       |
 1195|  1.66M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.66M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.66M|            double tmp{};
 1200|  1.66M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.66M|            value = tmp;
 1202|  1.66M|            return ret;
 1203|  1.66M|        }
 1204|  1.66M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.66M|            return fast_float_fallback(data, value);
 1208|  1.66M|        }
 1209|  1.66M|    }
 1210|  1.66M|    else {
 1211|       |        // Default to fast_float
 1212|  1.66M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.66M|    }
 1214|  1.66M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.66M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.66M|    {
 1048|  1.66M|#if !SCN_DISABLE_STRTOD
 1049|  1.66M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.66M|    }
 1056|  1.66M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.66M|    {
  894|  1.66M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.73M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.66M|    {
  898|  1.66M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.66M|                           generic_strtod);
  900|  1.66M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.66M|    {
  732|  1.66M|        CharT* end{};
  733|  1.66M|        errno = 0;
  734|  1.66M|        value = strtod_cb(src, &end);
  735|  1.66M|        const auto saved_errno = errno;
  736|  1.66M|        auto chars_read = end - src;
  737|       |
  738|  1.66M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.66M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40k, False: 1.66M]
  |  |  ------------------
  ------------------
  740|  1.40k|            return unexpected(e);
  741|  1.40k|        }
  742|       |
  743|  1.66M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 359k, False: 1.30M]
  ------------------
  744|  1.66M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 359k, False: 0]
  ------------------
  745|   359k|            chars_read -= 2;
  746|   359k|        }
  747|       |
  748|  1.66M|        return chars_read;
  749|  1.66M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.73M|    {
  778|  1.73M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 501k, False: 1.23M]
  |  Branch (778:37): [True: 0, False: 501k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.73M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 66.9k, False: 1.66M]
  ------------------
  785|  1.73M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 66.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.73M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.45k, False: 1.73M]
  |  Branch (791:34): [True: 140, False: 1.31k]
  ------------------
  792|    140|            SCN_UNLIKELY_ATTR
  793|    140|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    140|        }
  795|       |
  796|  1.73M|        SCN_GCC_COMPAT_PUSH
  797|  1.73M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.73M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.73M, False: 0]
  ------------------
  800|  1.73M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.73M, False: 0]
  ------------------
  801|  1.73M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.31k, False: 1.73M]
  ------------------
  802|  1.31k|            SCN_UNLIKELY_ATTR
  803|  1.31k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.31k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.73M|            return {};
  809|  1.73M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.73M|{
  695|  1.73M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 501k, False: 1.23M]
  |  Branch (695:26): [True: 0, False: 1.23M]
  ------------------
  696|  1.73M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.66M|    {
  755|  1.66M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.55M, False: 113k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.55M|            auto first_space = read_until_classic_space(input.view());
  758|  1.55M|            input.assign(
  759|  1.55M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.55M|        }
  761|       |
  762|  1.66M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 359k, False: 1.30M]
  ------------------
  763|   359k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   359k|                input.get_allocated_string().insert(0, "0x");
  765|   359k|            }
  766|   359k|            else {
  767|   359k|                input.get_allocated_string().insert(0, L"0x");
  768|   359k|            }
  769|   359k|        }
  770|       |
  771|  1.66M|        return input.get_allocated_string().c_str();
  772|  1.66M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.66M|    {
  905|  1.66M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.66M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.66M|        }
  908|  1.66M|        else {
  909|  1.66M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.66M|        }
  911|  1.66M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.66M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.66M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.66M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.66M|            return std::strtof(str, str_end);
  839|  1.66M|        }
  840|  1.66M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.66M|            return std::strtod(str, str_end);
  842|  1.66M|        }
  843|  1.66M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.66M|            return std::strtold(str, str_end);
  845|  1.66M|        }
  846|  1.66M|#endif
  847|  1.66M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   113k|{
 1138|   113k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 113k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   113k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 113k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   113k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 113k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   113k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 113k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   113k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   113k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 25.7k, False: 87.7k]
  ------------------
 1185|  25.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 1186|  13.7k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  13.7k|                                         "Invalid floating-point digit");
 1188|  13.7k|        }
 1189|  25.7k|    }
 1190|  99.7k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 65.2k]
  |  |  ------------------
  ------------------
 1191|  34.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  34.5k|                                     "Invalid floating-point digit");
 1193|  34.5k|    }
 1194|       |
 1195|  65.2k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  65.2k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  65.2k|            double tmp{};
 1200|  65.2k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  65.2k|            value = tmp;
 1202|  65.2k|            return ret;
 1203|  65.2k|        }
 1204|  65.2k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  65.2k|            return fast_float_fallback(data, value);
 1208|  65.2k|        }
 1209|  65.2k|    }
 1210|  65.2k|    else {
 1211|       |        // Default to fast_float
 1212|  65.2k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  65.2k|    }
 1214|  65.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  65.2k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  65.2k|    {
 1048|  65.2k|#if !SCN_DISABLE_STRTOD
 1049|  65.2k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  65.2k|    }
 1056|  65.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  65.2k|    {
  894|  65.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  65.2k|    {
  898|  65.2k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  65.2k|                           generic_strtod);
  900|  65.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  65.2k|    {
  732|  65.2k|        CharT* end{};
  733|  65.2k|        errno = 0;
  734|  65.2k|        value = strtod_cb(src, &end);
  735|  65.2k|        const auto saved_errno = errno;
  736|  65.2k|        auto chars_read = end - src;
  737|       |
  738|  65.2k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  65.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 65.1k]
  |  |  ------------------
  ------------------
  740|     54|            return unexpected(e);
  741|     54|        }
  742|       |
  743|  65.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 11.9k, False: 53.2k]
  ------------------
  744|  65.1k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 11.9k, False: 0]
  ------------------
  745|  11.9k|            chars_read -= 2;
  746|  11.9k|        }
  747|       |
  748|  65.1k|        return chars_read;
  749|  65.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  65.2k|    {
  755|  65.2k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 63.8k, False: 1.35k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  63.8k|            auto first_space = read_until_classic_space(input.view());
  758|  63.8k|            input.assign(
  759|  63.8k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  63.8k|        }
  761|       |
  762|  65.2k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 11.9k, False: 53.2k]
  ------------------
  763|  11.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  11.9k|                input.get_allocated_string().insert(0, "0x");
  765|  11.9k|            }
  766|  11.9k|            else {
  767|  11.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  11.9k|            }
  769|  11.9k|        }
  770|       |
  771|  65.2k|        return input.get_allocated_string().c_str();
  772|  65.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  65.2k|    {
  905|  65.2k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  65.2k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  65.2k|        }
  908|  65.2k|        else {
  909|  65.2k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  65.2k|        }
  911|  65.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  65.2k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  65.2k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  65.2k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  65.2k|            return std::wcstof(str, str_end);
  877|  65.2k|        }
  878|  65.2k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  65.2k|            return std::wcstod(str, str_end);
  880|  65.2k|        }
  881|  65.2k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  65.2k|            return std::wcstold(str, str_end);
  883|  65.2k|        }
  884|  65.2k|#endif
  885|  65.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  2.46M|{
 2073|  2.46M|    const auto argcount = args.size();
 2074|  2.46M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 507k, False: 1.95M]
  |  Branch (2074:60): [True: 507k, False: 0]
  ------------------
 2075|   507k|        auto arg = args.get(0);
 2076|   507k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   507k|    static_cast<    \
  |  |  929|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   507k|    }
 2078|       |
 2079|  1.95M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.95M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.95M|    SCN_UNLIKELY_ATTR
 2087|  1.95M|    {
 2088|  1.95M|        auto handler = format_handler<false, CharT>{
 2089|  1.95M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.95M|    static_cast<    \
  |  |  929|  1.95M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.95M|    static_cast<    \
  |  |  929|  1.95M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.95M|        return vscan_parse_format_string(format, handler);
 2091|  1.95M|    }
 2092|  1.95M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.85M|{
 1625|  4.85M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.81M, False: 1.04M]
  ------------------
 1626|  3.81M|        return false;
 1627|  3.81M|    }
 1628|  1.04M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 1.04M, False: 0]
  |  Branch (1628:39): [True: 1.04M, False: 0]
  ------------------
 1629|  4.85M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   761k|{
 1658|   761k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 761k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   761k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   761k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 761k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   761k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   761k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   761k|    static_cast<    \
  |  |  929|   761k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   761k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   761k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   761k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   761k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.3k, False: 730k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  31.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  31.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  31.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  31.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  31.3k|    }                                                  \
  |  |  |  | 3671|   761k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   730k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   730k|    return it.position();
 1675|   761k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.85M|    {
 1903|  1.85M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  4.37M|    {
 1722|  4.37M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.37M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.37M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.85M|    {
 1853|  1.85M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.85M|{
 2038|  1.85M|    const auto beg = handler.get_ctx().begin();
 2039|  1.85M|    detail::parse_format_string<false>(format, handler);
 2040|  1.85M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104k, False: 1.75M]
  |  |  ------------------
  ------------------
 2041|   104k|        return unexpected(handler.error);
 2042|   104k|    }
 2043|  1.75M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.85M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  12.8M|    {
 2022|  12.8M|        return ctx.get();
 2023|  12.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  12.8M|    {
 1857|  12.8M|        return contiguous_ctx;
 1858|  12.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.61M|    {
 1907|  3.61M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.61M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.85M|{
 1681|  1.85M|    auto arg = ctx.arg(id);
 1682|  1.85M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.85M|    return arg;
 1686|  1.85M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.37M|    {
 1797|  4.37M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.37M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.37M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.37M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.37M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.37M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.37M|            visited_args_lower64 |= (1ull << id);
 1808|  4.37M|            return;
 1809|  4.37M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.37M|    {
 1782|  4.37M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.37M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.37M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.37M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.37M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.37M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.37M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   627k|    {
 1766|   627k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   627k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 627k, False: 0]
  |  |  ------------------
  ------------------
 1767|   627k|            error = err;
 1768|   627k|        }
 1769|   627k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  1.85M|    {
 1944|  1.85M|        return parse_ctx.next_arg_id();
 1945|  1.85M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  1.85M|    {
 1985|  1.85M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.85M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.85M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.85M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.85M|        auto specs = detail::format_specs{};
 1998|  1.85M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.85M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.85M|            arg.type()};
 2001|       |
 2002|  1.85M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.85M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.85M]
  |  Branch (2003:29): [True: 0, False: 1.85M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.85M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.85M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.85M|        on_visit_scan_arg(
 2014|  1.85M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.85M|                                           get_ctx().locale()},
 2016|  1.85M|            arg);
 2017|  1.85M|        return parse_ctx.begin();
 2018|  1.85M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.85M|    {
 1701|  1.85M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  1.85M|    {
 1956|  1.85M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.85M]
  |  Branch (1956:23): [True: 0, False: 1.85M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.85M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.85M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104k, False: 1.75M]
  |  |  ------------------
  ------------------
 1963|   104k|            on_error(r.error());
 1964|   104k|        }
 1965|  1.75M|        else {
 1966|  1.75M|            get_ctx().advance_to(*r);
 1967|  1.75M|        }
 1968|  1.85M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.37M|    {
 1729|  4.37M|        {
 1730|  4.37M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.37M]
  ------------------
 1731|  4.37M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.37M]
  ------------------
 1732|  4.37M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.37M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.37M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.37M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.37M|        }
 1739|       |
 1740|  4.37M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.37M, False: 0]
  ------------------
 1741|  4.37M|            return;
 1742|  4.37M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.37M|    {
 1777|  4.37M|        return error;
 1778|  4.37M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  13.1M|    {
 1773|  13.1M|        return static_cast<bool>(error);
 1774|  13.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.95M|    {
 1903|  1.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.95M|    {
 1830|  1.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.95M|{
 2038|  1.95M|    const auto beg = handler.get_ctx().begin();
 2039|  1.95M|    detail::parse_format_string<false>(format, handler);
 2040|  1.95M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104k, False: 1.84M]
  |  |  ------------------
  ------------------
 2041|   104k|        return unexpected(handler.error);
 2042|   104k|    }
 2043|  1.84M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.95M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  13.4M|    {
 2022|  13.4M|        return ctx.get();
 2023|  13.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  13.4M|    {
 1834|  13.4M|        return ctx;
 1835|  13.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.79M|    {
 1907|  3.79M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.79M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.79M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.95M|{
 1681|  1.95M|    auto arg = ctx.arg(id);
 1682|  1.95M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.95M|    return arg;
 1686|  1.95M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.95M|    {
 1944|  1.95M|        return parse_ctx.next_arg_id();
 1945|  1.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.95M|    {
 1985|  1.95M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.95M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.95M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.95M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.95M|        auto specs = detail::format_specs{};
 1998|  1.95M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.95M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.95M|            arg.type()};
 2001|       |
 2002|  1.95M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.95M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.95M]
  |  Branch (2003:29): [True: 0, False: 1.95M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.95M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.95M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.95M|        on_visit_scan_arg(
 2014|  1.95M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.95M|                                           get_ctx().locale()},
 2016|  1.95M|            arg);
 2017|  1.95M|        return parse_ctx.begin();
 2018|  1.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.95M|    {
 1701|  1.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.95M|    {
 1956|  1.95M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.95M]
  |  Branch (1956:23): [True: 0, False: 1.95M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.95M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.95M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104k, False: 1.84M]
  |  |  ------------------
  ------------------
 1963|   104k|            on_error(r.error());
 1964|   104k|        }
 1965|  1.84M|        else {
 1966|  1.84M|            get_ctx().advance_to(*r);
 1967|  1.84M|        }
 1968|  1.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  2.39M|{
 2053|  2.39M|    const auto argcount = args.size();
 2054|  2.39M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 533k, False: 1.85M]
  |  Branch (2054:60): [True: 533k, False: 0]
  ------------------
 2055|   533k|        auto arg = args.get(0);
 2056|   533k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   533k|    static_cast<    \
  |  |  929|   533k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   533k|    }
 2058|       |
 2059|  1.85M|    auto handler = format_handler<true, CharT>{
 2060|  1.85M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.85M|                                       source.data() + source.size()},
 2062|  1.85M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.85M|    static_cast<    \
  |  |  929|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.85M|    return vscan_parse_format_string(format, handler);
 2064|  2.39M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   799k|{
 1638|   799k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 799k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   799k|    auto reader =
 1644|   799k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   799k|            ranges::subrange<const CharT*>{source.data(),
 1646|   799k|                                           source.data() + source.size()},
 1647|   799k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   799k|    static_cast<    \
  |  |  929|   799k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   799k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   799k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   799k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   799k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.3k, False: 768k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  31.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  31.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  31.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  31.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  31.3k|    }                                                  \
  |  |  |  | 3671|   799k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   768k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   768k|    return ranges::distance(source.data(), it);
 1650|   799k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   339k|{
 2053|   339k|    const auto argcount = args.size();
 2054|   339k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 59.2k, False: 279k]
  |  Branch (2054:60): [True: 59.2k, False: 0]
  ------------------
 2055|  59.2k|        auto arg = args.get(0);
 2056|  59.2k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  59.2k|    static_cast<    \
  |  |  929|  59.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  59.2k|    }
 2058|       |
 2059|   279k|    auto handler = format_handler<true, CharT>{
 2060|   279k|        ranges::subrange<const CharT*>{source.data(),
 2061|   279k|                                       source.data() + source.size()},
 2062|   279k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   279k|    static_cast<    \
  |  |  929|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   279k|    static_cast<    \
  |  |  929|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   279k|    return vscan_parse_format_string(format, handler);
 2064|   339k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   678k|{
 1625|   678k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 559k, False: 118k]
  ------------------
 1626|   559k|        return false;
 1627|   559k|    }
 1628|   118k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 118k, False: 0]
  |  Branch (1628:39): [True: 118k, False: 0]
  ------------------
 1629|   678k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  88.9k|{
 1638|  88.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 88.9k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  88.9k|    auto reader =
 1644|  88.9k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  88.9k|            ranges::subrange<const CharT*>{source.data(),
 1646|  88.9k|                                           source.data() + source.size()},
 1647|  88.9k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  88.9k|    static_cast<    \
  |  |  929|  88.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  88.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  88.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  88.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  88.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 62.7k, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  62.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  62.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  62.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  62.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  62.7k|    }                                                  \
  |  |  |  | 3671|  88.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  26.1k|    return ranges::distance(source.data(), it);
 1650|  88.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   279k|    {
 1903|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   279k|    {
 1853|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   279k|{
 2038|   279k|    const auto beg = handler.get_ctx().begin();
 2039|   279k|    detail::parse_format_string<false>(format, handler);
 2040|   279k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 209k, False: 70.6k]
  |  |  ------------------
  ------------------
 2041|   209k|        return unexpected(handler.error);
 2042|   209k|    }
 2043|  70.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   279k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.54M|    {
 2022|  1.54M|        return ctx.get();
 2023|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.54M|    {
 1857|  1.54M|        return contiguous_ctx;
 1858|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   350k|    {
 1907|   350k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 350k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   350k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   279k|{
 1681|   279k|    auto arg = ctx.arg(id);
 1682|   279k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   279k|    return arg;
 1686|   279k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   279k|    {
 1944|   279k|        return parse_ctx.next_arg_id();
 1945|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   279k|    {
 1985|   279k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   279k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   279k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 279k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   279k|        auto specs = detail::format_specs{};
 1998|   279k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   279k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   279k|            arg.type()};
 2001|       |
 2002|   279k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   279k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 279k]
  |  Branch (2003:29): [True: 0, False: 279k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   279k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   279k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   279k|        on_visit_scan_arg(
 2014|   279k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   279k|                                           get_ctx().locale()},
 2016|   279k|            arg);
 2017|   279k|        return parse_ctx.begin();
 2018|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   279k|    {
 1701|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   279k|    {
 1956|   279k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 279k]
  |  Branch (1956:23): [True: 0, False: 279k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   279k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   279k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 209k, False: 70.6k]
  |  |  ------------------
  ------------------
 1963|   209k|            on_error(r.error());
 1964|   209k|        }
 1965|  70.6k|        else {
 1966|  70.6k|            get_ctx().advance_to(*r);
 1967|  70.6k|        }
 1968|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   338k|{
 2073|   338k|    const auto argcount = args.size();
 2074|   338k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 59.2k, False: 279k]
  |  Branch (2074:60): [True: 59.2k, False: 0]
  ------------------
 2075|  59.2k|        auto arg = args.get(0);
 2076|  59.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  59.2k|    static_cast<    \
  |  |  929|  59.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  59.2k|    }
 2078|       |
 2079|   279k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 279k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   279k|    SCN_UNLIKELY_ATTR
 2087|   279k|    {
 2088|   279k|        auto handler = format_handler<false, CharT>{
 2089|   279k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   279k|    static_cast<    \
  |  |  929|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   279k|    static_cast<    \
  |  |  929|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   279k|        return vscan_parse_format_string(format, handler);
 2091|   279k|    }
 2092|   279k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  88.8k|{
 1658|  88.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 88.8k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  88.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  88.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 88.8k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  88.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  88.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  88.8k|    static_cast<    \
  |  |  929|  88.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  88.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  88.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  88.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  88.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 62.7k, False: 26.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  62.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  62.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  62.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  62.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  62.7k|    }                                                  \
  |  |  |  | 3671|  88.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  26.0k|    return it.position();
 1675|  88.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   279k|    {
 1903|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   279k|    {
 1830|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   279k|{
 2038|   279k|    const auto beg = handler.get_ctx().begin();
 2039|   279k|    detail::parse_format_string<false>(format, handler);
 2040|   279k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 209k, False: 70.4k]
  |  |  ------------------
  ------------------
 2041|   209k|        return unexpected(handler.error);
 2042|   209k|    }
 2043|  70.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   279k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  1.53M|    {
 2022|  1.53M|        return ctx.get();
 2023|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.53M|    {
 1834|  1.53M|        return ctx;
 1835|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   350k|    {
 1907|   350k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 350k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   350k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   279k|{
 1681|   279k|    auto arg = ctx.arg(id);
 1682|   279k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   279k|    return arg;
 1686|   279k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   279k|    {
 1944|   279k|        return parse_ctx.next_arg_id();
 1945|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   279k|    {
 1985|   279k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   279k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   279k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 279k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   279k|        auto specs = detail::format_specs{};
 1998|   279k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   279k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   279k|            arg.type()};
 2001|       |
 2002|   279k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   279k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 279k]
  |  Branch (2003:29): [True: 0, False: 279k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   279k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   279k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   279k|        on_visit_scan_arg(
 2014|   279k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   279k|                                           get_ctx().locale()},
 2016|   279k|            arg);
 2017|   279k|        return parse_ctx.begin();
 2018|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   279k|    {
 1701|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   279k|    {
 1956|   279k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 279k]
  |  Branch (1956:23): [True: 0, False: 279k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   279k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   279k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 209k, False: 70.4k]
  |  |  ------------------
  ------------------
 1963|   209k|            on_error(r.error());
 1964|   209k|        }
 1965|  70.4k|        else {
 1966|  70.4k|            get_ctx().advance_to(*r);
 1967|  70.4k|        }
 1968|   279k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   266k|{
 2099|   266k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   266k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   253k|{
 2099|   253k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   253k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  29.6k|{
 2099|  29.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  29.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  29.6k|{
 2099|  29.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  29.6k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.48k|{
 1363|  3.48k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.48k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  3.48k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  3.48k|            std::u32string tmp;
 1368|  3.48k|            transcode_to_string_impl_to32(src, tmp);
 1369|  3.48k|            return transcode_to_string_impl_32to16<false>(
 1370|  3.48k|                std::u32string_view{tmp}, dest);
 1371|  3.48k|        }
 1372|  3.48k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  3.48k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.48k|        }
 1375|  3.48k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.48k|{
 1256|  3.48k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.48k|    auto it = src.begin();
 1259|  1.25M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.25M, False: 3.48k]
  ------------------
 1260|  1.25M|        auto res = get_next_code_point(
 1261|  1.25M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.25M|                                                                 src.end()));
 1263|  1.25M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.36k, False: 1.24M]
  |  |  ------------------
  ------------------
 1264|  3.36k|            dest.push_back(DestCharT{0xfffd});
 1265|  3.36k|        }
 1266|  1.24M|        else {
 1267|  1.24M|            dest.push_back(res.value);
 1268|  1.24M|        }
 1269|  1.25M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.25M|    }
 1271|  3.48k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.21M|{
 1169|  2.21M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.21M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.21M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.3k, False: 2.17M]
  |  |  ------------------
  ------------------
 1173|  37.3k|        return {get_start_for_next_code_point(input),
 1174|  37.3k|                detail::invalid_code_point};
 1175|  37.3k|    }
 1176|  2.17M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.42k, False: 2.17M]
  |  |  ------------------
  ------------------
 1177|  6.42k|        return {input.end(), detail::invalid_code_point};
 1178|  6.42k|    }
 1179|       |
 1180|  2.17M|    return {input.begin() + len,
 1181|  2.17M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.17M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  37.3k|{
 1155|  37.3k|    auto it = input.begin();
 1156|   318k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 308k, False: 9.68k]
  ------------------
 1157|   308k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 27.7k, False: 281k]
  ------------------
 1158|  27.7k|            break;
 1159|  27.7k|        }
 1160|   308k|    }
 1161|  37.3k|    return it;
 1162|  37.3k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  46.5M|    {
  809|  46.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  46.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  46.5M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  17.3M|    {
  823|  17.3M|        return a.m_code == b.m_code;
  824|  17.3M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.60M|    {
 1728|  2.60M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.60M|        std::strcpy(m_locbuf, loc);
 1730|  2.60M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.60M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.60M|        std::setlocale(m_category, m_locbuf);
 1735|  2.60M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.60M|    {
 1757|  2.60M|        std::setlocale(cat, "C");
 1758|  2.60M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  4.37M|    {
 2936|  4.37M|        return m_msg == nullptr;
 2937|  4.37M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  4.32M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  58.2M|{
  458|  58.2M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  58.2M|        static_cast<unsigned char>(ch))];
  460|  58.2M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  48.1k|{
  469|  48.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  48.1k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  11.6M|{
  539|  11.6M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  11.6M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  20.4M|{
  784|  20.4M|    return e != eof_error::good;
  785|  20.4M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  60.7k|{
  798|  60.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  60.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  60.7k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  60.7k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   252k|{
  845|   252k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   252k|    return parse_error::eof;
  847|   252k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  6.27M|{
  854|  6.27M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 6.27M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  6.27M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 90.4k, False: 6.18M]
  ------------------
  859|  90.4k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  90.4k|    }
  861|       |
  862|  6.18M|    return scan_error{code, msg};
  863|  6.27M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  6.27M|{
  868|  6.27M|    return [code, msg](parse_error err) {
  869|  6.27M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.27M|    };
  871|  6.27M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  6.63M|{
 1200|       |    // Pattern_White_Space property
 1201|  6.63M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 6.32M, False: 303k]
  |  Branch (1201:27): [True: 2.14M, False: 4.18M]
  ------------------
 1202|  6.63M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 146k, False: 4.34M]
  ------------------
 1203|  6.63M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 194k, False: 4.14M]
  ------------------
 1204|  6.63M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 5.12k, False: 4.14M]
  ------------------
 1205|  6.63M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 21.5k, False: 4.11M]
  ------------------
 1206|  6.63M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 187k, False: 3.93M]
  ------------------
 1207|  6.63M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 3.93M]
  ------------------
 1208|  6.63M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  7.01M|{
 2220|  7.01M|    unsigned char running_diff{0};
 2221|  26.3M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 19.3M, False: 7.01M]
  ------------------
 2222|  19.3M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  19.3M|    }
 2224|  7.01M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 219k, False: 6.79M]
  |  Branch (2224:33): [True: 34.0k, False: 6.76M]
  ------------------
 2225|  7.01M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  43.9M|{
 3123|  43.9M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  43.9M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.19M|{
 3127|  1.19M|#if WCHAR_MIN < 0
 3128|  1.19M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.18M, False: 15.4k]
  |  Branch (3128:20): [True: 689k, False: 490k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   689k|        return char_to_int(static_cast<char>(ch));
 3133|   689k|    }
 3134|   506k|    return 255;
 3135|  1.19M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.74M|{
 6008|  3.74M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.74M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.74M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.74M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.74M|    return {};
 6023|  3.74M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.81M|    {
  304|  7.81M|        ranges::advance(x, n);
  305|  7.81M|        return x;
  306|  7.81M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.81M|    {
  268|  7.81M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.81M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.81M|    {
  151|  7.81M|        i += n;
  152|  7.81M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  9.31M|    {
  108|  9.31M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  9.31M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  9.31M|    {
   87|  9.31M|        return s - i;
   88|  9.31M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   984k|    {
  304|   984k|        ranges::advance(x, n);
  305|   984k|        return x;
  306|   984k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   984k|    {
  268|   984k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   984k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   984k|    {
  151|   984k|        i += n;
  152|   984k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   134k|    {
  108|   134k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   134k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   134k|    {
   87|   134k|        return s - i;
   88|   134k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.71M|{
  981|  2.71M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.71M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.71M|        return true;
  984|  2.71M|    }
  985|  2.71M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.71M|                           ranges::const_iterator_t<Range>,
  987|  2.71M|                           typename detail::basic_scan_buffer<
  988|  2.71M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.71M|        auto beg = r.begin();
  990|  2.71M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.71M, False: 0]
  ------------------
  991|  2.71M|            return false;
  992|  2.71M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.71M|    else {
 1006|  2.71M|        return false;
 1007|  2.71M|    }
 1008|  2.71M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  74.6M|    {
  763|  74.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  74.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  74.6M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  7.19M|{
 1857|  7.19M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  7.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  7.19M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  7.19M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  7.19M|        if (sz < count) {
 1862|  7.19M|            return unexpected(eof_error::eof);
 1863|  7.19M|        }
 1864|       |
 1865|  7.19M|        return ranges::next(range.begin(), count);
 1866|  7.19M|    }
 1867|  7.19M|    else {
 1868|  7.19M|        auto it = range.begin();
 1869|  7.19M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 4.44M, False: 2.75M]
  ------------------
 1870|  4.44M|            return ranges::next(it, count);
 1871|  4.44M|        }
 1872|       |
 1873|  10.9M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 8.29M, False: 2.69M]
  ------------------
 1874|  8.29M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 53.5k, False: 8.24M]
  ------------------
 1875|  53.5k|                return unexpected(eof_error::eof);
 1876|  53.5k|            }
 1877|  8.29M|        }
 1878|       |
 1879|  2.69M|        return it;
 1880|  2.75M|    }
 1881|  7.19M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  7.19M|{
 1095|  7.19M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  7.19M|        return r.size();
 1097|  7.19M|    }
 1098|  7.19M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  7.19M|                           ranges::const_iterator_t<Range>,
 1100|  7.19M|                           typename detail::basic_scan_buffer<
 1101|  7.19M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  7.19M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  7.19M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  7.19M|        }
 1105|  7.19M|        else {
 1106|  7.19M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 7.19M, False: 0]
  ------------------
 1107|  7.19M|                return static_cast<size_t>(
 1108|  7.19M|                    r.begin().parent()->chars_available() -
 1109|  7.19M|                    r.begin().position());
 1110|  7.19M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  7.19M|        }
 1113|  7.19M|    }
 1114|  7.19M|    else {
 1115|  7.19M|        return 0;
 1116|  7.19M|    }
 1117|  7.19M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.70M|    {
  754|  6.70M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  37.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.3M|              cvref<T> obj = *get<T>(fn);
  745|  37.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  37.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.3M|              }
  748|  37.3M|              else {
  749|  37.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.3M|              }
  751|  37.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  37.3M|    {
  684|  37.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  37.3M|            return static_cast<T*>(s.m_cp);
  686|  37.3M|        }
  687|  37.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  37.3M|            return static_cast<T*>(s.m_p);
  689|  37.3M|        }
  690|  37.3M|        else {
  691|  37.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  37.3M|        }
  693|  37.3M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.70M|        {
  662|  6.70M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  11.1M|    {
  763|  11.1M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  11.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  11.1M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.12M|    {
  754|  3.12M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  5.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.48M|              cvref<T> obj = *get<T>(fn);
  745|  5.48M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.48M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.48M|              }
  748|  5.48M|              else {
  749|  5.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.48M|              }
  751|  5.48M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.48M|    {
  684|  5.48M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.48M|            return static_cast<T*>(s.m_cp);
  686|  5.48M|        }
  687|  5.48M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.48M|            return static_cast<T*>(s.m_p);
  689|  5.48M|        }
  690|  5.48M|        else {
  691|  5.48M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.48M|        }
  693|  5.48M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  3.12M|        {
  662|  3.12M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.95M|    {
 6037|  1.95M|        const bool need_skipped_width =
 6038|  1.95M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.95M]
  |  Branch (6038:33): [True: 0, False: 1.95M]
  ------------------
 6039|  1.95M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.95M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.95M]
  ------------------
 6043|  1.95M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.95M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.95M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.95M, False: 0]
  |  Branch (6047:56): [True: 1.95M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.95M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.95M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.88M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.95M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.95M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.95M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.4k, False: 1.92M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  22.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  22.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  22.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  22.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  22.4k|    }                                                  \
  |  |  |  | 3671|  1.95M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.88M|                            make_eof_scan_error));
 6058|       |
 6059|  3.88M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.92M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.92M|            return result_type{it, 0};
 6067|  3.88M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.95M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  5.27M|{
 1976|  5.27M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.27M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  5.27M|{
 1957|  5.27M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.27M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.27M|    }
 1960|  5.27M|    else {
 1961|  5.27M|        auto first = range.begin();
 1962|  29.0M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 28.9M, False: 40.0k]
  ------------------
 1963|  28.9M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 5.23M, False: 23.7M]
  ------------------
 1964|  5.23M|                return first;
 1965|  5.23M|            }
 1966|  28.9M|        }
 1967|  40.0k|        return first;
 1968|  5.27M|    }
 1969|  5.27M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  4.65M|    {
  108|  4.65M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.65M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  4.65M|    {
   94|  4.65M|        iter_difference_t<I> counter{0};
   95|  47.0M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 42.4M, False: 4.65M]
  ------------------
   96|  42.4M|            ++i;
   97|  42.4M|            ++counter;
   98|  42.4M|        }
   99|  4.65M|        return counter;
  100|  4.65M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  6.27M|    return [code, msg](parse_error err) {
  869|  6.27M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.27M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  1.08M|    {
 1780|  1.08M|        auto stdloc = loc.get<std::locale>();
 1781|  1.08M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  1.08M|        grouping = numpunct.grouping();
 1783|  1.08M|        thousands_sep =
 1784|  1.08M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 1.08M]
  ------------------
 1785|  1.08M|        decimal_point = numpunct.decimal_point();
 1786|  1.08M|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  1.08M|{
 1717|  1.08M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 1.08M, False: 0]
  ------------------
 1718|  1.08M|        return std::use_facet<Facet>(stdloc);
 1719|  1.08M|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  1.08M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  7.76M|{
 1846|  7.76M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.3k, False: 7.73M]
  |  |  ------------------
  ------------------
 1847|  30.3k|        return unexpected(e);
 1848|  30.3k|    }
 1849|       |
 1850|  7.73M|    return ranges::next(range.begin());
 1851|  7.76M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  11.2M|{
  950|  11.2M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  11.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.1k, False: 11.1M]
  |  |  ------------------
  ------------------
  951|  60.1k|        return eof_error::eof;
  952|  60.1k|    }
  953|  11.1M|    return eof_error::good;
  954|  11.2M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  15.8M|{
  944|  15.8M|    return is_range_eof(r.begin(), r.end());
  945|  15.8M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  15.8M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  15.8M|    {
  937|  15.8M|        return begin == end;
  938|  15.8M|    }
  939|  15.8M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  7.73M|    {
  296|  7.73M|        ++x;
  297|  7.73M|        return x;
  298|  7.73M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.94M|{
 3141|  2.94M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.94M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.15M, False: 796k]
  ------------------
 3143|  2.15M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.15M, False: 512]
  ------------------
 3144|  2.15M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.15M|        }
 3146|    512|        return unexpected(eof_error::eof);
 3147|  2.15M|    }
 3148|       |
 3149|   796k|    auto& it = *r;
 3150|   796k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 316k, False: 479k]
  ------------------
 3151|   316k|        return std::pair{it, sign_type::minus_sign};
 3152|   316k|    }
 3153|   479k|    return std::pair{it, sign_type::plus_sign};
 3154|   796k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  5.18M|{
 2272|  5.18M|    auto it = read_code_unit(range);
 2273|  5.18M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.8k, False: 5.17M]
  |  |  ------------------
  ------------------
 2274|  17.8k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  17.8k|    }
 2276|       |
 2277|  9.66M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 9.66M, False: 4.11M]
  ------------------
 2278|  9.66M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.05M, False: 8.60M]
  ------------------
 2279|  1.05M|            return *it;
 2280|  1.05M|        }
 2281|  9.66M|    }
 2282|       |
 2283|  4.11M|    return unexpected(parse_error::error);
 2284|  5.17M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  7.19M|{
 2231|  7.19M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  7.19M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  7.19M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  7.19M|        if (range.size() < str.size()) {
 2236|  7.19M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  7.19M|        }
 2238|  7.19M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  7.19M|            return unexpected(parse_error::error);
 2240|  7.19M|        }
 2241|  7.19M|        return ranges::next(range.begin(), str.size());
 2242|  7.19M|    }
 2243|  7.19M|    else {
 2244|  7.19M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.19M|            if (ch < 'A' || ch > 'Z') {
 2246|  7.19M|                return ch;
 2247|  7.19M|            }
 2248|  7.19M|            return static_cast<char_type>(ch +
 2249|  7.19M|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.19M|        };
 2251|       |
 2252|  7.19M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  7.19M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 53.5k, False: 7.14M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  53.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  53.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  53.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  53.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  53.5k|    }                                                  \
  |  |  |  | 3671|  7.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  7.14M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  7.14M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  7.14M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  7.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88M, False: 252k]
  |  |  ------------------
  ------------------
 2257|  7.14M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  7.14M|                    return ascii_tolower(a) ==
 2259|  7.14M|                           static_cast<detail::char_t<Range>>(b);
 2260|  7.14M|                }))) {
 2261|  6.88M|            return unexpected(parse_error::error);
 2262|  6.88M|        }
 2263|       |
 2264|   252k|        return it;
 2265|  7.14M|    }
 2266|  7.19M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  8.33M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  8.33M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 7.53M, False: 805k]
  |  Branch (2245:29): [True: 685k, False: 119k]
  ------------------
 2246|  8.22M|                return ch;
 2247|  8.22M|            }
 2248|   119k|            return static_cast<char_type>(ch +
 2249|   119k|                                          static_cast<char_type>('a' - 'A'));
 2250|  8.33M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.57M|{
 2146|  2.57M|    auto it = read_code_unit(range);
 2147|  2.57M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 2.55M]
  |  |  ------------------
  ------------------
 2148|  12.5k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  12.5k|    }
 2150|       |
 2151|  2.55M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15M, False: 406k]
  |  |  ------------------
  ------------------
 2152|  2.55M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.15M|        return unexpected(parse_error::error);
 2154|  2.15M|    }
 2155|       |
 2156|   406k|    return *it;
 2157|  2.55M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  5.27M|{
 1996|  5.27M|    auto it = read_while_code_unit(range, pred);
 1997|  5.27M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.20M, False: 3.06M]
  ------------------
 1998|  2.20M|        return unexpected(parse_error::error);
 1999|  2.20M|    }
 2000|  3.06M|    return it;
 2001|  5.27M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.45M|    {
 1621|  2.45M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.45M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.45M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.45M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.45M|            m_storage.reset();
 1627|  2.45M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.45M|        }
 1629|  2.45M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.45M|                                          std::basic_string<CharT>>) {
 1631|  2.45M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.45M|            m_view = string_view_type{*m_storage};
 1633|  2.45M|        }
 1634|  2.45M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.45M|                                          typename detail::basic_scan_buffer<
 1636|  2.45M|                                              value_t>::forward_iterator> &&
 1637|  2.45M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.45M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.45M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.45M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 325k, False: 2.12M]
  |  |  ------------------
  ------------------
 1641|  2.45M|                             detail::to_address(end_seg.end()))) {
 1642|   325k|                auto& str = m_storage.emplace();
 1643|   325k|                str.reserve(range.end().position() - range.begin().position());
 1644|   325k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   325k|                m_view = string_view_type{str};
 1646|   325k|                return;
 1647|   325k|            }
 1648|       |
 1649|  2.12M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.12M|                                                            end_seg.data());
 1651|  2.12M|            m_storage.reset();
 1652|  2.12M|        }
 1653|  2.45M|        else {
 1654|  2.45M|            auto& str = m_storage.emplace();
 1655|  2.45M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.45M|                str.reserve(range.size());
 1657|  2.45M|            }
 1658|  2.45M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.45M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.45M|                          std::back_inserter(str));
 1661|  2.45M|            }
 1662|  2.45M|            else {
 1663|  2.45M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.45M|                     ++it) {
 1665|  2.45M|                    str.push_back(*it);
 1666|  2.45M|                }
 1667|  2.45M|            }
 1668|  2.45M|            m_view = string_view_type{str};
 1669|  2.45M|        }
 1670|  2.45M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  17.9M|    {
 1582|  17.9M|        return m_view;
 1583|  17.9M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  10.6M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.83M|    {
 6079|  1.83M|        const bool need_skipped_width =
 6080|  1.83M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.83M]
  |  Branch (6080:33): [True: 0, False: 1.83M]
  ------------------
 6081|  1.83M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.83M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.83M]
  ------------------
 6084|  1.83M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.83M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.83M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.83M, False: 0]
  ------------------
 6093|  1.83M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.83M]
  ------------------
 6094|  1.83M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.83M|        return result_type{rng.begin(), 0};
 6118|  1.83M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.91M|{
 1846|  3.91M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.99k, False: 3.90M]
  |  |  ------------------
  ------------------
 1847|  6.99k|        return unexpected(e);
 1848|  6.99k|    }
 1849|       |
 1850|  3.90M|    return ranges::next(range.begin());
 1851|  3.91M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  7.36M|{
  950|  7.36M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 7.33M]
  |  |  ------------------
  ------------------
  951|  33.2k|        return eof_error::eof;
  952|  33.2k|    }
  953|  7.33M|    return eof_error::good;
  954|  7.36M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  7.36M|{
  944|  7.36M|    return is_range_eof(r.begin(), r.end());
  945|  7.36M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  7.36M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.36M|    {
  937|  7.36M|        return begin == end;
  938|  7.36M|    }
  939|  7.36M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.90M|    {
  296|  3.90M|        ++x;
  297|  3.90M|        return x;
  298|  3.90M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.71M|{
 3141|  2.71M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.71M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.96M, False: 755k]
  ------------------
 3143|  1.96M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.96M, False: 162]
  ------------------
 3144|  1.96M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.96M|        }
 3146|    162|        return unexpected(eof_error::eof);
 3147|  1.96M|    }
 3148|       |
 3149|   755k|    auto& it = *r;
 3150|   755k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 302k, False: 452k]
  ------------------
 3151|   302k|        return std::pair{it, sign_type::minus_sign};
 3152|   302k|    }
 3153|   452k|    return std::pair{it, sign_type::plus_sign};
 3154|   755k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.15M|{
 2272|  3.15M|    auto it = read_code_unit(range);
 2273|  3.15M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.27k, False: 3.15M]
  |  |  ------------------
  ------------------
 2274|  3.27k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.27k|    }
 2276|       |
 2277|  5.78M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.78M, False: 2.31M]
  ------------------
 2278|  5.78M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 839k, False: 4.94M]
  ------------------
 2279|   839k|            return *it;
 2280|   839k|        }
 2281|  5.78M|    }
 2282|       |
 2283|  2.31M|    return unexpected(parse_error::error);
 2284|  3.15M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  7.07M|{
 2231|  7.07M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  7.07M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  7.07M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  7.07M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 57.6k, False: 7.01M]
  ------------------
 2236|  57.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  57.6k|        }
 2238|  7.01M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 6.76M, False: 253k]
  ------------------
 2239|  6.76M|            return unexpected(parse_error::error);
 2240|  6.76M|        }
 2241|   253k|        return ranges::next(range.begin(), str.size());
 2242|  7.01M|    }
 2243|  7.07M|    else {
 2244|  7.07M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.07M|            if (ch < 'A' || ch > 'Z') {
 2246|  7.07M|                return ch;
 2247|  7.07M|            }
 2248|  7.07M|            return static_cast<char_type>(ch +
 2249|  7.07M|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.07M|        };
 2251|       |
 2252|  7.07M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  7.07M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  7.07M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  7.07M|        if (SCN_UNLIKELY(!std::equal(
 2257|  7.07M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  7.07M|                    return ascii_tolower(a) ==
 2259|  7.07M|                           static_cast<detail::char_t<Range>>(b);
 2260|  7.07M|                }))) {
 2261|  7.07M|            return unexpected(parse_error::error);
 2262|  7.07M|        }
 2263|       |
 2264|  7.07M|        return it;
 2265|  7.07M|    }
 2266|  7.07M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   755k|{
 2146|   755k|    auto it = read_code_unit(range);
 2147|   755k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.71k, False: 751k]
  |  |  ------------------
  ------------------
 2148|  3.71k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.71k|    }
 2150|       |
 2151|   751k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 625k, False: 126k]
  |  |  ------------------
  ------------------
 2152|   751k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   625k|        return unexpected(parse_error::error);
 2154|   625k|    }
 2155|       |
 2156|   126k|    return *it;
 2157|   751k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  10.0M|    {
 1503|  10.0M|        return sv;
 1504|  10.0M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.42M|{
 1976|  1.42M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.42M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.42M|{
 1957|  1.42M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.42M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.42M|    }
 1960|  1.42M|    else {
 1961|  1.42M|        auto first = range.begin();
 1962|  1.42M|        for (; first != range.end(); ++first) {
 1963|  1.42M|            if (pred(*first)) {
 1964|  1.42M|                return first;
 1965|  1.42M|            }
 1966|  1.42M|        }
 1967|  1.42M|        return first;
 1968|  1.42M|    }
 1969|  1.42M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.65M|{
 2951|  2.65M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.65M, False: 0]
  ------------------
 2952|  2.65M|        auto it = read_while_classic_space(range);
 2953|  2.65M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.65M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 2.63M]
  |  |  ------------------
  ------------------
 2955|  20.0k|            return unexpected(e);
 2956|  20.0k|        }
 2957|       |
 2958|  2.63M|        return it;
 2959|  2.65M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.65M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.65M|{
 2117|  2.65M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.65M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.65M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.65M|        auto buf = make_contiguous_buffer(range);
 2121|  2.65M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.65M|        return ranges::next(range.begin(),
 2123|  2.65M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.65M|    }
 2125|  2.65M|    else {
 2126|  2.65M|        auto it = range.begin();
 2127|       |
 2128|  2.65M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.65M|            auto seg = get_contiguous_beginning(range);
 2130|  2.65M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.65M|                seg_it != seg.end()) {
 2132|  2.65M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.65M|            }
 2134|  2.65M|            ranges::advance(it, seg.size());
 2135|  2.65M|        }
 2136|       |
 2137|  2.65M|        return read_while_code_point(
 2138|  2.65M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.65M|    }
 2140|  2.65M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.65M|{
 1683|  2.65M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.65M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.65M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.65M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.65M|    }
 1688|  2.65M|    else {
 1689|  2.65M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.65M|    }
 1691|  2.65M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.65M|    {
 1490|  2.65M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  7.33M|    {
  304|  7.33M|        ranges::advance(x, n);
  305|  7.33M|        return x;
  306|  7.33M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  9.73M|    {
  268|  9.73M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.73M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  9.73M|    {
  181|  46.4M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 36.7M, False: 9.73M]
  ------------------
  182|  36.7M|            ++i;
  183|  36.7M|        }
  184|  9.73M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   620k|    {
 6193|   620k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   620k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   620k|            auto rd = make_reader<T, char_type>();
 6198|   620k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   620k|                return unexpected(e);
 6200|   620k|            }
 6201|       |
 6202|   620k|            return impl(rd, range, value);
 6203|   620k|        }
 6204|   620k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   620k|            auto rd = make_reader<T, char_type>();
 6206|   620k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 620k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   620k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 620k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   620k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   620k|                return impl(rd, range, value);
 6213|   620k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   620k|        else {
 6221|   620k|            SCN_EXPECT(false);
 6222|   620k|            SCN_UNREACHABLE;
 6223|   620k|        }
 6224|   620k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.81M|    {
 3040|  3.81M|        reader_error_handler eh{};
 3041|  3.81M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.81M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.81M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.81M|        return {};
 3046|  3.81M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.81M|    {
 3051|  3.81M|        return static_cast<Derived&>(*this);
 3052|  3.81M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.81M|    {
 4145|  3.81M|        detail::check_float_type_specs(specs, eh);
 4146|  3.81M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   620k|    {
 6124|   620k|        const bool need_skipped_width =
 6125|   620k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 620k]
  |  Branch (6125:33): [True: 0, False: 620k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   620k|        auto it = rng.begin();
 6129|   620k|        std::ptrdiff_t prefix_width = 0;
 6130|   620k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 620k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   620k|        else {
 6138|   620k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   620k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   620k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   620k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.70k, False: 613k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.70k|    }                                                  \
  |  |  |  | 3671|   620k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   613k|            std::tie(it, prefix_width) = prefix_result;
 6140|   613k|        }
 6141|   613k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   613k|        std::ptrdiff_t value_width = 0;
 6145|   613k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 613k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   613k|        else {
 6161|   613k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   613k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   613k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.1k, False: 585k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  28.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  28.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  28.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  28.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  28.1k|    }                                                  \
  |  | 3671|   613k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   585k|                                             specs, value, loc));
 6163|       |
 6164|   585k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 585k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   585k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   585k|        std::ptrdiff_t postfix_width = 0;
 6173|   585k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 580k, False: 5.15k]
  ------------------
 6174|   580k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   580k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   580k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   580k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 580k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   580k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   580k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   580k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   580k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   580k|                                 value_width));
 6178|   580k|            std::tie(it, postfix_width) = postfix_result;
 6179|   580k|        }
 6180|       |
 6181|   585k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   585k|                                                 value_width, postfix_width);
 6183|   585k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 585k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   585k|        return it;
 6188|   585k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  8.94M|    {
 3035|  8.94M|        return true;
 3036|  8.94M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  3.77M|    {
 4217|  3.77M|        unsigned options{};
 4218|  3.77M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 1.08M, False: 2.68M]
  ------------------
 4219|  1.08M|            options |= float_reader_base::allow_thsep;
 4220|  1.08M|        }
 4221|       |
 4222|  3.77M|        SCN_GCC_COMPAT_PUSH
 4223|  3.77M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  3.77M|        switch (specs.type) {
 4226|   491k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 491k, False: 3.27M]
  ------------------
 4227|   491k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  72.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 72.9k, False: 3.69M]
  ------------------
 4230|  72.9k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.20M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.20M, False: 2.56M]
  ------------------
 4233|  1.20M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   913k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 913k, False: 2.85M]
  ------------------
 4236|   913k|                return options | float_reader_base::allow_scientific |
 4237|   913k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  1.08M|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 1.08M, False: 2.68M]
  ------------------
 4240|  1.08M|                return options | float_reader_base::allow_scientific |
 4241|  1.08M|                       float_reader_base::allow_fixed |
 4242|  1.08M|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 3.77M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  3.77M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  3.77M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  3.77M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  3.77M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  5.31M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  10.6M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.63M|    {
 3691|  1.63M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.63M|        const std::ptrdiff_t sign_len =
 3694|  1.63M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 459k, False: 1.17M]
  ------------------
 3695|       |
 3696|  1.63M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.63M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.63M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.63M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.2k, False: 1.60M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  26.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  26.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  26.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  26.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  26.2k|    }                                                  \
  |  |  |  | 3671|  1.63M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.60M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.63M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  5.16M|    {
 4057|  5.16M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 5.16M, False: 0]
  ------------------
 4058|  5.16M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 5.16M, False: 0]
  ------------------
 4059|  5.16M|            return;
 4060|  5.16M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  6.08M|    {
 1587|  6.08M|        return m_storage.has_value();
 1588|  6.08M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.57M|    {
 1592|  3.57M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.57M|        return *m_storage;
 1594|  3.57M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   613k|    {
 4170|   613k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   613k|#if !SCN_DISABLE_LOCALE
 4173|   613k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 172k, False: 441k]
  ------------------
 4174|   172k|            return read_impl<Range>(
 4175|   172k|                range, rd,
 4176|   172k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   172k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   172k|                },
 4179|   172k|                value, loc);
 4180|   172k|        }
 4181|   441k|#endif
 4182|       |
 4183|   441k|        return read_impl<Range>(
 4184|   441k|            range, rd,
 4185|   441k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   441k|                return r.read_source(SCN_FWD(args)...);
 4187|   441k|            },
 4188|   441k|            value);
 4189|   613k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   847k|    {
 4206|   847k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   847k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   847k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.9k, False: 817k]
  |  |  ------------------
  ------------------
 4208|  29.9k|            return unexpected(r.error());
 4209|  29.9k|        }
 4210|       |
 4211|   817k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   817k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   817k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   817k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   817k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.44k, False: 811k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.44k|    }                                                  \
  |  |  |  | 3671|   817k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   811k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   811k|        return ranges::next(range.begin(), n);
 4213|   817k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.68M|    {
  763|  2.68M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.68M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   172k|    {
  754|   172k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|   172k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   172k|                  obj(static_cast<decltype(args)>(args)...);
  747|   172k|              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   172k|    {
  684|   172k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   172k|            return static_cast<T*>(s.m_cp);
  686|   172k|        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   172k|            return static_cast<T*>(s.m_p);
  689|   172k|        }
  690|   172k|        else {
  691|   172k|            return reinterpret_cast<T*>(s.m_fp);
  692|   172k|        }
  693|   172k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   172k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   172k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   172k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   555k|    {
 3679|   555k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   555k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   555k|        return read_source_impl(range);
 3685|   555k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  2.68M|    {
 3705|  2.68M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  2.68M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.68M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.68M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.68M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.68M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.68M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.68M|        auto it = sign_result.first;
 3708|  2.68M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.68M|        auto digits_begin = it;
 3711|  2.68M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.68M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.68M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.68M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  2.68M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  2.68M|                SCN_TRY_ASSIGN(
 3717|  2.68M|                    it,
 3718|  2.68M|                    do_read_source_impl(
 3719|  2.68M|                        r,
 3720|  2.68M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  2.68M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  2.68M|            }
 3723|  2.68M|            else {
 3724|  2.68M|                auto cb = [&](const auto& rr)
 3725|  2.68M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.68M|                    auto res = read_all(rr);
 3727|  2.68M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.68M|                        return unexpected_scan_error(
 3729|  2.68M|                            scan_error::invalid_scanned_value,
 3730|  2.68M|                            "Invalid float value");
 3731|  2.68M|                    }
 3732|  2.68M|                    return res;
 3733|  2.68M|                };
 3734|  2.68M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  2.68M|            }
 3736|  2.68M|        }
 3737|  2.68M|        else {
 3738|  2.68M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  2.68M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.68M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 96.1k, False: 2.58M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  96.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  96.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  96.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  96.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  96.1k|    }                                                  \
  |  | 3671|  2.68M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  2.58M|                it,
 3740|  2.58M|                do_read_source_impl(
 3741|  2.58M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.58M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.58M|        }
 3744|       |
 3745|  2.58M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.58M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.56M, False: 23.1k]
  |  Branch (3747:48): [True: 2.54M, False: 17.0k]
  ------------------
 3748|  2.58M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.45M, False: 96.0k]
  ------------------
 3749|  2.58M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.44M, False: 2.66k]
  ------------------
 3750|  2.44M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.44M|        }
 3752|       |
 3753|  2.58M|        handle_separators();
 3754|       |
 3755|  2.58M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.58M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.58M|        return it;
 3768|  2.58M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  2.68M|    {
 4000|  2.68M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.68M|        const bool allowed_nonhex =
 4002|  2.68M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.68M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.68M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.64M, False: 40.2k]
  |  Branch (4005:45): [True: 0, False: 2.64M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.68M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 40.2k, False: 2.64M]
  ------------------
 4011|  40.2k|            return *r;
 4012|  40.2k|        }
 4013|       |
 4014|  2.64M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.54M, False: 98.6k]
  |  Branch (4014:45): [True: 1.19k, False: 2.54M]
  ------------------
 4015|  1.19k|            return unexpected(r.error());
 4016|  1.19k|        }
 4017|  2.64M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 98.6k, False: 2.54M]
  ------------------
 4018|  98.6k|            return *r;
 4019|  98.6k|        }
 4020|       |
 4021|  2.54M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.82M, False: 718k]
  |  Branch (4021:28): [True: 588k, False: 1.23M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   588k|            auto it = range.begin();
 4025|       |
 4026|   588k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 29.3k, False: 558k]
  ------------------
 4027|  29.3k|                m_kind = float_kind::hex_with_prefix;
 4028|  29.3k|                it = *r;
 4029|  29.3k|            }
 4030|   558k|            else {
 4031|   558k|                m_kind = float_kind::hex_without_prefix;
 4032|   558k|            }
 4033|       |
 4034|   588k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   588k|        }
 4036|  1.95M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 718k, False: 1.23M]
  |  Branch (4036:29): [True: 718k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   718k|            m_kind = float_kind::generic;
 4040|   718k|            return read_regular_float(range);
 4041|   718k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.23M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.9k, False: 1.17M]
  |  |  ------------------
  ------------------
 4047|  65.9k|            m_kind = float_kind::hex_with_prefix;
 4048|  65.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  65.9k|        }
 4050|       |
 4051|  1.17M|        m_kind = float_kind::generic;
 4052|  1.17M|        return read_regular(range);
 4053|  1.23M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  2.68M|    {
 3811|  2.68M|        auto it = range.begin();
 3812|  2.68M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.64M, False: 40.2k]
  ------------------
 3813|  2.64M|            return unexpected(r.error());
 3814|  2.64M|        }
 3815|  40.2k|        else {
 3816|  40.2k|            it = *r;
 3817|  40.2k|        }
 3818|       |
 3819|  40.2k|        if (auto r = read_matching_string_classic_nocase(
 3820|  40.2k|                ranges::subrange{it, range.end()}, "inity");
 3821|  40.2k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 23.1k, False: 17.0k]
  ------------------
 3822|  23.1k|            m_kind = float_kind::inf_short;
 3823|  23.1k|            return it;
 3824|  23.1k|        }
 3825|  17.0k|        else {
 3826|  17.0k|            m_kind = float_kind::inf_long;
 3827|  17.0k|            return *r;
 3828|  17.0k|        }
 3829|  40.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  2.64M|    {
 3834|  2.64M|        auto it = range.begin();
 3835|  2.64M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.54M, False: 99.8k]
  ------------------
 3836|  2.54M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.54M|                scan_error::invalid_scanned_value,
 3838|  2.54M|                "Invalid floating-point NaN value"));
 3839|  2.54M|        }
 3840|  99.8k|        else {
 3841|  99.8k|            it = *r;
 3842|  99.8k|        }
 3843|       |
 3844|  99.8k|        if (auto r =
 3845|  99.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  99.8k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 96.0k, False: 3.86k]
  ------------------
 3847|  96.0k|            m_kind = float_kind::nan_simple;
 3848|  96.0k|            return it;
 3849|  96.0k|        }
 3850|  3.86k|        else {
 3851|  3.86k|            it = *r;
 3852|  3.86k|        }
 3853|       |
 3854|  3.86k|        auto payload_beg_it = it;
 3855|  3.86k|        it = read_while_code_unit(
 3856|  3.86k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.86k|                return is_ascii_char(ch) &&
 3858|  3.86k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.86k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.86k|            });
 3861|  3.86k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.86k|        m_kind = float_kind::nan_with_payload;
 3864|  3.86k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.19k]
  ------------------
 3865|  3.86k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.19k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.19k|                                     "Invalid floating-point NaN payload");
 3870|  3.86k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.86k|    {
  754|  3.86k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  24.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.3k|              cvref<T> obj = *get<T>(fn);
  745|  24.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.3k|              }
  748|  24.3k|              else {
  749|  24.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.3k|              }
  751|  24.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  24.3k|    {
  684|  24.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.3k|            return static_cast<T*>(s.m_cp);
  686|  24.3k|        }
  687|  24.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.3k|            return static_cast<T*>(s.m_p);
  689|  24.3k|        }
  690|  24.3k|        else {
  691|  24.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.3k|        }
  693|  24.3k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  24.3k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  24.3k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 24.1k, False: 243]
  ------------------
 3858|  24.3k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 21.3k, False: 2.76k]
  |  Branch (3858:39): [True: 13.5k, False: 7.79k]
  |  Branch (3858:54): [True: 2.55k, False: 8.00k]
  |  Branch (3858:67): [True: 2.47k, False: 83]
  ------------------
 3859|  24.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.85k]
  ------------------
 3860|  24.3k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.86k|        {
  662|  3.86k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.82M|    {
 3804|  1.82M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.82M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   654k|    {
 3904|   654k|        auto it = range.begin();
 3905|       |
 3906|   654k|        std::ptrdiff_t digits_count = 0;
 3907|   654k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   654k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   654k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 642k]
  |  |  ------------------
  ------------------
 3909|  12.0k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  12.0k|                scan_error::invalid_scanned_value,
 3911|  12.0k|                "Invalid hexadecimal floating-point value"));
 3912|  12.0k|        }
 3913|   642k|        else {
 3914|   642k|            digits_count += ranges::distance(it, *r);
 3915|   642k|            it = *r;
 3916|   642k|        }
 3917|       |
 3918|   642k|        m_integral_part_length = digits_count;
 3919|   642k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 85.4k, False: 556k]
  ------------------
 3920|   642k|                                             m_locale_options.decimal_point)) {
 3921|  85.4k|            it = *r;
 3922|  85.4k|        }
 3923|       |
 3924|   642k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 69.2k, False: 572k]
  ------------------
 3925|   642k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  69.2k|            digits_count += ranges::distance(it, *r);
 3927|  69.2k|            it = *r;
 3928|  69.2k|        }
 3929|       |
 3930|   642k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 642k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   642k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   642k|        return it;
 3938|   642k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.29M|    {
 3789|  1.29M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29M]
  |  |  |  Branch (859:45): [True: 0, False: 1.29M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.29M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.29M|        return read_while1_code_unit(
 3798|  1.29M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.29M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.29M|    {
  754|  1.29M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  6.72M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.72M|              cvref<T> obj = *get<T>(fn);
  745|  6.72M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.72M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.72M|              }
  748|  6.72M|              else {
  749|  6.72M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.72M|              }
  751|  6.72M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  6.72M|    {
  684|  6.72M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.72M|            return static_cast<T*>(s.m_cp);
  686|  6.72M|        }
  687|  6.72M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.72M|            return static_cast<T*>(s.m_p);
  689|  6.72M|        }
  690|  6.72M|        else {
  691|  6.72M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.72M|        }
  693|  6.72M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  6.72M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.29M|        {
  662|  1.29M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  2.24M|    {
 3876|  2.24M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 262k, False: 1.97M]
  ------------------
 3877|   262k|            auto beg_exp_it = range.begin();
 3878|   262k|            auto it = *r;
 3879|       |
 3880|   262k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 262k, False: 512]
  ------------------
 3881|   262k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   262k|                it = r_sign->first;
 3883|   262k|            }
 3884|       |
 3885|   262k|            if (auto r_exp = read_while1_code_unit(
 3886|   262k|                    ranges::subrange{it, range.end()},
 3887|   262k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   262k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.13k, False: 259k]
  |  |  ------------------
  ------------------
 3889|  3.13k|                it = beg_exp_it;
 3890|  3.13k|            }
 3891|   259k|            else {
 3892|   259k|                it = *r_exp;
 3893|   259k|            }
 3894|       |
 3895|   262k|            return it;
 3896|   262k|        }
 3897|  1.97M|        return range.begin();
 3898|  2.24M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   262k|    {
  754|   262k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   861k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   861k|              cvref<T> obj = *get<T>(fn);
  745|   861k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   861k|                  obj(static_cast<decltype(args)>(args)...);
  747|   861k|              }
  748|   861k|              else {
  749|   861k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   861k|              }
  751|   861k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   861k|    {
  684|   861k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   861k|            return static_cast<T*>(s.m_cp);
  686|   861k|        }
  687|   861k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   861k|            return static_cast<T*>(s.m_p);
  689|   861k|        }
  690|   861k|        else {
  691|   861k|            return reinterpret_cast<T*>(s.m_fp);
  692|   861k|        }
  693|   861k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   861k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   262k|        {
  662|   262k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.89M|    {
 3944|  1.89M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.89M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.64M, False: 243k]
  |  Branch (3945:50): [True: 34.9k, False: 1.61M]
  ------------------
 3946|       |
 3947|  1.89M|        auto it = ranges::begin(range);
 3948|  1.89M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.89M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.89M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.7k, False: 1.82M]
  |  |  ------------------
  ------------------
 3952|  64.7k|            return r.transform_error(
 3953|  64.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  64.7k|                                              "Invalid floating-point value"));
 3955|  64.7k|        }
 3956|  1.82M|        else {
 3957|  1.82M|            digits_count += ranges::distance(it, *r);
 3958|  1.82M|            it = *r;
 3959|  1.82M|        }
 3960|       |
 3961|  1.82M|        m_integral_part_length = digits_count;
 3962|  1.82M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 314k, False: 1.51M]
  ------------------
 3963|  1.82M|                                             m_locale_options.decimal_point)) {
 3964|   314k|            it = *r;
 3965|   314k|        }
 3966|       |
 3967|  1.82M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 270k, False: 1.55M]
  ------------------
 3968|  1.82M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   270k|            digits_count += ranges::distance(it, *r);
 3970|   270k|            it = *r;
 3971|   270k|        }
 3972|       |
 3973|  1.82M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.82M|        auto beg_exp_it = it;
 3979|  1.82M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.59M, False: 225k]
  ------------------
 3980|  1.59M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.59M|        }
 3982|  1.82M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 33.8k, False: 1.79M]
  |  Branch (3982:29): [True: 18.1k, False: 15.7k]
  ------------------
 3983|  18.1k|            return unexpected_scan_error(
 3984|  18.1k|                scan_error::invalid_scanned_value,
 3985|  18.1k|                "No exponent given to scientific float");
 3986|  18.1k|        }
 3987|       |
 3988|  1.80M|        m_kind =
 3989|  1.80M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.54M, False: 259k]
  ------------------
 3990|       |
 3991|  1.80M|        return it;
 3992|  1.82M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  3.71M|    {
 3774|  3.71M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.71M]
  |  |  |  Branch (859:45): [True: 0, False: 3.71M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  3.71M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  3.71M|        return read_while1_code_unit(
 3783|  3.71M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  3.71M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.71M|    {
  754|  3.71M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  21.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.3M|              cvref<T> obj = *get<T>(fn);
  745|  21.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.3M|              }
  748|  21.3M|              else {
  749|  21.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.3M|              }
  751|  21.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  21.3M|    {
  684|  21.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.3M|            return static_cast<T*>(s.m_cp);
  686|  21.3M|        }
  687|  21.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.3M|            return static_cast<T*>(s.m_p);
  689|  21.3M|        }
  690|  21.3M|        else {
  691|  21.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.3M|        }
  693|  21.3M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  21.3M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.71M|        {
  662|  3.71M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.45M|    {
 1577|  2.45M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.45M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   172k|        {
  662|   172k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   441k|    {
  754|   441k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   441k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   441k|              cvref<T> obj = *get<T>(fn);
  745|   441k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   441k|                  obj(static_cast<decltype(args)>(args)...);
  747|   441k|              }
  748|   441k|              else {
  749|   441k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   441k|              }
  751|   441k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   441k|    {
  684|   441k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   441k|            return static_cast<T*>(s.m_cp);
  686|   441k|        }
  687|   441k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   441k|            return static_cast<T*>(s.m_p);
  689|   441k|        }
  690|   441k|        else {
  691|   441k|            return reinterpret_cast<T*>(s.m_fp);
  692|   441k|        }
  693|   441k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   441k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   441k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   441k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  2.12M|    {
 3665|  2.12M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.12M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.12M|        return read_source_impl(range);
 3671|  2.12M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   441k|        {
  662|   441k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   584k|    {
 4170|   584k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   584k|#if !SCN_DISABLE_LOCALE
 4173|   584k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 163k, False: 421k]
  ------------------
 4174|   163k|            return read_impl<Range>(
 4175|   163k|                range, rd,
 4176|   163k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   163k|                },
 4179|   163k|                value, loc);
 4180|   163k|        }
 4181|   421k|#endif
 4182|       |
 4183|   421k|        return read_impl<Range>(
 4184|   421k|            range, rd,
 4185|   421k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   421k|                return r.read_source(SCN_FWD(args)...);
 4187|   421k|            },
 4188|   421k|            value);
 4189|   584k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   830k|    {
 4206|   830k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   830k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   830k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 812k]
  |  |  ------------------
  ------------------
 4208|  17.5k|            return unexpected(r.error());
 4209|  17.5k|        }
 4210|       |
 4211|   812k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   812k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   812k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   812k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   812k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 793k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.8k|    }                                                  \
  |  |  |  | 3671|   812k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   793k|        return ranges::next(range.begin(), n);
 4213|   812k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.63M|    {
  763|  2.63M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.63M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   163k|    {
  754|   163k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|   163k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   163k|                  obj(static_cast<decltype(args)>(args)...);
  747|   163k|              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   163k|    {
  684|   163k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   163k|            return static_cast<T*>(s.m_cp);
  686|   163k|        }
  687|   163k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   163k|            return static_cast<T*>(s.m_p);
  689|   163k|        }
  690|   163k|        else {
  691|   163k|            return reinterpret_cast<T*>(s.m_fp);
  692|   163k|        }
  693|   163k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   163k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   163k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   528k|    {
 3679|   528k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   528k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   528k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 528k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   528k|        return read_source_impl(range);
 3685|   528k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  2.63M|    {
 3705|  2.63M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  2.63M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.63M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.63M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.63M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.63M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.63M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.63M|        auto it = sign_result.first;
 3708|  2.63M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.63M|        auto digits_begin = it;
 3711|  2.63M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.63M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.63M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.63M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  5.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.63M]
  |  |  |  Branch (859:45): [True: 0, False: 2.63M]
  |  |  |  Branch (859:45): [True: 0, False: 2.63M]
  |  |  ------------------
  ------------------
 3715|  2.63M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  2.63M|            else {
 3724|  2.63M|                auto cb = [&](const auto& rr)
 3725|  2.63M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.63M|                    auto res = read_all(rr);
 3727|  2.63M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.63M|                        return unexpected_scan_error(
 3729|  2.63M|                            scan_error::invalid_scanned_value,
 3730|  2.63M|                            "Invalid float value");
 3731|  2.63M|                    }
 3732|  2.63M|                    return res;
 3733|  2.63M|                };
 3734|  2.63M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  2.63M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.63M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 54.7k, False: 2.57M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  54.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  54.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  54.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  54.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  54.7k|    }                                                  \
  |  | 3671|  2.63M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.57M|            }
 3736|  2.63M|        }
 3737|  2.57M|        else {
 3738|  2.57M|            SCN_TRY_ASSIGN(
 3739|  2.57M|                it,
 3740|  2.57M|                do_read_source_impl(
 3741|  2.57M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.57M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.57M|        }
 3744|       |
 3745|  2.57M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.57M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.55M, False: 22.7k]
  |  Branch (3747:48): [True: 2.53M, False: 16.9k]
  ------------------
 3748|  2.57M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.44M, False: 95.8k]
  ------------------
 3749|  2.57M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.44M, False: 2.65k]
  ------------------
 3750|  2.44M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.44M|        }
 3752|       |
 3753|  2.57M|        handle_separators();
 3754|       |
 3755|  2.57M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.57M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.57M|        return it;
 3768|  2.57M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  2.63M|    {
 3811|  2.63M|        auto it = range.begin();
 3812|  2.63M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.59M, False: 39.6k]
  ------------------
 3813|  2.59M|            return unexpected(r.error());
 3814|  2.59M|        }
 3815|  39.6k|        else {
 3816|  39.6k|            it = *r;
 3817|  39.6k|        }
 3818|       |
 3819|  39.6k|        if (auto r = read_matching_string_classic_nocase(
 3820|  39.6k|                ranges::subrange{it, range.end()}, "inity");
 3821|  39.6k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.7k, False: 16.9k]
  ------------------
 3822|  22.7k|            m_kind = float_kind::inf_short;
 3823|  22.7k|            return it;
 3824|  22.7k|        }
 3825|  16.9k|        else {
 3826|  16.9k|            m_kind = float_kind::inf_long;
 3827|  16.9k|            return *r;
 3828|  16.9k|        }
 3829|  39.6k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  2.59M|    {
 3834|  2.59M|        auto it = range.begin();
 3835|  2.59M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.49M, False: 99.6k]
  ------------------
 3836|  2.49M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.49M|                scan_error::invalid_scanned_value,
 3838|  2.49M|                "Invalid floating-point NaN value"));
 3839|  2.49M|        }
 3840|  99.6k|        else {
 3841|  99.6k|            it = *r;
 3842|  99.6k|        }
 3843|       |
 3844|  99.6k|        if (auto r =
 3845|  99.6k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  99.6k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 95.8k, False: 3.80k]
  ------------------
 3847|  95.8k|            m_kind = float_kind::nan_simple;
 3848|  95.8k|            return it;
 3849|  95.8k|        }
 3850|  3.80k|        else {
 3851|  3.80k|            it = *r;
 3852|  3.80k|        }
 3853|       |
 3854|  3.80k|        auto payload_beg_it = it;
 3855|  3.80k|        it = read_while_code_unit(
 3856|  3.80k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.80k|                return is_ascii_char(ch) &&
 3858|  3.80k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.80k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.80k|            });
 3861|  3.80k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.80k|        m_kind = float_kind::nan_with_payload;
 3864|  3.80k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.14k]
  ------------------
 3865|  3.80k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.14k|                                     "Invalid floating-point NaN payload");
 3870|  3.80k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.80k|    {
  754|  3.80k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.7k|              cvref<T> obj = *get<T>(fn);
  745|  23.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.7k|              }
  748|  23.7k|              else {
  749|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.7k|              }
  751|  23.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.7k|    {
  684|  23.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.7k|            return static_cast<T*>(s.m_cp);
  686|  23.7k|        }
  687|  23.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.7k|            return static_cast<T*>(s.m_p);
  689|  23.7k|        }
  690|  23.7k|        else {
  691|  23.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.7k|        }
  693|  23.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  23.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.6k, False: 191]
  ------------------
 3858|  23.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.8k, False: 2.76k]
  |  Branch (3858:39): [True: 13.0k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 8.00k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  23.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.84k]
  ------------------
 3860|  23.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.80k|        {
  662|  3.80k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.80M|    {
 3804|  1.80M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.80M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.42M|{
 1996|  1.42M|    auto it = read_while_code_unit(range, pred);
 1997|  1.42M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 583k, False: 838k]
  ------------------
 1998|   583k|        return unexpected(parse_error::error);
 1999|   583k|    }
 2000|   838k|    return it;
 2001|  1.42M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   437k|    {
 3876|   437k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 83.8k, False: 353k]
  ------------------
 3877|  83.8k|            auto beg_exp_it = range.begin();
 3878|  83.8k|            auto it = *r;
 3879|       |
 3880|  83.8k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 83.7k, False: 162]
  ------------------
 3881|  83.8k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  83.7k|                it = r_sign->first;
 3883|  83.7k|            }
 3884|       |
 3885|  83.8k|            if (auto r_exp = read_while1_code_unit(
 3886|  83.8k|                    ranges::subrange{it, range.end()},
 3887|  83.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  83.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10k, False: 82.7k]
  |  |  ------------------
  ------------------
 3889|  1.10k|                it = beg_exp_it;
 3890|  1.10k|            }
 3891|  82.7k|            else {
 3892|  82.7k|                it = *r_exp;
 3893|  82.7k|            }
 3894|       |
 3895|  83.8k|            return it;
 3896|  83.8k|        }
 3897|   353k|        return range.begin();
 3898|   437k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  83.8k|    {
  754|  83.8k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   264k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   264k|              cvref<T> obj = *get<T>(fn);
  745|   264k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   264k|                  obj(static_cast<decltype(args)>(args)...);
  747|   264k|              }
  748|   264k|              else {
  749|   264k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   264k|              }
  751|   264k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   264k|    {
  684|   264k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   264k|            return static_cast<T*>(s.m_cp);
  686|   264k|        }
  687|   264k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   264k|            return static_cast<T*>(s.m_p);
  689|   264k|        }
  690|   264k|        else {
  691|   264k|            return reinterpret_cast<T*>(s.m_fp);
  692|   264k|        }
  693|   264k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   264k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  83.8k|        {
  662|  83.8k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   686k|    {
 3944|   686k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   686k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 453k, False: 232k]
  |  Branch (3945:50): [True: 34.9k, False: 418k]
  ------------------
 3946|       |
 3947|   686k|        auto it = ranges::begin(range);
 3948|   686k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   686k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   686k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.1k, False: 651k]
  |  |  ------------------
  ------------------
 3952|  34.1k|            return r.transform_error(
 3953|  34.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  34.1k|                                              "Invalid floating-point value"));
 3955|  34.1k|        }
 3956|   651k|        else {
 3957|   651k|            digits_count += ranges::distance(it, *r);
 3958|   651k|            it = *r;
 3959|   651k|        }
 3960|       |
 3961|   651k|        m_integral_part_length = digits_count;
 3962|   651k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 119k, False: 532k]
  ------------------
 3963|   651k|                                             m_locale_options.decimal_point)) {
 3964|   119k|            it = *r;
 3965|   119k|        }
 3966|       |
 3967|   651k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 104k, False: 547k]
  ------------------
 3968|   651k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   104k|            digits_count += ranges::distance(it, *r);
 3970|   104k|            it = *r;
 3971|   104k|        }
 3972|       |
 3973|   651k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 651k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   651k|        auto beg_exp_it = it;
 3979|   651k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 437k, False: 214k]
  ------------------
 3980|   437k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   437k|        }
 3982|   651k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 33.6k, False: 618k]
  |  Branch (3982:29): [True: 18.1k, False: 15.5k]
  ------------------
 3983|  18.1k|            return unexpected_scan_error(
 3984|  18.1k|                scan_error::invalid_scanned_value,
 3985|  18.1k|                "No exponent given to scientific float");
 3986|  18.1k|        }
 3987|       |
 3988|   633k|        m_kind =
 3989|   633k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 551k, False: 82.7k]
  ------------------
 3990|       |
 3991|   633k|        return it;
 3992|   651k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.33M|    {
 3774|  1.33M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.33M]
  |  |  |  Branch (859:45): [True: 0, False: 1.33M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.33M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.33M|        return read_while1_code_unit(
 3783|  1.33M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.33M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.33M|    {
  754|  1.33M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  8.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.06M|              cvref<T> obj = *get<T>(fn);
  745|  8.06M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.06M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.06M|              }
  748|  8.06M|              else {
  749|  8.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.06M|              }
  751|  8.06M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  8.06M|    {
  684|  8.06M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.06M|            return static_cast<T*>(s.m_cp);
  686|  8.06M|        }
  687|  8.06M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.06M|            return static_cast<T*>(s.m_p);
  689|  8.06M|        }
  690|  8.06M|        else {
  691|  8.06M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.06M|        }
  693|  8.06M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  8.06M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.33M|        {
  662|  1.33M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  2.63M|    {
 4000|  2.63M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.63M|        const bool allowed_nonhex =
 4002|  2.63M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.63M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.63M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.59M, False: 39.6k]
  |  Branch (4005:45): [True: 0, False: 2.59M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.63M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 39.6k, False: 2.59M]
  ------------------
 4011|  39.6k|            return *r;
 4012|  39.6k|        }
 4013|       |
 4014|  2.59M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.49M, False: 98.5k]
  |  Branch (4014:45): [True: 1.14k, False: 2.49M]
  ------------------
 4015|  1.14k|            return unexpected(r.error());
 4016|  1.14k|        }
 4017|  2.59M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 98.5k, False: 2.49M]
  ------------------
 4018|  98.5k|            return *r;
 4019|  98.5k|        }
 4020|       |
 4021|  2.49M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.80M, False: 686k]
  |  Branch (4021:28): [True: 558k, False: 1.24M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   558k|            auto it = range.begin();
 4025|       |
 4026|   558k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 28.2k, False: 529k]
  ------------------
 4027|  28.2k|                m_kind = float_kind::hex_with_prefix;
 4028|  28.2k|                it = *r;
 4029|  28.2k|            }
 4030|   529k|            else {
 4031|   529k|                m_kind = float_kind::hex_without_prefix;
 4032|   529k|            }
 4033|       |
 4034|   558k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   558k|        }
 4036|  1.93M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 686k, False: 1.24M]
  |  Branch (4036:29): [True: 686k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   686k|            m_kind = float_kind::generic;
 4040|   686k|            return read_regular_float(range);
 4041|   686k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.24M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.4k, False: 1.18M]
  |  |  ------------------
  ------------------
 4047|  69.4k|            m_kind = float_kind::hex_with_prefix;
 4048|  69.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  69.4k|        }
 4050|       |
 4051|  1.18M|        m_kind = float_kind::generic;
 4052|  1.18M|        return read_regular(range);
 4053|  1.24M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.80M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.80M|                    auto res = read_all(rr);
 3727|  1.80M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.28k, False: 1.80M]
  |  |  ------------------
  ------------------
 3728|  1.28k|                        return unexpected_scan_error(
 3729|  1.28k|                            scan_error::invalid_scanned_value,
 3730|  1.28k|                            "Invalid float value");
 3731|  1.28k|                    }
 3732|  1.80M|                    return res;
 3733|  1.80M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.80M|{
 1839|  1.80M|    return ranges::next(range.begin(), range.end());
 1840|  1.80M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.80M|    {
  313|  1.80M|        ranges::advance(x, bound);
  314|  1.80M|        return x;
  315|  1.80M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.80M|    {
  275|  1.80M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.80M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.80M|    {
  190|  1.80M|        i = std::move(bound);
  191|  1.80M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.44M|    {
 1577|  2.44M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.44M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.44M|    {
 1621|  2.44M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.44M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.44M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.44M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.44M|            m_storage.reset();
 1627|  2.44M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.44M|        }
 1629|  2.44M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.44M|                                          std::basic_string<CharT>>) {
 1631|  2.44M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.44M|            m_view = string_view_type{*m_storage};
 1633|  2.44M|        }
 1634|  2.44M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.44M|                                          typename detail::basic_scan_buffer<
 1636|  2.44M|                                              value_t>::forward_iterator> &&
 1637|  2.44M|                           ranges::common_range<Range>) {
 1638|  2.44M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.44M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.44M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.44M|                             detail::to_address(end_seg.end()))) {
 1642|  2.44M|                auto& str = m_storage.emplace();
 1643|  2.44M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.44M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.44M|                m_view = string_view_type{str};
 1646|  2.44M|                return;
 1647|  2.44M|            }
 1648|       |
 1649|  2.44M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.44M|                                                            end_seg.data());
 1651|  2.44M|            m_storage.reset();
 1652|  2.44M|        }
 1653|  2.44M|        else {
 1654|  2.44M|            auto& str = m_storage.emplace();
 1655|  2.44M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.44M|                str.reserve(range.size());
 1657|  2.44M|            }
 1658|  2.44M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.44M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.44M|                          std::back_inserter(str));
 1661|  2.44M|            }
 1662|  2.44M|            else {
 1663|  2.44M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.44M|                     ++it) {
 1665|  2.44M|                    str.push_back(*it);
 1666|  2.44M|                }
 1667|  2.44M|            }
 1668|  2.44M|            m_view = string_view_type{str};
 1669|  2.44M|        }
 1670|  2.44M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   163k|        {
  662|   163k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   421k|    {
  754|   421k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   421k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   421k|              cvref<T> obj = *get<T>(fn);
  745|   421k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   421k|                  obj(static_cast<decltype(args)>(args)...);
  747|   421k|              }
  748|   421k|              else {
  749|   421k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   421k|              }
  751|   421k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   421k|    {
  684|   421k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   421k|            return static_cast<T*>(s.m_cp);
  686|   421k|        }
  687|   421k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   421k|            return static_cast<T*>(s.m_p);
  689|   421k|        }
  690|   421k|        else {
  691|   421k|            return reinterpret_cast<T*>(s.m_fp);
  692|   421k|        }
  693|   421k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   421k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   421k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   421k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  2.10M|    {
 3665|  2.10M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.10M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.10M|        return read_source_impl(range);
 3671|  2.10M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   421k|        {
  662|   421k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   662k|    {
 6193|   662k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   662k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   662k|            auto rd = make_reader<T, char_type>();
 6198|   662k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   662k|                return unexpected(e);
 6200|   662k|            }
 6201|       |
 6202|   662k|            return impl(rd, range, value);
 6203|   662k|        }
 6204|   662k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   662k|            auto rd = make_reader<T, char_type>();
 6206|   662k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   662k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 662k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   662k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   662k|                return impl(rd, range, value);
 6213|   662k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   662k|        else {
 6221|   662k|            SCN_EXPECT(false);
 6222|   662k|            SCN_UNREACHABLE;
 6223|   662k|        }
 6224|   662k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   662k|    {
 6124|   662k|        const bool need_skipped_width =
 6125|   662k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 662k]
  |  Branch (6125:33): [True: 0, False: 662k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   662k|        auto it = rng.begin();
 6129|   662k|        std::ptrdiff_t prefix_width = 0;
 6130|   662k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 662k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   662k|        else {
 6138|   662k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   662k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   662k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   662k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.61k, False: 654k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.61k|    }                                                  \
  |  |  |  | 3671|   662k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   654k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   654k|            std::tie(it, prefix_width) = prefix_result;
 6140|   654k|        }
 6141|   654k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   654k|        std::ptrdiff_t value_width = 0;
 6145|   654k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 654k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   654k|        else {
 6161|   654k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   654k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   654k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   654k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.2k, False: 627k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  27.2k|    }                                                  \
  |  | 3671|   654k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   654k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   627k|                                             specs, value, loc));
 6163|       |
 6164|   627k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 627k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   627k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   627k|        std::ptrdiff_t postfix_width = 0;
 6173|   627k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 621k, False: 5.88k]
  ------------------
 6174|   621k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   621k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   621k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   621k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 621k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   621k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   621k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   621k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   621k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   621k|                                 value_width));
 6178|   621k|            std::tie(it, postfix_width) = postfix_result;
 6179|   621k|        }
 6180|       |
 6181|   627k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   627k|                                                 value_width, postfix_width);
 6183|   627k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 627k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   627k|        return it;
 6188|   627k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.75M|    {
 3691|  1.75M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.75M|        const std::ptrdiff_t sign_len =
 3694|  1.75M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 491k, False: 1.26M]
  ------------------
 3695|       |
 3696|  1.75M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.75M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.75M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.75M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.8k, False: 1.73M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  20.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  20.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  20.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  20.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  20.8k|    }                                                  \
  |  |  |  | 3671|  1.75M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.73M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.75M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   654k|    {
 4170|   654k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   654k|#if !SCN_DISABLE_LOCALE
 4173|   654k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 189k, False: 465k]
  ------------------
 4174|   189k|            return read_impl<Range>(
 4175|   189k|                range, rd,
 4176|   189k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   189k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   189k|                },
 4179|   189k|                value, loc);
 4180|   189k|        }
 4181|   465k|#endif
 4182|       |
 4183|   465k|        return read_impl<Range>(
 4184|   465k|            range, rd,
 4185|   465k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   465k|                return r.read_source(SCN_FWD(args)...);
 4187|   465k|            },
 4188|   465k|            value);
 4189|   654k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   913k|    {
 4206|   913k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   913k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 881k]
  |  |  ------------------
  ------------------
 4208|  32.4k|            return unexpected(r.error());
 4209|  32.4k|        }
 4210|       |
 4211|   881k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   881k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   881k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   881k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   881k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.78k, False: 878k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.78k|    }                                                  \
  |  |  |  | 3671|   881k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   878k|        return ranges::next(range.begin(), n);
 4213|   881k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   189k|    {
  754|   189k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|   189k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   189k|                  obj(static_cast<decltype(args)>(args)...);
  747|   189k|              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   189k|    {
  684|   189k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   189k|            return static_cast<T*>(s.m_cp);
  686|   189k|        }
  687|   189k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   189k|            return static_cast<T*>(s.m_p);
  689|   189k|        }
  690|   189k|        else {
  691|   189k|            return reinterpret_cast<T*>(s.m_fp);
  692|   189k|        }
  693|   189k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   189k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   189k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   189k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   189k|        {
  662|   189k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   465k|    {
  754|   465k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   465k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   465k|              cvref<T> obj = *get<T>(fn);
  745|   465k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   465k|                  obj(static_cast<decltype(args)>(args)...);
  747|   465k|              }
  748|   465k|              else {
  749|   465k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   465k|              }
  751|   465k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   465k|    {
  684|   465k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   465k|            return static_cast<T*>(s.m_cp);
  686|   465k|        }
  687|   465k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   465k|            return static_cast<T*>(s.m_p);
  689|   465k|        }
  690|   465k|        else {
  691|   465k|            return reinterpret_cast<T*>(s.m_fp);
  692|   465k|        }
  693|   465k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   465k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   465k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   465k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   465k|        {
  662|   465k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   624k|    {
 4170|   624k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   624k|#if !SCN_DISABLE_LOCALE
 4173|   624k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 180k, False: 443k]
  ------------------
 4174|   180k|            return read_impl<Range>(
 4175|   180k|                range, rd,
 4176|   180k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   180k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   180k|                },
 4179|   180k|                value, loc);
 4180|   180k|        }
 4181|   443k|#endif
 4182|       |
 4183|   443k|        return read_impl<Range>(
 4184|   443k|            range, rd,
 4185|   443k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   443k|                return r.read_source(SCN_FWD(args)...);
 4187|   443k|            },
 4188|   443k|            value);
 4189|   624k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   895k|    {
 4206|   895k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   895k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 877k]
  |  |  ------------------
  ------------------
 4208|  18.3k|            return unexpected(r.error());
 4209|  18.3k|        }
 4210|       |
 4211|   877k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   877k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   877k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   877k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.0k, False: 859k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.0k|    }                                                  \
  |  |  |  | 3671|   877k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   859k|        return ranges::next(range.begin(), n);
 4213|   877k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   180k|    {
  754|   180k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|   180k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   180k|                  obj(static_cast<decltype(args)>(args)...);
  747|   180k|              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   180k|    {
  684|   180k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   180k|            return static_cast<T*>(s.m_cp);
  686|   180k|        }
  687|   180k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   180k|            return static_cast<T*>(s.m_p);
  689|   180k|        }
  690|   180k|        else {
  691|   180k|            return reinterpret_cast<T*>(s.m_fp);
  692|   180k|        }
  693|   180k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   180k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   180k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   180k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   180k|        {
  662|   180k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   443k|    {
  754|   443k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   443k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   443k|              cvref<T> obj = *get<T>(fn);
  745|   443k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   443k|                  obj(static_cast<decltype(args)>(args)...);
  747|   443k|              }
  748|   443k|              else {
  749|   443k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   443k|              }
  751|   443k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   443k|    {
  684|   443k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   443k|            return static_cast<T*>(s.m_cp);
  686|   443k|        }
  687|   443k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   443k|            return static_cast<T*>(s.m_p);
  689|   443k|        }
  690|   443k|        else {
  691|   443k|            return reinterpret_cast<T*>(s.m_fp);
  692|   443k|        }
  693|   443k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   443k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   443k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   443k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   443k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   443k|        {
  662|   443k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   669k|    {
 6193|   669k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   669k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   669k|            auto rd = make_reader<T, char_type>();
 6198|   669k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   669k|                return unexpected(e);
 6200|   669k|            }
 6201|       |
 6202|   669k|            return impl(rd, range, value);
 6203|   669k|        }
 6204|   669k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   669k|            auto rd = make_reader<T, char_type>();
 6206|   669k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 669k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   669k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 669k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   669k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   669k|                return impl(rd, range, value);
 6213|   669k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   669k|        else {
 6221|   669k|            SCN_EXPECT(false);
 6222|   669k|            SCN_UNREACHABLE;
 6223|   669k|        }
 6224|   669k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   669k|    {
 6124|   669k|        const bool need_skipped_width =
 6125|   669k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 669k]
  |  Branch (6125:33): [True: 0, False: 669k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   669k|        auto it = rng.begin();
 6129|   669k|        std::ptrdiff_t prefix_width = 0;
 6130|   669k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 669k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   669k|        else {
 6138|   669k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   669k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   669k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   669k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.07k, False: 661k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.07k|    }                                                  \
  |  |  |  | 3671|   669k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   661k|            std::tie(it, prefix_width) = prefix_result;
 6140|   661k|        }
 6141|   661k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   661k|        std::ptrdiff_t value_width = 0;
 6145|   661k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 661k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   661k|        else {
 6161|   661k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   661k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   661k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.7k, False: 634k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  26.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  26.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  26.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  26.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  26.7k|    }                                                  \
  |  | 3671|   661k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   634k|                                             specs, value, loc));
 6163|       |
 6164|   634k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 634k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   634k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   634k|        std::ptrdiff_t postfix_width = 0;
 6173|   634k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 628k, False: 6.27k]
  ------------------
 6174|   628k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   628k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   628k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   628k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   628k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   628k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   628k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   628k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   628k|                                 value_width));
 6178|   628k|            std::tie(it, postfix_width) = postfix_result;
 6179|   628k|        }
 6180|       |
 6181|   634k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   634k|                                                 value_width, postfix_width);
 6183|   634k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 634k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   634k|        return it;
 6188|   634k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.77M|    {
 3691|  1.77M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.77M|        const std::ptrdiff_t sign_len =
 3694|  1.77M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 503k, False: 1.27M]
  ------------------
 3695|       |
 3696|  1.77M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.77M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.9k, False: 1.75M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.9k|    }                                                  \
  |  |  |  | 3671|  1.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.75M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.77M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   661k|    {
 4170|   661k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   661k|#if !SCN_DISABLE_LOCALE
 4173|   661k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 193k, False: 468k]
  ------------------
 4174|   193k|            return read_impl<Range>(
 4175|   193k|                range, rd,
 4176|   193k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   193k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   193k|                },
 4179|   193k|                value, loc);
 4180|   193k|        }
 4181|   468k|#endif
 4182|       |
 4183|   468k|        return read_impl<Range>(
 4184|   468k|            range, rd,
 4185|   468k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   468k|                return r.read_source(SCN_FWD(args)...);
 4187|   468k|            },
 4188|   468k|            value);
 4189|   661k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   923k|    {
 4206|   923k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   923k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.7k, False: 889k]
  |  |  ------------------
  ------------------
 4208|  33.7k|            return unexpected(r.error());
 4209|  33.7k|        }
 4210|       |
 4211|   889k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   889k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   889k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   889k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   889k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 867, False: 888k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    867|    }                                                  \
  |  |  |  | 3671|   889k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   888k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   888k|        return ranges::next(range.begin(), n);
 4213|   889k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   193k|    {
  754|   193k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   193k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   193k|              cvref<T> obj = *get<T>(fn);
  745|   193k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   193k|                  obj(static_cast<decltype(args)>(args)...);
  747|   193k|              }
  748|   193k|              else {
  749|   193k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   193k|              }
  751|   193k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   193k|    {
  684|   193k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   193k|            return static_cast<T*>(s.m_cp);
  686|   193k|        }
  687|   193k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   193k|            return static_cast<T*>(s.m_p);
  689|   193k|        }
  690|   193k|        else {
  691|   193k|            return reinterpret_cast<T*>(s.m_fp);
  692|   193k|        }
  693|   193k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   193k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   193k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   193k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   193k|        {
  662|   193k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   468k|    {
  754|   468k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   468k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   468k|              cvref<T> obj = *get<T>(fn);
  745|   468k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   468k|                  obj(static_cast<decltype(args)>(args)...);
  747|   468k|              }
  748|   468k|              else {
  749|   468k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   468k|              }
  751|   468k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   468k|    {
  684|   468k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   468k|            return static_cast<T*>(s.m_cp);
  686|   468k|        }
  687|   468k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   468k|            return static_cast<T*>(s.m_p);
  689|   468k|        }
  690|   468k|        else {
  691|   468k|            return reinterpret_cast<T*>(s.m_fp);
  692|   468k|        }
  693|   468k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   468k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   468k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   468k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   468k|        {
  662|   468k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   631k|    {
 4170|   631k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   631k|#if !SCN_DISABLE_LOCALE
 4173|   631k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 183k, False: 447k]
  ------------------
 4174|   183k|            return read_impl<Range>(
 4175|   183k|                range, rd,
 4176|   183k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   183k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   183k|                },
 4179|   183k|                value, loc);
 4180|   183k|        }
 4181|   447k|#endif
 4182|       |
 4183|   447k|        return read_impl<Range>(
 4184|   447k|            range, rd,
 4185|   447k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   447k|                return r.read_source(SCN_FWD(args)...);
 4187|   447k|            },
 4188|   447k|            value);
 4189|   631k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   906k|    {
 4206|   906k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   906k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 887k]
  |  |  ------------------
  ------------------
 4208|  18.8k|            return unexpected(r.error());
 4209|  18.8k|        }
 4210|       |
 4211|   887k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   887k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   887k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   887k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   887k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.0k, False: 870k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.0k|    }                                                  \
  |  |  |  | 3671|   887k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   870k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   870k|        return ranges::next(range.begin(), n);
 4213|   887k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   183k|    {
  754|   183k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   183k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   183k|              cvref<T> obj = *get<T>(fn);
  745|   183k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   183k|                  obj(static_cast<decltype(args)>(args)...);
  747|   183k|              }
  748|   183k|              else {
  749|   183k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   183k|              }
  751|   183k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   183k|    {
  684|   183k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   183k|            return static_cast<T*>(s.m_cp);
  686|   183k|        }
  687|   183k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   183k|            return static_cast<T*>(s.m_p);
  689|   183k|        }
  690|   183k|        else {
  691|   183k|            return reinterpret_cast<T*>(s.m_fp);
  692|   183k|        }
  693|   183k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   183k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   183k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   183k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   183k|        {
  662|   183k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   447k|    {
  754|   447k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   447k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   447k|              cvref<T> obj = *get<T>(fn);
  745|   447k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   447k|                  obj(static_cast<decltype(args)>(args)...);
  747|   447k|              }
  748|   447k|              else {
  749|   447k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   447k|              }
  751|   447k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   447k|    {
  684|   447k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   447k|            return static_cast<T*>(s.m_cp);
  686|   447k|        }
  687|   447k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   447k|            return static_cast<T*>(s.m_p);
  689|   447k|        }
  690|   447k|        else {
  691|   447k|            return reinterpret_cast<T*>(s.m_fp);
  692|   447k|        }
  693|   447k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   447k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   447k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   447k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   447k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   447k|        {
  662|   447k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.70M|{
 1039|  2.70M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.70M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.70M|        return r;
 1042|  2.70M|    }
 1043|  2.70M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.70M|                           ranges::const_iterator_t<Range>,
 1045|  2.70M|                           typename detail::basic_scan_buffer<
 1046|  2.70M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.70M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.70M|            auto seg = r.begin().contiguous_segment();
 1049|  2.70M|            auto dist =
 1050|  2.70M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.70M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.70M|        }
 1053|  2.70M|        else {
 1054|  2.70M|            return r.begin().contiguous_segment();
 1055|  2.70M|        }
 1056|  2.70M|    }
 1057|  2.70M|    else {
 1058|  2.70M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.70M|    }
 1060|  2.70M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.39M|{
 2061|  2.39M|    auto it = range.begin();
 2062|  4.60M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.58M, False: 23.5k]
  ------------------
 2063|  4.58M|        const auto val =
 2064|  4.58M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.58M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.58M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.56M, False: 10.7k]
  |  |  ------------------
  ------------------
 2066|  4.56M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.56M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.56M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.36M, False: 2.20M]
  ------------------
 2069|  2.36M|                return it;
 2070|  2.36M|            }
 2071|  4.56M|        }
 2072|  2.21M|        it = val.iterator;
 2073|  2.21M|    }
 2074|       |
 2075|  23.5k|    return it;
 2076|  2.39M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  4.58M|{
 1899|  4.58M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.58M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.58M|    auto it = range.begin();
 1903|  4.58M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.58M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 4.56M]
  |  |  ------------------
  ------------------
 1906|  10.7k|        ++it;
 1907|  10.7k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  10.7k|        return {it, {}};
 1909|  10.7k|    }
 1910|       |
 1911|  4.56M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.50M, False: 65.4k]
  ------------------
 1912|  4.50M|        ++it;
 1913|  4.50M|        return {it, string_type(1, *range.begin())};
 1914|  4.50M|    }
 1915|       |
 1916|  65.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  65.4k|    return {it, string_type{range.begin(), it}};
 1918|  4.56M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  10.7k|{
 1155|  10.7k|    auto it = input.begin();
 1156|   115k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 113k, False: 1.69k]
  ------------------
 1157|   113k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.06k, False: 104k]
  ------------------
 1158|  9.06k|            break;
 1159|  9.06k|        }
 1160|   113k|    }
 1161|  10.7k|    return it;
 1162|  10.7k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  65.4k|    {
  283|  65.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  65.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  65.4k|    {
  252|  65.4k|        constexpr iter_difference_t<I> zero{0};
  253|  65.4k|        iter_difference_t<I> counter{0};
  254|       |
  255|   199k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 135k, False: 64.3k]
  |  Branch (255:30): [True: 134k, False: 1.14k]
  ------------------
  256|   134k|            ++i;
  257|   134k|            ++counter;
  258|   134k|        }
  259|       |
  260|  65.4k|        return counter;
  261|  65.4k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  4.58M|    {
 1890|  4.58M|        return !codepoint.empty();
 1891|  4.58M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.39M|{
 2082|  2.39M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.39M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.70M|{
 2951|  2.70M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.70M, False: 0]
  ------------------
 2952|  2.70M|        auto it = read_while_classic_space(range);
 2953|  2.70M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.70M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.5k, False: 2.68M]
  |  |  ------------------
  ------------------
 2955|  23.5k|            return unexpected(e);
 2956|  23.5k|        }
 2957|       |
 2958|  2.68M|        return it;
 2959|  2.70M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.70M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.70M|{
 2117|  2.70M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.70M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.70M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.70M|        auto buf = make_contiguous_buffer(range);
 2121|  2.70M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.70M|        return ranges::next(range.begin(),
 2123|  2.70M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.70M|    }
 2125|  2.70M|    else {
 2126|  2.70M|        auto it = range.begin();
 2127|       |
 2128|  2.70M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.70M|            auto seg = get_contiguous_beginning(range);
 2130|  2.70M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.70M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 316k, False: 2.39M]
  ------------------
 2132|   316k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   316k|            }
 2134|  2.39M|            ranges::advance(it, seg.size());
 2135|  2.39M|        }
 2136|       |
 2137|  2.39M|        return read_while_code_point(
 2138|  2.39M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.70M|    }
 2140|  2.70M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.39M|    {
  754|  2.39M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.56M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.56M|              cvref<T> obj = *get<T>(fn);
  745|  4.56M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.56M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.56M|              }
  748|  4.56M|              else {
  749|  4.56M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.56M|              }
  751|  4.56M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.56M|    {
  684|  4.56M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.56M|            return static_cast<T*>(s.m_cp);
  686|  4.56M|        }
  687|  4.56M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.56M|            return static_cast<T*>(s.m_p);
  689|  4.56M|        }
  690|  4.56M|        else {
  691|  4.56M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.56M|        }
  693|  4.56M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.56M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.39M|        {
  662|  2.39M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   368k|{
  981|   368k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   368k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   368k|        return true;
  984|   368k|    }
  985|   368k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   368k|                           ranges::const_iterator_t<Range>,
  987|   368k|                           typename detail::basic_scan_buffer<
  988|   368k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   368k|        auto beg = r.begin();
  990|   368k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 368k, False: 0]
  ------------------
  991|   368k|            return false;
  992|   368k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   368k|    else {
 1006|   368k|        return false;
 1007|   368k|    }
 1008|   368k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  1.64M|    {
  763|  1.64M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.64M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   938k|{
 1857|   938k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   938k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   938k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   938k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   938k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   938k|        if (sz < count) {
 1862|   938k|            return unexpected(eof_error::eof);
 1863|   938k|        }
 1864|       |
 1865|   938k|        return ranges::next(range.begin(), count);
 1866|   938k|    }
 1867|   938k|    else {
 1868|   938k|        auto it = range.begin();
 1869|   938k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 543k, False: 395k]
  ------------------
 1870|   543k|            return ranges::next(it, count);
 1871|   543k|        }
 1872|       |
 1873|  1.49M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.15M, False: 344k]
  ------------------
 1874|  1.15M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 51.3k, False: 1.10M]
  ------------------
 1875|  51.3k|                return unexpected(eof_error::eof);
 1876|  51.3k|            }
 1877|  1.15M|        }
 1878|       |
 1879|   344k|        return it;
 1880|   395k|    }
 1881|   938k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   938k|{
 1095|   938k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   938k|        return r.size();
 1097|   938k|    }
 1098|   938k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   938k|                           ranges::const_iterator_t<Range>,
 1100|   938k|                           typename detail::basic_scan_buffer<
 1101|   938k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   938k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   938k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   938k|        }
 1105|   938k|        else {
 1106|   938k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 938k, False: 0]
  ------------------
 1107|   938k|                return static_cast<size_t>(
 1108|   938k|                    r.begin().parent()->chars_available() -
 1109|   938k|                    r.begin().position());
 1110|   938k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   938k|        }
 1113|   938k|    }
 1114|   938k|    else {
 1115|   938k|        return 0;
 1116|   938k|    }
 1117|   938k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   668k|    {
  754|   668k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   821k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   821k|              cvref<T> obj = *get<T>(fn);
  745|   821k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   821k|                  obj(static_cast<decltype(args)>(args)...);
  747|   821k|              }
  748|   821k|              else {
  749|   821k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   821k|              }
  751|   821k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   821k|    {
  684|   821k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   821k|            return static_cast<T*>(s.m_cp);
  686|   821k|        }
  687|   821k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   821k|            return static_cast<T*>(s.m_p);
  689|   821k|        }
  690|   821k|        else {
  691|   821k|            return reinterpret_cast<T*>(s.m_fp);
  692|   821k|        }
  693|   821k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   668k|        {
  662|   668k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   279k|    {
 6037|   279k|        const bool need_skipped_width =
 6038|   279k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 279k]
  |  Branch (6038:33): [True: 0, False: 279k]
  ------------------
 6039|   279k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   279k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 279k]
  ------------------
 6043|   279k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 279k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   279k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 279k, False: 0]
  |  Branch (6047:56): [True: 279k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   279k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 279k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   557k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.76k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.76k|    }                                                  \
  |  |  |  | 3671|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   557k|                            make_eof_scan_error));
 6058|       |
 6059|   557k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 277k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   277k|            return result_type{it, 0};
 6067|   557k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   279k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   469k|{
 1976|   469k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   469k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   469k|{
 1957|   469k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   469k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   469k|    }
 1960|   469k|    else {
 1961|   469k|        auto first = range.begin();
 1962|   582k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 580k, False: 1.39k]
  ------------------
 1963|   580k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 467k, False: 112k]
  ------------------
 1964|   467k|                return first;
 1965|   467k|            }
 1966|   580k|        }
 1967|  1.39k|        return first;
 1968|   469k|    }
 1969|   469k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   169k|    {
  108|   169k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   169k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   169k|    {
   94|   169k|        iter_difference_t<I> counter{0};
   95|   421k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 251k, False: 169k]
  ------------------
   96|   251k|            ++i;
   97|   251k|            ++counter;
   98|   251k|        }
   99|   169k|        return counter;
  100|   169k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   117k|    {
 1780|   117k|        auto stdloc = loc.get<std::locale>();
 1781|   117k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   117k|        grouping = numpunct.grouping();
 1783|   117k|        thousands_sep =
 1784|   117k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 117k]
  ------------------
 1785|   117k|        decimal_point = numpunct.decimal_point();
 1786|   117k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   117k|{
 1717|   117k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 117k, False: 0]
  ------------------
 1718|   117k|        return std::use_facet<Facet>(stdloc);
 1719|   117k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   117k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   551k|{
 1846|   551k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 987, False: 550k]
  |  |  ------------------
  ------------------
 1847|    987|        return unexpected(e);
 1848|    987|    }
 1849|       |
 1850|   550k|    return ranges::next(range.begin());
 1851|   551k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.00M|{
  950|  1.00M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.34k, False: 1.00M]
  |  |  ------------------
  ------------------
  951|  3.34k|        return eof_error::eof;
  952|  3.34k|    }
  953|  1.00M|    return eof_error::good;
  954|  1.00M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.46M|{
  944|  1.46M|    return is_range_eof(r.begin(), r.end());
  945|  1.46M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.46M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.46M|    {
  937|  1.46M|        return begin == end;
  938|  1.46M|    }
  939|  1.46M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   550k|    {
  296|   550k|        ++x;
  297|   550k|        return x;
  298|   550k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   369k|{
 3141|   369k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   369k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 369k, False: 672]
  ------------------
 3143|   369k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 369k, False: 27]
  ------------------
 3144|   369k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   369k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   369k|    }
 3148|       |
 3149|    672|    auto& it = *r;
 3150|    672|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 600, False: 72]
  ------------------
 3151|    600|        return std::pair{it, sign_type::minus_sign};
 3152|    600|    }
 3153|     72|    return std::pair{it, sign_type::plus_sign};
 3154|    672|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   451k|{
 2272|   451k|    auto it = read_code_unit(range);
 2273|   451k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 477, False: 451k]
  |  |  ------------------
  ------------------
 2274|    477|        return unexpected(make_eof_parse_error(it.error()));
 2275|    477|    }
 2276|       |
 2277|   902k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 902k, False: 446k]
  ------------------
 2278|   902k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 4.45k, False: 898k]
  ------------------
 2279|  4.45k|            return *it;
 2280|  4.45k|        }
 2281|   902k|    }
 2282|       |
 2283|   446k|    return unexpected(parse_error::error);
 2284|   451k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   938k|{
 2231|   938k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   938k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   938k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   938k|        if (range.size() < str.size()) {
 2236|   938k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   938k|        }
 2238|   938k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   938k|            return unexpected(parse_error::error);
 2240|   938k|        }
 2241|   938k|        return ranges::next(range.begin(), str.size());
 2242|   938k|    }
 2243|   938k|    else {
 2244|   938k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   938k|            if (ch < 'A' || ch > 'Z') {
 2246|   938k|                return ch;
 2247|   938k|            }
 2248|   938k|            return static_cast<char_type>(ch +
 2249|   938k|                                          static_cast<char_type>('a' - 'A'));
 2250|   938k|        };
 2251|       |
 2252|   938k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   938k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   938k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   938k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.3k, False: 887k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  51.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  51.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  51.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  51.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  51.3k|    }                                                  \
  |  |  |  | 3671|   938k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   887k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   887k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   887k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   887k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   887k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 887k, False: 357]
  |  |  ------------------
  ------------------
 2257|   887k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   887k|                    return ascii_tolower(a) ==
 2259|   887k|                           static_cast<detail::char_t<Range>>(b);
 2260|   887k|                }))) {
 2261|   887k|            return unexpected(parse_error::error);
 2262|   887k|        }
 2263|       |
 2264|    357|        return it;
 2265|   887k|    }
 2266|   938k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   943k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   943k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 617k, False: 325k]
  |  Branch (2245:29): [True: 317k, False: 7.68k]
  ------------------
 2246|   935k|                return ch;
 2247|   935k|            }
 2248|  7.68k|            return static_cast<char_type>(ch +
 2249|  7.68k|                                          static_cast<char_type>('a' - 'A'));
 2250|   943k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  99.3k|{
 2146|  99.3k|    auto it = read_code_unit(range);
 2147|  99.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 510, False: 98.8k]
  |  |  ------------------
  ------------------
 2148|    510|        return unexpected(make_eof_parse_error(it.error()));
 2149|    510|    }
 2150|       |
 2151|  98.8k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.7k, False: 90]
  |  |  ------------------
  ------------------
 2152|  98.8k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  98.7k|        return unexpected(parse_error::error);
 2154|  98.7k|    }
 2155|       |
 2156|     90|    return *it;
 2157|  98.8k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   469k|{
 1996|   469k|    auto it = read_while_code_unit(range, pred);
 1997|   469k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 367k, False: 101k]
  ------------------
 1998|   367k|        return unexpected(parse_error::error);
 1999|   367k|    }
 2000|   101k|    return it;
 2001|   469k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  97.3k|    {
 1621|  97.3k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  97.3k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  97.3k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  97.3k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  97.3k|            m_storage.reset();
 1627|  97.3k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  97.3k|        }
 1629|  97.3k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  97.3k|                                          std::basic_string<CharT>>) {
 1631|  97.3k|            m_storage.emplace(SCN_FWD(range));
 1632|  97.3k|            m_view = string_view_type{*m_storage};
 1633|  97.3k|        }
 1634|  97.3k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  97.3k|                                          typename detail::basic_scan_buffer<
 1636|  97.3k|                                              value_t>::forward_iterator> &&
 1637|  97.3k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  97.3k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  97.3k|            auto end_seg = range.end().contiguous_segment();
 1640|  97.3k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.04k, False: 93.3k]
  |  |  ------------------
  ------------------
 1641|  97.3k|                             detail::to_address(end_seg.end()))) {
 1642|  4.04k|                auto& str = m_storage.emplace();
 1643|  4.04k|                str.reserve(range.end().position() - range.begin().position());
 1644|  4.04k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  4.04k|                m_view = string_view_type{str};
 1646|  4.04k|                return;
 1647|  4.04k|            }
 1648|       |
 1649|  93.3k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  93.3k|                                                            end_seg.data());
 1651|  93.3k|            m_storage.reset();
 1652|  93.3k|        }
 1653|  97.3k|        else {
 1654|  97.3k|            auto& str = m_storage.emplace();
 1655|  97.3k|            if constexpr (ranges::sized_range<Range>) {
 1656|  97.3k|                str.reserve(range.size());
 1657|  97.3k|            }
 1658|  97.3k|            if constexpr (ranges::common_range<Range>) {
 1659|  97.3k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  97.3k|                          std::back_inserter(str));
 1661|  97.3k|            }
 1662|  97.3k|            else {
 1663|  97.3k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  97.3k|                     ++it) {
 1665|  97.3k|                    str.push_back(*it);
 1666|  97.3k|                }
 1667|  97.3k|            }
 1668|  97.3k|            m_view = string_view_type{str};
 1669|  97.3k|        }
 1670|  97.3k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.10M|    {
 1582|  1.10M|        return m_view;
 1583|  1.10M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.46M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  70.0k|    {
 6079|  70.0k|        const bool need_skipped_width =
 6080|  70.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 70.0k]
  |  Branch (6080:33): [True: 0, False: 70.0k]
  ------------------
 6081|  70.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  70.0k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 70.0k]
  ------------------
 6084|  70.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 70.0k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  70.0k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 70.0k, False: 0]
  ------------------
 6093|  70.0k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 70.0k]
  ------------------
 6094|  70.0k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  70.0k|        return result_type{rng.begin(), 0};
 6118|  70.0k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   939k|{
 1857|   939k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   939k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   939k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   939k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   939k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   939k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 51.3k, False: 888k]
  ------------------
 1862|  51.3k|            return unexpected(eof_error::eof);
 1863|  51.3k|        }
 1864|       |
 1865|   888k|        return ranges::next(range.begin(), count);
 1866|   939k|    }
 1867|   939k|    else {
 1868|   939k|        auto it = range.begin();
 1869|   939k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   939k|            return ranges::next(it, count);
 1871|   939k|        }
 1872|       |
 1873|   939k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   939k|            if (it == range.end()) {
 1875|   939k|                return unexpected(eof_error::eof);
 1876|   939k|            }
 1877|   939k|        }
 1878|       |
 1879|   939k|        return it;
 1880|   939k|    }
 1881|   939k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   641k|{
 1899|   641k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   641k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   641k|    auto it = range.begin();
 1903|   641k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   641k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 641k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   641k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 641k, False: 0]
  ------------------
 1912|   641k|        ++it;
 1913|   641k|        return {it, string_type(1, *range.begin())};
 1914|   641k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   641k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.52M|{
  944|  1.52M|    return is_range_eof(r.begin(), r.end());
  945|  1.52M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.52M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.52M|    {
  937|  1.52M|        return begin == end;
  938|  1.52M|    }
  939|  1.52M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   206k|    {
  190|   206k|        i = std::move(bound);
  191|   206k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   641k|    {
 1890|   641k|        return !codepoint.empty();
 1891|   641k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   882k|{
  950|   882k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   882k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 880k]
  |  |  ------------------
  ------------------
  951|  2.64k|        return eof_error::eof;
  952|  2.64k|    }
  953|   880k|    return eof_error::good;
  954|   882k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   425k|{
 1846|   425k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   425k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 284, False: 425k]
  |  |  ------------------
  ------------------
 1847|    284|        return unexpected(e);
 1848|    284|    }
 1849|       |
 1850|   425k|    return ranges::next(range.begin());
 1851|   425k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   425k|    {
  296|   425k|        ++x;
  297|   425k|        return x;
  298|   425k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   367k|{
 3141|   367k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   367k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 367k, False: 462]
  ------------------
 3143|   367k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 367k, False: 12]
  ------------------
 3144|   367k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   367k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   367k|    }
 3148|       |
 3149|    462|    auto& it = *r;
 3150|    462|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 405, False: 57]
  ------------------
 3151|    405|        return std::pair{it, sign_type::minus_sign};
 3152|    405|    }
 3153|     57|    return std::pair{it, sign_type::plus_sign};
 3154|    462|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   387k|{
 2272|   387k|    auto it = read_code_unit(range);
 2273|   387k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 387k]
  |  |  ------------------
  ------------------
 2274|    118|        return unexpected(make_eof_parse_error(it.error()));
 2275|    118|    }
 2276|       |
 2277|   775k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 775k, False: 385k]
  ------------------
 2278|   775k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.97k, False: 773k]
  ------------------
 2279|  1.97k|            return *it;
 2280|  1.97k|        }
 2281|   775k|    }
 2282|       |
 2283|   385k|    return unexpected(parse_error::error);
 2284|   387k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   939k|{
 2231|   939k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   939k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   939k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   939k|        if (range.size() < str.size()) {
 2236|   939k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   939k|        }
 2238|   939k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   939k|            return unexpected(parse_error::error);
 2240|   939k|        }
 2241|   939k|        return ranges::next(range.begin(), str.size());
 2242|   939k|    }
 2243|   939k|    else {
 2244|   939k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   939k|            if (ch < 'A' || ch > 'Z') {
 2246|   939k|                return ch;
 2247|   939k|            }
 2248|   939k|            return static_cast<char_type>(ch +
 2249|   939k|                                          static_cast<char_type>('a' - 'A'));
 2250|   939k|        };
 2251|       |
 2252|   939k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   939k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   939k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   939k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   939k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.3k, False: 888k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  51.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  51.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  51.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  51.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  51.3k|    }                                                  \
  |  |  |  | 3671|   939k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   888k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   888k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   888k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   888k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 887k, False: 357]
  |  |  ------------------
  ------------------
 2257|   888k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   888k|                    return ascii_tolower(a) ==
 2259|   888k|                           static_cast<detail::char_t<Range>>(b);
 2260|   888k|                }))) {
 2261|   887k|            return unexpected(parse_error::error);
 2262|   887k|        }
 2263|       |
 2264|    357|        return it;
 2265|   888k|    }
 2266|   939k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   943k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   943k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 617k, False: 326k]
  |  Branch (2245:29): [True: 318k, False: 7.68k]
  ------------------
 2246|   936k|                return ch;
 2247|   936k|            }
 2248|  7.68k|            return static_cast<char_type>(ch +
 2249|  7.68k|                                          static_cast<char_type>('a' - 'A'));
 2250|   943k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  37.4k|{
 2146|  37.4k|    auto it = read_code_unit(range);
 2147|  37.4k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  37.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 166, False: 37.2k]
  |  |  ------------------
  ------------------
 2148|    166|        return unexpected(make_eof_parse_error(it.error()));
 2149|    166|    }
 2150|       |
 2151|  37.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.2k, False: 36]
  |  |  ------------------
  ------------------
 2152|  37.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  37.2k|        return unexpected(parse_error::error);
 2154|  37.2k|    }
 2155|       |
 2156|     36|    return *it;
 2157|  37.2k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   198k|{
 1976|   198k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   198k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   198k|{
 1957|   198k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   198k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   198k|    }
 1960|   198k|    else {
 1961|   198k|        auto first = range.begin();
 1962|   198k|        for (; first != range.end(); ++first) {
 1963|   198k|            if (pred(*first)) {
 1964|   198k|                return first;
 1965|   198k|            }
 1966|   198k|        }
 1967|   198k|        return first;
 1968|   198k|    }
 1969|   198k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   368k|{
 2951|   368k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 368k, False: 0]
  ------------------
 2952|   368k|        auto it = read_while_classic_space(range);
 2953|   368k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   368k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.19k, False: 366k]
  |  |  ------------------
  ------------------
 2955|  2.19k|            return unexpected(e);
 2956|  2.19k|        }
 2957|       |
 2958|   366k|        return it;
 2959|   368k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   368k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   368k|{
 2117|   368k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   368k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   368k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   368k|        auto buf = make_contiguous_buffer(range);
 2121|   368k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   368k|        return ranges::next(range.begin(),
 2123|   368k|                            ranges::distance(buf.view().begin(), it));
 2124|   368k|    }
 2125|   368k|    else {
 2126|   368k|        auto it = range.begin();
 2127|       |
 2128|   368k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   368k|            auto seg = get_contiguous_beginning(range);
 2130|   368k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   368k|                seg_it != seg.end()) {
 2132|   368k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   368k|            }
 2134|   368k|            ranges::advance(it, seg.size());
 2135|   368k|        }
 2136|       |
 2137|   368k|        return read_while_code_point(
 2138|   368k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   368k|    }
 2140|   368k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   368k|{
 2082|   368k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   368k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   456k|{
 2061|   456k|    auto it = range.begin();
 2062|   700k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 641k, False: 59.3k]
  ------------------
 2063|   641k|        const auto val =
 2064|   641k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   641k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   641k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 641k, False: 0]
  |  |  ------------------
  ------------------
 2066|   641k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   641k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   641k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 397k, False: 244k]
  ------------------
 2069|   397k|                return it;
 2070|   397k|            }
 2071|   641k|        }
 2072|   244k|        it = val.iterator;
 2073|   244k|    }
 2074|       |
 2075|  59.3k|    return it;
 2076|   456k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   368k|    {
  754|   368k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   458k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   458k|              cvref<T> obj = *get<T>(fn);
  745|   458k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   458k|                  obj(static_cast<decltype(args)>(args)...);
  747|   458k|              }
  748|   458k|              else {
  749|   458k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   458k|              }
  751|   458k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   458k|    {
  684|   458k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   458k|            return static_cast<T*>(s.m_cp);
  686|   458k|        }
  687|   458k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   458k|            return static_cast<T*>(s.m_p);
  689|   458k|        }
  690|   458k|        else {
  691|   458k|            return reinterpret_cast<T*>(s.m_fp);
  692|   458k|        }
  693|   458k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   458k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   368k|        {
  662|   368k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   639k|    {
  304|   639k|        ranges::advance(x, n);
  305|   639k|        return x;
  306|   639k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   639k|    {
  268|   639k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   639k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   639k|    {
  181|  2.18M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.54M, False: 639k]
  ------------------
  182|  1.54M|            ++i;
  183|  1.54M|        }
  184|   639k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  93.0k|    {
 6193|  93.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.0k|            auto rd = make_reader<T, char_type>();
 6198|  93.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  93.0k|                return unexpected(e);
 6200|  93.0k|            }
 6201|       |
 6202|  93.0k|            return impl(rd, range, value);
 6203|  93.0k|        }
 6204|  93.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  93.0k|            auto rd = make_reader<T, char_type>();
 6206|  93.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  93.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 93.0k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  93.0k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  93.0k|                return impl(rd, range, value);
 6213|  93.0k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  93.0k|        else {
 6221|  93.0k|            SCN_EXPECT(false);
 6222|  93.0k|            SCN_UNREACHABLE;
 6223|  93.0k|        }
 6224|  93.0k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   559k|    {
 3040|   559k|        reader_error_handler eh{};
 3041|   559k|        get_derived().check_specs_impl(specs, eh);
 3042|   559k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 559k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   559k|        return {};
 3046|   559k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   559k|    {
 3051|   559k|        return static_cast<Derived&>(*this);
 3052|   559k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   559k|    {
 4145|   559k|        detail::check_float_type_specs(specs, eh);
 4146|   559k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  93.0k|    {
 6124|  93.0k|        const bool need_skipped_width =
 6125|  93.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.0k]
  |  Branch (6125:33): [True: 0, False: 93.0k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.0k|        auto it = rng.begin();
 6129|  93.0k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.0k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.0k|        else {
 6138|  93.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 564, False: 92.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    564|    }                                                  \
  |  |  |  | 3671|  93.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.4k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.4k|        }
 6141|  92.4k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.4k|        std::ptrdiff_t value_width = 0;
 6145|  92.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.4k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.4k|        else {
 6161|  92.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 69.1k, False: 23.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  69.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  69.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  69.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  69.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  69.1k|    }                                                  \
  |  | 3671|  92.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  23.3k|                                             specs, value, loc));
 6163|       |
 6164|  23.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 23.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  23.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  23.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  23.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 23.1k, False: 136]
  ------------------
 6174|  23.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 23.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  23.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  23.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  23.1k|                                 value_width));
 6178|  23.1k|            std::tie(it, postfix_width) = postfix_result;
 6179|  23.1k|        }
 6180|       |
 6181|  23.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  23.3k|                                                 value_width, postfix_width);
 6183|  23.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 23.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  23.3k|        return it;
 6188|  23.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   877k|    {
 3035|   877k|        return true;
 3036|   877k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   556k|    {
 4217|   556k|        unsigned options{};
 4218|   556k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 117k, False: 438k]
  ------------------
 4219|   117k|            options |= float_reader_base::allow_thsep;
 4220|   117k|        }
 4221|       |
 4222|   556k|        SCN_GCC_COMPAT_PUSH
 4223|   556k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   556k|        switch (specs.type) {
 4226|   118k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 118k, False: 438k]
  ------------------
 4227|   118k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  83.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 83.9k, False: 472k]
  ------------------
 4230|  83.9k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   118k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 118k, False: 437k]
  ------------------
 4233|   118k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   117k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 117k, False: 438k]
  ------------------
 4236|   117k|                return options | float_reader_base::allow_scientific |
 4237|   117k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   117k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 117k, False: 438k]
  ------------------
 4240|   117k|                return options | float_reader_base::allow_scientific |
 4241|   117k|                       float_reader_base::allow_fixed |
 4242|   117k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 556k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   556k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   556k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   556k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   556k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   732k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.46M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   112k|    {
 3691|   112k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   112k|        const std::ptrdiff_t sign_len =
 3694|   112k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 92, False: 112k]
  ------------------
 3695|       |
 3696|   112k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.9k, False: 63.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.9k|    }                                                  \
  |  |  |  | 3671|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  63.8k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   112k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   339k|    {
 4057|   339k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 339k, False: 0]
  ------------------
 4058|   339k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 339k, False: 0]
  ------------------
 4059|   339k|            return;
 4060|   339k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   217k|    {
 1587|   217k|        return m_storage.has_value();
 1588|   217k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   126k|    {
 1592|   126k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   126k|        return *m_storage;
 1594|   126k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  92.4k|    {
 4170|  92.4k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.4k|#if !SCN_DISABLE_LOCALE
 4173|  92.4k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 19.5k, False: 72.9k]
  ------------------
 4174|  19.5k|            return read_impl<Range>(
 4175|  19.5k|                range, rd,
 4176|  19.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  19.5k|                },
 4179|  19.5k|                value, loc);
 4180|  19.5k|        }
 4181|  72.9k|#endif
 4182|       |
 4183|  72.9k|        return read_impl<Range>(
 4184|  72.9k|            range, rd,
 4185|  72.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  72.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  72.9k|            },
 4188|  72.9k|            value);
 4189|  92.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   121k|    {
 4206|   121k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   121k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 89.4k, False: 32.3k]
  |  |  ------------------
  ------------------
 4208|  89.4k|            return unexpected(r.error());
 4209|  89.4k|        }
 4210|       |
 4211|  32.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 480, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    480|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    480|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    480|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    480|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    480|    }                                                  \
  |  |  |  | 3671|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  31.9k|        return ranges::next(range.begin(), n);
 4213|  32.3k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   366k|    {
  763|   366k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   366k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  19.5k|    {
  754|  19.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  19.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.5k|              cvref<T> obj = *get<T>(fn);
  745|  19.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.5k|              }
  748|  19.5k|              else {
  749|  19.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.5k|              }
  751|  19.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  19.5k|    {
  684|  19.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.5k|            return static_cast<T*>(s.m_cp);
  686|  19.5k|        }
  687|  19.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.5k|            return static_cast<T*>(s.m_p);
  689|  19.5k|        }
  690|  19.5k|        else {
  691|  19.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.5k|        }
  693|  19.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  19.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  19.5k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  58.8k|    {
 3679|  58.8k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  58.8k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  58.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 58.8k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  58.8k|        return read_source_impl(range);
 3685|  58.8k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   366k|    {
 3705|   366k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   366k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   366k|        auto it = sign_result.first;
 3708|   366k|        m_sign = sign_result.second;
 3709|       |
 3710|   366k|        auto digits_begin = it;
 3711|   366k|        auto r = ranges::subrange{it, range.end()};
 3712|   366k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   366k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   366k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   366k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   366k|                SCN_TRY_ASSIGN(
 3717|   366k|                    it,
 3718|   366k|                    do_read_source_impl(
 3719|   366k|                        r,
 3720|   366k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   366k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   366k|            }
 3723|   366k|            else {
 3724|   366k|                auto cb = [&](const auto& rr)
 3725|   366k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   366k|                    auto res = read_all(rr);
 3727|   366k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   366k|                        return unexpected_scan_error(
 3729|   366k|                            scan_error::invalid_scanned_value,
 3730|   366k|                            "Invalid float value");
 3731|   366k|                    }
 3732|   366k|                    return res;
 3733|   366k|                };
 3734|   366k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   366k|            }
 3736|   366k|        }
 3737|   366k|        else {
 3738|   366k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 268k, False: 97.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   268k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   268k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   268k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   268k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   268k|    }                                                  \
  |  | 3671|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  97.3k|                it,
 3740|  97.3k|                do_read_source_impl(
 3741|  97.3k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  97.3k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  97.3k|        }
 3744|       |
 3745|  97.3k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  97.3k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 97.3k, False: 0]
  |  Branch (3747:48): [True: 97.3k, False: 0]
  ------------------
 3748|  97.3k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 97.3k, False: 0]
  ------------------
 3749|  97.3k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 97.3k, False: 0]
  ------------------
 3750|  97.3k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  97.3k|        }
 3752|       |
 3753|  97.3k|        handle_separators();
 3754|       |
 3755|  97.3k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 97.3k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  97.3k|        return it;
 3768|  97.3k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   366k|    {
 4000|   366k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   366k|        const bool allowed_nonhex =
 4002|   366k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   366k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   366k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 366k, False: 0]
  |  Branch (4005:45): [True: 0, False: 366k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   366k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 366k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   366k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 366k, False: 0]
  |  Branch (4014:45): [True: 0, False: 366k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   366k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 366k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   366k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 206k, False: 159k]
  |  Branch (4021:28): [True: 59.2k, False: 147k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  59.2k|            auto it = range.begin();
 4025|       |
 4026|  59.2k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 102, False: 59.1k]
  ------------------
 4027|    102|                m_kind = float_kind::hex_with_prefix;
 4028|    102|                it = *r;
 4029|    102|            }
 4030|  59.1k|            else {
 4031|  59.1k|                m_kind = float_kind::hex_without_prefix;
 4032|  59.1k|            }
 4033|       |
 4034|  59.2k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  59.2k|        }
 4036|   306k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 159k, False: 147k]
  |  Branch (4036:29): [True: 159k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   159k|            m_kind = float_kind::generic;
 4040|   159k|            return read_regular_float(range);
 4041|   159k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   147k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 255, False: 146k]
  |  |  ------------------
  ------------------
 4047|    255|            m_kind = float_kind::hex_with_prefix;
 4048|    255|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    255|        }
 4050|       |
 4051|   146k|        m_kind = float_kind::generic;
 4052|   146k|        return read_regular(range);
 4053|   147k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   366k|    {
 3811|   366k|        auto it = range.begin();
 3812|   366k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 366k, False: 0]
  ------------------
 3813|   366k|            return unexpected(r.error());
 3814|   366k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   366k|    {
 3834|   366k|        auto it = range.begin();
 3835|   366k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 366k, False: 0]
  ------------------
 3836|   366k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   366k|                scan_error::invalid_scanned_value,
 3838|   366k|                "Invalid floating-point NaN value"));
 3839|   366k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   206k|    {
 3804|   206k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   206k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  59.4k|    {
 3904|  59.4k|        auto it = range.begin();
 3905|       |
 3906|  59.4k|        std::ptrdiff_t digits_count = 0;
 3907|  59.4k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  59.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.3k, False: 18.1k]
  |  |  ------------------
  ------------------
 3909|  41.3k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  41.3k|                scan_error::invalid_scanned_value,
 3911|  41.3k|                "Invalid hexadecimal floating-point value"));
 3912|  41.3k|        }
 3913|  18.1k|        else {
 3914|  18.1k|            digits_count += ranges::distance(it, *r);
 3915|  18.1k|            it = *r;
 3916|  18.1k|        }
 3917|       |
 3918|  18.1k|        m_integral_part_length = digits_count;
 3919|  18.1k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 24, False: 18.0k]
  ------------------
 3920|  18.1k|                                             m_locale_options.decimal_point)) {
 3921|     24|            it = *r;
 3922|     24|        }
 3923|       |
 3924|  18.1k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 18.1k]
  ------------------
 3925|  18.1k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|  18.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  18.1k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  18.1k|        return it;
 3938|  18.1k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  77.5k|    {
 3789|  77.5k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  77.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 77.5k]
  |  |  |  Branch (859:45): [True: 0, False: 77.5k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  77.5k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  77.5k|        return read_while1_code_unit(
 3798|  77.5k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  77.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  77.5k|    {
  754|  77.5k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  98.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.5k|              cvref<T> obj = *get<T>(fn);
  745|  98.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  98.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.5k|              }
  748|  98.5k|              else {
  749|  98.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.5k|              }
  751|  98.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  98.5k|    {
  684|  98.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  98.5k|            return static_cast<T*>(s.m_cp);
  686|  98.5k|        }
  687|  98.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  98.5k|            return static_cast<T*>(s.m_p);
  689|  98.5k|        }
  690|  98.5k|        else {
  691|  98.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  98.5k|        }
  693|  98.5k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|  98.5k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  77.5k|        {
  662|  77.5k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  81.8k|    {
 3876|  81.8k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 3.78k, False: 78.1k]
  ------------------
 3877|  3.78k|            auto beg_exp_it = range.begin();
 3878|  3.78k|            auto it = *r;
 3879|       |
 3880|  3.78k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 3.76k, False: 27]
  ------------------
 3881|  3.78k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  3.76k|                it = r_sign->first;
 3883|  3.76k|            }
 3884|       |
 3885|  3.78k|            if (auto r_exp = read_while1_code_unit(
 3886|  3.78k|                    ranges::subrange{it, range.end()},
 3887|  3.78k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  3.78k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.31k, False: 2.47k]
  |  |  ------------------
  ------------------
 3889|  1.31k|                it = beg_exp_it;
 3890|  1.31k|            }
 3891|  2.47k|            else {
 3892|  2.47k|                it = *r_exp;
 3893|  2.47k|            }
 3894|       |
 3895|  3.78k|            return it;
 3896|  3.78k|        }
 3897|  78.1k|        return range.begin();
 3898|  81.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  3.78k|    {
  754|  3.78k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  8.80k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.80k|              cvref<T> obj = *get<T>(fn);
  745|  8.80k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.80k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.80k|              }
  748|  8.80k|              else {
  749|  8.80k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.80k|              }
  751|  8.80k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  8.80k|    {
  684|  8.80k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.80k|            return static_cast<T*>(s.m_cp);
  686|  8.80k|        }
  687|  8.80k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.80k|            return static_cast<T*>(s.m_p);
  689|  8.80k|        }
  690|  8.80k|        else {
  691|  8.80k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.80k|        }
  693|  8.80k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  8.80k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  3.78k|        {
  662|  3.78k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   306k|    {
 3944|   306k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   306k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 247k, False: 59.0k]
  |  Branch (3945:50): [True: 41.9k, False: 205k]
  ------------------
 3946|       |
 3947|   306k|        auto it = ranges::begin(range);
 3948|   306k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   306k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   306k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 225k, False: 81.2k]
  |  |  ------------------
  ------------------
 3952|   225k|            return r.transform_error(
 3953|   225k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   225k|                                              "Invalid floating-point value"));
 3955|   225k|        }
 3956|  81.2k|        else {
 3957|  81.2k|            digits_count += ranges::distance(it, *r);
 3958|  81.2k|            it = *r;
 3959|  81.2k|        }
 3960|       |
 3961|  81.2k|        m_integral_part_length = digits_count;
 3962|  81.2k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 66, False: 81.1k]
  ------------------
 3963|  81.2k|                                             m_locale_options.decimal_point)) {
 3964|     66|            it = *r;
 3965|     66|        }
 3966|       |
 3967|  81.2k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 81.2k]
  ------------------
 3968|  81.2k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  81.2k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.2k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  81.2k|        auto beg_exp_it = it;
 3979|  81.2k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 63.7k, False: 17.4k]
  ------------------
 3980|  63.7k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  63.7k|        }
 3982|  81.2k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.35k, False: 78.9k]
  |  Branch (3982:29): [True: 1.98k, False: 372]
  ------------------
 3983|  1.98k|            return unexpected_scan_error(
 3984|  1.98k|                scan_error::invalid_scanned_value,
 3985|  1.98k|                "No exponent given to scientific float");
 3986|  1.98k|        }
 3987|       |
 3988|  79.2k|        m_kind =
 3989|  79.2k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 76.8k, False: 2.38k]
  ------------------
 3990|       |
 3991|  79.2k|        return it;
 3992|  81.2k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   387k|    {
 3774|   387k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 387k]
  |  |  |  Branch (859:45): [True: 0, False: 387k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   387k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   387k|        return read_while1_code_unit(
 3783|   387k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   387k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   387k|    {
  754|   387k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   473k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   473k|              cvref<T> obj = *get<T>(fn);
  745|   473k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   473k|                  obj(static_cast<decltype(args)>(args)...);
  747|   473k|              }
  748|   473k|              else {
  749|   473k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   473k|              }
  751|   473k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   473k|    {
  684|   473k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   473k|            return static_cast<T*>(s.m_cp);
  686|   473k|        }
  687|   473k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   473k|            return static_cast<T*>(s.m_p);
  689|   473k|        }
  690|   473k|        else {
  691|   473k|            return reinterpret_cast<T*>(s.m_fp);
  692|   473k|        }
  693|   473k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   473k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   387k|        {
  662|   387k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  97.3k|    {
 1577|  97.3k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  97.3k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  19.5k|        {
  662|  19.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  72.9k|    {
  754|  72.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  72.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.9k|              cvref<T> obj = *get<T>(fn);
  745|  72.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  72.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  72.9k|              }
  748|  72.9k|              else {
  749|  72.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.9k|              }
  751|  72.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  72.9k|    {
  684|  72.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  72.9k|            return static_cast<T*>(s.m_cp);
  686|  72.9k|        }
  687|  72.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  72.9k|            return static_cast<T*>(s.m_p);
  689|  72.9k|        }
  690|  72.9k|        else {
  691|  72.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  72.9k|        }
  693|  72.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  72.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  72.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  72.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   307k|    {
 3665|   307k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   307k|        return read_source_impl(range);
 3671|   307k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  72.9k|        {
  662|  72.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  92.5k|    {
 4170|  92.5k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.5k|#if !SCN_DISABLE_LOCALE
 4173|  92.5k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 19.5k, False: 72.9k]
  ------------------
 4174|  19.5k|            return read_impl<Range>(
 4175|  19.5k|                range, rd,
 4176|  19.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  19.5k|                },
 4179|  19.5k|                value, loc);
 4180|  19.5k|        }
 4181|  72.9k|#endif
 4182|       |
 4183|  72.9k|        return read_impl<Range>(
 4184|  72.9k|            range, rd,
 4185|  72.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  72.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  72.9k|            },
 4188|  72.9k|            value);
 4189|  92.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   121k|    {
 4206|   121k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   121k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.4k, False: 80.4k]
  |  |  ------------------
  ------------------
 4208|  41.4k|            return unexpected(r.error());
 4209|  41.4k|        }
 4210|       |
 4211|  80.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  80.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.4k, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.4k|    }                                                  \
  |  |  |  | 3671|  80.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  31.9k|        return ranges::next(range.begin(), n);
 4213|  80.4k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   366k|    {
  763|   366k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   366k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  19.5k|    {
  754|  19.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  19.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.5k|              cvref<T> obj = *get<T>(fn);
  745|  19.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.5k|              }
  748|  19.5k|              else {
  749|  19.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.5k|              }
  751|  19.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  19.5k|    {
  684|  19.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.5k|            return static_cast<T*>(s.m_cp);
  686|  19.5k|        }
  687|  19.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.5k|            return static_cast<T*>(s.m_p);
  689|  19.5k|        }
  690|  19.5k|        else {
  691|  19.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.5k|        }
  693|  19.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  19.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  19.5k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  58.9k|    {
 3679|  58.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  58.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  58.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 58.9k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  58.9k|        return read_source_impl(range);
 3685|  58.9k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   366k|    {
 3705|   366k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   366k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   366k|        auto it = sign_result.first;
 3708|   366k|        m_sign = sign_result.second;
 3709|       |
 3710|   366k|        auto digits_begin = it;
 3711|   366k|        auto r = ranges::subrange{it, range.end()};
 3712|   366k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   366k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   366k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  |  Branch (859:45): [True: 0, False: 366k]
  |  |  |  Branch (859:45): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 3715|   366k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   366k|            else {
 3724|   366k|                auto cb = [&](const auto& rr)
 3725|   366k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   366k|                    auto res = read_all(rr);
 3727|   366k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   366k|                        return unexpected_scan_error(
 3729|   366k|                            scan_error::invalid_scanned_value,
 3730|   366k|                            "Invalid float value");
 3731|   366k|                    }
 3732|   366k|                    return res;
 3733|   366k|                };
 3734|   366k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 124k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   124k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   124k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   124k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   124k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   124k|    }                                                  \
  |  | 3671|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   241k|            }
 3736|   366k|        }
 3737|   241k|        else {
 3738|   241k|            SCN_TRY_ASSIGN(
 3739|   241k|                it,
 3740|   241k|                do_read_source_impl(
 3741|   241k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   241k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   241k|        }
 3744|       |
 3745|   241k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   241k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 241k, False: 0]
  |  Branch (3747:48): [True: 241k, False: 0]
  ------------------
 3748|   241k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 241k, False: 0]
  ------------------
 3749|   241k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 241k, False: 0]
  ------------------
 3750|   241k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   241k|        }
 3752|       |
 3753|   241k|        handle_separators();
 3754|       |
 3755|   241k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 241k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   241k|        return it;
 3768|   241k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   366k|    {
 3811|   366k|        auto it = range.begin();
 3812|   366k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 366k, False: 0]
  ------------------
 3813|   366k|            return unexpected(r.error());
 3814|   366k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   366k|    {
 3834|   366k|        auto it = range.begin();
 3835|   366k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 366k, False: 0]
  ------------------
 3836|   366k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   366k|                scan_error::invalid_scanned_value,
 3838|   366k|                "Invalid floating-point NaN value"));
 3839|   366k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   206k|    {
 3804|   206k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   206k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   198k|{
 1996|   198k|    auto it = read_while_code_unit(range, pred);
 1997|   198k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 160k, False: 38.3k]
  ------------------
 1998|   160k|        return unexpected(parse_error::error);
 1999|   160k|    }
 2000|  38.3k|    return it;
 2001|   198k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  19.9k|    {
 3876|  19.9k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 1.51k, False: 18.4k]
  ------------------
 3877|  1.51k|            auto beg_exp_it = range.begin();
 3878|  1.51k|            auto it = *r;
 3879|       |
 3880|  1.51k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 1.50k, False: 12]
  ------------------
 3881|  1.51k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  1.50k|                it = r_sign->first;
 3883|  1.50k|            }
 3884|       |
 3885|  1.51k|            if (auto r_exp = read_while1_code_unit(
 3886|  1.51k|                    ranges::subrange{it, range.end()},
 3887|  1.51k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  1.51k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 566, False: 948]
  |  |  ------------------
  ------------------
 3889|    566|                it = beg_exp_it;
 3890|    566|            }
 3891|    948|            else {
 3892|    948|                it = *r_exp;
 3893|    948|            }
 3894|       |
 3895|  1.51k|            return it;
 3896|  1.51k|        }
 3897|  18.4k|        return range.begin();
 3898|  19.9k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  1.51k|    {
  754|  1.51k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  3.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.38k|              cvref<T> obj = *get<T>(fn);
  745|  3.38k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.38k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.38k|              }
  748|  3.38k|              else {
  749|  3.38k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.38k|              }
  751|  3.38k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  3.38k|    {
  684|  3.38k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.38k|            return static_cast<T*>(s.m_cp);
  686|  3.38k|        }
  687|  3.38k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.38k|            return static_cast<T*>(s.m_p);
  689|  3.38k|        }
  690|  3.38k|        else {
  691|  3.38k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.38k|        }
  693|  3.38k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  3.38k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  1.51k|        {
  662|  1.51k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   159k|    {
 3944|   159k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   159k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 100k, False: 59.0k]
  |  Branch (3945:50): [True: 41.9k, False: 58.9k]
  ------------------
 3946|       |
 3947|   159k|        auto it = ranges::begin(range);
 3948|   159k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   159k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   159k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122k, False: 37.4k]
  |  |  ------------------
  ------------------
 3952|   122k|            return r.transform_error(
 3953|   122k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   122k|                                              "Invalid floating-point value"));
 3955|   122k|        }
 3956|  37.4k|        else {
 3957|  37.4k|            digits_count += ranges::distance(it, *r);
 3958|  37.4k|            it = *r;
 3959|  37.4k|        }
 3960|       |
 3961|  37.4k|        m_integral_part_length = digits_count;
 3962|  37.4k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 36, False: 37.4k]
  ------------------
 3963|  37.4k|                                             m_locale_options.decimal_point)) {
 3964|     36|            it = *r;
 3965|     36|        }
 3966|       |
 3967|  37.4k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 37.4k]
  ------------------
 3968|  37.4k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  37.4k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  37.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.4k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  37.4k|        auto beg_exp_it = it;
 3979|  37.4k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 19.9k, False: 17.4k]
  ------------------
 3980|  19.9k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  19.9k|        }
 3982|  37.4k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.35k, False: 35.0k]
  |  Branch (3982:29): [True: 1.98k, False: 372]
  ------------------
 3983|  1.98k|            return unexpected_scan_error(
 3984|  1.98k|                scan_error::invalid_scanned_value,
 3985|  1.98k|                "No exponent given to scientific float");
 3986|  1.98k|        }
 3987|       |
 3988|  35.4k|        m_kind =
 3989|  35.4k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 34.5k, False: 948]
  ------------------
 3990|       |
 3991|  35.4k|        return it;
 3992|  37.4k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   197k|    {
 3774|   197k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 197k]
  |  |  |  Branch (859:45): [True: 0, False: 197k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   197k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   197k|        return read_while1_code_unit(
 3783|   197k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   197k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   197k|    {
  754|   197k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   236k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   236k|              cvref<T> obj = *get<T>(fn);
  745|   236k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   236k|                  obj(static_cast<decltype(args)>(args)...);
  747|   236k|              }
  748|   236k|              else {
  749|   236k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   236k|              }
  751|   236k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   236k|    {
  684|   236k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   236k|            return static_cast<T*>(s.m_cp);
  686|   236k|        }
  687|   236k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   236k|            return static_cast<T*>(s.m_p);
  689|   236k|        }
  690|   236k|        else {
  691|   236k|            return reinterpret_cast<T*>(s.m_fp);
  692|   236k|        }
  693|   236k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   236k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   197k|        {
  662|   197k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   366k|    {
 4000|   366k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   366k|        const bool allowed_nonhex =
 4002|   366k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   366k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   366k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 366k, False: 0]
  |  Branch (4005:45): [True: 0, False: 366k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   366k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 366k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   366k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 366k, False: 0]
  |  Branch (4014:45): [True: 0, False: 366k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   366k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 366k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   366k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 206k, False: 159k]
  |  Branch (4021:28): [True: 59.2k, False: 147k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  59.2k|            auto it = range.begin();
 4025|       |
 4026|  59.2k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 102, False: 59.1k]
  ------------------
 4027|    102|                m_kind = float_kind::hex_with_prefix;
 4028|    102|                it = *r;
 4029|    102|            }
 4030|  59.1k|            else {
 4031|  59.1k|                m_kind = float_kind::hex_without_prefix;
 4032|  59.1k|            }
 4033|       |
 4034|  59.2k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  59.2k|        }
 4036|   307k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 159k, False: 147k]
  |  Branch (4036:29): [True: 159k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   159k|            m_kind = float_kind::generic;
 4040|   159k|            return read_regular_float(range);
 4041|   159k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   147k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 255, False: 147k]
  |  |  ------------------
  ------------------
 4047|    255|            m_kind = float_kind::hex_with_prefix;
 4048|    255|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    255|        }
 4050|       |
 4051|   147k|        m_kind = float_kind::generic;
 4052|   147k|        return read_regular(range);
 4053|   147k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   206k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   206k|                    auto res = read_all(rr);
 3727|   206k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 206k]
  |  |  ------------------
  ------------------
 3728|     63|                        return unexpected_scan_error(
 3729|     63|                            scan_error::invalid_scanned_value,
 3730|     63|                            "Invalid float value");
 3731|     63|                    }
 3732|   206k|                    return res;
 3733|   206k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   206k|{
 1839|   206k|    return ranges::next(range.begin(), range.end());
 1840|   206k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   206k|    {
  313|   206k|        ranges::advance(x, bound);
  314|   206k|        return x;
  315|   206k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   206k|    {
  275|   206k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   206k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   241k|    {
 1577|   241k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   241k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   241k|    {
 1621|   241k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   241k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   241k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   241k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   241k|            m_storage.reset();
 1627|   241k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   241k|        }
 1629|   241k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   241k|                                          std::basic_string<CharT>>) {
 1631|   241k|            m_storage.emplace(SCN_FWD(range));
 1632|   241k|            m_view = string_view_type{*m_storage};
 1633|   241k|        }
 1634|   241k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   241k|                                          typename detail::basic_scan_buffer<
 1636|   241k|                                              value_t>::forward_iterator> &&
 1637|   241k|                           ranges::common_range<Range>) {
 1638|   241k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   241k|            auto end_seg = range.end().contiguous_segment();
 1640|   241k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   241k|                             detail::to_address(end_seg.end()))) {
 1642|   241k|                auto& str = m_storage.emplace();
 1643|   241k|                str.reserve(range.end().position() - range.begin().position());
 1644|   241k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   241k|                m_view = string_view_type{str};
 1646|   241k|                return;
 1647|   241k|            }
 1648|       |
 1649|   241k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   241k|                                                            end_seg.data());
 1651|   241k|            m_storage.reset();
 1652|   241k|        }
 1653|   241k|        else {
 1654|   241k|            auto& str = m_storage.emplace();
 1655|   241k|            if constexpr (ranges::sized_range<Range>) {
 1656|   241k|                str.reserve(range.size());
 1657|   241k|            }
 1658|   241k|            if constexpr (ranges::common_range<Range>) {
 1659|   241k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   241k|                          std::back_inserter(str));
 1661|   241k|            }
 1662|   241k|            else {
 1663|   241k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   241k|                     ++it) {
 1665|   241k|                    str.push_back(*it);
 1666|   241k|                }
 1667|   241k|            }
 1668|   241k|            m_view = string_view_type{str};
 1669|   241k|        }
 1670|   241k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  19.5k|        {
  662|  19.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  72.9k|    {
  754|  72.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  72.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.9k|              cvref<T> obj = *get<T>(fn);
  745|  72.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  72.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  72.9k|              }
  748|  72.9k|              else {
  749|  72.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.9k|              }
  751|  72.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  72.9k|    {
  684|  72.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  72.9k|            return static_cast<T*>(s.m_cp);
  686|  72.9k|        }
  687|  72.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  72.9k|            return static_cast<T*>(s.m_p);
  689|  72.9k|        }
  690|  72.9k|        else {
  691|  72.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  72.9k|        }
  693|  72.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  72.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  72.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  72.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   307k|    {
 3665|   307k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   307k|        return read_source_impl(range);
 3671|   307k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  72.9k|        {
  662|  72.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  93.2k|    {
 6193|  93.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.2k|            auto rd = make_reader<T, char_type>();
 6198|  93.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  93.2k|                return unexpected(e);
 6200|  93.2k|            }
 6201|       |
 6202|  93.2k|            return impl(rd, range, value);
 6203|  93.2k|        }
 6204|  93.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  93.2k|            auto rd = make_reader<T, char_type>();
 6206|  93.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.2k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  93.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 93.2k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  93.2k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  93.2k|                return impl(rd, range, value);
 6213|  93.2k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  93.2k|        else {
 6221|  93.2k|            SCN_EXPECT(false);
 6222|  93.2k|            SCN_UNREACHABLE;
 6223|  93.2k|        }
 6224|  93.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  93.2k|    {
 6124|  93.2k|        const bool need_skipped_width =
 6125|  93.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.2k]
  |  Branch (6125:33): [True: 0, False: 93.2k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.2k|        auto it = rng.begin();
 6129|  93.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.2k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.2k|        else {
 6138|  93.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 596, False: 92.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    596|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    596|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    596|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    596|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    596|    }                                                  \
  |  |  |  | 3671|  93.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.6k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.6k|        }
 6141|  92.6k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.6k|        std::ptrdiff_t value_width = 0;
 6145|  92.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.6k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.6k|        else {
 6161|  92.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 69.1k, False: 23.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  69.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  69.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  69.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  69.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  69.1k|    }                                                  \
  |  | 3671|  92.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  23.4k|                                             specs, value, loc));
 6163|       |
 6164|  23.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 23.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  23.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  23.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  23.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 23.3k, False: 146]
  ------------------
 6174|  23.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  23.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  23.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  23.3k|                                 value_width));
 6178|  23.3k|            std::tie(it, postfix_width) = postfix_result;
 6179|  23.3k|        }
 6180|       |
 6181|  23.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  23.4k|                                                 value_width, postfix_width);
 6183|  23.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 23.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  23.4k|        return it;
 6188|  23.4k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   113k|    {
 3691|   113k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   113k|        const std::ptrdiff_t sign_len =
 3694|   113k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 92, False: 112k]
  ------------------
 3695|       |
 3696|   113k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.6k, False: 64.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.6k|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  64.3k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   113k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  92.6k|    {
 4170|  92.6k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.6k|#if !SCN_DISABLE_LOCALE
 4173|  92.6k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 19.5k, False: 73.0k]
  ------------------
 4174|  19.5k|            return read_impl<Range>(
 4175|  19.5k|                range, rd,
 4176|  19.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  19.5k|                },
 4179|  19.5k|                value, loc);
 4180|  19.5k|        }
 4181|  73.0k|#endif
 4182|       |
 4183|  73.0k|        return read_impl<Range>(
 4184|  73.0k|            range, rd,
 4185|  73.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  73.0k|            },
 4188|  73.0k|            value);
 4189|  92.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   122k|    {
 4206|   122k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   122k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 89.5k, False: 32.4k]
  |  |  ------------------
  ------------------
 4208|  89.5k|            return unexpected(r.error());
 4209|  89.5k|        }
 4210|       |
 4211|  32.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  32.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 280, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    280|    }                                                  \
  |  |  |  | 3671|  32.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  32.1k|        return ranges::next(range.begin(), n);
 4213|  32.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  19.5k|    {
  754|  19.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  19.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.5k|              cvref<T> obj = *get<T>(fn);
  745|  19.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.5k|              }
  748|  19.5k|              else {
  749|  19.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.5k|              }
  751|  19.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  19.5k|    {
  684|  19.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.5k|            return static_cast<T*>(s.m_cp);
  686|  19.5k|        }
  687|  19.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.5k|            return static_cast<T*>(s.m_p);
  689|  19.5k|        }
  690|  19.5k|        else {
  691|  19.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.5k|        }
  693|  19.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  19.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  19.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  19.5k|        {
  662|  19.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  73.0k|    {
  754|  73.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  73.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.0k|              cvref<T> obj = *get<T>(fn);
  745|  73.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  73.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.0k|              }
  748|  73.0k|              else {
  749|  73.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.0k|              }
  751|  73.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  73.0k|    {
  684|  73.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  73.0k|            return static_cast<T*>(s.m_cp);
  686|  73.0k|        }
  687|  73.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  73.0k|            return static_cast<T*>(s.m_p);
  689|  73.0k|        }
  690|  73.0k|        else {
  691|  73.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  73.0k|        }
  693|  73.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  73.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  73.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  73.0k|        {
  662|  73.0k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  92.6k|    {
 4170|  92.6k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.6k|#if !SCN_DISABLE_LOCALE
 4173|  92.6k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 19.6k, False: 73.0k]
  ------------------
 4174|  19.6k|            return read_impl<Range>(
 4175|  19.6k|                range, rd,
 4176|  19.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  19.6k|                },
 4179|  19.6k|                value, loc);
 4180|  19.6k|        }
 4181|  73.0k|#endif
 4182|       |
 4183|  73.0k|        return read_impl<Range>(
 4184|  73.0k|            range, rd,
 4185|  73.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  73.0k|            },
 4188|  73.0k|            value);
 4189|  92.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   122k|    {
 4206|   122k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   122k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.4k, False: 80.5k]
  |  |  ------------------
  ------------------
 4208|  41.4k|            return unexpected(r.error());
 4209|  41.4k|        }
 4210|       |
 4211|  80.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  80.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.3k, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.3k|    }                                                  \
  |  |  |  | 3671|  80.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  32.2k|        return ranges::next(range.begin(), n);
 4213|  80.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  19.6k|    {
  754|  19.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  19.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.6k|              cvref<T> obj = *get<T>(fn);
  745|  19.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.6k|              }
  748|  19.6k|              else {
  749|  19.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.6k|              }
  751|  19.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  19.6k|    {
  684|  19.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.6k|            return static_cast<T*>(s.m_cp);
  686|  19.6k|        }
  687|  19.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.6k|            return static_cast<T*>(s.m_p);
  689|  19.6k|        }
  690|  19.6k|        else {
  691|  19.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.6k|        }
  693|  19.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  19.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  19.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  19.6k|        {
  662|  19.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  73.0k|    {
  754|  73.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  73.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.0k|              cvref<T> obj = *get<T>(fn);
  745|  73.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  73.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.0k|              }
  748|  73.0k|              else {
  749|  73.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.0k|              }
  751|  73.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  73.0k|    {
  684|  73.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  73.0k|            return static_cast<T*>(s.m_cp);
  686|  73.0k|        }
  687|  73.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  73.0k|            return static_cast<T*>(s.m_p);
  689|  73.0k|        }
  690|  73.0k|        else {
  691|  73.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  73.0k|        }
  693|  73.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  73.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  73.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  73.0k|        {
  662|  73.0k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  93.4k|    {
 6193|  93.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.4k|            auto rd = make_reader<T, char_type>();
 6198|  93.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  93.4k|                return unexpected(e);
 6200|  93.4k|            }
 6201|       |
 6202|  93.4k|            return impl(rd, range, value);
 6203|  93.4k|        }
 6204|  93.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  93.4k|            auto rd = make_reader<T, char_type>();
 6206|  93.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.4k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  93.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 93.4k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  93.4k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  93.4k|                return impl(rd, range, value);
 6213|  93.4k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  93.4k|        else {
 6221|  93.4k|            SCN_EXPECT(false);
 6222|  93.4k|            SCN_UNREACHABLE;
 6223|  93.4k|        }
 6224|  93.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  93.4k|    {
 6124|  93.4k|        const bool need_skipped_width =
 6125|  93.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.4k]
  |  Branch (6125:33): [True: 0, False: 93.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.4k|        auto it = rng.begin();
 6129|  93.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.4k|        else {
 6138|  93.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 606, False: 92.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    606|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    606|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    606|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    606|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    606|    }                                                  \
  |  |  |  | 3671|  93.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.8k|        }
 6141|  92.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.8k|        std::ptrdiff_t value_width = 0;
 6145|  92.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.8k|        else {
 6161|  92.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 69.1k, False: 23.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  69.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  69.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  69.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  69.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  69.1k|    }                                                  \
  |  | 3671|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  23.7k|                                             specs, value, loc));
 6163|       |
 6164|  23.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 23.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  23.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  23.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  23.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 23.5k, False: 150]
  ------------------
 6174|  23.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  23.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 23.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  23.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  23.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  23.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  23.5k|                                 value_width));
 6178|  23.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  23.5k|        }
 6180|       |
 6181|  23.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  23.7k|                                                 value_width, postfix_width);
 6183|  23.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 23.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  23.7k|        return it;
 6188|  23.7k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   113k|    {
 3691|   113k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   113k|        const std::ptrdiff_t sign_len =
 3694|   113k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 92, False: 113k]
  ------------------
 3695|       |
 3696|   113k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.3k, False: 65.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.3k|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  65.1k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   113k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  92.8k|    {
 4170|  92.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.8k|#if !SCN_DISABLE_LOCALE
 4173|  92.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 19.6k, False: 73.1k]
  ------------------
 4174|  19.6k|            return read_impl<Range>(
 4175|  19.6k|                range, rd,
 4176|  19.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  19.6k|                },
 4179|  19.6k|                value, loc);
 4180|  19.6k|        }
 4181|  73.1k|#endif
 4182|       |
 4183|  73.1k|        return read_impl<Range>(
 4184|  73.1k|            range, rd,
 4185|  73.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  73.1k|            },
 4188|  73.1k|            value);
 4189|  92.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   122k|    {
 4206|   122k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   122k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 89.7k, False: 32.5k]
  |  |  ------------------
  ------------------
 4208|  89.7k|            return unexpected(r.error());
 4209|  89.7k|        }
 4210|       |
 4211|  32.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  32.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     51|    }                                                  \
  |  |  |  | 3671|  32.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  32.5k|        return ranges::next(range.begin(), n);
 4213|  32.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  19.6k|    {
  754|  19.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  19.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.6k|              cvref<T> obj = *get<T>(fn);
  745|  19.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.6k|              }
  748|  19.6k|              else {
  749|  19.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.6k|              }
  751|  19.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  19.6k|    {
  684|  19.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.6k|            return static_cast<T*>(s.m_cp);
  686|  19.6k|        }
  687|  19.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.6k|            return static_cast<T*>(s.m_p);
  689|  19.6k|        }
  690|  19.6k|        else {
  691|  19.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.6k|        }
  693|  19.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  19.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  19.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  19.6k|        {
  662|  19.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  73.1k|    {
  754|  73.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  73.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.1k|              cvref<T> obj = *get<T>(fn);
  745|  73.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  73.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.1k|              }
  748|  73.1k|              else {
  749|  73.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.1k|              }
  751|  73.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  73.1k|    {
  684|  73.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  73.1k|            return static_cast<T*>(s.m_cp);
  686|  73.1k|        }
  687|  73.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  73.1k|            return static_cast<T*>(s.m_p);
  689|  73.1k|        }
  690|  73.1k|        else {
  691|  73.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  73.1k|        }
  693|  73.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  73.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  73.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  73.1k|        {
  662|  73.1k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  92.8k|    {
 4170|  92.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.8k|#if !SCN_DISABLE_LOCALE
 4173|  92.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 19.7k, False: 73.1k]
  ------------------
 4174|  19.7k|            return read_impl<Range>(
 4175|  19.7k|                range, rd,
 4176|  19.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  19.7k|                },
 4179|  19.7k|                value, loc);
 4180|  19.7k|        }
 4181|  73.1k|#endif
 4182|       |
 4183|  73.1k|        return read_impl<Range>(
 4184|  73.1k|            range, rd,
 4185|  73.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  73.1k|            },
 4188|  73.1k|            value);
 4189|  92.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   122k|    {
 4206|   122k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   122k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.5k, False: 80.8k]
  |  |  ------------------
  ------------------
 4208|  41.5k|            return unexpected(r.error());
 4209|  41.5k|        }
 4210|       |
 4211|  80.8k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  80.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.2k, False: 32.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.2k|    }                                                  \
  |  |  |  | 3671|  80.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  32.6k|        return ranges::next(range.begin(), n);
 4213|  80.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  19.7k|    {
  754|  19.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  19.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.7k|              cvref<T> obj = *get<T>(fn);
  745|  19.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.7k|              }
  748|  19.7k|              else {
  749|  19.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.7k|              }
  751|  19.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  19.7k|    {
  684|  19.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.7k|            return static_cast<T*>(s.m_cp);
  686|  19.7k|        }
  687|  19.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.7k|            return static_cast<T*>(s.m_p);
  689|  19.7k|        }
  690|  19.7k|        else {
  691|  19.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.7k|        }
  693|  19.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  19.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  19.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  19.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  19.7k|        {
  662|  19.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  73.1k|    {
  754|  73.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  73.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.1k|              cvref<T> obj = *get<T>(fn);
  745|  73.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  73.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.1k|              }
  748|  73.1k|              else {
  749|  73.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.1k|              }
  751|  73.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  73.1k|    {
  684|  73.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  73.1k|            return static_cast<T*>(s.m_cp);
  686|  73.1k|        }
  687|  73.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  73.1k|            return static_cast<T*>(s.m_p);
  689|  73.1k|        }
  690|  73.1k|        else {
  691|  73.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  73.1k|        }
  693|  73.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  73.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  73.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  73.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  73.1k|        {
  662|  73.1k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   368k|{
 2061|   368k|    auto it = range.begin();
 2062|   460k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 458k, False: 2.19k]
  ------------------
 2063|   458k|        const auto val =
 2064|   458k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   458k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   458k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 458k, False: 0]
  |  |  ------------------
  ------------------
 2066|   458k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   458k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   458k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 366k, False: 91.9k]
  ------------------
 2069|   366k|                return it;
 2070|   366k|            }
 2071|   458k|        }
 2072|  91.9k|        it = val.iterator;
 2073|  91.9k|    }
 2074|       |
 2075|  2.19k|    return it;
 2076|   368k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   458k|{
 1899|   458k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   458k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   458k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   458k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   458k|    auto it = range.begin();
 1903|   458k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   458k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 458k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   458k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 458k, False: 0]
  ------------------
 1912|   458k|        ++it;
 1913|   458k|        return {it, string_type(1, *range.begin())};
 1914|   458k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   458k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   458k|    {
 1890|   458k|        return !codepoint.empty();
 1891|   458k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   368k|{
 2082|   368k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   368k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   368k|{
 2951|   368k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 368k, False: 0]
  ------------------
 2952|   368k|        auto it = read_while_classic_space(range);
 2953|   368k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   368k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.19k, False: 366k]
  |  |  ------------------
  ------------------
 2955|  2.19k|            return unexpected(e);
 2956|  2.19k|        }
 2957|       |
 2958|   366k|        return it;
 2959|   368k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   368k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   368k|{
 2117|   368k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   368k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   368k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   368k|        auto buf = make_contiguous_buffer(range);
 2121|   368k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   368k|        return ranges::next(range.begin(),
 2123|   368k|                            ranges::distance(buf.view().begin(), it));
 2124|   368k|    }
 2125|   368k|    else {
 2126|   368k|        auto it = range.begin();
 2127|       |
 2128|   368k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   368k|            auto seg = get_contiguous_beginning(range);
 2130|   368k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   368k|                seg_it != seg.end()) {
 2132|   368k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   368k|            }
 2134|   368k|            ranges::advance(it, seg.size());
 2135|   368k|        }
 2136|       |
 2137|   368k|        return read_while_code_point(
 2138|   368k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   368k|    }
 2140|   368k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   368k|    {
  754|   368k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   458k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   458k|              cvref<T> obj = *get<T>(fn);
  745|   458k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   458k|                  obj(static_cast<decltype(args)>(args)...);
  747|   458k|              }
  748|   458k|              else {
  749|   458k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   458k|              }
  751|   458k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   458k|    {
  684|   458k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   458k|            return static_cast<T*>(s.m_cp);
  686|   458k|        }
  687|   458k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   458k|            return static_cast<T*>(s.m_p);
  689|   458k|        }
  690|   458k|        else {
  691|   458k|            return reinterpret_cast<T*>(s.m_fp);
  692|   458k|        }
  693|   458k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   458k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   368k|        {
  662|   368k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.38M|{
 2088|  2.38M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.38M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.38M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.38M|        auto buf = make_contiguous_buffer(range);
 2092|  2.38M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.38M|        return ranges::next(range.begin(),
 2094|  2.38M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.38M|    }
 2096|  2.38M|    else {
 2097|  2.38M|        auto it = range.begin();
 2098|       |
 2099|  2.38M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.38M|            auto seg = get_contiguous_beginning(range);
 2101|  2.38M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.38M|                seg_it != seg.end()) {
 2103|  2.38M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.38M|            }
 2105|  2.38M|            ranges::advance(it, seg.size());
 2106|  2.38M|        }
 2107|       |
 2108|  2.38M|        return read_until_code_point(
 2109|  2.38M|            ranges::subrange{it, range.end()},
 2110|  2.38M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.38M|    }
 2112|  2.38M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.38M|{
 1683|  2.38M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.38M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.38M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.38M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.38M|    }
 1688|  2.38M|    else {
 1689|  2.38M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.38M|    }
 1691|  2.38M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.38M|    {
 1490|  2.38M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.38M|    {
 1577|  2.38M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.38M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.38M|    {
 1621|  2.38M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.38M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.38M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.38M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.38M|            m_storage.reset();
 1627|  2.38M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.38M|        }
 1629|  2.38M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.38M|                                          std::basic_string<CharT>>) {
 1631|  2.38M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.38M|            m_view = string_view_type{*m_storage};
 1633|  2.38M|        }
 1634|  2.38M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.38M|                                          typename detail::basic_scan_buffer<
 1636|  2.38M|                                              value_t>::forward_iterator> &&
 1637|  2.38M|                           ranges::common_range<Range>) {
 1638|  2.38M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.38M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.38M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.38M|                             detail::to_address(end_seg.end()))) {
 1642|  2.38M|                auto& str = m_storage.emplace();
 1643|  2.38M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.38M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.38M|                m_view = string_view_type{str};
 1646|  2.38M|                return;
 1647|  2.38M|            }
 1648|       |
 1649|  2.38M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.38M|                                                            end_seg.data());
 1651|  2.38M|            m_storage.reset();
 1652|  2.38M|        }
 1653|  2.38M|        else {
 1654|  2.38M|            auto& str = m_storage.emplace();
 1655|  2.38M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.38M|                str.reserve(range.size());
 1657|  2.38M|            }
 1658|  2.38M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.38M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.38M|                          std::back_inserter(str));
 1661|  2.38M|            }
 1662|  2.38M|            else {
 1663|  2.38M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.38M|                     ++it) {
 1665|  2.38M|                    str.push_back(*it);
 1666|  2.38M|                }
 1667|  2.38M|            }
 1668|  2.38M|            m_view = string_view_type{str};
 1669|  2.38M|        }
 1670|  2.38M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.63M|    {
 4100|  1.63M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 184k, False: 1.44M]
  ------------------
 4101|   184k|            return std::copysign(value, T{-1.0});
 4102|   184k|        }
 4103|  1.44M|        return std::copysign(value, T{1.0});
 4104|  1.63M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  88.3k|{
 2088|  88.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  88.3k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  88.3k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  88.3k|        auto buf = make_contiguous_buffer(range);
 2092|  88.3k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  88.3k|        return ranges::next(range.begin(),
 2094|  88.3k|                            ranges::distance(buf.view().begin(), it));
 2095|  88.3k|    }
 2096|  88.3k|    else {
 2097|  88.3k|        auto it = range.begin();
 2098|       |
 2099|  88.3k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  88.3k|            auto seg = get_contiguous_beginning(range);
 2101|  88.3k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  88.3k|                seg_it != seg.end()) {
 2103|  88.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  88.3k|            }
 2105|  88.3k|            ranges::advance(it, seg.size());
 2106|  88.3k|        }
 2107|       |
 2108|  88.3k|        return read_until_code_point(
 2109|  88.3k|            ranges::subrange{it, range.end()},
 2110|  88.3k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  88.3k|    }
 2112|  88.3k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  88.3k|    {
  754|  88.3k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   183k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   183k|              cvref<T> obj = *get<T>(fn);
  745|   183k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   183k|                  obj(static_cast<decltype(args)>(args)...);
  747|   183k|              }
  748|   183k|              else {
  749|   183k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   183k|              }
  751|   183k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   183k|    {
  684|   183k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   183k|            return static_cast<T*>(s.m_cp);
  686|   183k|        }
  687|   183k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   183k|            return static_cast<T*>(s.m_p);
  689|   183k|        }
  690|   183k|        else {
  691|   183k|            return reinterpret_cast<T*>(s.m_fp);
  692|   183k|        }
  693|   183k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   183k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  88.3k|        {
  662|  88.3k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  88.3k|    {
 1577|  88.3k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  88.3k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  88.3k|    {
 1621|  88.3k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  88.3k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  88.3k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  88.3k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  88.3k|            m_storage.reset();
 1627|  88.3k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  88.3k|        }
 1629|  88.3k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  88.3k|                                          std::basic_string<CharT>>) {
 1631|  88.3k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  88.3k|            m_view = string_view_type{*m_storage};
 1633|  88.3k|        }
 1634|  88.3k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  88.3k|                                          typename detail::basic_scan_buffer<
 1636|  88.3k|                                              value_t>::forward_iterator> &&
 1637|  88.3k|                           ranges::common_range<Range>) {
 1638|  88.3k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  88.3k|            auto end_seg = range.end().contiguous_segment();
 1640|  88.3k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  88.3k|                             detail::to_address(end_seg.end()))) {
 1642|  88.3k|                auto& str = m_storage.emplace();
 1643|  88.3k|                str.reserve(range.end().position() - range.begin().position());
 1644|  88.3k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  88.3k|                m_view = string_view_type{str};
 1646|  88.3k|                return;
 1647|  88.3k|            }
 1648|       |
 1649|  88.3k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  88.3k|                                                            end_seg.data());
 1651|  88.3k|            m_storage.reset();
 1652|  88.3k|        }
 1653|  88.3k|        else {
 1654|  88.3k|            auto& str = m_storage.emplace();
 1655|  88.3k|            if constexpr (ranges::sized_range<Range>) {
 1656|  88.3k|                str.reserve(range.size());
 1657|  88.3k|            }
 1658|  88.3k|            if constexpr (ranges::common_range<Range>) {
 1659|  88.3k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  88.3k|                          std::back_inserter(str));
 1661|  88.3k|            }
 1662|  88.3k|            else {
 1663|  88.3k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  88.3k|                     ++it) {
 1665|  88.3k|                    str.push_back(*it);
 1666|  88.3k|                }
 1667|  88.3k|            }
 1668|  88.3k|            m_view = string_view_type{str};
 1669|  88.3k|        }
 1670|  88.3k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   112k|    {
 4100|   112k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 86, False: 112k]
  ------------------
 4101|     86|            return std::copysign(value, T{-1.0});
 4102|     86|        }
 4103|   112k|        return std::copysign(value, T{1.0});
 4104|   112k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.75M|    {
 4100|  1.75M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 197k, False: 1.56M]
  ------------------
 4101|   197k|            return std::copysign(value, T{-1.0});
 4102|   197k|        }
 4103|  1.56M|        return std::copysign(value, T{1.0});
 4104|  1.75M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   113k|    {
 4100|   113k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 86, False: 112k]
  ------------------
 4101|     86|            return std::copysign(value, T{-1.0});
 4102|     86|        }
 4103|   112k|        return std::copysign(value, T{1.0});
 4104|   113k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.77M|    {
 4100|  1.77M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 203k, False: 1.57M]
  ------------------
 4101|   203k|            return std::copysign(value, T{-1.0});
 4102|   203k|        }
 4103|  1.57M|        return std::copysign(value, T{1.0});
 4104|  1.77M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   113k|    {
 4100|   113k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 86, False: 113k]
  ------------------
 4101|     86|            return std::copysign(value, T{-1.0});
 4102|     86|        }
 4103|   113k|        return std::copysign(value, T{1.0});
 4104|   113k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   799k|{
 5795|   799k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.22k, False: 793k]
  |  |  ------------------
  ------------------
 5796|  6.22k|        return unexpected(e);
 5797|  6.22k|    }
 5798|       |
 5799|   793k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 793k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   793k|    return skip_classic_whitespace(range);
 5804|   793k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   247k|    {
 5871|   247k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   247k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   247k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   247k|            auto rd = make_reader<T, char_type>();
 5876|   247k|            return impl(rd, range, value);
 5877|   247k|        }
 5878|   247k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   247k|            auto rd = make_reader<T, char_type>();
 5880|   247k|            if (!is_segment_contiguous(range)) {
 5881|   247k|                return impl(rd, range, value);
 5882|   247k|            }
 5883|   247k|            auto crange = get_as_contiguous(range);
 5884|   247k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   247k|            return ranges::next(range.begin(),
 5886|   247k|                                ranges::distance(crange.begin(), it));
 5887|   247k|        }
 5888|   247k|        else {
 5889|   247k|            SCN_EXPECT(false);
 5890|   247k|            SCN_UNREACHABLE;
 5891|   247k|        }
 5892|   247k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   247k|    {
 5863|   247k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.19k, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.19k|    }                                                  \
  |  |  |  | 3671|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   245k|                        .transform_error(make_eof_scan_error));
 5865|   245k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   247k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   245k|    {
 4152|   245k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   245k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   245k|        float_reader<CharT> rd{};
 4155|   245k|        return read_impl<Range>(
 4156|   245k|            range, rd,
 4157|   245k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   245k|                return r.read_source(SCN_FWD(args)...);
 4159|   245k|            },
 4160|   245k|            value);
 4161|   245k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.54M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.72M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   245k|    {
  754|   245k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   245k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   245k|              cvref<T> obj = *get<T>(fn);
  745|   245k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   245k|                  obj(static_cast<decltype(args)>(args)...);
  747|   245k|              }
  748|   245k|              else {
  749|   245k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   245k|              }
  751|   245k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   245k|    {
  684|   245k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   245k|            return static_cast<T*>(s.m_cp);
  686|   245k|        }
  687|   245k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   245k|            return static_cast<T*>(s.m_p);
  689|   245k|        }
  690|   245k|        else {
  691|   245k|            return reinterpret_cast<T*>(s.m_fp);
  692|   245k|        }
  693|   245k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   245k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   245k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   245k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   245k|        {
  662|   245k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   273k|    {
 5871|   273k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   273k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   273k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   273k|            auto rd = make_reader<T, char_type>();
 5876|   273k|            return impl(rd, range, value);
 5877|   273k|        }
 5878|   273k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   273k|            auto rd = make_reader<T, char_type>();
 5880|   273k|            if (!is_segment_contiguous(range)) {
 5881|   273k|                return impl(rd, range, value);
 5882|   273k|            }
 5883|   273k|            auto crange = get_as_contiguous(range);
 5884|   273k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   273k|            return ranges::next(range.begin(),
 5886|   273k|                                ranges::distance(crange.begin(), it));
 5887|   273k|        }
 5888|   273k|        else {
 5889|   273k|            SCN_EXPECT(false);
 5890|   273k|            SCN_UNREACHABLE;
 5891|   273k|        }
 5892|   273k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   273k|    {
 5863|   273k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.52k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.52k|    }                                                  \
  |  |  |  | 3671|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   271k|                        .transform_error(make_eof_scan_error));
 5865|   271k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   273k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   271k|    {
 4152|   271k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   271k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   271k|        float_reader<CharT> rd{};
 4155|   271k|        return read_impl<Range>(
 4156|   271k|            range, rd,
 4157|   271k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   271k|                return r.read_source(SCN_FWD(args)...);
 4159|   271k|            },
 4160|   271k|            value);
 4161|   271k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   271k|    {
  754|   271k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   271k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   271k|              cvref<T> obj = *get<T>(fn);
  745|   271k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   271k|                  obj(static_cast<decltype(args)>(args)...);
  747|   271k|              }
  748|   271k|              else {
  749|   271k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   271k|              }
  751|   271k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   271k|    {
  684|   271k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   271k|            return static_cast<T*>(s.m_cp);
  686|   271k|        }
  687|   271k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   271k|            return static_cast<T*>(s.m_p);
  689|   271k|        }
  690|   271k|        else {
  691|   271k|            return reinterpret_cast<T*>(s.m_fp);
  692|   271k|        }
  693|   271k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   271k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   271k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   271k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   271k|        {
  662|   271k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   278k|    {
 5871|   278k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   278k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   278k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   278k|            auto rd = make_reader<T, char_type>();
 5876|   278k|            return impl(rd, range, value);
 5877|   278k|        }
 5878|   278k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   278k|            auto rd = make_reader<T, char_type>();
 5880|   278k|            if (!is_segment_contiguous(range)) {
 5881|   278k|                return impl(rd, range, value);
 5882|   278k|            }
 5883|   278k|            auto crange = get_as_contiguous(range);
 5884|   278k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   278k|            return ranges::next(range.begin(),
 5886|   278k|                                ranges::distance(crange.begin(), it));
 5887|   278k|        }
 5888|   278k|        else {
 5889|   278k|            SCN_EXPECT(false);
 5890|   278k|            SCN_UNREACHABLE;
 5891|   278k|        }
 5892|   278k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   278k|    {
 5863|   278k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.69k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.69k|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   275k|                        .transform_error(make_eof_scan_error));
 5865|   275k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   278k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   275k|    {
 4152|   275k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   275k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   275k|        float_reader<CharT> rd{};
 4155|   275k|        return read_impl<Range>(
 4156|   275k|            range, rd,
 4157|   275k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   275k|                return r.read_source(SCN_FWD(args)...);
 4159|   275k|            },
 4160|   275k|            value);
 4161|   275k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   275k|    {
  754|   275k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   275k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   275k|              cvref<T> obj = *get<T>(fn);
  745|   275k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   275k|                  obj(static_cast<decltype(args)>(args)...);
  747|   275k|              }
  748|   275k|              else {
  749|   275k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   275k|              }
  751|   275k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   275k|    {
  684|   275k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   275k|            return static_cast<T*>(s.m_cp);
  686|   275k|        }
  687|   275k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   275k|            return static_cast<T*>(s.m_p);
  689|   275k|        }
  690|   275k|        else {
  691|   275k|            return reinterpret_cast<T*>(s.m_fp);
  692|   275k|        }
  693|   275k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   275k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   275k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   275k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   275k|        {
  662|   275k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   761k|{
 5795|   761k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 755k]
  |  |  ------------------
  ------------------
 5796|  6.27k|        return unexpected(e);
 5797|  6.27k|    }
 5798|       |
 5799|   755k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 755k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   755k|    return skip_classic_whitespace(range);
 5804|   755k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   236k|    {
 5871|   236k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   236k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   236k|            auto rd = make_reader<T, char_type>();
 5876|   236k|            return impl(rd, range, value);
 5877|   236k|        }
 5878|   236k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   236k|            auto rd = make_reader<T, char_type>();
 5880|   236k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 236k, False: 0]
  ------------------
 5881|   236k|                return impl(rd, range, value);
 5882|   236k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   236k|        else {
 5889|   236k|            SCN_EXPECT(false);
 5890|   236k|            SCN_UNREACHABLE;
 5891|   236k|        }
 5892|   236k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   236k|    {
 5863|   236k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.19k, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.19k|    }                                                  \
  |  |  |  | 3671|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   234k|                        .transform_error(make_eof_scan_error));
 5865|   234k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   236k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   234k|    {
 4152|   234k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   234k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   234k|        float_reader<CharT> rd{};
 4155|   234k|        return read_impl<Range>(
 4156|   234k|            range, rd,
 4157|   234k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   234k|                return r.read_source(SCN_FWD(args)...);
 4159|   234k|            },
 4160|   234k|            value);
 4161|   234k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   234k|    {
  754|   234k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   234k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   234k|              cvref<T> obj = *get<T>(fn);
  745|   234k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   234k|                  obj(static_cast<decltype(args)>(args)...);
  747|   234k|              }
  748|   234k|              else {
  749|   234k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   234k|              }
  751|   234k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   234k|    {
  684|   234k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   234k|            return static_cast<T*>(s.m_cp);
  686|   234k|        }
  687|   234k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   234k|            return static_cast<T*>(s.m_p);
  689|   234k|        }
  690|   234k|        else {
  691|   234k|            return reinterpret_cast<T*>(s.m_fp);
  692|   234k|        }
  693|   234k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   234k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   234k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   234k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   234k|        {
  662|   234k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   261k|    {
 5871|   261k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   261k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   261k|            auto rd = make_reader<T, char_type>();
 5876|   261k|            return impl(rd, range, value);
 5877|   261k|        }
 5878|   261k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   261k|            auto rd = make_reader<T, char_type>();
 5880|   261k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 261k, False: 0]
  ------------------
 5881|   261k|                return impl(rd, range, value);
 5882|   261k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   261k|        else {
 5889|   261k|            SCN_EXPECT(false);
 5890|   261k|            SCN_UNREACHABLE;
 5891|   261k|        }
 5892|   261k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   261k|    {
 5863|   261k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.52k, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.52k|    }                                                  \
  |  |  |  | 3671|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   258k|                        .transform_error(make_eof_scan_error));
 5865|   258k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   261k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   258k|    {
 4152|   258k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   258k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   258k|        float_reader<CharT> rd{};
 4155|   258k|        return read_impl<Range>(
 4156|   258k|            range, rd,
 4157|   258k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   258k|                return r.read_source(SCN_FWD(args)...);
 4159|   258k|            },
 4160|   258k|            value);
 4161|   258k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   258k|    {
  754|   258k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   258k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   258k|              cvref<T> obj = *get<T>(fn);
  745|   258k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   258k|                  obj(static_cast<decltype(args)>(args)...);
  747|   258k|              }
  748|   258k|              else {
  749|   258k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   258k|              }
  751|   258k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   258k|    {
  684|   258k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   258k|            return static_cast<T*>(s.m_cp);
  686|   258k|        }
  687|   258k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   258k|            return static_cast<T*>(s.m_p);
  689|   258k|        }
  690|   258k|        else {
  691|   258k|            return reinterpret_cast<T*>(s.m_fp);
  692|   258k|        }
  693|   258k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   258k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   258k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   258k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   258k|        {
  662|   258k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   264k|    {
 5871|   264k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   264k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   264k|            auto rd = make_reader<T, char_type>();
 5876|   264k|            return impl(rd, range, value);
 5877|   264k|        }
 5878|   264k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   264k|            auto rd = make_reader<T, char_type>();
 5880|   264k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 264k, False: 0]
  ------------------
 5881|   264k|                return impl(rd, range, value);
 5882|   264k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   264k|        else {
 5889|   264k|            SCN_EXPECT(false);
 5890|   264k|            SCN_UNREACHABLE;
 5891|   264k|        }
 5892|   264k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   264k|    {
 5863|   264k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   264k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   264k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   264k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.67k, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.67k|    }                                                  \
  |  |  |  | 3671|   264k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   261k|                        .transform_error(make_eof_scan_error));
 5865|   261k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   264k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   261k|    {
 4152|   261k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   261k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   261k|        float_reader<CharT> rd{};
 4155|   261k|        return read_impl<Range>(
 4156|   261k|            range, rd,
 4157|   261k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   261k|                return r.read_source(SCN_FWD(args)...);
 4159|   261k|            },
 4160|   261k|            value);
 4161|   261k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   261k|    {
  754|   261k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   261k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   261k|              cvref<T> obj = *get<T>(fn);
  745|   261k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   261k|                  obj(static_cast<decltype(args)>(args)...);
  747|   261k|              }
  748|   261k|              else {
  749|   261k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   261k|              }
  751|   261k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   261k|    {
  684|   261k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   261k|            return static_cast<T*>(s.m_cp);
  686|   261k|        }
  687|   261k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   261k|            return static_cast<T*>(s.m_p);
  689|   261k|        }
  690|   261k|        else {
  691|   261k|            return reinterpret_cast<T*>(s.m_fp);
  692|   261k|        }
  693|   261k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   261k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   261k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   261k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   261k|        {
  662|   261k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.85M|    {
 2879|  1.85M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  5.47M|    {
 2883|  5.47M|        return m_current;
 2884|  5.47M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.61M|    {
 2888|  3.61M|        return m_range.end();
 2889|  3.61M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.75M|    {
 2903|  1.75M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.75M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.75M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.75M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.75M|        }
 2909|  1.75M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.75M|    static_cast<    \
  |  |  929|  1.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.75M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.85M|    {
 2893|  1.85M|        return ranges::subrange{begin(), end()};
 2894|  1.85M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.85M|    {
 6037|  1.85M|        const bool need_skipped_width =
 6038|  1.85M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.85M]
  |  Branch (6038:33): [True: 0, False: 1.85M]
  ------------------
 6039|  1.85M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.85M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.85M]
  ------------------
 6043|  1.85M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.85M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.85M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.85M, False: 0]
  |  Branch (6047:56): [True: 1.85M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.85M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.85M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.70M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.85M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.8k, False: 1.84M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.8k|    }                                                  \
  |  |  |  | 3671|  1.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.70M|                            make_eof_scan_error));
 6058|       |
 6059|  3.70M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.84M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.84M|            return result_type{it, 0};
 6067|  3.70M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.85M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.73M|    {
 6079|  1.73M|        const bool need_skipped_width =
 6080|  1.73M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.73M]
  |  Branch (6080:33): [True: 0, False: 1.73M]
  ------------------
 6081|  1.73M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.73M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.73M]
  ------------------
 6084|  1.73M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.73M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.73M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.73M, False: 0]
  ------------------
 6093|  1.73M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.73M]
  ------------------
 6094|  1.73M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.73M|        return result_type{rng.begin(), 0};
 6118|  1.73M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   590k|    {
 6193|   590k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   590k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   590k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   590k|            auto rd = make_reader<T, char_type>();
 6198|   590k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   590k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 590k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   590k|            return impl(rd, range, value);
 6203|   590k|        }
 6204|   590k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   590k|            auto rd = make_reader<T, char_type>();
 6206|   590k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   590k|                return unexpected(e);
 6208|   590k|            }
 6209|       |
 6210|   590k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   590k|                specs.width != 0) {
 6212|   590k|                return impl(rd, range, value);
 6213|   590k|            }
 6214|       |
 6215|   590k|            auto crange = get_as_contiguous(range);
 6216|   590k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   590k|            return ranges::next(range.begin(),
 6218|   590k|                                ranges::distance(crange.begin(), it));
 6219|   590k|        }
 6220|   590k|        else {
 6221|   590k|            SCN_EXPECT(false);
 6222|   590k|            SCN_UNREACHABLE;
 6223|   590k|        }
 6224|   590k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   590k|    {
 6124|   590k|        const bool need_skipped_width =
 6125|   590k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 590k]
  |  Branch (6125:33): [True: 0, False: 590k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   590k|        auto it = rng.begin();
 6129|   590k|        std::ptrdiff_t prefix_width = 0;
 6130|   590k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 590k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   590k|        else {
 6138|   590k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   590k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   590k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   590k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   590k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.71k, False: 584k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.71k|    }                                                  \
  |  |  |  | 3671|   590k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   584k|            std::tie(it, prefix_width) = prefix_result;
 6140|   584k|        }
 6141|   584k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   584k|        std::ptrdiff_t value_width = 0;
 6145|   584k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 584k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   584k|        else {
 6161|   584k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   584k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   584k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 29.1k, False: 555k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  29.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  29.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  29.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  29.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  29.1k|    }                                                  \
  |  | 3671|   584k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   555k|                                             specs, value, loc));
 6163|       |
 6164|   555k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 555k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   555k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   555k|        std::ptrdiff_t postfix_width = 0;
 6173|   555k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 550k, False: 4.75k]
  ------------------
 6174|   550k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   550k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   550k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   550k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 550k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   550k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   550k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   550k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   550k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   550k|                                 value_width));
 6178|   550k|            std::tie(it, postfix_width) = postfix_result;
 6179|   550k|        }
 6180|       |
 6181|   555k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   555k|                                                 value_width, postfix_width);
 6183|   555k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 555k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   555k|        return it;
 6188|   555k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   631k|    {
 6193|   631k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   631k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   631k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   631k|            auto rd = make_reader<T, char_type>();
 6198|   631k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 631k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   631k|            return impl(rd, range, value);
 6203|   631k|        }
 6204|   631k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   631k|            auto rd = make_reader<T, char_type>();
 6206|   631k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   631k|                return unexpected(e);
 6208|   631k|            }
 6209|       |
 6210|   631k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   631k|                specs.width != 0) {
 6212|   631k|                return impl(rd, range, value);
 6213|   631k|            }
 6214|       |
 6215|   631k|            auto crange = get_as_contiguous(range);
 6216|   631k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   631k|            return ranges::next(range.begin(),
 6218|   631k|                                ranges::distance(crange.begin(), it));
 6219|   631k|        }
 6220|   631k|        else {
 6221|   631k|            SCN_EXPECT(false);
 6222|   631k|            SCN_UNREACHABLE;
 6223|   631k|        }
 6224|   631k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   631k|    {
 6124|   631k|        const bool need_skipped_width =
 6125|   631k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 631k]
  |  Branch (6125:33): [True: 0, False: 631k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   631k|        auto it = rng.begin();
 6129|   631k|        std::ptrdiff_t prefix_width = 0;
 6130|   631k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 631k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   631k|        else {
 6138|   631k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   631k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   631k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   631k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.38k, False: 624k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.38k|    }                                                  \
  |  |  |  | 3671|   631k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   624k|            std::tie(it, prefix_width) = prefix_result;
 6140|   624k|        }
 6141|   624k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   624k|        std::ptrdiff_t value_width = 0;
 6145|   624k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 624k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   624k|        else {
 6161|   624k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   624k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   624k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.4k, False: 596k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  28.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  28.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  28.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  28.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  28.4k|    }                                                  \
  |  | 3671|   624k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   596k|                                             specs, value, loc));
 6163|       |
 6164|   596k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 596k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   596k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   596k|        std::ptrdiff_t postfix_width = 0;
 6173|   596k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 590k, False: 5.32k]
  ------------------
 6174|   590k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   590k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   590k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   590k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   590k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 590k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   590k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   590k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   590k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   590k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   590k|                                 value_width));
 6178|   590k|            std::tie(it, postfix_width) = postfix_result;
 6179|   590k|        }
 6180|       |
 6181|   596k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   596k|                                                 value_width, postfix_width);
 6183|   596k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 596k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   596k|        return it;
 6188|   596k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   637k|    {
 6193|   637k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   637k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   637k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   637k|            auto rd = make_reader<T, char_type>();
 6198|   637k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 637k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   637k|            return impl(rd, range, value);
 6203|   637k|        }
 6204|   637k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   637k|            auto rd = make_reader<T, char_type>();
 6206|   637k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   637k|                return unexpected(e);
 6208|   637k|            }
 6209|       |
 6210|   637k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   637k|                specs.width != 0) {
 6212|   637k|                return impl(rd, range, value);
 6213|   637k|            }
 6214|       |
 6215|   637k|            auto crange = get_as_contiguous(range);
 6216|   637k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   637k|            return ranges::next(range.begin(),
 6218|   637k|                                ranges::distance(crange.begin(), it));
 6219|   637k|        }
 6220|   637k|        else {
 6221|   637k|            SCN_EXPECT(false);
 6222|   637k|            SCN_UNREACHABLE;
 6223|   637k|        }
 6224|   637k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   637k|    {
 6124|   637k|        const bool need_skipped_width =
 6125|   637k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 637k]
  |  Branch (6125:33): [True: 0, False: 637k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   637k|        auto it = rng.begin();
 6129|   637k|        std::ptrdiff_t prefix_width = 0;
 6130|   637k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 637k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   637k|        else {
 6138|   637k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   637k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   637k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   637k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.74k, False: 631k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.74k|    }                                                  \
  |  |  |  | 3671|   637k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   631k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   631k|            std::tie(it, prefix_width) = prefix_result;
 6140|   631k|        }
 6141|   631k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   631k|        std::ptrdiff_t value_width = 0;
 6145|   631k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 631k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   631k|        else {
 6161|   631k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   631k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   631k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.1k, False: 602k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  28.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  28.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  28.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  28.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  28.1k|    }                                                  \
  |  | 3671|   631k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   631k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   602k|                                             specs, value, loc));
 6163|       |
 6164|   602k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 602k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   602k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   602k|        std::ptrdiff_t postfix_width = 0;
 6173|   602k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 597k, False: 5.64k]
  ------------------
 6174|   597k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   597k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   597k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   597k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 597k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   597k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   597k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   597k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   597k|                                 value_width));
 6178|   597k|            std::tie(it, postfix_width) = postfix_result;
 6179|   597k|        }
 6180|       |
 6181|   602k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   602k|                                                 value_width, postfix_width);
 6183|   602k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 602k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   602k|        return it;
 6188|   602k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  88.9k|{
 5795|  88.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 88.7k]
  |  |  ------------------
  ------------------
 5796|    159|        return unexpected(e);
 5797|    159|    }
 5798|       |
 5799|  88.7k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 88.7k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  88.7k|    return skip_classic_whitespace(range);
 5804|  88.7k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  29.5k|    {
 5871|  29.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  29.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  29.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  29.5k|            auto rd = make_reader<T, char_type>();
 5876|  29.5k|            return impl(rd, range, value);
 5877|  29.5k|        }
 5878|  29.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  29.5k|            auto rd = make_reader<T, char_type>();
 5880|  29.5k|            if (!is_segment_contiguous(range)) {
 5881|  29.5k|                return impl(rd, range, value);
 5882|  29.5k|            }
 5883|  29.5k|            auto crange = get_as_contiguous(range);
 5884|  29.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  29.5k|            return ranges::next(range.begin(),
 5886|  29.5k|                                ranges::distance(crange.begin(), it));
 5887|  29.5k|        }
 5888|  29.5k|        else {
 5889|  29.5k|            SCN_EXPECT(false);
 5890|  29.5k|            SCN_UNREACHABLE;
 5891|  29.5k|        }
 5892|  29.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  29.5k|    {
 5863|  29.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  29.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 183, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    183|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    183|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    183|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    183|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    183|    }                                                  \
  |  |  |  | 3671|  29.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  29.3k|                        .transform_error(make_eof_scan_error));
 5865|  29.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  29.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  29.3k|    {
 4152|  29.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  29.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  29.3k|        float_reader<CharT> rd{};
 4155|  29.3k|        return read_impl<Range>(
 4156|  29.3k|            range, rd,
 4157|  29.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  29.3k|            },
 4160|  29.3k|            value);
 4161|  29.3k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   176k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  29.3k|    {
  754|  29.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  29.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.3k|              cvref<T> obj = *get<T>(fn);
  745|  29.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.3k|              }
  748|  29.3k|              else {
  749|  29.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.3k|              }
  751|  29.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.3k|    {
  684|  29.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.3k|            return static_cast<T*>(s.m_cp);
  686|  29.3k|        }
  687|  29.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.3k|            return static_cast<T*>(s.m_p);
  689|  29.3k|        }
  690|  29.3k|        else {
  691|  29.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.3k|        }
  693|  29.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  29.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  29.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  29.3k|        {
  662|  29.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  29.6k|    {
 5871|  29.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  29.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  29.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  29.6k|            auto rd = make_reader<T, char_type>();
 5876|  29.6k|            return impl(rd, range, value);
 5877|  29.6k|        }
 5878|  29.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  29.6k|            auto rd = make_reader<T, char_type>();
 5880|  29.6k|            if (!is_segment_contiguous(range)) {
 5881|  29.6k|                return impl(rd, range, value);
 5882|  29.6k|            }
 5883|  29.6k|            auto crange = get_as_contiguous(range);
 5884|  29.6k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  29.6k|            return ranges::next(range.begin(),
 5886|  29.6k|                                ranges::distance(crange.begin(), it));
 5887|  29.6k|        }
 5888|  29.6k|        else {
 5889|  29.6k|            SCN_EXPECT(false);
 5890|  29.6k|            SCN_UNREACHABLE;
 5891|  29.6k|        }
 5892|  29.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  29.6k|    {
 5863|  29.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  29.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 201, False: 29.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    201|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    201|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    201|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    201|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    201|    }                                                  \
  |  |  |  | 3671|  29.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  29.4k|                        .transform_error(make_eof_scan_error));
 5865|  29.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  29.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  29.4k|    {
 4152|  29.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  29.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  29.4k|        float_reader<CharT> rd{};
 4155|  29.4k|        return read_impl<Range>(
 4156|  29.4k|            range, rd,
 4157|  29.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  29.4k|            },
 4160|  29.4k|            value);
 4161|  29.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  29.4k|    {
  754|  29.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  29.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.4k|              cvref<T> obj = *get<T>(fn);
  745|  29.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.4k|              }
  748|  29.4k|              else {
  749|  29.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.4k|              }
  751|  29.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.4k|    {
  684|  29.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.4k|            return static_cast<T*>(s.m_cp);
  686|  29.4k|        }
  687|  29.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.4k|            return static_cast<T*>(s.m_p);
  689|  29.4k|        }
  690|  29.4k|        else {
  691|  29.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.4k|        }
  693|  29.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  29.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  29.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  29.4k|        {
  662|  29.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  29.7k|    {
 5871|  29.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  29.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  29.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  29.7k|            auto rd = make_reader<T, char_type>();
 5876|  29.7k|            return impl(rd, range, value);
 5877|  29.7k|        }
 5878|  29.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  29.7k|            auto rd = make_reader<T, char_type>();
 5880|  29.7k|            if (!is_segment_contiguous(range)) {
 5881|  29.7k|                return impl(rd, range, value);
 5882|  29.7k|            }
 5883|  29.7k|            auto crange = get_as_contiguous(range);
 5884|  29.7k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  29.7k|            return ranges::next(range.begin(),
 5886|  29.7k|                                ranges::distance(crange.begin(), it));
 5887|  29.7k|        }
 5888|  29.7k|        else {
 5889|  29.7k|            SCN_EXPECT(false);
 5890|  29.7k|            SCN_UNREACHABLE;
 5891|  29.7k|        }
 5892|  29.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  29.7k|    {
 5863|  29.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  29.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 207, False: 29.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    207|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    207|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    207|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    207|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    207|    }                                                  \
  |  |  |  | 3671|  29.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  29.5k|                        .transform_error(make_eof_scan_error));
 5865|  29.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  29.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  29.5k|    {
 4152|  29.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  29.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  29.5k|        float_reader<CharT> rd{};
 4155|  29.5k|        return read_impl<Range>(
 4156|  29.5k|            range, rd,
 4157|  29.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  29.5k|            },
 4160|  29.5k|            value);
 4161|  29.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  29.5k|    {
  754|  29.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  29.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.5k|              cvref<T> obj = *get<T>(fn);
  745|  29.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.5k|              }
  748|  29.5k|              else {
  749|  29.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.5k|              }
  751|  29.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.5k|    {
  684|  29.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.5k|            return static_cast<T*>(s.m_cp);
  686|  29.5k|        }
  687|  29.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.5k|            return static_cast<T*>(s.m_p);
  689|  29.5k|        }
  690|  29.5k|        else {
  691|  29.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.5k|        }
  693|  29.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  29.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  29.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  29.5k|        {
  662|  29.5k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   279k|    {
 2879|   279k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   630k|    {
 2883|   630k|        return m_current;
 2884|   630k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   350k|    {
 2888|   350k|        return m_range.end();
 2889|   350k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  70.6k|    {
 2903|  70.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  70.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  70.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  70.6k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 70.6k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  70.6k|        }
 2909|  70.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  70.6k|    static_cast<    \
  |  |  929|  70.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  70.6k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   279k|    {
 2893|   279k|        return ranges::subrange{begin(), end()};
 2894|   279k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   279k|    {
 6037|   279k|        const bool need_skipped_width =
 6038|   279k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 279k]
  |  Branch (6038:33): [True: 0, False: 279k]
  ------------------
 6039|   279k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   279k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 279k]
  ------------------
 6043|   279k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 279k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   279k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 279k, False: 0]
  |  Branch (6047:56): [True: 279k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   279k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 279k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   557k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.76k, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.76k|    }                                                  \
  |  |  |  | 3671|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   557k|                            make_eof_scan_error));
 6058|       |
 6059|   557k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 278k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   278k|            return result_type{it, 0};
 6067|   557k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   279k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  70.1k|    {
 6079|  70.1k|        const bool need_skipped_width =
 6080|  70.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 70.1k]
  |  Branch (6080:33): [True: 0, False: 70.1k]
  ------------------
 6081|  70.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  70.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 70.1k]
  ------------------
 6084|  70.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 70.1k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  70.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 70.1k, False: 0]
  ------------------
 6093|  70.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 70.1k]
  ------------------
 6094|  70.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  70.1k|        return result_type{rng.begin(), 0};
 6118|  70.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|  93.1k|    {
 6193|  93.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.1k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  93.1k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.1k|            auto rd = make_reader<T, char_type>();
 6198|  93.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.1k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  93.1k|            return impl(rd, range, value);
 6203|  93.1k|        }
 6204|  93.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  93.1k|            auto rd = make_reader<T, char_type>();
 6206|  93.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  93.1k|                return unexpected(e);
 6208|  93.1k|            }
 6209|       |
 6210|  93.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  93.1k|                specs.width != 0) {
 6212|  93.1k|                return impl(rd, range, value);
 6213|  93.1k|            }
 6214|       |
 6215|  93.1k|            auto crange = get_as_contiguous(range);
 6216|  93.1k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  93.1k|            return ranges::next(range.begin(),
 6218|  93.1k|                                ranges::distance(crange.begin(), it));
 6219|  93.1k|        }
 6220|  93.1k|        else {
 6221|  93.1k|            SCN_EXPECT(false);
 6222|  93.1k|            SCN_UNREACHABLE;
 6223|  93.1k|        }
 6224|  93.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  93.1k|    {
 6124|  93.1k|        const bool need_skipped_width =
 6125|  93.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.1k]
  |  Branch (6125:33): [True: 0, False: 93.1k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.1k|        auto it = rng.begin();
 6129|  93.1k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.1k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.1k|        else {
 6138|  93.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 564, False: 92.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    564|    }                                                  \
  |  |  |  | 3671|  93.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.5k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.5k|        }
 6141|  92.5k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.5k|        std::ptrdiff_t value_width = 0;
 6145|  92.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.5k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.5k|        else {
 6161|  92.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 69.1k, False: 23.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  69.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  69.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  69.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  69.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  69.1k|    }                                                  \
  |  | 3671|  92.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  23.3k|                                             specs, value, loc));
 6163|       |
 6164|  23.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 23.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  23.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  23.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  23.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 23.2k, False: 136]
  ------------------
 6174|  23.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  23.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 23.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  23.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  23.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  23.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  23.2k|                                 value_width));
 6178|  23.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  23.2k|        }
 6180|       |
 6181|  23.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  23.3k|                                                 value_width, postfix_width);
 6183|  23.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 23.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  23.3k|        return it;
 6188|  23.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  93.2k|    {
 6193|  93.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  93.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.2k|            auto rd = make_reader<T, char_type>();
 6198|  93.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.2k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  93.2k|            return impl(rd, range, value);
 6203|  93.2k|        }
 6204|  93.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  93.2k|            auto rd = make_reader<T, char_type>();
 6206|  93.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  93.2k|                return unexpected(e);
 6208|  93.2k|            }
 6209|       |
 6210|  93.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  93.2k|                specs.width != 0) {
 6212|  93.2k|                return impl(rd, range, value);
 6213|  93.2k|            }
 6214|       |
 6215|  93.2k|            auto crange = get_as_contiguous(range);
 6216|  93.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  93.2k|            return ranges::next(range.begin(),
 6218|  93.2k|                                ranges::distance(crange.begin(), it));
 6219|  93.2k|        }
 6220|  93.2k|        else {
 6221|  93.2k|            SCN_EXPECT(false);
 6222|  93.2k|            SCN_UNREACHABLE;
 6223|  93.2k|        }
 6224|  93.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  93.2k|    {
 6124|  93.2k|        const bool need_skipped_width =
 6125|  93.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.2k]
  |  Branch (6125:33): [True: 0, False: 93.2k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.2k|        auto it = rng.begin();
 6129|  93.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.2k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.2k|        else {
 6138|  93.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 596, False: 92.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    596|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    596|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    596|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    596|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    596|    }                                                  \
  |  |  |  | 3671|  93.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.6k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.6k|        }
 6141|  92.6k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.6k|        std::ptrdiff_t value_width = 0;
 6145|  92.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.6k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.6k|        else {
 6161|  92.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 69.1k, False: 23.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  69.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  69.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  69.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  69.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  69.1k|    }                                                  \
  |  | 3671|  92.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  23.5k|                                             specs, value, loc));
 6163|       |
 6164|  23.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 23.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  23.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  23.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  23.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 23.3k, False: 146]
  ------------------
 6174|  23.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 23.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  23.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  23.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  23.3k|                                 value_width));
 6178|  23.3k|            std::tie(it, postfix_width) = postfix_result;
 6179|  23.3k|        }
 6180|       |
 6181|  23.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  23.5k|                                                 value_width, postfix_width);
 6183|  23.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 23.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  23.5k|        return it;
 6188|  23.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|  93.4k|    {
 6193|  93.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  93.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.4k|            auto rd = make_reader<T, char_type>();
 6198|  93.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.4k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  93.4k|            return impl(rd, range, value);
 6203|  93.4k|        }
 6204|  93.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  93.4k|            auto rd = make_reader<T, char_type>();
 6206|  93.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  93.4k|                return unexpected(e);
 6208|  93.4k|            }
 6209|       |
 6210|  93.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  93.4k|                specs.width != 0) {
 6212|  93.4k|                return impl(rd, range, value);
 6213|  93.4k|            }
 6214|       |
 6215|  93.4k|            auto crange = get_as_contiguous(range);
 6216|  93.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  93.4k|            return ranges::next(range.begin(),
 6218|  93.4k|                                ranges::distance(crange.begin(), it));
 6219|  93.4k|        }
 6220|  93.4k|        else {
 6221|  93.4k|            SCN_EXPECT(false);
 6222|  93.4k|            SCN_UNREACHABLE;
 6223|  93.4k|        }
 6224|  93.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  93.4k|    {
 6124|  93.4k|        const bool need_skipped_width =
 6125|  93.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.4k]
  |  Branch (6125:33): [True: 0, False: 93.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.4k|        auto it = rng.begin();
 6129|  93.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.4k|        else {
 6138|  93.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 606, False: 92.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    606|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    606|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    606|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    606|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    606|    }                                                  \
  |  |  |  | 3671|  93.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.8k|        }
 6141|  92.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.8k|        std::ptrdiff_t value_width = 0;
 6145|  92.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.8k|        else {
 6161|  92.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 69.1k, False: 23.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  69.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  69.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  69.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  69.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  69.1k|    }                                                  \
  |  | 3671|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  23.7k|                                             specs, value, loc));
 6163|       |
 6164|  23.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 23.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  23.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  23.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  23.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 23.6k, False: 150]
  ------------------
 6174|  23.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  23.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  23.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  23.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 23.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  23.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  23.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  23.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  23.6k|                                 value_width));
 6178|  23.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  23.6k|        }
 6180|       |
 6181|  23.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  23.7k|                                                 value_width, postfix_width);
 6183|  23.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 23.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  23.7k|        return it;
 6188|  23.7k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  88.8k|{
 5795|  88.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 88.6k]
  |  |  ------------------
  ------------------
 5796|    159|        return unexpected(e);
 5797|    159|    }
 5798|       |
 5799|  88.6k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 88.6k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  88.6k|    return skip_classic_whitespace(range);
 5804|  88.6k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  29.5k|    {
 5871|  29.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  29.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  29.5k|            auto rd = make_reader<T, char_type>();
 5876|  29.5k|            return impl(rd, range, value);
 5877|  29.5k|        }
 5878|  29.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  29.5k|            auto rd = make_reader<T, char_type>();
 5880|  29.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 29.5k, False: 0]
  ------------------
 5881|  29.5k|                return impl(rd, range, value);
 5882|  29.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  29.5k|        else {
 5889|  29.5k|            SCN_EXPECT(false);
 5890|  29.5k|            SCN_UNREACHABLE;
 5891|  29.5k|        }
 5892|  29.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  29.5k|    {
 5863|  29.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  29.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 183, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    183|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    183|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    183|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    183|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    183|    }                                                  \
  |  |  |  | 3671|  29.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  29.3k|                        .transform_error(make_eof_scan_error));
 5865|  29.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  29.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  29.3k|    {
 4152|  29.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  29.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  29.3k|        float_reader<CharT> rd{};
 4155|  29.3k|        return read_impl<Range>(
 4156|  29.3k|            range, rd,
 4157|  29.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  29.3k|            },
 4160|  29.3k|            value);
 4161|  29.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  29.3k|    {
  754|  29.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  29.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.3k|              cvref<T> obj = *get<T>(fn);
  745|  29.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.3k|              }
  748|  29.3k|              else {
  749|  29.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.3k|              }
  751|  29.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.3k|    {
  684|  29.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.3k|            return static_cast<T*>(s.m_cp);
  686|  29.3k|        }
  687|  29.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.3k|            return static_cast<T*>(s.m_p);
  689|  29.3k|        }
  690|  29.3k|        else {
  691|  29.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.3k|        }
  693|  29.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  29.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  29.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  29.3k|        {
  662|  29.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  29.5k|    {
 5871|  29.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  29.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  29.5k|            auto rd = make_reader<T, char_type>();
 5876|  29.5k|            return impl(rd, range, value);
 5877|  29.5k|        }
 5878|  29.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  29.5k|            auto rd = make_reader<T, char_type>();
 5880|  29.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 29.5k, False: 0]
  ------------------
 5881|  29.5k|                return impl(rd, range, value);
 5882|  29.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  29.5k|        else {
 5889|  29.5k|            SCN_EXPECT(false);
 5890|  29.5k|            SCN_UNREACHABLE;
 5891|  29.5k|        }
 5892|  29.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  29.5k|    {
 5863|  29.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  29.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 201, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    201|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    201|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    201|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    201|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    201|    }                                                  \
  |  |  |  | 3671|  29.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  29.3k|                        .transform_error(make_eof_scan_error));
 5865|  29.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  29.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  29.3k|    {
 4152|  29.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  29.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  29.3k|        float_reader<CharT> rd{};
 4155|  29.3k|        return read_impl<Range>(
 4156|  29.3k|            range, rd,
 4157|  29.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  29.3k|            },
 4160|  29.3k|            value);
 4161|  29.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  29.3k|    {
  754|  29.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  29.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.3k|              cvref<T> obj = *get<T>(fn);
  745|  29.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.3k|              }
  748|  29.3k|              else {
  749|  29.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.3k|              }
  751|  29.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.3k|    {
  684|  29.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.3k|            return static_cast<T*>(s.m_cp);
  686|  29.3k|        }
  687|  29.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.3k|            return static_cast<T*>(s.m_p);
  689|  29.3k|        }
  690|  29.3k|        else {
  691|  29.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.3k|        }
  693|  29.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  29.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  29.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  29.3k|        {
  662|  29.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  29.7k|    {
 5871|  29.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  29.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  29.7k|            auto rd = make_reader<T, char_type>();
 5876|  29.7k|            return impl(rd, range, value);
 5877|  29.7k|        }
 5878|  29.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  29.7k|            auto rd = make_reader<T, char_type>();
 5880|  29.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 29.7k, False: 0]
  ------------------
 5881|  29.7k|                return impl(rd, range, value);
 5882|  29.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  29.7k|        else {
 5889|  29.7k|            SCN_EXPECT(false);
 5890|  29.7k|            SCN_UNREACHABLE;
 5891|  29.7k|        }
 5892|  29.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  29.7k|    {
 5863|  29.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  29.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 207, False: 29.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    207|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    207|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    207|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    207|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    207|    }                                                  \
  |  |  |  | 3671|  29.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  29.5k|                        .transform_error(make_eof_scan_error));
 5865|  29.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  29.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  29.5k|    {
 4152|  29.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  29.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  29.5k|        float_reader<CharT> rd{};
 4155|  29.5k|        return read_impl<Range>(
 4156|  29.5k|            range, rd,
 4157|  29.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  29.5k|            },
 4160|  29.5k|            value);
 4161|  29.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  29.5k|    {
  754|  29.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  29.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.5k|              cvref<T> obj = *get<T>(fn);
  745|  29.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  29.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.5k|              }
  748|  29.5k|              else {
  749|  29.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.5k|              }
  751|  29.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.5k|    {
  684|  29.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  29.5k|            return static_cast<T*>(s.m_cp);
  686|  29.5k|        }
  687|  29.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  29.5k|            return static_cast<T*>(s.m_p);
  689|  29.5k|        }
  690|  29.5k|        else {
  691|  29.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  29.5k|        }
  693|  29.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  29.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  29.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  29.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  29.5k|        {
  662|  29.5k|        }

LLVMFuzzerTestOneInput:
   54|  3.48k|{
   55|  3.48k|    scn::fuzz::run(data, size);
   56|  3.48k|    return 0;
   57|  3.48k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.48k|{
   33|  3.48k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.48k]
  |  Branch (33:35): [True: 0, False: 3.48k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.48k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.48k|    const auto& f =
   40|  3.48k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.48k|    do_basic_run(sv, f);
   42|       |
   43|  3.48k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.48k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.48k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.48k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.48k, False: 0]
  ------------------
   47|  3.48k|        do_basic_run(wsv_transcode, wf);
   48|  3.48k|    }
   49|  3.48k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.48k|{
   25|  3.48k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.48k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.48k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.48k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.48k|{
   25|  3.48k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.48k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.48k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.48k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.97k|{
   25|  6.97k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.97k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.97k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.97k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.97k|{
   25|  6.97k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.97k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.97k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.97k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.48k|{
   52|  3.48k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.48k|    string_buffer.resize(size);
   56|  3.48k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.48k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.48k|    const auto wsv_reinterpret_size =
   61|  3.48k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 73, False: 3.41k]
  ------------------
   62|  3.48k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.48k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.48k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.48k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.48k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.48k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.48k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.48k|{
  122|  3.48k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.48k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.48k|    buf.resize(sizeof...(Args));
  125|  3.48k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.48k|    return buf;
  127|  3.48k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.48k|{
  108|  3.48k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.48k|        return format_string_view_buffer;
  110|  3.48k|    }
  111|  3.48k|    else {
  112|  3.48k|        return wformat_string_view_buffer;
  113|  3.48k|    }
  114|  3.48k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.48k|{
  185|  3.48k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.48k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.48k|                                   format_strings);
  188|  3.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.48k|{
  133|       |    // Regular scan
  134|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.9k, False: 3.48k]
  ------------------
  135|  20.9k|        auto it = scn::ranges::begin(source);
  136|   377k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   377k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   377k|            auto result = scn::scan<T>(
  139|   377k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   377k|                scn::runtime_format(f));
  141|   377k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.9k, False: 357k]
  ------------------
  142|  20.9k|                break;
  143|  20.9k|            }
  144|   357k|            it = result->begin();
  145|   357k|        }
  146|  20.9k|    }
  147|       |
  148|       |    // scan localized
  149|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.9k, False: 3.48k]
  ------------------
  150|  20.9k|        auto it = scn::ranges::begin(source);
  151|   377k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   377k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   377k|            auto result = scn::scan<T>(
  154|   377k|                global_locale,
  155|   377k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   377k|                scn::runtime_format(f));
  157|   377k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.9k, False: 357k]
  ------------------
  158|  20.9k|                break;
  159|  20.9k|            }
  160|   357k|            it = result->begin();
  161|   357k|        }
  162|  20.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.48k|    {
  166|  3.48k|        auto it = scn::ranges::begin(source);
  167|  82.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  82.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  82.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  82.6k|            auto result = scn::scan_value<T>(
  170|  82.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  82.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.48k, False: 79.1k]
  ------------------
  172|  3.48k|                break;
  173|  3.48k|            }
  174|  79.1k|            it = result->begin();
  175|  79.1k|        }
  176|  3.48k|    }
  177|  3.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.48k|{
  133|       |    // Regular scan
  134|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.9k, False: 3.48k]
  ------------------
  135|  20.9k|        auto it = scn::ranges::begin(source);
  136|   406k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   406k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   406k|            auto result = scn::scan<T>(
  139|   406k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   406k|                scn::runtime_format(f));
  141|   406k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.9k, False: 385k]
  ------------------
  142|  20.9k|                break;
  143|  20.9k|            }
  144|   385k|            it = result->begin();
  145|   385k|        }
  146|  20.9k|    }
  147|       |
  148|       |    // scan localized
  149|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.9k, False: 3.48k]
  ------------------
  150|  20.9k|        auto it = scn::ranges::begin(source);
  151|   406k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   406k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   406k|            auto result = scn::scan<T>(
  154|   406k|                global_locale,
  155|   406k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   406k|                scn::runtime_format(f));
  157|   406k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.9k, False: 385k]
  ------------------
  158|  20.9k|                break;
  159|  20.9k|            }
  160|   385k|            it = result->begin();
  161|   385k|        }
  162|  20.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.48k|    {
  166|  3.48k|        auto it = scn::ranges::begin(source);
  167|  91.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  91.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  91.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  91.2k|            auto result = scn::scan_value<T>(
  170|  91.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  91.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.48k, False: 87.7k]
  ------------------
  172|  3.48k|                break;
  173|  3.48k|            }
  174|  87.7k|            it = result->begin();
  175|  87.7k|        }
  176|  3.48k|    }
  177|  3.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.48k|{
  133|       |    // Regular scan
  134|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.9k, False: 3.48k]
  ------------------
  135|  20.9k|        auto it = scn::ranges::begin(source);
  136|   411k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   411k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   411k|            auto result = scn::scan<T>(
  139|   411k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   411k|                scn::runtime_format(f));
  141|   411k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.9k, False: 390k]
  ------------------
  142|  20.9k|                break;
  143|  20.9k|            }
  144|   390k|            it = result->begin();
  145|   390k|        }
  146|  20.9k|    }
  147|       |
  148|       |    // scan localized
  149|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.9k, False: 3.48k]
  ------------------
  150|  20.9k|        auto it = scn::ranges::begin(source);
  151|   411k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   411k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   411k|            auto result = scn::scan<T>(
  154|   411k|                global_locale,
  155|   411k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   411k|                scn::runtime_format(f));
  157|   411k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.9k, False: 390k]
  ------------------
  158|  20.9k|                break;
  159|  20.9k|            }
  160|   390k|            it = result->begin();
  161|   390k|        }
  162|  20.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.48k|    {
  166|  3.48k|        auto it = scn::ranges::begin(source);
  167|  92.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  92.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  92.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  92.8k|            auto result = scn::scan_value<T>(
  170|  92.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  92.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.48k, False: 89.3k]
  ------------------
  172|  3.48k|                break;
  173|  3.48k|            }
  174|  89.3k|            it = result->begin();
  175|  89.3k|        }
  176|  3.48k|    }
  177|  3.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.48k|{
  133|       |    // Regular scan
  134|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.9k, False: 3.48k]
  ------------------
  135|  20.9k|        auto it = scn::ranges::begin(source);
  136|   388k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   388k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   388k|            auto result = scn::scan<T>(
  139|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   388k|                scn::runtime_format(f));
  141|   388k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.9k, False: 368k]
  ------------------
  142|  20.9k|                break;
  143|  20.9k|            }
  144|   368k|            it = result->begin();
  145|   368k|        }
  146|  20.9k|    }
  147|       |
  148|       |    // scan localized
  149|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.9k, False: 3.48k]
  ------------------
  150|  20.9k|        auto it = scn::ranges::begin(source);
  151|   388k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   388k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   388k|            auto result = scn::scan<T>(
  154|   388k|                global_locale,
  155|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   388k|                scn::runtime_format(f));
  157|   388k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.9k, False: 368k]
  ------------------
  158|  20.9k|                break;
  159|  20.9k|            }
  160|   368k|            it = result->begin();
  161|   368k|        }
  162|  20.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.48k|    {
  166|  3.48k|        auto it = scn::ranges::begin(source);
  167|  78.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  78.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  78.9k|            auto result = scn::scan_value<T>(
  170|  78.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  78.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.48k, False: 75.4k]
  ------------------
  172|  3.48k|                break;
  173|  3.48k|            }
  174|  75.4k|            it = result->begin();
  175|  75.4k|        }
  176|  3.48k|    }
  177|  3.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.48k|{
  133|       |    // Regular scan
  134|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.9k, False: 3.48k]
  ------------------
  135|  20.9k|        auto it = scn::ranges::begin(source);
  136|   418k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   418k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   418k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   418k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   418k|            auto result = scn::scan<T>(
  139|   418k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   418k|                scn::runtime_format(f));
  141|   418k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.9k, False: 397k]
  ------------------
  142|  20.9k|                break;
  143|  20.9k|            }
  144|   397k|            it = result->begin();
  145|   397k|        }
  146|  20.9k|    }
  147|       |
  148|       |    // scan localized
  149|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.9k, False: 3.48k]
  ------------------
  150|  20.9k|        auto it = scn::ranges::begin(source);
  151|   418k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   418k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   418k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   418k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   418k|            auto result = scn::scan<T>(
  154|   418k|                global_locale,
  155|   418k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   418k|                scn::runtime_format(f));
  157|   418k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.9k, False: 397k]
  ------------------
  158|  20.9k|                break;
  159|  20.9k|            }
  160|   397k|            it = result->begin();
  161|   397k|        }
  162|  20.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.48k|    {
  166|  3.48k|        auto it = scn::ranges::begin(source);
  167|  87.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  87.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  87.0k|            auto result = scn::scan_value<T>(
  170|  87.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  87.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.48k, False: 83.5k]
  ------------------
  172|  3.48k|                break;
  173|  3.48k|            }
  174|  83.5k|            it = result->begin();
  175|  83.5k|        }
  176|  3.48k|    }
  177|  3.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.48k|{
  133|       |    // Regular scan
  134|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.9k, False: 3.48k]
  ------------------
  135|  20.9k|        auto it = scn::ranges::begin(source);
  136|   422k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   422k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   422k|            auto result = scn::scan<T>(
  139|   422k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   422k|                scn::runtime_format(f));
  141|   422k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.9k, False: 401k]
  ------------------
  142|  20.9k|                break;
  143|  20.9k|            }
  144|   401k|            it = result->begin();
  145|   401k|        }
  146|  20.9k|    }
  147|       |
  148|       |    // scan localized
  149|  20.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.9k, False: 3.48k]
  ------------------
  150|  20.9k|        auto it = scn::ranges::begin(source);
  151|   422k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   422k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   422k|            auto result = scn::scan<T>(
  154|   422k|                global_locale,
  155|   422k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   422k|                scn::runtime_format(f));
  157|   422k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.9k, False: 401k]
  ------------------
  158|  20.9k|                break;
  159|  20.9k|            }
  160|   401k|            it = result->begin();
  161|   401k|        }
  162|  20.9k|    }
  163|       |
  164|       |    // scan_value
  165|  3.48k|    {
  166|  3.48k|        auto it = scn::ranges::begin(source);
  167|  88.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  88.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  88.0k|            auto result = scn::scan_value<T>(
  170|  88.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  88.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.48k, False: 84.5k]
  ------------------
  172|  3.48k|                break;
  173|  3.48k|            }
  174|  84.5k|            it = result->begin();
  175|  84.5k|        }
  176|  3.48k|    }
  177|  3.48k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.48k|{
   90|  3.48k|    using char_type = ranges::range_value_t<Source>;
   91|  3.48k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.48k|    deque.clear();
   93|  3.48k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.48k|              std::back_inserter(deque));
   95|  3.48k|    return deque;
   96|  3.48k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.48k|{
   79|  3.48k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.48k|        return noncontiguous_buffer;
   81|  3.48k|    }
   82|  3.48k|    else {
   83|  3.48k|        return wnoncontiguous_buffer;
   84|  3.48k|    }
   85|  3.48k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.48k|{
  122|  3.48k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.48k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.48k|    buf.resize(sizeof...(Args));
  125|  3.48k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.48k|    return buf;
  127|  3.48k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.48k|{
  108|  3.48k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.48k|        return format_string_view_buffer;
  110|  3.48k|    }
  111|  3.48k|    else {
  112|  3.48k|        return wformat_string_view_buffer;
  113|  3.48k|    }
  114|  3.48k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.97k|{
  185|  6.97k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.97k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.97k|                                   format_strings);
  188|  6.97k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.97k|{
  133|       |    // Regular scan
  134|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.8k, False: 6.97k]
  ------------------
  135|  41.8k|        auto it = scn::ranges::begin(source);
  136|  56.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.3k|            auto result = scn::scan<T>(
  139|  56.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.3k|                scn::runtime_format(f));
  141|  56.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.8k, False: 14.5k]
  ------------------
  142|  41.8k|                break;
  143|  41.8k|            }
  144|  14.5k|            it = result->begin();
  145|  14.5k|        }
  146|  41.8k|    }
  147|       |
  148|       |    // scan localized
  149|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.8k, False: 6.97k]
  ------------------
  150|  41.8k|        auto it = scn::ranges::begin(source);
  151|  56.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.3k|            auto result = scn::scan<T>(
  154|  56.3k|                global_locale,
  155|  56.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.3k|                scn::runtime_format(f));
  157|  56.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.8k, False: 14.5k]
  ------------------
  158|  41.8k|                break;
  159|  41.8k|            }
  160|  14.5k|            it = result->begin();
  161|  14.5k|        }
  162|  41.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.97k|    {
  166|  6.97k|        auto it = scn::ranges::begin(source);
  167|  9.84k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  9.84k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  9.84k|            auto result = scn::scan_value<T>(
  170|  9.84k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  9.84k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.97k, False: 2.87k]
  ------------------
  172|  6.97k|                break;
  173|  6.97k|            }
  174|  2.87k|            it = result->begin();
  175|  2.87k|        }
  176|  6.97k|    }
  177|  6.97k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.97k|{
  133|       |    // Regular scan
  134|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.8k, False: 6.97k]
  ------------------
  135|  41.8k|        auto it = scn::ranges::begin(source);
  136|  56.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.5k|            auto result = scn::scan<T>(
  139|  56.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.5k|                scn::runtime_format(f));
  141|  56.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.8k, False: 14.6k]
  ------------------
  142|  41.8k|                break;
  143|  41.8k|            }
  144|  14.6k|            it = result->begin();
  145|  14.6k|        }
  146|  41.8k|    }
  147|       |
  148|       |    // scan localized
  149|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.8k, False: 6.97k]
  ------------------
  150|  41.8k|        auto it = scn::ranges::begin(source);
  151|  56.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.5k|            auto result = scn::scan<T>(
  154|  56.5k|                global_locale,
  155|  56.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.5k|                scn::runtime_format(f));
  157|  56.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.8k, False: 14.6k]
  ------------------
  158|  41.8k|                break;
  159|  41.8k|            }
  160|  14.6k|            it = result->begin();
  161|  14.6k|        }
  162|  41.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.97k|    {
  166|  6.97k|        auto it = scn::ranges::begin(source);
  167|  9.87k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  9.87k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  9.87k|            auto result = scn::scan_value<T>(
  170|  9.87k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  9.87k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.97k, False: 2.90k]
  ------------------
  172|  6.97k|                break;
  173|  6.97k|            }
  174|  2.90k|            it = result->begin();
  175|  2.90k|        }
  176|  6.97k|    }
  177|  6.97k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.97k|{
  133|       |    // Regular scan
  134|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.8k, False: 6.97k]
  ------------------
  135|  41.8k|        auto it = scn::ranges::begin(source);
  136|  56.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.6k|            auto result = scn::scan<T>(
  139|  56.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.6k|                scn::runtime_format(f));
  141|  56.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.8k, False: 14.8k]
  ------------------
  142|  41.8k|                break;
  143|  41.8k|            }
  144|  14.8k|            it = result->begin();
  145|  14.8k|        }
  146|  41.8k|    }
  147|       |
  148|       |    // scan localized
  149|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.8k, False: 6.97k]
  ------------------
  150|  41.8k|        auto it = scn::ranges::begin(source);
  151|  56.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.6k|            auto result = scn::scan<T>(
  154|  56.6k|                global_locale,
  155|  56.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.6k|                scn::runtime_format(f));
  157|  56.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.8k, False: 14.8k]
  ------------------
  158|  41.8k|                break;
  159|  41.8k|            }
  160|  14.8k|            it = result->begin();
  161|  14.8k|        }
  162|  41.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.97k|    {
  166|  6.97k|        auto it = scn::ranges::begin(source);
  167|  9.92k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  9.92k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  9.92k|            auto result = scn::scan_value<T>(
  170|  9.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  9.92k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.97k, False: 2.95k]
  ------------------
  172|  6.97k|                break;
  173|  6.97k|            }
  174|  2.95k|            it = result->begin();
  175|  2.95k|        }
  176|  6.97k|    }
  177|  6.97k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.97k|{
  133|       |    // Regular scan
  134|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.8k, False: 6.97k]
  ------------------
  135|  41.8k|        auto it = scn::ranges::begin(source);
  136|  56.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.3k|            auto result = scn::scan<T>(
  139|  56.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.3k|                scn::runtime_format(f));
  141|  56.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.8k, False: 14.5k]
  ------------------
  142|  41.8k|                break;
  143|  41.8k|            }
  144|  14.5k|            it = result->begin();
  145|  14.5k|        }
  146|  41.8k|    }
  147|       |
  148|       |    // scan localized
  149|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.8k, False: 6.97k]
  ------------------
  150|  41.8k|        auto it = scn::ranges::begin(source);
  151|  56.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.3k|            auto result = scn::scan<T>(
  154|  56.3k|                global_locale,
  155|  56.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.3k|                scn::runtime_format(f));
  157|  56.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.8k, False: 14.5k]
  ------------------
  158|  41.8k|                break;
  159|  41.8k|            }
  160|  14.5k|            it = result->begin();
  161|  14.5k|        }
  162|  41.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.97k|    {
  166|  6.97k|        auto it = scn::ranges::begin(source);
  167|  9.83k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  9.83k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  9.83k|            auto result = scn::scan_value<T>(
  170|  9.83k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  9.83k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.97k, False: 2.86k]
  ------------------
  172|  6.97k|                break;
  173|  6.97k|            }
  174|  2.86k|            it = result->begin();
  175|  2.86k|        }
  176|  6.97k|    }
  177|  6.97k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.97k|{
  133|       |    // Regular scan
  134|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.8k, False: 6.97k]
  ------------------
  135|  41.8k|        auto it = scn::ranges::begin(source);
  136|  56.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.4k|            auto result = scn::scan<T>(
  139|  56.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.4k|                scn::runtime_format(f));
  141|  56.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.8k, False: 14.6k]
  ------------------
  142|  41.8k|                break;
  143|  41.8k|            }
  144|  14.6k|            it = result->begin();
  145|  14.6k|        }
  146|  41.8k|    }
  147|       |
  148|       |    // scan localized
  149|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.8k, False: 6.97k]
  ------------------
  150|  41.8k|        auto it = scn::ranges::begin(source);
  151|  56.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.4k|            auto result = scn::scan<T>(
  154|  56.4k|                global_locale,
  155|  56.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.4k|                scn::runtime_format(f));
  157|  56.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.8k, False: 14.6k]
  ------------------
  158|  41.8k|                break;
  159|  41.8k|            }
  160|  14.6k|            it = result->begin();
  161|  14.6k|        }
  162|  41.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.97k|    {
  166|  6.97k|        auto it = scn::ranges::begin(source);
  167|  9.86k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  9.86k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  9.86k|            auto result = scn::scan_value<T>(
  170|  9.86k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  9.86k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.97k, False: 2.89k]
  ------------------
  172|  6.97k|                break;
  173|  6.97k|            }
  174|  2.89k|            it = result->begin();
  175|  2.89k|        }
  176|  6.97k|    }
  177|  6.97k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.97k|{
  133|       |    // Regular scan
  134|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.8k, False: 6.97k]
  ------------------
  135|  41.8k|        auto it = scn::ranges::begin(source);
  136|  56.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.6k|            auto result = scn::scan<T>(
  139|  56.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.6k|                scn::runtime_format(f));
  141|  56.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.8k, False: 14.7k]
  ------------------
  142|  41.8k|                break;
  143|  41.8k|            }
  144|  14.7k|            it = result->begin();
  145|  14.7k|        }
  146|  41.8k|    }
  147|       |
  148|       |    // scan localized
  149|  41.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.8k, False: 6.97k]
  ------------------
  150|  41.8k|        auto it = scn::ranges::begin(source);
  151|  56.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.6k|            auto result = scn::scan<T>(
  154|  56.6k|                global_locale,
  155|  56.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.6k|                scn::runtime_format(f));
  157|  56.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.8k, False: 14.7k]
  ------------------
  158|  41.8k|                break;
  159|  41.8k|            }
  160|  14.7k|            it = result->begin();
  161|  14.7k|        }
  162|  41.8k|    }
  163|       |
  164|       |    // scan_value
  165|  6.97k|    {
  166|  6.97k|        auto it = scn::ranges::begin(source);
  167|  9.91k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  9.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  9.91k|            auto result = scn::scan_value<T>(
  170|  9.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  9.91k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.97k, False: 2.94k]
  ------------------
  172|  6.97k|                break;
  173|  6.97k|            }
  174|  2.94k|            it = result->begin();
  175|  2.94k|        }
  176|  6.97k|    }
  177|  6.97k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.97k|{
   90|  6.97k|    using char_type = ranges::range_value_t<Source>;
   91|  6.97k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.97k|    deque.clear();
   93|  6.97k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.97k|              std::back_inserter(deque));
   95|  6.97k|    return deque;
   96|  6.97k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.97k|{
   79|  6.97k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  6.97k|        return noncontiguous_buffer;
   81|  6.97k|    }
   82|  6.97k|    else {
   83|  6.97k|        return wnoncontiguous_buffer;
   84|  6.97k|    }
   85|  6.97k|}

